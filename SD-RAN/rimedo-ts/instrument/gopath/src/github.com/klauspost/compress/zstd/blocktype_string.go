// Code generated by "stringer -type=blockType,literalsBlockType,seqCompMode,tableIndex"; DO NOT EDIT.

//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:3
package zstd

//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:3
import (
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:3
	_go_fuzz_dep_ "go-fuzz-dep"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:3
)
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:3
import (
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:3
	_atomic_ "sync/atomic"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:3
)

import "strconv"

func _() {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:7
	_go_fuzz_dep_.CoverTab[91533]++
	// An "invalid array index" compiler error signifies that the constant values have changed.
													// Re-run the stringer command to generate them again.
													var x [1]struct{}
													_ = x[blockTypeRaw-0]
													_ = x[blockTypeRLE-1]
													_ = x[blockTypeCompressed-2]
													_ = x[blockTypeReserved-3]
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:14
	// _ = "end of CoverTab[91533]"
}

const _blockType_name = "blockTypeRawblockTypeRLEblockTypeCompressedblockTypeReserved"

var _blockType_index = [...]uint8{0, 12, 24, 43, 60}

func (i blockType) String() string {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:21
	_go_fuzz_dep_.CoverTab[91534]++
													if i >= blockType(len(_blockType_index)-1) {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:22
		_go_fuzz_dep_.CoverTab[91536]++
														return "blockType(" + strconv.FormatInt(int64(i), 10) + ")"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:23
		// _ = "end of CoverTab[91536]"
	} else {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:24
		_go_fuzz_dep_.CoverTab[91537]++
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:24
		// _ = "end of CoverTab[91537]"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:24
	}
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:24
	// _ = "end of CoverTab[91534]"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:24
	_go_fuzz_dep_.CoverTab[91535]++
													return _blockType_name[_blockType_index[i]:_blockType_index[i+1]]
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:25
	// _ = "end of CoverTab[91535]"
}
func _() {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:27
	_go_fuzz_dep_.CoverTab[91538]++
	// An "invalid array index" compiler error signifies that the constant values have changed.
													// Re-run the stringer command to generate them again.
													var x [1]struct{}
													_ = x[literalsBlockRaw-0]
													_ = x[literalsBlockRLE-1]
													_ = x[literalsBlockCompressed-2]
													_ = x[literalsBlockTreeless-3]
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:34
	// _ = "end of CoverTab[91538]"
}

const _literalsBlockType_name = "literalsBlockRawliteralsBlockRLEliteralsBlockCompressedliteralsBlockTreeless"

var _literalsBlockType_index = [...]uint8{0, 16, 32, 55, 76}

func (i literalsBlockType) String() string {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:41
	_go_fuzz_dep_.CoverTab[91539]++
													if i >= literalsBlockType(len(_literalsBlockType_index)-1) {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:42
		_go_fuzz_dep_.CoverTab[91541]++
														return "literalsBlockType(" + strconv.FormatInt(int64(i), 10) + ")"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:43
		// _ = "end of CoverTab[91541]"
	} else {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:44
		_go_fuzz_dep_.CoverTab[91542]++
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:44
		// _ = "end of CoverTab[91542]"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:44
	}
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:44
	// _ = "end of CoverTab[91539]"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:44
	_go_fuzz_dep_.CoverTab[91540]++
													return _literalsBlockType_name[_literalsBlockType_index[i]:_literalsBlockType_index[i+1]]
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:45
	// _ = "end of CoverTab[91540]"
}
func _() {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:47
	_go_fuzz_dep_.CoverTab[91543]++
	// An "invalid array index" compiler error signifies that the constant values have changed.
													// Re-run the stringer command to generate them again.
													var x [1]struct{}
													_ = x[compModePredefined-0]
													_ = x[compModeRLE-1]
													_ = x[compModeFSE-2]
													_ = x[compModeRepeat-3]
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:54
	// _ = "end of CoverTab[91543]"
}

const _seqCompMode_name = "compModePredefinedcompModeRLEcompModeFSEcompModeRepeat"

var _seqCompMode_index = [...]uint8{0, 18, 29, 40, 54}

func (i seqCompMode) String() string {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:61
	_go_fuzz_dep_.CoverTab[91544]++
													if i >= seqCompMode(len(_seqCompMode_index)-1) {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:62
		_go_fuzz_dep_.CoverTab[91546]++
														return "seqCompMode(" + strconv.FormatInt(int64(i), 10) + ")"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:63
		// _ = "end of CoverTab[91546]"
	} else {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:64
		_go_fuzz_dep_.CoverTab[91547]++
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:64
		// _ = "end of CoverTab[91547]"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:64
	}
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:64
	// _ = "end of CoverTab[91544]"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:64
	_go_fuzz_dep_.CoverTab[91545]++
													return _seqCompMode_name[_seqCompMode_index[i]:_seqCompMode_index[i+1]]
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:65
	// _ = "end of CoverTab[91545]"
}
func _() {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:67
	_go_fuzz_dep_.CoverTab[91548]++
	// An "invalid array index" compiler error signifies that the constant values have changed.
													// Re-run the stringer command to generate them again.
													var x [1]struct{}
													_ = x[tableLiteralLengths-0]
													_ = x[tableOffsets-1]
													_ = x[tableMatchLengths-2]
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:73
	// _ = "end of CoverTab[91548]"
}

const _tableIndex_name = "tableLiteralLengthstableOffsetstableMatchLengths"

var _tableIndex_index = [...]uint8{0, 19, 31, 48}

func (i tableIndex) String() string {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:80
	_go_fuzz_dep_.CoverTab[91549]++
													if i >= tableIndex(len(_tableIndex_index)-1) {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:81
		_go_fuzz_dep_.CoverTab[91551]++
														return "tableIndex(" + strconv.FormatInt(int64(i), 10) + ")"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:82
		// _ = "end of CoverTab[91551]"
	} else {
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:83
		_go_fuzz_dep_.CoverTab[91552]++
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:83
		// _ = "end of CoverTab[91552]"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:83
	}
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:83
	// _ = "end of CoverTab[91549]"
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:83
	_go_fuzz_dep_.CoverTab[91550]++
													return _tableIndex_name[_tableIndex_index[i]:_tableIndex_index[i+1]]
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:84
	// _ = "end of CoverTab[91550]"
}

//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:85
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /home/tianchang/go/pkg/mod/github.com/klauspost/compress@v1.14.2/zstd/blocktype_string.go:85
var _ = _go_fuzz_dep_.CoverTab
