// @generated Code generated by gen-atomicint.

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:23
package atomic

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:23
import (
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:23
	_go_fuzz_dep_ "go-fuzz-dep"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:23
)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:23
import (
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:23
	_atomic_ "sync/atomic"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:23
)

import (
	"encoding/json"
	"strconv"
	"sync/atomic"
)

// Int32 is an atomic wrapper around int32.
type Int32 struct {
	_	nocmp	// disallow non-atomic comparison

	v	int32
}

// NewInt32 creates a new Int32.
func NewInt32(i int32) *Int32 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:39
	_go_fuzz_dep_.CoverTab[130413]++
										return &Int32{v: i}
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:40
	// _ = "end of CoverTab[130413]"
}

// Load atomically loads the wrapped value.
func (i *Int32) Load() int32 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:44
	_go_fuzz_dep_.CoverTab[130414]++
										return atomic.LoadInt32(&i.v)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:45
	// _ = "end of CoverTab[130414]"
}

// Add atomically adds to the wrapped int32 and returns the new value.
func (i *Int32) Add(n int32) int32 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:49
	_go_fuzz_dep_.CoverTab[130415]++
										return atomic.AddInt32(&i.v, n)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:50
	// _ = "end of CoverTab[130415]"
}

// Sub atomically subtracts from the wrapped int32 and returns the new value.
func (i *Int32) Sub(n int32) int32 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:54
	_go_fuzz_dep_.CoverTab[130416]++
										return atomic.AddInt32(&i.v, -n)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:55
	// _ = "end of CoverTab[130416]"
}

// Inc atomically increments the wrapped int32 and returns the new value.
func (i *Int32) Inc() int32 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:59
	_go_fuzz_dep_.CoverTab[130417]++
										return i.Add(1)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:60
	// _ = "end of CoverTab[130417]"
}

// Dec atomically decrements the wrapped int32 and returns the new value.
func (i *Int32) Dec() int32 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:64
	_go_fuzz_dep_.CoverTab[130418]++
										return i.Sub(1)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:65
	// _ = "end of CoverTab[130418]"
}

// CAS is an atomic compare-and-swap.
func (i *Int32) CAS(old, new int32) bool {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:69
	_go_fuzz_dep_.CoverTab[130419]++
										return atomic.CompareAndSwapInt32(&i.v, old, new)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:70
	// _ = "end of CoverTab[130419]"
}

// Store atomically stores the passed value.
func (i *Int32) Store(n int32) {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:74
	_go_fuzz_dep_.CoverTab[130420]++
										atomic.StoreInt32(&i.v, n)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:75
	// _ = "end of CoverTab[130420]"
}

// Swap atomically swaps the wrapped int32 and returns the old value.
func (i *Int32) Swap(n int32) int32 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:79
	_go_fuzz_dep_.CoverTab[130421]++
										return atomic.SwapInt32(&i.v, n)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:80
	// _ = "end of CoverTab[130421]"
}

// MarshalJSON encodes the wrapped int32 into JSON.
func (i *Int32) MarshalJSON() ([]byte, error) {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:84
	_go_fuzz_dep_.CoverTab[130422]++
										return json.Marshal(i.Load())
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:85
	// _ = "end of CoverTab[130422]"
}

// UnmarshalJSON decodes JSON into the wrapped int32.
func (i *Int32) UnmarshalJSON(b []byte) error {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:89
	_go_fuzz_dep_.CoverTab[130423]++
										var v int32
										if err := json.Unmarshal(b, &v); err != nil {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:91
		_go_fuzz_dep_.CoverTab[130425]++
											return err
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:92
		// _ = "end of CoverTab[130425]"
	} else {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:93
		_go_fuzz_dep_.CoverTab[130426]++
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:93
		// _ = "end of CoverTab[130426]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:93
	}
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:93
	// _ = "end of CoverTab[130423]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:93
	_go_fuzz_dep_.CoverTab[130424]++
										i.Store(v)
										return nil
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:95
	// _ = "end of CoverTab[130424]"
}

// String encodes the wrapped value as a string.
func (i *Int32) String() string {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:99
	_go_fuzz_dep_.CoverTab[130427]++
										v := i.Load()
										return strconv.FormatInt(int64(v), 10)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:101
	// _ = "end of CoverTab[130427]"
}

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:102
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int32.go:102
var _ = _go_fuzz_dep_.CoverTab
