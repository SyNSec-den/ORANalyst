// @generated Code generated by gen-atomicint.

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:23
package atomic

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:23
import (
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:23
	_go_fuzz_dep_ "go-fuzz-dep"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:23
)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:23
import (
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:23
	_atomic_ "sync/atomic"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:23
)

import (
	"encoding/json"
	"strconv"
	"sync/atomic"
)

// Int64 is an atomic wrapper around int64.
type Int64 struct {
	_	nocmp	// disallow non-atomic comparison

	v	int64
}

// NewInt64 creates a new Int64.
func NewInt64(i int64) *Int64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:39
	_go_fuzz_dep_.CoverTab[130428]++
										return &Int64{v: i}
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:40
	// _ = "end of CoverTab[130428]"
}

// Load atomically loads the wrapped value.
func (i *Int64) Load() int64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:44
	_go_fuzz_dep_.CoverTab[130429]++
										return atomic.LoadInt64(&i.v)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:45
	// _ = "end of CoverTab[130429]"
}

// Add atomically adds to the wrapped int64 and returns the new value.
func (i *Int64) Add(n int64) int64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:49
	_go_fuzz_dep_.CoverTab[130430]++
										return atomic.AddInt64(&i.v, n)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:50
	// _ = "end of CoverTab[130430]"
}

// Sub atomically subtracts from the wrapped int64 and returns the new value.
func (i *Int64) Sub(n int64) int64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:54
	_go_fuzz_dep_.CoverTab[130431]++
										return atomic.AddInt64(&i.v, -n)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:55
	// _ = "end of CoverTab[130431]"
}

// Inc atomically increments the wrapped int64 and returns the new value.
func (i *Int64) Inc() int64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:59
	_go_fuzz_dep_.CoverTab[130432]++
										return i.Add(1)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:60
	// _ = "end of CoverTab[130432]"
}

// Dec atomically decrements the wrapped int64 and returns the new value.
func (i *Int64) Dec() int64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:64
	_go_fuzz_dep_.CoverTab[130433]++
										return i.Sub(1)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:65
	// _ = "end of CoverTab[130433]"
}

// CAS is an atomic compare-and-swap.
func (i *Int64) CAS(old, new int64) bool {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:69
	_go_fuzz_dep_.CoverTab[130434]++
										return atomic.CompareAndSwapInt64(&i.v, old, new)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:70
	// _ = "end of CoverTab[130434]"
}

// Store atomically stores the passed value.
func (i *Int64) Store(n int64) {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:74
	_go_fuzz_dep_.CoverTab[130435]++
										atomic.StoreInt64(&i.v, n)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:75
	// _ = "end of CoverTab[130435]"
}

// Swap atomically swaps the wrapped int64 and returns the old value.
func (i *Int64) Swap(n int64) int64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:79
	_go_fuzz_dep_.CoverTab[130436]++
										return atomic.SwapInt64(&i.v, n)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:80
	// _ = "end of CoverTab[130436]"
}

// MarshalJSON encodes the wrapped int64 into JSON.
func (i *Int64) MarshalJSON() ([]byte, error) {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:84
	_go_fuzz_dep_.CoverTab[130437]++
										return json.Marshal(i.Load())
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:85
	// _ = "end of CoverTab[130437]"
}

// UnmarshalJSON decodes JSON into the wrapped int64.
func (i *Int64) UnmarshalJSON(b []byte) error {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:89
	_go_fuzz_dep_.CoverTab[130438]++
										var v int64
										if err := json.Unmarshal(b, &v); err != nil {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:91
		_go_fuzz_dep_.CoverTab[130440]++
											return err
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:92
		// _ = "end of CoverTab[130440]"
	} else {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:93
		_go_fuzz_dep_.CoverTab[130441]++
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:93
		// _ = "end of CoverTab[130441]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:93
	}
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:93
	// _ = "end of CoverTab[130438]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:93
	_go_fuzz_dep_.CoverTab[130439]++
										i.Store(v)
										return nil
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:95
	// _ = "end of CoverTab[130439]"
}

// String encodes the wrapped value as a string.
func (i *Int64) String() string {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:99
	_go_fuzz_dep_.CoverTab[130442]++
										v := i.Load()
										return strconv.FormatInt(int64(v), 10)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:101
	// _ = "end of CoverTab[130442]"
}

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:102
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/int64.go:102
var _ = _go_fuzz_dep_.CoverTab
