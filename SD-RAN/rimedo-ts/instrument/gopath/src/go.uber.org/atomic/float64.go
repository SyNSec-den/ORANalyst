// @generated Code generated by gen-atomicwrapper.

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:23
package atomic

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:23
import (
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:23
	_go_fuzz_dep_ "go-fuzz-dep"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:23
)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:23
import (
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:23
	_atomic_ "sync/atomic"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:23
)

import (
	"encoding/json"
	"math"
)

// Float64 is an atomic type-safe wrapper for float64 values.
type Float64 struct {
	_	nocmp	// disallow non-atomic comparison

	v	Uint64
}

var _zeroFloat64 float64

// NewFloat64 creates a new Float64.
func NewFloat64(v float64) *Float64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:40
	_go_fuzz_dep_.CoverTab[130395]++
										x := &Float64{}
										if v != _zeroFloat64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:42
		_go_fuzz_dep_.CoverTab[130397]++
											x.Store(v)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:43
		// _ = "end of CoverTab[130397]"
	} else {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:44
		_go_fuzz_dep_.CoverTab[130398]++
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:44
		// _ = "end of CoverTab[130398]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:44
	}
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:44
	// _ = "end of CoverTab[130395]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:44
	_go_fuzz_dep_.CoverTab[130396]++
										return x
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:45
	// _ = "end of CoverTab[130396]"
}

// Load atomically loads the wrapped float64.
func (x *Float64) Load() float64 {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:49
	_go_fuzz_dep_.CoverTab[130399]++
										return math.Float64frombits(x.v.Load())
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:50
	// _ = "end of CoverTab[130399]"
}

// Store atomically stores the passed float64.
func (x *Float64) Store(v float64) {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:54
	_go_fuzz_dep_.CoverTab[130400]++
										x.v.Store(math.Float64bits(v))
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:55
	// _ = "end of CoverTab[130400]"
}

// CAS is an atomic compare-and-swap for float64 values.
func (x *Float64) CAS(o, n float64) bool {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:59
	_go_fuzz_dep_.CoverTab[130401]++
										return x.v.CAS(math.Float64bits(o), math.Float64bits(n))
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:60
	// _ = "end of CoverTab[130401]"
}

// MarshalJSON encodes the wrapped float64 into JSON.
func (x *Float64) MarshalJSON() ([]byte, error) {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:64
	_go_fuzz_dep_.CoverTab[130402]++
										return json.Marshal(x.Load())
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:65
	// _ = "end of CoverTab[130402]"
}

// UnmarshalJSON decodes a float64 from JSON.
func (x *Float64) UnmarshalJSON(b []byte) error {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:69
	_go_fuzz_dep_.CoverTab[130403]++
										var v float64
										if err := json.Unmarshal(b, &v); err != nil {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:71
		_go_fuzz_dep_.CoverTab[130405]++
											return err
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:72
		// _ = "end of CoverTab[130405]"
	} else {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:73
		_go_fuzz_dep_.CoverTab[130406]++
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:73
		// _ = "end of CoverTab[130406]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:73
	}
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:73
	// _ = "end of CoverTab[130403]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:73
	_go_fuzz_dep_.CoverTab[130404]++
										x.Store(v)
										return nil
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:75
	// _ = "end of CoverTab[130404]"
}

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:76
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/float64.go:76
var _ = _go_fuzz_dep_.CoverTab
