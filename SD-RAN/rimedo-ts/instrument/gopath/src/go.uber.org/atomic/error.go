// @generated Code generated by gen-atomicwrapper.

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:23
package atomic

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:23
import (
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:23
	_go_fuzz_dep_ "go-fuzz-dep"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:23
)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:23
import (
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:23
	_atomic_ "sync/atomic"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:23
)

// Error is an atomic type-safe wrapper for error values.
type Error struct {
	_	nocmp	// disallow non-atomic comparison

	v	Value
}

var _zeroError error

// NewError creates a new Error.
func NewError(v error) *Error {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:35
	_go_fuzz_dep_.CoverTab[130384]++
										x := &Error{}
										if v != _zeroError {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:37
		_go_fuzz_dep_.CoverTab[130386]++
											x.Store(v)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:38
		// _ = "end of CoverTab[130386]"
	} else {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:39
		_go_fuzz_dep_.CoverTab[130387]++
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:39
		// _ = "end of CoverTab[130387]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:39
	}
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:39
	// _ = "end of CoverTab[130384]"
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:39
	_go_fuzz_dep_.CoverTab[130385]++
										return x
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:40
	// _ = "end of CoverTab[130385]"
}

// Load atomically loads the wrapped error.
func (x *Error) Load() error {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:44
	_go_fuzz_dep_.CoverTab[130388]++
										return unpackError(x.v.Load())
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:45
	// _ = "end of CoverTab[130388]"
}

// Store atomically stores the passed error.
func (x *Error) Store(v error) {
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:49
	_go_fuzz_dep_.CoverTab[130389]++
										x.v.Store(packError(v))
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:50
	// _ = "end of CoverTab[130389]"
}

//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:51
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /home/tianchang/go/pkg/mod/go.uber.org/atomic@v1.7.0/error.go:51
var _ = _go_fuzz_dep_.CoverTab
