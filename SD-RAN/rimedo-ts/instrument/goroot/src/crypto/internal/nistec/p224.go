// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by generate.go. DO NOT EDIT.

//line /usr/local/go/src/crypto/internal/nistec/p224.go:7
package nistec

//line /usr/local/go/src/crypto/internal/nistec/p224.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/p224.go:7
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:7
)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/p224.go:7
	_atomic_ "sync/atomic"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:7
)

import (
	"crypto/internal/nistec/fiat"
	"crypto/subtle"
	"errors"
	"sync"
)

// p224ElementLength is the length of an element of the base or scalar field,
//line /usr/local/go/src/crypto/internal/nistec/p224.go:16
// which have the same bytes length for all NIST P curves.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:18
const p224ElementLength = 28

// P224Point is a P224 point. The zero value is NOT valid.
type P224Point struct {
	// The point is represented in projective coordinates (X:Y:Z),
	// where x = X/Z and y = Y/Z.
	x, y, z *fiat.P224Element
}

// NewP224Point returns a new P224Point representing the point at infinity point.
func NewP224Point() *P224Point {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:28
	_go_fuzz_dep_.CoverTab[2388]++
								return &P224Point{
		x:	new(fiat.P224Element),
		y:	new(fiat.P224Element).One(),
		z:	new(fiat.P224Element),
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:33
	// _ = "end of CoverTab[2388]"
}

// SetGenerator sets p to the canonical generator and returns p.
func (p *P224Point) SetGenerator() *P224Point {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:37
	_go_fuzz_dep_.CoverTab[2389]++
								p.x.SetBytes([]byte{0xb7, 0xe, 0xc, 0xbd, 0x6b, 0xb4, 0xbf, 0x7f, 0x32, 0x13, 0x90, 0xb9, 0x4a, 0x3, 0xc1, 0xd3, 0x56, 0xc2, 0x11, 0x22, 0x34, 0x32, 0x80, 0xd6, 0x11, 0x5c, 0x1d, 0x21})
								p.y.SetBytes([]byte{0xbd, 0x37, 0x63, 0x88, 0xb5, 0xf7, 0x23, 0xfb, 0x4c, 0x22, 0xdf, 0xe6, 0xcd, 0x43, 0x75, 0xa0, 0x5a, 0x7, 0x47, 0x64, 0x44, 0xd5, 0x81, 0x99, 0x85, 0x0, 0x7e, 0x34})
								p.z.One()
								return p
//line /usr/local/go/src/crypto/internal/nistec/p224.go:41
	// _ = "end of CoverTab[2389]"
}

// Set sets p = q and returns p.
func (p *P224Point) Set(q *P224Point) *P224Point {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:45
	_go_fuzz_dep_.CoverTab[2390]++
								p.x.Set(q.x)
								p.y.Set(q.y)
								p.z.Set(q.z)
								return p
//line /usr/local/go/src/crypto/internal/nistec/p224.go:49
	// _ = "end of CoverTab[2390]"
}

// SetBytes sets p to the compressed, uncompressed, or infinity value encoded in
//line /usr/local/go/src/crypto/internal/nistec/p224.go:52
// b, as specified in SEC 1, Version 2.0, Section 2.3.4. If the point is not on
//line /usr/local/go/src/crypto/internal/nistec/p224.go:52
// the curve, it returns nil and an error, and the receiver is unchanged.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:52
// Otherwise, it returns p.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:56
func (p *P224Point) SetBytes(b []byte) (*P224Point, error) {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:56
	_go_fuzz_dep_.CoverTab[2391]++
								switch {

	case len(b) == 1 && func() bool {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:59
		_go_fuzz_dep_.CoverTab[2401]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:59
		return b[0] == 0
//line /usr/local/go/src/crypto/internal/nistec/p224.go:59
		// _ = "end of CoverTab[2401]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:59
	}():
//line /usr/local/go/src/crypto/internal/nistec/p224.go:59
		_go_fuzz_dep_.CoverTab[2392]++
									return p.Set(NewP224Point()), nil
//line /usr/local/go/src/crypto/internal/nistec/p224.go:60
		// _ = "end of CoverTab[2392]"

//line /usr/local/go/src/crypto/internal/nistec/p224.go:63
	case len(b) == 1+2*p224ElementLength && func() bool {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:63
		_go_fuzz_dep_.CoverTab[2402]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:63
		return b[0] == 4
//line /usr/local/go/src/crypto/internal/nistec/p224.go:63
		// _ = "end of CoverTab[2402]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:63
	}():
//line /usr/local/go/src/crypto/internal/nistec/p224.go:63
		_go_fuzz_dep_.CoverTab[2393]++
									x, err := new(fiat.P224Element).SetBytes(b[1 : 1+p224ElementLength])
									if err != nil {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:65
			_go_fuzz_dep_.CoverTab[2403]++
										return nil, err
//line /usr/local/go/src/crypto/internal/nistec/p224.go:66
			// _ = "end of CoverTab[2403]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:67
			_go_fuzz_dep_.CoverTab[2404]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:67
			// _ = "end of CoverTab[2404]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:67
		}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:67
		// _ = "end of CoverTab[2393]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:67
		_go_fuzz_dep_.CoverTab[2394]++
									y, err := new(fiat.P224Element).SetBytes(b[1+p224ElementLength:])
									if err != nil {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:69
			_go_fuzz_dep_.CoverTab[2405]++
										return nil, err
//line /usr/local/go/src/crypto/internal/nistec/p224.go:70
			// _ = "end of CoverTab[2405]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:71
			_go_fuzz_dep_.CoverTab[2406]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:71
			// _ = "end of CoverTab[2406]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:71
		}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:71
		// _ = "end of CoverTab[2394]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:71
		_go_fuzz_dep_.CoverTab[2395]++
									if err := p224CheckOnCurve(x, y); err != nil {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:72
			_go_fuzz_dep_.CoverTab[2407]++
										return nil, err
//line /usr/local/go/src/crypto/internal/nistec/p224.go:73
			// _ = "end of CoverTab[2407]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:74
			_go_fuzz_dep_.CoverTab[2408]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:74
			// _ = "end of CoverTab[2408]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:74
		}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:74
		// _ = "end of CoverTab[2395]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:74
		_go_fuzz_dep_.CoverTab[2396]++
									p.x.Set(x)
									p.y.Set(y)
									p.z.One()
									return p, nil
//line /usr/local/go/src/crypto/internal/nistec/p224.go:78
		// _ = "end of CoverTab[2396]"

//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
	case len(b) == 1+p224ElementLength && func() bool {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
		_go_fuzz_dep_.CoverTab[2409]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
		return (b[0] == 2 || func() bool {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
			_go_fuzz_dep_.CoverTab[2410]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
			return b[0] == 3
//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
			// _ = "end of CoverTab[2410]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
		}())
//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
		// _ = "end of CoverTab[2409]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
	}():
//line /usr/local/go/src/crypto/internal/nistec/p224.go:81
		_go_fuzz_dep_.CoverTab[2397]++
									x, err := new(fiat.P224Element).SetBytes(b[1:])
									if err != nil {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:83
			_go_fuzz_dep_.CoverTab[2411]++
										return nil, err
//line /usr/local/go/src/crypto/internal/nistec/p224.go:84
			// _ = "end of CoverTab[2411]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:85
			_go_fuzz_dep_.CoverTab[2412]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:85
			// _ = "end of CoverTab[2412]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:85
		}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:85
		// _ = "end of CoverTab[2397]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:85
		_go_fuzz_dep_.CoverTab[2398]++

//line /usr/local/go/src/crypto/internal/nistec/p224.go:88
		y := p224Polynomial(new(fiat.P224Element), x)
		if !p224Sqrt(y, y) {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:89
			_go_fuzz_dep_.CoverTab[2413]++
										return nil, errors.New("invalid P224 compressed point encoding")
//line /usr/local/go/src/crypto/internal/nistec/p224.go:90
			// _ = "end of CoverTab[2413]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:91
			_go_fuzz_dep_.CoverTab[2414]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:91
			// _ = "end of CoverTab[2414]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:91
		}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:91
		// _ = "end of CoverTab[2398]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:91
		_go_fuzz_dep_.CoverTab[2399]++

//line /usr/local/go/src/crypto/internal/nistec/p224.go:95
		otherRoot := new(fiat.P224Element)
									otherRoot.Sub(otherRoot, y)
									cond := y.Bytes()[p224ElementLength-1]&1 ^ b[0]&1
									y.Select(otherRoot, y, int(cond))

									p.x.Set(x)
									p.y.Set(y)
									p.z.One()
									return p, nil
//line /usr/local/go/src/crypto/internal/nistec/p224.go:103
		// _ = "end of CoverTab[2399]"

	default:
//line /usr/local/go/src/crypto/internal/nistec/p224.go:105
		_go_fuzz_dep_.CoverTab[2400]++
									return nil, errors.New("invalid P224 point encoding")
//line /usr/local/go/src/crypto/internal/nistec/p224.go:106
		// _ = "end of CoverTab[2400]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:107
	// _ = "end of CoverTab[2391]"
}

var _p224B *fiat.P224Element
var _p224BOnce sync.Once

func p224B() *fiat.P224Element {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:113
	_go_fuzz_dep_.CoverTab[2415]++
								_p224BOnce.Do(func() {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:114
		_go_fuzz_dep_.CoverTab[2417]++
									_p224B, _ = new(fiat.P224Element).SetBytes([]byte{0xb4, 0x5, 0xa, 0x85, 0xc, 0x4, 0xb3, 0xab, 0xf5, 0x41, 0x32, 0x56, 0x50, 0x44, 0xb0, 0xb7, 0xd7, 0xbf, 0xd8, 0xba, 0x27, 0xb, 0x39, 0x43, 0x23, 0x55, 0xff, 0xb4})
//line /usr/local/go/src/crypto/internal/nistec/p224.go:115
		// _ = "end of CoverTab[2417]"
	})
//line /usr/local/go/src/crypto/internal/nistec/p224.go:116
	// _ = "end of CoverTab[2415]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:116
	_go_fuzz_dep_.CoverTab[2416]++
								return _p224B
//line /usr/local/go/src/crypto/internal/nistec/p224.go:117
	// _ = "end of CoverTab[2416]"
}

// p224Polynomial sets y2 to x³ - 3x + b, and returns y2.
func p224Polynomial(y2, x *fiat.P224Element) *fiat.P224Element {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:121
	_go_fuzz_dep_.CoverTab[2418]++
								y2.Square(x)
								y2.Mul(y2, x)

								threeX := new(fiat.P224Element).Add(x, x)
								threeX.Add(threeX, x)
								y2.Sub(y2, threeX)

								return y2.Add(y2, p224B())
//line /usr/local/go/src/crypto/internal/nistec/p224.go:129
	// _ = "end of CoverTab[2418]"
}

func p224CheckOnCurve(x, y *fiat.P224Element) error {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:132
	_go_fuzz_dep_.CoverTab[2419]++

								rhs := p224Polynomial(new(fiat.P224Element), x)
								lhs := new(fiat.P224Element).Square(y)
								if rhs.Equal(lhs) != 1 {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:136
		_go_fuzz_dep_.CoverTab[2421]++
									return errors.New("P224 point not on curve")
//line /usr/local/go/src/crypto/internal/nistec/p224.go:137
		// _ = "end of CoverTab[2421]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:138
		_go_fuzz_dep_.CoverTab[2422]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:138
		// _ = "end of CoverTab[2422]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:138
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:138
	// _ = "end of CoverTab[2419]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:138
	_go_fuzz_dep_.CoverTab[2420]++
								return nil
//line /usr/local/go/src/crypto/internal/nistec/p224.go:139
	// _ = "end of CoverTab[2420]"
}

// Bytes returns the uncompressed or infinity encoding of p, as specified in
//line /usr/local/go/src/crypto/internal/nistec/p224.go:142
// SEC 1, Version 2.0, Section 2.3.3. Note that the encoding of the point at
//line /usr/local/go/src/crypto/internal/nistec/p224.go:142
// infinity is shorter than all other encodings.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:145
func (p *P224Point) Bytes() []byte {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:145
	_go_fuzz_dep_.CoverTab[2423]++
	// This function is outlined to make the allocations inline in the caller
								// rather than happen on the heap.
								var out [1 + 2*p224ElementLength]byte
								return p.bytes(&out)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:149
	// _ = "end of CoverTab[2423]"
}

func (p *P224Point) bytes(out *[1 + 2*p224ElementLength]byte) []byte {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:152
	_go_fuzz_dep_.CoverTab[2424]++
								if p.z.IsZero() == 1 {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:153
		_go_fuzz_dep_.CoverTab[2426]++
									return append(out[:0], 0)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:154
		// _ = "end of CoverTab[2426]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:155
		_go_fuzz_dep_.CoverTab[2427]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:155
		// _ = "end of CoverTab[2427]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:155
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:155
	// _ = "end of CoverTab[2424]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:155
	_go_fuzz_dep_.CoverTab[2425]++

								zinv := new(fiat.P224Element).Invert(p.z)
								x := new(fiat.P224Element).Mul(p.x, zinv)
								y := new(fiat.P224Element).Mul(p.y, zinv)

								buf := append(out[:0], 4)
								buf = append(buf, x.Bytes()...)
								buf = append(buf, y.Bytes()...)
								return buf
//line /usr/local/go/src/crypto/internal/nistec/p224.go:164
	// _ = "end of CoverTab[2425]"
}

// BytesX returns the encoding of the x-coordinate of p, as specified in SEC 1,
//line /usr/local/go/src/crypto/internal/nistec/p224.go:167
// Version 2.0, Section 2.3.5, or an error if p is the point at infinity.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:169
func (p *P224Point) BytesX() ([]byte, error) {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:169
	_go_fuzz_dep_.CoverTab[2428]++
	// This function is outlined to make the allocations inline in the caller
								// rather than happen on the heap.
								var out [p224ElementLength]byte
								return p.bytesX(&out)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:173
	// _ = "end of CoverTab[2428]"
}

func (p *P224Point) bytesX(out *[p224ElementLength]byte) ([]byte, error) {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:176
	_go_fuzz_dep_.CoverTab[2429]++
								if p.z.IsZero() == 1 {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:177
		_go_fuzz_dep_.CoverTab[2431]++
									return nil, errors.New("P224 point is the point at infinity")
//line /usr/local/go/src/crypto/internal/nistec/p224.go:178
		// _ = "end of CoverTab[2431]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:179
		_go_fuzz_dep_.CoverTab[2432]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:179
		// _ = "end of CoverTab[2432]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:179
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:179
	// _ = "end of CoverTab[2429]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:179
	_go_fuzz_dep_.CoverTab[2430]++

								zinv := new(fiat.P224Element).Invert(p.z)
								x := new(fiat.P224Element).Mul(p.x, zinv)

								return append(out[:0], x.Bytes()...), nil
//line /usr/local/go/src/crypto/internal/nistec/p224.go:184
	// _ = "end of CoverTab[2430]"
}

// BytesCompressed returns the compressed or infinity encoding of p, as
//line /usr/local/go/src/crypto/internal/nistec/p224.go:187
// specified in SEC 1, Version 2.0, Section 2.3.3. Note that the encoding of the
//line /usr/local/go/src/crypto/internal/nistec/p224.go:187
// point at infinity is shorter than all other encodings.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:190
func (p *P224Point) BytesCompressed() []byte {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:190
	_go_fuzz_dep_.CoverTab[2433]++
	// This function is outlined to make the allocations inline in the caller
								// rather than happen on the heap.
								var out [1 + p224ElementLength]byte
								return p.bytesCompressed(&out)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:194
	// _ = "end of CoverTab[2433]"
}

func (p *P224Point) bytesCompressed(out *[1 + p224ElementLength]byte) []byte {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:197
	_go_fuzz_dep_.CoverTab[2434]++
								if p.z.IsZero() == 1 {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:198
		_go_fuzz_dep_.CoverTab[2436]++
									return append(out[:0], 0)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:199
		// _ = "end of CoverTab[2436]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:200
		_go_fuzz_dep_.CoverTab[2437]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:200
		// _ = "end of CoverTab[2437]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:200
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:200
	// _ = "end of CoverTab[2434]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:200
	_go_fuzz_dep_.CoverTab[2435]++

								zinv := new(fiat.P224Element).Invert(p.z)
								x := new(fiat.P224Element).Mul(p.x, zinv)
								y := new(fiat.P224Element).Mul(p.y, zinv)

//line /usr/local/go/src/crypto/internal/nistec/p224.go:208
	buf := append(out[:0], 2)
								buf[0] |= y.Bytes()[p224ElementLength-1] & 1
								buf = append(buf, x.Bytes()...)
								return buf
//line /usr/local/go/src/crypto/internal/nistec/p224.go:211
	// _ = "end of CoverTab[2435]"
}

// Add sets q = p1 + p2, and returns q. The points may overlap.
func (q *P224Point) Add(p1, p2 *P224Point) *P224Point {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:215
	_go_fuzz_dep_.CoverTab[2438]++

//line /usr/local/go/src/crypto/internal/nistec/p224.go:219
	t0 := new(fiat.P224Element).Mul(p1.x, p2.x)
								t1 := new(fiat.P224Element).Mul(p1.y, p2.y)
								t2 := new(fiat.P224Element).Mul(p1.z, p2.z)
								t3 := new(fiat.P224Element).Add(p1.x, p1.y)
								t4 := new(fiat.P224Element).Add(p2.x, p2.y)
								t3.Mul(t3, t4)
								t4.Add(t0, t1)
								t3.Sub(t3, t4)
								t4.Add(p1.y, p1.z)
								x3 := new(fiat.P224Element).Add(p2.y, p2.z)
								t4.Mul(t4, x3)
								x3.Add(t1, t2)
								t4.Sub(t4, x3)
								x3.Add(p1.x, p1.z)
								y3 := new(fiat.P224Element).Add(p2.x, p2.z)
								x3.Mul(x3, y3)
								y3.Add(t0, t2)
								y3.Sub(x3, y3)
								z3 := new(fiat.P224Element).Mul(p224B(), t2)
								x3.Sub(y3, z3)
								z3.Add(x3, x3)
								x3.Add(x3, z3)
								z3.Sub(t1, x3)
								x3.Add(t1, x3)
								y3.Mul(p224B(), y3)
								t1.Add(t2, t2)
								t2.Add(t1, t2)
								y3.Sub(y3, t2)
								y3.Sub(y3, t0)
								t1.Add(y3, y3)
								y3.Add(t1, y3)
								t1.Add(t0, t0)
								t0.Add(t1, t0)
								t0.Sub(t0, t2)
								t1.Mul(t4, y3)
								t2.Mul(t0, y3)
								y3.Mul(x3, z3)
								y3.Add(y3, t2)
								x3.Mul(t3, x3)
								x3.Sub(x3, t1)
								z3.Mul(t4, z3)
								t1.Mul(t3, t0)
								z3.Add(z3, t1)

								q.x.Set(x3)
								q.y.Set(y3)
								q.z.Set(z3)
								return q
//line /usr/local/go/src/crypto/internal/nistec/p224.go:266
	// _ = "end of CoverTab[2438]"
}

// Double sets q = p + p, and returns q. The points may overlap.
func (q *P224Point) Double(p *P224Point) *P224Point {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:270
	_go_fuzz_dep_.CoverTab[2439]++

//line /usr/local/go/src/crypto/internal/nistec/p224.go:274
	t0 := new(fiat.P224Element).Square(p.x)
								t1 := new(fiat.P224Element).Square(p.y)
								t2 := new(fiat.P224Element).Square(p.z)
								t3 := new(fiat.P224Element).Mul(p.x, p.y)
								t3.Add(t3, t3)
								z3 := new(fiat.P224Element).Mul(p.x, p.z)
								z3.Add(z3, z3)
								y3 := new(fiat.P224Element).Mul(p224B(), t2)
								y3.Sub(y3, z3)
								x3 := new(fiat.P224Element).Add(y3, y3)
								y3.Add(x3, y3)
								x3.Sub(t1, y3)
								y3.Add(t1, y3)
								y3.Mul(x3, y3)
								x3.Mul(x3, t3)
								t3.Add(t2, t2)
								t2.Add(t2, t3)
								z3.Mul(p224B(), z3)
								z3.Sub(z3, t2)
								z3.Sub(z3, t0)
								t3.Add(z3, z3)
								z3.Add(z3, t3)
								t3.Add(t0, t0)
								t0.Add(t3, t0)
								t0.Sub(t0, t2)
								t0.Mul(t0, z3)
								y3.Add(y3, t0)
								t0.Mul(p.y, p.z)
								t0.Add(t0, t0)
								z3.Mul(t0, z3)
								x3.Sub(x3, z3)
								z3.Mul(t0, t1)
								z3.Add(z3, z3)
								z3.Add(z3, z3)

								q.x.Set(x3)
								q.y.Set(y3)
								q.z.Set(z3)
								return q
//line /usr/local/go/src/crypto/internal/nistec/p224.go:312
	// _ = "end of CoverTab[2439]"
}

// Select sets q to p1 if cond == 1, and to p2 if cond == 0.
func (q *P224Point) Select(p1, p2 *P224Point, cond int) *P224Point {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:316
	_go_fuzz_dep_.CoverTab[2440]++
								q.x.Select(p1.x, p2.x, cond)
								q.y.Select(p1.y, p2.y, cond)
								q.z.Select(p1.z, p2.z, cond)
								return q
//line /usr/local/go/src/crypto/internal/nistec/p224.go:320
	// _ = "end of CoverTab[2440]"
}

// A p224Table holds the first 15 multiples of a point at offset -1, so [1]P
//line /usr/local/go/src/crypto/internal/nistec/p224.go:323
// is at table[0], [15]P is at table[14], and [0]P is implicitly the identity
//line /usr/local/go/src/crypto/internal/nistec/p224.go:323
// point.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:326
type p224Table [15]*P224Point

// Select selects the n-th multiple of the table base point into p. It works in
//line /usr/local/go/src/crypto/internal/nistec/p224.go:328
// constant time by iterating over every entry of the table. n must be in [0, 15].
//line /usr/local/go/src/crypto/internal/nistec/p224.go:330
func (table *p224Table) Select(p *P224Point, n uint8) {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:330
	_go_fuzz_dep_.CoverTab[2441]++
								if n >= 16 {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:331
		_go_fuzz_dep_.CoverTab[2443]++
									panic("nistec: internal error: p224Table called with out-of-bounds value")
//line /usr/local/go/src/crypto/internal/nistec/p224.go:332
		// _ = "end of CoverTab[2443]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:333
		_go_fuzz_dep_.CoverTab[2444]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:333
		// _ = "end of CoverTab[2444]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:333
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:333
	// _ = "end of CoverTab[2441]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:333
	_go_fuzz_dep_.CoverTab[2442]++
								p.Set(NewP224Point())
								for i := uint8(1); i < 16; i++ {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:335
		_go_fuzz_dep_.CoverTab[2445]++
									cond := subtle.ConstantTimeByteEq(i, n)
									p.Select(table[i-1], p, cond)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:337
		// _ = "end of CoverTab[2445]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:338
	// _ = "end of CoverTab[2442]"
}

// ScalarMult sets p = scalar * q, and returns p.
func (p *P224Point) ScalarMult(q *P224Point, scalar []byte) (*P224Point, error) {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:342
	_go_fuzz_dep_.CoverTab[2446]++
	// Compute a p224Table for the base point q. The explicit NewP224Point
	// calls get inlined, letting the allocations live on the stack.
	var table = p224Table{NewP224Point(), NewP224Point(), NewP224Point(),
		NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(),
		NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point(),
		NewP224Point(), NewP224Point(), NewP224Point(), NewP224Point()}
	table[0].Set(q)
	for i := 1; i < 15; i += 2 {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:350
		_go_fuzz_dep_.CoverTab[2449]++
									table[i].Double(table[i/2])
									table[i+1].Add(table[i], q)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:352
		// _ = "end of CoverTab[2449]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:353
	// _ = "end of CoverTab[2446]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:353
	_go_fuzz_dep_.CoverTab[2447]++

//line /usr/local/go/src/crypto/internal/nistec/p224.go:357
	t := NewP224Point()
	p.Set(NewP224Point())
	for i, byte := range scalar {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:359
		_go_fuzz_dep_.CoverTab[2450]++

//line /usr/local/go/src/crypto/internal/nistec/p224.go:362
		if i != 0 {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:362
			_go_fuzz_dep_.CoverTab[2452]++
										p.Double(p)
										p.Double(p)
										p.Double(p)
										p.Double(p)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:366
			// _ = "end of CoverTab[2452]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:367
			_go_fuzz_dep_.CoverTab[2453]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:367
			// _ = "end of CoverTab[2453]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:367
		}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:367
		// _ = "end of CoverTab[2450]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:367
		_go_fuzz_dep_.CoverTab[2451]++

									windowValue := byte >> 4
									table.Select(t, windowValue)
									p.Add(p, t)

									p.Double(p)
									p.Double(p)
									p.Double(p)
									p.Double(p)

									windowValue = byte & 0b1111
									table.Select(t, windowValue)
									p.Add(p, t)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:380
		// _ = "end of CoverTab[2451]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:381
	// _ = "end of CoverTab[2447]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:381
	_go_fuzz_dep_.CoverTab[2448]++

								return p, nil
//line /usr/local/go/src/crypto/internal/nistec/p224.go:383
	// _ = "end of CoverTab[2448]"
}

var p224GeneratorTable *[p224ElementLength * 2]p224Table
var p224GeneratorTableOnce sync.Once

// generatorTable returns a sequence of p224Tables. The first table contains
//line /usr/local/go/src/crypto/internal/nistec/p224.go:389
// multiples of G. Each successive table is the previous table doubled four
//line /usr/local/go/src/crypto/internal/nistec/p224.go:389
// times.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:392
func (p *P224Point) generatorTable() *[p224ElementLength * 2]p224Table {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:392
	_go_fuzz_dep_.CoverTab[2454]++
								p224GeneratorTableOnce.Do(func() {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:393
		_go_fuzz_dep_.CoverTab[2456]++
									p224GeneratorTable = new([p224ElementLength * 2]p224Table)
									base := NewP224Point().SetGenerator()
									for i := 0; i < p224ElementLength*2; i++ {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:396
			_go_fuzz_dep_.CoverTab[2457]++
										p224GeneratorTable[i][0] = NewP224Point().Set(base)
										for j := 1; j < 15; j++ {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:398
				_go_fuzz_dep_.CoverTab[2459]++
											p224GeneratorTable[i][j] = NewP224Point().Add(p224GeneratorTable[i][j-1], base)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:399
				// _ = "end of CoverTab[2459]"
			}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:400
			// _ = "end of CoverTab[2457]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:400
			_go_fuzz_dep_.CoverTab[2458]++
										base.Double(base)
										base.Double(base)
										base.Double(base)
										base.Double(base)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:404
			// _ = "end of CoverTab[2458]"
		}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:405
		// _ = "end of CoverTab[2456]"
	})
//line /usr/local/go/src/crypto/internal/nistec/p224.go:406
	// _ = "end of CoverTab[2454]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:406
	_go_fuzz_dep_.CoverTab[2455]++
								return p224GeneratorTable
//line /usr/local/go/src/crypto/internal/nistec/p224.go:407
	// _ = "end of CoverTab[2455]"
}

// ScalarBaseMult sets p = scalar * B, where B is the canonical generator, and
//line /usr/local/go/src/crypto/internal/nistec/p224.go:410
// returns p.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:412
func (p *P224Point) ScalarBaseMult(scalar []byte) (*P224Point, error) {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:412
	_go_fuzz_dep_.CoverTab[2460]++
								if len(scalar) != p224ElementLength {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:413
		_go_fuzz_dep_.CoverTab[2463]++
									return nil, errors.New("invalid scalar length")
//line /usr/local/go/src/crypto/internal/nistec/p224.go:414
		// _ = "end of CoverTab[2463]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:415
		_go_fuzz_dep_.CoverTab[2464]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:415
		// _ = "end of CoverTab[2464]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:415
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:415
	// _ = "end of CoverTab[2460]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:415
	_go_fuzz_dep_.CoverTab[2461]++
								tables := p.generatorTable()

//line /usr/local/go/src/crypto/internal/nistec/p224.go:424
	t := NewP224Point()
	p.Set(NewP224Point())
	tableIndex := len(tables) - 1
	for _, byte := range scalar {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:427
		_go_fuzz_dep_.CoverTab[2465]++
									windowValue := byte >> 4
									tables[tableIndex].Select(t, windowValue)
									p.Add(p, t)
									tableIndex--

									windowValue = byte & 0b1111
									tables[tableIndex].Select(t, windowValue)
									p.Add(p, t)
									tableIndex--
//line /usr/local/go/src/crypto/internal/nistec/p224.go:436
		// _ = "end of CoverTab[2465]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:437
	// _ = "end of CoverTab[2461]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:437
	_go_fuzz_dep_.CoverTab[2462]++

								return p, nil
//line /usr/local/go/src/crypto/internal/nistec/p224.go:439
	// _ = "end of CoverTab[2462]"
}

// p224Sqrt sets e to a square root of x. If x is not a square, p224Sqrt returns
//line /usr/local/go/src/crypto/internal/nistec/p224.go:442
// false and e is unchanged. e and x can overlap.
//line /usr/local/go/src/crypto/internal/nistec/p224.go:444
func p224Sqrt(e, x *fiat.P224Element) (isSquare bool) {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:444
	_go_fuzz_dep_.CoverTab[2466]++
								candidate := new(fiat.P224Element)
								p224SqrtCandidate(candidate, x)
								square := new(fiat.P224Element).Square(candidate)
								if square.Equal(x) != 1 {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:448
		_go_fuzz_dep_.CoverTab[2468]++
									return false
//line /usr/local/go/src/crypto/internal/nistec/p224.go:449
		// _ = "end of CoverTab[2468]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p224.go:450
		_go_fuzz_dep_.CoverTab[2469]++
//line /usr/local/go/src/crypto/internal/nistec/p224.go:450
		// _ = "end of CoverTab[2469]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:450
	}
//line /usr/local/go/src/crypto/internal/nistec/p224.go:450
	// _ = "end of CoverTab[2466]"
//line /usr/local/go/src/crypto/internal/nistec/p224.go:450
	_go_fuzz_dep_.CoverTab[2467]++
								e.Set(candidate)
								return true
//line /usr/local/go/src/crypto/internal/nistec/p224.go:452
	// _ = "end of CoverTab[2467]"
}

//line /usr/local/go/src/crypto/internal/nistec/p224.go:453
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/crypto/internal/nistec/p224.go:453
var _ = _go_fuzz_dep_.CoverTab
