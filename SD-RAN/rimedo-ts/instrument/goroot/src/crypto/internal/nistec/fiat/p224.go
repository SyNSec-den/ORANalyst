// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by generate.go. DO NOT EDIT.

//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:7
package fiat

//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:7
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:7
)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:7
	_atomic_ "sync/atomic"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:7
)

import (
	"crypto/subtle"
	"errors"
)

// P224Element is an integer modulo 2^224 - 2^96 + 1.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:14
//
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:14
// The zero value is a valid zero element.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:17
type P224Element struct {
	// Values are represented internally always in the Montgomery domain, and
	// converted in Bytes and SetBytes.
	x p224MontgomeryDomainFieldElement
}

const p224ElementLen = 28

type p224UntypedFieldElement = [4]uint64

// One sets e = 1, and returns e.
func (e *P224Element) One() *P224Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:28
	_go_fuzz_dep_.CoverTab[2053]++
									p224SetOne(&e.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:30
	// _ = "end of CoverTab[2053]"
}

// Equal returns 1 if e == t, and zero otherwise.
func (e *P224Element) Equal(t *P224Element) int {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:34
	_go_fuzz_dep_.CoverTab[2054]++
									eBytes := e.Bytes()
									tBytes := t.Bytes()
									return subtle.ConstantTimeCompare(eBytes, tBytes)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:37
	// _ = "end of CoverTab[2054]"
}

// IsZero returns 1 if e == 0, and zero otherwise.
func (e *P224Element) IsZero() int {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:41
	_go_fuzz_dep_.CoverTab[2055]++
									zero := make([]byte, p224ElementLen)
									eBytes := e.Bytes()
									return subtle.ConstantTimeCompare(eBytes, zero)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:44
	// _ = "end of CoverTab[2055]"
}

// Set sets e = t, and returns e.
func (e *P224Element) Set(t *P224Element) *P224Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:48
	_go_fuzz_dep_.CoverTab[2056]++
									e.x = t.x
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:50
	// _ = "end of CoverTab[2056]"
}

// Bytes returns the 28-byte big-endian encoding of e.
func (e *P224Element) Bytes() []byte {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:54
	_go_fuzz_dep_.CoverTab[2057]++
	// This function is outlined to make the allocations inline in the caller
									// rather than happen on the heap.
									var out [p224ElementLen]byte
									return e.bytes(&out)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:58
	// _ = "end of CoverTab[2057]"
}

func (e *P224Element) bytes(out *[p224ElementLen]byte) []byte {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:61
	_go_fuzz_dep_.CoverTab[2058]++
									var tmp p224NonMontgomeryDomainFieldElement
									p224FromMontgomery(&tmp, &e.x)
									p224ToBytes(out, (*p224UntypedFieldElement)(&tmp))
									p224InvertEndianness(out[:])
									return out[:]
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:66
	// _ = "end of CoverTab[2058]"
}

// SetBytes sets e = v, where v is a big-endian 28-byte encoding, and returns e.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:69
// If v is not 28 bytes or it encodes a value higher than 2^224 - 2^96 + 1,
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:69
// SetBytes returns nil and an error, and e is unchanged.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:72
func (e *P224Element) SetBytes(v []byte) (*P224Element, error) {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:72
	_go_fuzz_dep_.CoverTab[2059]++
									if len(v) != p224ElementLen {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:73
		_go_fuzz_dep_.CoverTab[2062]++
										return nil, errors.New("invalid P224Element encoding")
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:74
		// _ = "end of CoverTab[2062]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:75
		_go_fuzz_dep_.CoverTab[2063]++
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:75
		// _ = "end of CoverTab[2063]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:75
	}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:75
	// _ = "end of CoverTab[2059]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:75
	_go_fuzz_dep_.CoverTab[2060]++

	// Check for non-canonical encodings (p + k, 2p + k, etc.) by comparing to
	// the encoding of -1 mod p, so p - 1, the highest canonical encoding.
	var minusOneEncoding = new(P224Element).Sub(
		new(P224Element), new(P224Element).One()).Bytes()
	for i := range v {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:81
		_go_fuzz_dep_.CoverTab[2064]++
										if v[i] < minusOneEncoding[i] {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:82
			_go_fuzz_dep_.CoverTab[2066]++
											break
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:83
			// _ = "end of CoverTab[2066]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:84
			_go_fuzz_dep_.CoverTab[2067]++
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:84
			// _ = "end of CoverTab[2067]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:84
		}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:84
		// _ = "end of CoverTab[2064]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:84
		_go_fuzz_dep_.CoverTab[2065]++
										if v[i] > minusOneEncoding[i] {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:85
			_go_fuzz_dep_.CoverTab[2068]++
											return nil, errors.New("invalid P224Element encoding")
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:86
			// _ = "end of CoverTab[2068]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:87
			_go_fuzz_dep_.CoverTab[2069]++
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:87
			// _ = "end of CoverTab[2069]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:87
		}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:87
		// _ = "end of CoverTab[2065]"
	}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:88
	// _ = "end of CoverTab[2060]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:88
	_go_fuzz_dep_.CoverTab[2061]++

									var in [p224ElementLen]byte
									copy(in[:], v)
									p224InvertEndianness(in[:])
									var tmp p224NonMontgomeryDomainFieldElement
									p224FromBytes((*p224UntypedFieldElement)(&tmp), &in)
									p224ToMontgomery(&e.x, &tmp)
									return e, nil
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:96
	// _ = "end of CoverTab[2061]"
}

// Add sets e = t1 + t2, and returns e.
func (e *P224Element) Add(t1, t2 *P224Element) *P224Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:100
	_go_fuzz_dep_.CoverTab[2070]++
									p224Add(&e.x, &t1.x, &t2.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:102
	// _ = "end of CoverTab[2070]"
}

// Sub sets e = t1 - t2, and returns e.
func (e *P224Element) Sub(t1, t2 *P224Element) *P224Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:106
	_go_fuzz_dep_.CoverTab[2071]++
									p224Sub(&e.x, &t1.x, &t2.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:108
	// _ = "end of CoverTab[2071]"
}

// Mul sets e = t1 * t2, and returns e.
func (e *P224Element) Mul(t1, t2 *P224Element) *P224Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:112
	_go_fuzz_dep_.CoverTab[2072]++
									p224Mul(&e.x, &t1.x, &t2.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:114
	// _ = "end of CoverTab[2072]"
}

// Square sets e = t * t, and returns e.
func (e *P224Element) Square(t *P224Element) *P224Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:118
	_go_fuzz_dep_.CoverTab[2073]++
									p224Square(&e.x, &t.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:120
	// _ = "end of CoverTab[2073]"
}

// Select sets v to a if cond == 1, and to b if cond == 0.
func (v *P224Element) Select(a, b *P224Element, cond int) *P224Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:124
	_go_fuzz_dep_.CoverTab[2074]++
									p224Selectznz((*p224UntypedFieldElement)(&v.x), p224Uint1(cond),
		(*p224UntypedFieldElement)(&b.x), (*p224UntypedFieldElement)(&a.x))
									return v
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:127
	// _ = "end of CoverTab[2074]"
}

func p224InvertEndianness(v []byte) {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:130
	_go_fuzz_dep_.CoverTab[2075]++
									for i := 0; i < len(v)/2; i++ {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:131
		_go_fuzz_dep_.CoverTab[2076]++
										v[i], v[len(v)-1-i] = v[len(v)-1-i], v[i]
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:132
		// _ = "end of CoverTab[2076]"
	}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:133
	// _ = "end of CoverTab[2075]"
}

//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:134
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p224.go:134
var _ = _go_fuzz_dep_.CoverTab
