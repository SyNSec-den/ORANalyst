// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by generate.go. DO NOT EDIT.

//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:7
package fiat

//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:7
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:7
)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:7
	_atomic_ "sync/atomic"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:7
)

import (
	"crypto/subtle"
	"errors"
)

// P521Element is an integer modulo 2^521 - 1.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:14
//
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:14
// The zero value is a valid zero element.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:17
type P521Element struct {
	// Values are represented internally always in the Montgomery domain, and
	// converted in Bytes and SetBytes.
	x p521MontgomeryDomainFieldElement
}

const p521ElementLen = 66

type p521UntypedFieldElement = [9]uint64

// One sets e = 1, and returns e.
func (e *P521Element) One() *P521Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:28
	_go_fuzz_dep_.CoverTab[2219]++
									p521SetOne(&e.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:30
	// _ = "end of CoverTab[2219]"
}

// Equal returns 1 if e == t, and zero otherwise.
func (e *P521Element) Equal(t *P521Element) int {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:34
	_go_fuzz_dep_.CoverTab[2220]++
									eBytes := e.Bytes()
									tBytes := t.Bytes()
									return subtle.ConstantTimeCompare(eBytes, tBytes)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:37
	// _ = "end of CoverTab[2220]"
}

// IsZero returns 1 if e == 0, and zero otherwise.
func (e *P521Element) IsZero() int {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:41
	_go_fuzz_dep_.CoverTab[2221]++
									zero := make([]byte, p521ElementLen)
									eBytes := e.Bytes()
									return subtle.ConstantTimeCompare(eBytes, zero)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:44
	// _ = "end of CoverTab[2221]"
}

// Set sets e = t, and returns e.
func (e *P521Element) Set(t *P521Element) *P521Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:48
	_go_fuzz_dep_.CoverTab[2222]++
									e.x = t.x
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:50
	// _ = "end of CoverTab[2222]"
}

// Bytes returns the 66-byte big-endian encoding of e.
func (e *P521Element) Bytes() []byte {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:54
	_go_fuzz_dep_.CoverTab[2223]++
	// This function is outlined to make the allocations inline in the caller
									// rather than happen on the heap.
									var out [p521ElementLen]byte
									return e.bytes(&out)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:58
	// _ = "end of CoverTab[2223]"
}

func (e *P521Element) bytes(out *[p521ElementLen]byte) []byte {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:61
	_go_fuzz_dep_.CoverTab[2224]++
									var tmp p521NonMontgomeryDomainFieldElement
									p521FromMontgomery(&tmp, &e.x)
									p521ToBytes(out, (*p521UntypedFieldElement)(&tmp))
									p521InvertEndianness(out[:])
									return out[:]
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:66
	// _ = "end of CoverTab[2224]"
}

// SetBytes sets e = v, where v is a big-endian 66-byte encoding, and returns e.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:69
// If v is not 66 bytes or it encodes a value higher than 2^521 - 1,
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:69
// SetBytes returns nil and an error, and e is unchanged.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:72
func (e *P521Element) SetBytes(v []byte) (*P521Element, error) {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:72
	_go_fuzz_dep_.CoverTab[2225]++
									if len(v) != p521ElementLen {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:73
		_go_fuzz_dep_.CoverTab[2228]++
										return nil, errors.New("invalid P521Element encoding")
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:74
		// _ = "end of CoverTab[2228]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:75
		_go_fuzz_dep_.CoverTab[2229]++
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:75
		// _ = "end of CoverTab[2229]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:75
	}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:75
	// _ = "end of CoverTab[2225]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:75
	_go_fuzz_dep_.CoverTab[2226]++

	// Check for non-canonical encodings (p + k, 2p + k, etc.) by comparing to
	// the encoding of -1 mod p, so p - 1, the highest canonical encoding.
	var minusOneEncoding = new(P521Element).Sub(
		new(P521Element), new(P521Element).One()).Bytes()
	for i := range v {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:81
		_go_fuzz_dep_.CoverTab[2230]++
										if v[i] < minusOneEncoding[i] {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:82
			_go_fuzz_dep_.CoverTab[2232]++
											break
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:83
			// _ = "end of CoverTab[2232]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:84
			_go_fuzz_dep_.CoverTab[2233]++
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:84
			// _ = "end of CoverTab[2233]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:84
		}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:84
		// _ = "end of CoverTab[2230]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:84
		_go_fuzz_dep_.CoverTab[2231]++
										if v[i] > minusOneEncoding[i] {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:85
			_go_fuzz_dep_.CoverTab[2234]++
											return nil, errors.New("invalid P521Element encoding")
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:86
			// _ = "end of CoverTab[2234]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:87
			_go_fuzz_dep_.CoverTab[2235]++
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:87
			// _ = "end of CoverTab[2235]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:87
		}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:87
		// _ = "end of CoverTab[2231]"
	}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:88
	// _ = "end of CoverTab[2226]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:88
	_go_fuzz_dep_.CoverTab[2227]++

									var in [p521ElementLen]byte
									copy(in[:], v)
									p521InvertEndianness(in[:])
									var tmp p521NonMontgomeryDomainFieldElement
									p521FromBytes((*p521UntypedFieldElement)(&tmp), &in)
									p521ToMontgomery(&e.x, &tmp)
									return e, nil
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:96
	// _ = "end of CoverTab[2227]"
}

// Add sets e = t1 + t2, and returns e.
func (e *P521Element) Add(t1, t2 *P521Element) *P521Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:100
	_go_fuzz_dep_.CoverTab[2236]++
									p521Add(&e.x, &t1.x, &t2.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:102
	// _ = "end of CoverTab[2236]"
}

// Sub sets e = t1 - t2, and returns e.
func (e *P521Element) Sub(t1, t2 *P521Element) *P521Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:106
	_go_fuzz_dep_.CoverTab[2237]++
									p521Sub(&e.x, &t1.x, &t2.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:108
	// _ = "end of CoverTab[2237]"
}

// Mul sets e = t1 * t2, and returns e.
func (e *P521Element) Mul(t1, t2 *P521Element) *P521Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:112
	_go_fuzz_dep_.CoverTab[2238]++
									p521Mul(&e.x, &t1.x, &t2.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:114
	// _ = "end of CoverTab[2238]"
}

// Square sets e = t * t, and returns e.
func (e *P521Element) Square(t *P521Element) *P521Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:118
	_go_fuzz_dep_.CoverTab[2239]++
									p521Square(&e.x, &t.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:120
	// _ = "end of CoverTab[2239]"
}

// Select sets v to a if cond == 1, and to b if cond == 0.
func (v *P521Element) Select(a, b *P521Element, cond int) *P521Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:124
	_go_fuzz_dep_.CoverTab[2240]++
									p521Selectznz((*p521UntypedFieldElement)(&v.x), p521Uint1(cond),
		(*p521UntypedFieldElement)(&b.x), (*p521UntypedFieldElement)(&a.x))
									return v
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:127
	// _ = "end of CoverTab[2240]"
}

func p521InvertEndianness(v []byte) {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:130
	_go_fuzz_dep_.CoverTab[2241]++
									for i := 0; i < len(v)/2; i++ {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:131
		_go_fuzz_dep_.CoverTab[2242]++
										v[i], v[len(v)-1-i] = v[len(v)-1-i], v[i]
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:132
		// _ = "end of CoverTab[2242]"
	}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:133
	// _ = "end of CoverTab[2241]"
}

//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:134
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p521.go:134
var _ = _go_fuzz_dep_.CoverTab
