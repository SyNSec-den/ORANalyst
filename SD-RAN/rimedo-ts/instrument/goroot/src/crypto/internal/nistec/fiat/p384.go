// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by generate.go. DO NOT EDIT.

//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:7
package fiat

//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:7
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:7
)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:7
	_atomic_ "sync/atomic"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:7
)

import (
	"crypto/subtle"
	"errors"
)

// P384Element is an integer modulo 2^384 - 2^128 - 2^96 + 2^32 - 1.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:14
//
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:14
// The zero value is a valid zero element.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:17
type P384Element struct {
	// Values are represented internally always in the Montgomery domain, and
	// converted in Bytes and SetBytes.
	x p384MontgomeryDomainFieldElement
}

const p384ElementLen = 48

type p384UntypedFieldElement = [6]uint64

// One sets e = 1, and returns e.
func (e *P384Element) One() *P384Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:28
	_go_fuzz_dep_.CoverTab[2161]++
									p384SetOne(&e.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:30
	// _ = "end of CoverTab[2161]"
}

// Equal returns 1 if e == t, and zero otherwise.
func (e *P384Element) Equal(t *P384Element) int {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:34
	_go_fuzz_dep_.CoverTab[2162]++
									eBytes := e.Bytes()
									tBytes := t.Bytes()
									return subtle.ConstantTimeCompare(eBytes, tBytes)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:37
	// _ = "end of CoverTab[2162]"
}

// IsZero returns 1 if e == 0, and zero otherwise.
func (e *P384Element) IsZero() int {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:41
	_go_fuzz_dep_.CoverTab[2163]++
									zero := make([]byte, p384ElementLen)
									eBytes := e.Bytes()
									return subtle.ConstantTimeCompare(eBytes, zero)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:44
	// _ = "end of CoverTab[2163]"
}

// Set sets e = t, and returns e.
func (e *P384Element) Set(t *P384Element) *P384Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:48
	_go_fuzz_dep_.CoverTab[2164]++
									e.x = t.x
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:50
	// _ = "end of CoverTab[2164]"
}

// Bytes returns the 48-byte big-endian encoding of e.
func (e *P384Element) Bytes() []byte {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:54
	_go_fuzz_dep_.CoverTab[2165]++
	// This function is outlined to make the allocations inline in the caller
									// rather than happen on the heap.
									var out [p384ElementLen]byte
									return e.bytes(&out)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:58
	// _ = "end of CoverTab[2165]"
}

func (e *P384Element) bytes(out *[p384ElementLen]byte) []byte {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:61
	_go_fuzz_dep_.CoverTab[2166]++
									var tmp p384NonMontgomeryDomainFieldElement
									p384FromMontgomery(&tmp, &e.x)
									p384ToBytes(out, (*p384UntypedFieldElement)(&tmp))
									p384InvertEndianness(out[:])
									return out[:]
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:66
	// _ = "end of CoverTab[2166]"
}

// SetBytes sets e = v, where v is a big-endian 48-byte encoding, and returns e.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:69
// If v is not 48 bytes or it encodes a value higher than 2^384 - 2^128 - 2^96 + 2^32 - 1,
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:69
// SetBytes returns nil and an error, and e is unchanged.
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:72
func (e *P384Element) SetBytes(v []byte) (*P384Element, error) {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:72
	_go_fuzz_dep_.CoverTab[2167]++
									if len(v) != p384ElementLen {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:73
		_go_fuzz_dep_.CoverTab[2170]++
										return nil, errors.New("invalid P384Element encoding")
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:74
		// _ = "end of CoverTab[2170]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:75
		_go_fuzz_dep_.CoverTab[2171]++
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:75
		// _ = "end of CoverTab[2171]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:75
	}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:75
	// _ = "end of CoverTab[2167]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:75
	_go_fuzz_dep_.CoverTab[2168]++

	// Check for non-canonical encodings (p + k, 2p + k, etc.) by comparing to
	// the encoding of -1 mod p, so p - 1, the highest canonical encoding.
	var minusOneEncoding = new(P384Element).Sub(
		new(P384Element), new(P384Element).One()).Bytes()
	for i := range v {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:81
		_go_fuzz_dep_.CoverTab[2172]++
										if v[i] < minusOneEncoding[i] {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:82
			_go_fuzz_dep_.CoverTab[2174]++
											break
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:83
			// _ = "end of CoverTab[2174]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:84
			_go_fuzz_dep_.CoverTab[2175]++
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:84
			// _ = "end of CoverTab[2175]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:84
		}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:84
		// _ = "end of CoverTab[2172]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:84
		_go_fuzz_dep_.CoverTab[2173]++
										if v[i] > minusOneEncoding[i] {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:85
			_go_fuzz_dep_.CoverTab[2176]++
											return nil, errors.New("invalid P384Element encoding")
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:86
			// _ = "end of CoverTab[2176]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:87
			_go_fuzz_dep_.CoverTab[2177]++
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:87
			// _ = "end of CoverTab[2177]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:87
		}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:87
		// _ = "end of CoverTab[2173]"
	}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:88
	// _ = "end of CoverTab[2168]"
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:88
	_go_fuzz_dep_.CoverTab[2169]++

									var in [p384ElementLen]byte
									copy(in[:], v)
									p384InvertEndianness(in[:])
									var tmp p384NonMontgomeryDomainFieldElement
									p384FromBytes((*p384UntypedFieldElement)(&tmp), &in)
									p384ToMontgomery(&e.x, &tmp)
									return e, nil
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:96
	// _ = "end of CoverTab[2169]"
}

// Add sets e = t1 + t2, and returns e.
func (e *P384Element) Add(t1, t2 *P384Element) *P384Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:100
	_go_fuzz_dep_.CoverTab[2178]++
									p384Add(&e.x, &t1.x, &t2.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:102
	// _ = "end of CoverTab[2178]"
}

// Sub sets e = t1 - t2, and returns e.
func (e *P384Element) Sub(t1, t2 *P384Element) *P384Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:106
	_go_fuzz_dep_.CoverTab[2179]++
									p384Sub(&e.x, &t1.x, &t2.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:108
	// _ = "end of CoverTab[2179]"
}

// Mul sets e = t1 * t2, and returns e.
func (e *P384Element) Mul(t1, t2 *P384Element) *P384Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:112
	_go_fuzz_dep_.CoverTab[2180]++
									p384Mul(&e.x, &t1.x, &t2.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:114
	// _ = "end of CoverTab[2180]"
}

// Square sets e = t * t, and returns e.
func (e *P384Element) Square(t *P384Element) *P384Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:118
	_go_fuzz_dep_.CoverTab[2181]++
									p384Square(&e.x, &t.x)
									return e
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:120
	// _ = "end of CoverTab[2181]"
}

// Select sets v to a if cond == 1, and to b if cond == 0.
func (v *P384Element) Select(a, b *P384Element, cond int) *P384Element {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:124
	_go_fuzz_dep_.CoverTab[2182]++
									p384Selectznz((*p384UntypedFieldElement)(&v.x), p384Uint1(cond),
		(*p384UntypedFieldElement)(&b.x), (*p384UntypedFieldElement)(&a.x))
									return v
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:127
	// _ = "end of CoverTab[2182]"
}

func p384InvertEndianness(v []byte) {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:130
	_go_fuzz_dep_.CoverTab[2183]++
									for i := 0; i < len(v)/2; i++ {
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:131
		_go_fuzz_dep_.CoverTab[2184]++
										v[i], v[len(v)-1-i] = v[len(v)-1-i], v[i]
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:132
		// _ = "end of CoverTab[2184]"
	}
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:133
	// _ = "end of CoverTab[2183]"
}

//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:134
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/crypto/internal/nistec/fiat/p384.go:134
var _ = _go_fuzz_dep_.CoverTab
