// Copyright 2022 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by generate.go. DO NOT EDIT.

//line /usr/local/go/src/crypto/internal/nistec/p521.go:7
package nistec

//line /usr/local/go/src/crypto/internal/nistec/p521.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/p521.go:7
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:7
)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:7
import (
//line /usr/local/go/src/crypto/internal/nistec/p521.go:7
	_atomic_ "sync/atomic"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:7
)

import (
	"crypto/internal/nistec/fiat"
	"crypto/subtle"
	"errors"
	"sync"
)

// p521ElementLength is the length of an element of the base or scalar field,
//line /usr/local/go/src/crypto/internal/nistec/p521.go:16
// which have the same bytes length for all NIST P curves.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:18
const p521ElementLength = 66

// P521Point is a P521 point. The zero value is NOT valid.
type P521Point struct {
	// The point is represented in projective coordinates (X:Y:Z),
	// where x = X/Z and y = Y/Z.
	x, y, z *fiat.P521Element
}

// NewP521Point returns a new P521Point representing the point at infinity point.
func NewP521Point() *P521Point {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:28
	_go_fuzz_dep_.CoverTab[2687]++
								return &P521Point{
		x:	new(fiat.P521Element),
		y:	new(fiat.P521Element).One(),
		z:	new(fiat.P521Element),
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:33
	// _ = "end of CoverTab[2687]"
}

// SetGenerator sets p to the canonical generator and returns p.
func (p *P521Point) SetGenerator() *P521Point {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:37
	_go_fuzz_dep_.CoverTab[2688]++
								p.x.SetBytes([]byte{0x0, 0xc6, 0x85, 0x8e, 0x6, 0xb7, 0x4, 0x4, 0xe9, 0xcd, 0x9e, 0x3e, 0xcb, 0x66, 0x23, 0x95, 0xb4, 0x42, 0x9c, 0x64, 0x81, 0x39, 0x5, 0x3f, 0xb5, 0x21, 0xf8, 0x28, 0xaf, 0x60, 0x6b, 0x4d, 0x3d, 0xba, 0xa1, 0x4b, 0x5e, 0x77, 0xef, 0xe7, 0x59, 0x28, 0xfe, 0x1d, 0xc1, 0x27, 0xa2, 0xff, 0xa8, 0xde, 0x33, 0x48, 0xb3, 0xc1, 0x85, 0x6a, 0x42, 0x9b, 0xf9, 0x7e, 0x7e, 0x31, 0xc2, 0xe5, 0xbd, 0x66})
								p.y.SetBytes([]byte{0x1, 0x18, 0x39, 0x29, 0x6a, 0x78, 0x9a, 0x3b, 0xc0, 0x4, 0x5c, 0x8a, 0x5f, 0xb4, 0x2c, 0x7d, 0x1b, 0xd9, 0x98, 0xf5, 0x44, 0x49, 0x57, 0x9b, 0x44, 0x68, 0x17, 0xaf, 0xbd, 0x17, 0x27, 0x3e, 0x66, 0x2c, 0x97, 0xee, 0x72, 0x99, 0x5e, 0xf4, 0x26, 0x40, 0xc5, 0x50, 0xb9, 0x1, 0x3f, 0xad, 0x7, 0x61, 0x35, 0x3c, 0x70, 0x86, 0xa2, 0x72, 0xc2, 0x40, 0x88, 0xbe, 0x94, 0x76, 0x9f, 0xd1, 0x66, 0x50})
								p.z.One()
								return p
//line /usr/local/go/src/crypto/internal/nistec/p521.go:41
	// _ = "end of CoverTab[2688]"
}

// Set sets p = q and returns p.
func (p *P521Point) Set(q *P521Point) *P521Point {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:45
	_go_fuzz_dep_.CoverTab[2689]++
								p.x.Set(q.x)
								p.y.Set(q.y)
								p.z.Set(q.z)
								return p
//line /usr/local/go/src/crypto/internal/nistec/p521.go:49
	// _ = "end of CoverTab[2689]"
}

// SetBytes sets p to the compressed, uncompressed, or infinity value encoded in
//line /usr/local/go/src/crypto/internal/nistec/p521.go:52
// b, as specified in SEC 1, Version 2.0, Section 2.3.4. If the point is not on
//line /usr/local/go/src/crypto/internal/nistec/p521.go:52
// the curve, it returns nil and an error, and the receiver is unchanged.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:52
// Otherwise, it returns p.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:56
func (p *P521Point) SetBytes(b []byte) (*P521Point, error) {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:56
	_go_fuzz_dep_.CoverTab[2690]++
								switch {

	case len(b) == 1 && func() bool {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:59
		_go_fuzz_dep_.CoverTab[2700]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:59
		return b[0] == 0
//line /usr/local/go/src/crypto/internal/nistec/p521.go:59
		// _ = "end of CoverTab[2700]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:59
	}():
//line /usr/local/go/src/crypto/internal/nistec/p521.go:59
		_go_fuzz_dep_.CoverTab[2691]++
									return p.Set(NewP521Point()), nil
//line /usr/local/go/src/crypto/internal/nistec/p521.go:60
		// _ = "end of CoverTab[2691]"

//line /usr/local/go/src/crypto/internal/nistec/p521.go:63
	case len(b) == 1+2*p521ElementLength && func() bool {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:63
		_go_fuzz_dep_.CoverTab[2701]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:63
		return b[0] == 4
//line /usr/local/go/src/crypto/internal/nistec/p521.go:63
		// _ = "end of CoverTab[2701]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:63
	}():
//line /usr/local/go/src/crypto/internal/nistec/p521.go:63
		_go_fuzz_dep_.CoverTab[2692]++
									x, err := new(fiat.P521Element).SetBytes(b[1 : 1+p521ElementLength])
									if err != nil {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:65
			_go_fuzz_dep_.CoverTab[2702]++
										return nil, err
//line /usr/local/go/src/crypto/internal/nistec/p521.go:66
			// _ = "end of CoverTab[2702]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:67
			_go_fuzz_dep_.CoverTab[2703]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:67
			// _ = "end of CoverTab[2703]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:67
		}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:67
		// _ = "end of CoverTab[2692]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:67
		_go_fuzz_dep_.CoverTab[2693]++
									y, err := new(fiat.P521Element).SetBytes(b[1+p521ElementLength:])
									if err != nil {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:69
			_go_fuzz_dep_.CoverTab[2704]++
										return nil, err
//line /usr/local/go/src/crypto/internal/nistec/p521.go:70
			// _ = "end of CoverTab[2704]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:71
			_go_fuzz_dep_.CoverTab[2705]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:71
			// _ = "end of CoverTab[2705]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:71
		}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:71
		// _ = "end of CoverTab[2693]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:71
		_go_fuzz_dep_.CoverTab[2694]++
									if err := p521CheckOnCurve(x, y); err != nil {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:72
			_go_fuzz_dep_.CoverTab[2706]++
										return nil, err
//line /usr/local/go/src/crypto/internal/nistec/p521.go:73
			// _ = "end of CoverTab[2706]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:74
			_go_fuzz_dep_.CoverTab[2707]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:74
			// _ = "end of CoverTab[2707]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:74
		}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:74
		// _ = "end of CoverTab[2694]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:74
		_go_fuzz_dep_.CoverTab[2695]++
									p.x.Set(x)
									p.y.Set(y)
									p.z.One()
									return p, nil
//line /usr/local/go/src/crypto/internal/nistec/p521.go:78
		// _ = "end of CoverTab[2695]"

//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
	case len(b) == 1+p521ElementLength && func() bool {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
		_go_fuzz_dep_.CoverTab[2708]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
		return (b[0] == 2 || func() bool {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
			_go_fuzz_dep_.CoverTab[2709]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
			return b[0] == 3
//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
			// _ = "end of CoverTab[2709]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
		}())
//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
		// _ = "end of CoverTab[2708]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
	}():
//line /usr/local/go/src/crypto/internal/nistec/p521.go:81
		_go_fuzz_dep_.CoverTab[2696]++
									x, err := new(fiat.P521Element).SetBytes(b[1:])
									if err != nil {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:83
			_go_fuzz_dep_.CoverTab[2710]++
										return nil, err
//line /usr/local/go/src/crypto/internal/nistec/p521.go:84
			// _ = "end of CoverTab[2710]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:85
			_go_fuzz_dep_.CoverTab[2711]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:85
			// _ = "end of CoverTab[2711]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:85
		}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:85
		// _ = "end of CoverTab[2696]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:85
		_go_fuzz_dep_.CoverTab[2697]++

//line /usr/local/go/src/crypto/internal/nistec/p521.go:88
		y := p521Polynomial(new(fiat.P521Element), x)
		if !p521Sqrt(y, y) {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:89
			_go_fuzz_dep_.CoverTab[2712]++
										return nil, errors.New("invalid P521 compressed point encoding")
//line /usr/local/go/src/crypto/internal/nistec/p521.go:90
			// _ = "end of CoverTab[2712]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:91
			_go_fuzz_dep_.CoverTab[2713]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:91
			// _ = "end of CoverTab[2713]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:91
		}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:91
		// _ = "end of CoverTab[2697]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:91
		_go_fuzz_dep_.CoverTab[2698]++

//line /usr/local/go/src/crypto/internal/nistec/p521.go:95
		otherRoot := new(fiat.P521Element)
									otherRoot.Sub(otherRoot, y)
									cond := y.Bytes()[p521ElementLength-1]&1 ^ b[0]&1
									y.Select(otherRoot, y, int(cond))

									p.x.Set(x)
									p.y.Set(y)
									p.z.One()
									return p, nil
//line /usr/local/go/src/crypto/internal/nistec/p521.go:103
		// _ = "end of CoverTab[2698]"

	default:
//line /usr/local/go/src/crypto/internal/nistec/p521.go:105
		_go_fuzz_dep_.CoverTab[2699]++
									return nil, errors.New("invalid P521 point encoding")
//line /usr/local/go/src/crypto/internal/nistec/p521.go:106
		// _ = "end of CoverTab[2699]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:107
	// _ = "end of CoverTab[2690]"
}

var _p521B *fiat.P521Element
var _p521BOnce sync.Once

func p521B() *fiat.P521Element {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:113
	_go_fuzz_dep_.CoverTab[2714]++
								_p521BOnce.Do(func() {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:114
		_go_fuzz_dep_.CoverTab[2716]++
									_p521B, _ = new(fiat.P521Element).SetBytes([]byte{0x0, 0x51, 0x95, 0x3e, 0xb9, 0x61, 0x8e, 0x1c, 0x9a, 0x1f, 0x92, 0x9a, 0x21, 0xa0, 0xb6, 0x85, 0x40, 0xee, 0xa2, 0xda, 0x72, 0x5b, 0x99, 0xb3, 0x15, 0xf3, 0xb8, 0xb4, 0x89, 0x91, 0x8e, 0xf1, 0x9, 0xe1, 0x56, 0x19, 0x39, 0x51, 0xec, 0x7e, 0x93, 0x7b, 0x16, 0x52, 0xc0, 0xbd, 0x3b, 0xb1, 0xbf, 0x7, 0x35, 0x73, 0xdf, 0x88, 0x3d, 0x2c, 0x34, 0xf1, 0xef, 0x45, 0x1f, 0xd4, 0x6b, 0x50, 0x3f, 0x0})
//line /usr/local/go/src/crypto/internal/nistec/p521.go:115
		// _ = "end of CoverTab[2716]"
	})
//line /usr/local/go/src/crypto/internal/nistec/p521.go:116
	// _ = "end of CoverTab[2714]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:116
	_go_fuzz_dep_.CoverTab[2715]++
								return _p521B
//line /usr/local/go/src/crypto/internal/nistec/p521.go:117
	// _ = "end of CoverTab[2715]"
}

// p521Polynomial sets y2 to x³ - 3x + b, and returns y2.
func p521Polynomial(y2, x *fiat.P521Element) *fiat.P521Element {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:121
	_go_fuzz_dep_.CoverTab[2717]++
								y2.Square(x)
								y2.Mul(y2, x)

								threeX := new(fiat.P521Element).Add(x, x)
								threeX.Add(threeX, x)
								y2.Sub(y2, threeX)

								return y2.Add(y2, p521B())
//line /usr/local/go/src/crypto/internal/nistec/p521.go:129
	// _ = "end of CoverTab[2717]"
}

func p521CheckOnCurve(x, y *fiat.P521Element) error {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:132
	_go_fuzz_dep_.CoverTab[2718]++

								rhs := p521Polynomial(new(fiat.P521Element), x)
								lhs := new(fiat.P521Element).Square(y)
								if rhs.Equal(lhs) != 1 {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:136
		_go_fuzz_dep_.CoverTab[2720]++
									return errors.New("P521 point not on curve")
//line /usr/local/go/src/crypto/internal/nistec/p521.go:137
		// _ = "end of CoverTab[2720]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:138
		_go_fuzz_dep_.CoverTab[2721]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:138
		// _ = "end of CoverTab[2721]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:138
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:138
	// _ = "end of CoverTab[2718]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:138
	_go_fuzz_dep_.CoverTab[2719]++
								return nil
//line /usr/local/go/src/crypto/internal/nistec/p521.go:139
	// _ = "end of CoverTab[2719]"
}

// Bytes returns the uncompressed or infinity encoding of p, as specified in
//line /usr/local/go/src/crypto/internal/nistec/p521.go:142
// SEC 1, Version 2.0, Section 2.3.3. Note that the encoding of the point at
//line /usr/local/go/src/crypto/internal/nistec/p521.go:142
// infinity is shorter than all other encodings.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:145
func (p *P521Point) Bytes() []byte {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:145
	_go_fuzz_dep_.CoverTab[2722]++
	// This function is outlined to make the allocations inline in the caller
								// rather than happen on the heap.
								var out [1 + 2*p521ElementLength]byte
								return p.bytes(&out)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:149
	// _ = "end of CoverTab[2722]"
}

func (p *P521Point) bytes(out *[1 + 2*p521ElementLength]byte) []byte {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:152
	_go_fuzz_dep_.CoverTab[2723]++
								if p.z.IsZero() == 1 {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:153
		_go_fuzz_dep_.CoverTab[2725]++
									return append(out[:0], 0)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:154
		// _ = "end of CoverTab[2725]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:155
		_go_fuzz_dep_.CoverTab[2726]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:155
		// _ = "end of CoverTab[2726]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:155
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:155
	// _ = "end of CoverTab[2723]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:155
	_go_fuzz_dep_.CoverTab[2724]++

								zinv := new(fiat.P521Element).Invert(p.z)
								x := new(fiat.P521Element).Mul(p.x, zinv)
								y := new(fiat.P521Element).Mul(p.y, zinv)

								buf := append(out[:0], 4)
								buf = append(buf, x.Bytes()...)
								buf = append(buf, y.Bytes()...)
								return buf
//line /usr/local/go/src/crypto/internal/nistec/p521.go:164
	// _ = "end of CoverTab[2724]"
}

// BytesX returns the encoding of the x-coordinate of p, as specified in SEC 1,
//line /usr/local/go/src/crypto/internal/nistec/p521.go:167
// Version 2.0, Section 2.3.5, or an error if p is the point at infinity.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:169
func (p *P521Point) BytesX() ([]byte, error) {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:169
	_go_fuzz_dep_.CoverTab[2727]++
	// This function is outlined to make the allocations inline in the caller
								// rather than happen on the heap.
								var out [p521ElementLength]byte
								return p.bytesX(&out)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:173
	// _ = "end of CoverTab[2727]"
}

func (p *P521Point) bytesX(out *[p521ElementLength]byte) ([]byte, error) {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:176
	_go_fuzz_dep_.CoverTab[2728]++
								if p.z.IsZero() == 1 {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:177
		_go_fuzz_dep_.CoverTab[2730]++
									return nil, errors.New("P521 point is the point at infinity")
//line /usr/local/go/src/crypto/internal/nistec/p521.go:178
		// _ = "end of CoverTab[2730]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:179
		_go_fuzz_dep_.CoverTab[2731]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:179
		// _ = "end of CoverTab[2731]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:179
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:179
	// _ = "end of CoverTab[2728]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:179
	_go_fuzz_dep_.CoverTab[2729]++

								zinv := new(fiat.P521Element).Invert(p.z)
								x := new(fiat.P521Element).Mul(p.x, zinv)

								return append(out[:0], x.Bytes()...), nil
//line /usr/local/go/src/crypto/internal/nistec/p521.go:184
	// _ = "end of CoverTab[2729]"
}

// BytesCompressed returns the compressed or infinity encoding of p, as
//line /usr/local/go/src/crypto/internal/nistec/p521.go:187
// specified in SEC 1, Version 2.0, Section 2.3.3. Note that the encoding of the
//line /usr/local/go/src/crypto/internal/nistec/p521.go:187
// point at infinity is shorter than all other encodings.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:190
func (p *P521Point) BytesCompressed() []byte {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:190
	_go_fuzz_dep_.CoverTab[2732]++
	// This function is outlined to make the allocations inline in the caller
								// rather than happen on the heap.
								var out [1 + p521ElementLength]byte
								return p.bytesCompressed(&out)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:194
	// _ = "end of CoverTab[2732]"
}

func (p *P521Point) bytesCompressed(out *[1 + p521ElementLength]byte) []byte {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:197
	_go_fuzz_dep_.CoverTab[2733]++
								if p.z.IsZero() == 1 {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:198
		_go_fuzz_dep_.CoverTab[2735]++
									return append(out[:0], 0)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:199
		// _ = "end of CoverTab[2735]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:200
		_go_fuzz_dep_.CoverTab[2736]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:200
		// _ = "end of CoverTab[2736]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:200
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:200
	// _ = "end of CoverTab[2733]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:200
	_go_fuzz_dep_.CoverTab[2734]++

								zinv := new(fiat.P521Element).Invert(p.z)
								x := new(fiat.P521Element).Mul(p.x, zinv)
								y := new(fiat.P521Element).Mul(p.y, zinv)

//line /usr/local/go/src/crypto/internal/nistec/p521.go:208
	buf := append(out[:0], 2)
								buf[0] |= y.Bytes()[p521ElementLength-1] & 1
								buf = append(buf, x.Bytes()...)
								return buf
//line /usr/local/go/src/crypto/internal/nistec/p521.go:211
	// _ = "end of CoverTab[2734]"
}

// Add sets q = p1 + p2, and returns q. The points may overlap.
func (q *P521Point) Add(p1, p2 *P521Point) *P521Point {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:215
	_go_fuzz_dep_.CoverTab[2737]++

//line /usr/local/go/src/crypto/internal/nistec/p521.go:219
	t0 := new(fiat.P521Element).Mul(p1.x, p2.x)
								t1 := new(fiat.P521Element).Mul(p1.y, p2.y)
								t2 := new(fiat.P521Element).Mul(p1.z, p2.z)
								t3 := new(fiat.P521Element).Add(p1.x, p1.y)
								t4 := new(fiat.P521Element).Add(p2.x, p2.y)
								t3.Mul(t3, t4)
								t4.Add(t0, t1)
								t3.Sub(t3, t4)
								t4.Add(p1.y, p1.z)
								x3 := new(fiat.P521Element).Add(p2.y, p2.z)
								t4.Mul(t4, x3)
								x3.Add(t1, t2)
								t4.Sub(t4, x3)
								x3.Add(p1.x, p1.z)
								y3 := new(fiat.P521Element).Add(p2.x, p2.z)
								x3.Mul(x3, y3)
								y3.Add(t0, t2)
								y3.Sub(x3, y3)
								z3 := new(fiat.P521Element).Mul(p521B(), t2)
								x3.Sub(y3, z3)
								z3.Add(x3, x3)
								x3.Add(x3, z3)
								z3.Sub(t1, x3)
								x3.Add(t1, x3)
								y3.Mul(p521B(), y3)
								t1.Add(t2, t2)
								t2.Add(t1, t2)
								y3.Sub(y3, t2)
								y3.Sub(y3, t0)
								t1.Add(y3, y3)
								y3.Add(t1, y3)
								t1.Add(t0, t0)
								t0.Add(t1, t0)
								t0.Sub(t0, t2)
								t1.Mul(t4, y3)
								t2.Mul(t0, y3)
								y3.Mul(x3, z3)
								y3.Add(y3, t2)
								x3.Mul(t3, x3)
								x3.Sub(x3, t1)
								z3.Mul(t4, z3)
								t1.Mul(t3, t0)
								z3.Add(z3, t1)

								q.x.Set(x3)
								q.y.Set(y3)
								q.z.Set(z3)
								return q
//line /usr/local/go/src/crypto/internal/nistec/p521.go:266
	// _ = "end of CoverTab[2737]"
}

// Double sets q = p + p, and returns q. The points may overlap.
func (q *P521Point) Double(p *P521Point) *P521Point {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:270
	_go_fuzz_dep_.CoverTab[2738]++

//line /usr/local/go/src/crypto/internal/nistec/p521.go:274
	t0 := new(fiat.P521Element).Square(p.x)
								t1 := new(fiat.P521Element).Square(p.y)
								t2 := new(fiat.P521Element).Square(p.z)
								t3 := new(fiat.P521Element).Mul(p.x, p.y)
								t3.Add(t3, t3)
								z3 := new(fiat.P521Element).Mul(p.x, p.z)
								z3.Add(z3, z3)
								y3 := new(fiat.P521Element).Mul(p521B(), t2)
								y3.Sub(y3, z3)
								x3 := new(fiat.P521Element).Add(y3, y3)
								y3.Add(x3, y3)
								x3.Sub(t1, y3)
								y3.Add(t1, y3)
								y3.Mul(x3, y3)
								x3.Mul(x3, t3)
								t3.Add(t2, t2)
								t2.Add(t2, t3)
								z3.Mul(p521B(), z3)
								z3.Sub(z3, t2)
								z3.Sub(z3, t0)
								t3.Add(z3, z3)
								z3.Add(z3, t3)
								t3.Add(t0, t0)
								t0.Add(t3, t0)
								t0.Sub(t0, t2)
								t0.Mul(t0, z3)
								y3.Add(y3, t0)
								t0.Mul(p.y, p.z)
								t0.Add(t0, t0)
								z3.Mul(t0, z3)
								x3.Sub(x3, z3)
								z3.Mul(t0, t1)
								z3.Add(z3, z3)
								z3.Add(z3, z3)

								q.x.Set(x3)
								q.y.Set(y3)
								q.z.Set(z3)
								return q
//line /usr/local/go/src/crypto/internal/nistec/p521.go:312
	// _ = "end of CoverTab[2738]"
}

// Select sets q to p1 if cond == 1, and to p2 if cond == 0.
func (q *P521Point) Select(p1, p2 *P521Point, cond int) *P521Point {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:316
	_go_fuzz_dep_.CoverTab[2739]++
								q.x.Select(p1.x, p2.x, cond)
								q.y.Select(p1.y, p2.y, cond)
								q.z.Select(p1.z, p2.z, cond)
								return q
//line /usr/local/go/src/crypto/internal/nistec/p521.go:320
	// _ = "end of CoverTab[2739]"
}

// A p521Table holds the first 15 multiples of a point at offset -1, so [1]P
//line /usr/local/go/src/crypto/internal/nistec/p521.go:323
// is at table[0], [15]P is at table[14], and [0]P is implicitly the identity
//line /usr/local/go/src/crypto/internal/nistec/p521.go:323
// point.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:326
type p521Table [15]*P521Point

// Select selects the n-th multiple of the table base point into p. It works in
//line /usr/local/go/src/crypto/internal/nistec/p521.go:328
// constant time by iterating over every entry of the table. n must be in [0, 15].
//line /usr/local/go/src/crypto/internal/nistec/p521.go:330
func (table *p521Table) Select(p *P521Point, n uint8) {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:330
	_go_fuzz_dep_.CoverTab[2740]++
								if n >= 16 {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:331
		_go_fuzz_dep_.CoverTab[2742]++
									panic("nistec: internal error: p521Table called with out-of-bounds value")
//line /usr/local/go/src/crypto/internal/nistec/p521.go:332
		// _ = "end of CoverTab[2742]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:333
		_go_fuzz_dep_.CoverTab[2743]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:333
		// _ = "end of CoverTab[2743]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:333
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:333
	// _ = "end of CoverTab[2740]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:333
	_go_fuzz_dep_.CoverTab[2741]++
								p.Set(NewP521Point())
								for i := uint8(1); i < 16; i++ {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:335
		_go_fuzz_dep_.CoverTab[2744]++
									cond := subtle.ConstantTimeByteEq(i, n)
									p.Select(table[i-1], p, cond)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:337
		// _ = "end of CoverTab[2744]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:338
	// _ = "end of CoverTab[2741]"
}

// ScalarMult sets p = scalar * q, and returns p.
func (p *P521Point) ScalarMult(q *P521Point, scalar []byte) (*P521Point, error) {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:342
	_go_fuzz_dep_.CoverTab[2745]++
	// Compute a p521Table for the base point q. The explicit NewP521Point
	// calls get inlined, letting the allocations live on the stack.
	var table = p521Table{NewP521Point(), NewP521Point(), NewP521Point(),
		NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(),
		NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point(),
		NewP521Point(), NewP521Point(), NewP521Point(), NewP521Point()}
	table[0].Set(q)
	for i := 1; i < 15; i += 2 {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:350
		_go_fuzz_dep_.CoverTab[2748]++
									table[i].Double(table[i/2])
									table[i+1].Add(table[i], q)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:352
		// _ = "end of CoverTab[2748]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:353
	// _ = "end of CoverTab[2745]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:353
	_go_fuzz_dep_.CoverTab[2746]++

//line /usr/local/go/src/crypto/internal/nistec/p521.go:357
	t := NewP521Point()
	p.Set(NewP521Point())
	for i, byte := range scalar {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:359
		_go_fuzz_dep_.CoverTab[2749]++

//line /usr/local/go/src/crypto/internal/nistec/p521.go:362
		if i != 0 {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:362
			_go_fuzz_dep_.CoverTab[2751]++
										p.Double(p)
										p.Double(p)
										p.Double(p)
										p.Double(p)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:366
			// _ = "end of CoverTab[2751]"
		} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:367
			_go_fuzz_dep_.CoverTab[2752]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:367
			// _ = "end of CoverTab[2752]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:367
		}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:367
		// _ = "end of CoverTab[2749]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:367
		_go_fuzz_dep_.CoverTab[2750]++

									windowValue := byte >> 4
									table.Select(t, windowValue)
									p.Add(p, t)

									p.Double(p)
									p.Double(p)
									p.Double(p)
									p.Double(p)

									windowValue = byte & 0b1111
									table.Select(t, windowValue)
									p.Add(p, t)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:380
		// _ = "end of CoverTab[2750]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:381
	// _ = "end of CoverTab[2746]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:381
	_go_fuzz_dep_.CoverTab[2747]++

								return p, nil
//line /usr/local/go/src/crypto/internal/nistec/p521.go:383
	// _ = "end of CoverTab[2747]"
}

var p521GeneratorTable *[p521ElementLength * 2]p521Table
var p521GeneratorTableOnce sync.Once

// generatorTable returns a sequence of p521Tables. The first table contains
//line /usr/local/go/src/crypto/internal/nistec/p521.go:389
// multiples of G. Each successive table is the previous table doubled four
//line /usr/local/go/src/crypto/internal/nistec/p521.go:389
// times.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:392
func (p *P521Point) generatorTable() *[p521ElementLength * 2]p521Table {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:392
	_go_fuzz_dep_.CoverTab[2753]++
								p521GeneratorTableOnce.Do(func() {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:393
		_go_fuzz_dep_.CoverTab[2755]++
									p521GeneratorTable = new([p521ElementLength * 2]p521Table)
									base := NewP521Point().SetGenerator()
									for i := 0; i < p521ElementLength*2; i++ {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:396
			_go_fuzz_dep_.CoverTab[2756]++
										p521GeneratorTable[i][0] = NewP521Point().Set(base)
										for j := 1; j < 15; j++ {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:398
				_go_fuzz_dep_.CoverTab[2758]++
											p521GeneratorTable[i][j] = NewP521Point().Add(p521GeneratorTable[i][j-1], base)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:399
				// _ = "end of CoverTab[2758]"
			}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:400
			// _ = "end of CoverTab[2756]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:400
			_go_fuzz_dep_.CoverTab[2757]++
										base.Double(base)
										base.Double(base)
										base.Double(base)
										base.Double(base)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:404
			// _ = "end of CoverTab[2757]"
		}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:405
		// _ = "end of CoverTab[2755]"
	})
//line /usr/local/go/src/crypto/internal/nistec/p521.go:406
	// _ = "end of CoverTab[2753]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:406
	_go_fuzz_dep_.CoverTab[2754]++
								return p521GeneratorTable
//line /usr/local/go/src/crypto/internal/nistec/p521.go:407
	// _ = "end of CoverTab[2754]"
}

// ScalarBaseMult sets p = scalar * B, where B is the canonical generator, and
//line /usr/local/go/src/crypto/internal/nistec/p521.go:410
// returns p.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:412
func (p *P521Point) ScalarBaseMult(scalar []byte) (*P521Point, error) {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:412
	_go_fuzz_dep_.CoverTab[2759]++
								if len(scalar) != p521ElementLength {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:413
		_go_fuzz_dep_.CoverTab[2762]++
									return nil, errors.New("invalid scalar length")
//line /usr/local/go/src/crypto/internal/nistec/p521.go:414
		// _ = "end of CoverTab[2762]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:415
		_go_fuzz_dep_.CoverTab[2763]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:415
		// _ = "end of CoverTab[2763]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:415
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:415
	// _ = "end of CoverTab[2759]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:415
	_go_fuzz_dep_.CoverTab[2760]++
								tables := p.generatorTable()

//line /usr/local/go/src/crypto/internal/nistec/p521.go:424
	t := NewP521Point()
	p.Set(NewP521Point())
	tableIndex := len(tables) - 1
	for _, byte := range scalar {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:427
		_go_fuzz_dep_.CoverTab[2764]++
									windowValue := byte >> 4
									tables[tableIndex].Select(t, windowValue)
									p.Add(p, t)
									tableIndex--

									windowValue = byte & 0b1111
									tables[tableIndex].Select(t, windowValue)
									p.Add(p, t)
									tableIndex--
//line /usr/local/go/src/crypto/internal/nistec/p521.go:436
		// _ = "end of CoverTab[2764]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:437
	// _ = "end of CoverTab[2760]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:437
	_go_fuzz_dep_.CoverTab[2761]++

								return p, nil
//line /usr/local/go/src/crypto/internal/nistec/p521.go:439
	// _ = "end of CoverTab[2761]"
}

// p521Sqrt sets e to a square root of x. If x is not a square, p521Sqrt returns
//line /usr/local/go/src/crypto/internal/nistec/p521.go:442
// false and e is unchanged. e and x can overlap.
//line /usr/local/go/src/crypto/internal/nistec/p521.go:444
func p521Sqrt(e, x *fiat.P521Element) (isSquare bool) {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:444
	_go_fuzz_dep_.CoverTab[2765]++
								candidate := new(fiat.P521Element)
								p521SqrtCandidate(candidate, x)
								square := new(fiat.P521Element).Square(candidate)
								if square.Equal(x) != 1 {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:448
		_go_fuzz_dep_.CoverTab[2767]++
									return false
//line /usr/local/go/src/crypto/internal/nistec/p521.go:449
		// _ = "end of CoverTab[2767]"
	} else {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:450
		_go_fuzz_dep_.CoverTab[2768]++
//line /usr/local/go/src/crypto/internal/nistec/p521.go:450
		// _ = "end of CoverTab[2768]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:450
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:450
	// _ = "end of CoverTab[2765]"
//line /usr/local/go/src/crypto/internal/nistec/p521.go:450
	_go_fuzz_dep_.CoverTab[2766]++
								e.Set(candidate)
								return true
//line /usr/local/go/src/crypto/internal/nistec/p521.go:452
	// _ = "end of CoverTab[2766]"
}

// p521SqrtCandidate sets z to a square root candidate for x. z and x must not overlap.
func p521SqrtCandidate(z, x *fiat.P521Element) {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:456
	_go_fuzz_dep_.CoverTab[2769]++

//line /usr/local/go/src/crypto/internal/nistec/p521.go:465
	z.Square(x)
	for s := 1; s < 519; s++ {
//line /usr/local/go/src/crypto/internal/nistec/p521.go:466
		_go_fuzz_dep_.CoverTab[2770]++
									z.Square(z)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:467
		// _ = "end of CoverTab[2770]"
	}
//line /usr/local/go/src/crypto/internal/nistec/p521.go:468
	// _ = "end of CoverTab[2769]"
}

//line /usr/local/go/src/crypto/internal/nistec/p521.go:469
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/crypto/internal/nistec/p521.go:469
var _ = _go_fuzz_dep_.CoverTab
