// Code generated by "stringer -type=SignatureScheme,CurveID,ClientAuthType -output=common_string.go"; DO NOT EDIT.

//line /usr/local/go/src/crypto/tls/common_string.go:3
package tls

//line /usr/local/go/src/crypto/tls/common_string.go:3
import (
//line /usr/local/go/src/crypto/tls/common_string.go:3
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/crypto/tls/common_string.go:3
)
//line /usr/local/go/src/crypto/tls/common_string.go:3
import (
//line /usr/local/go/src/crypto/tls/common_string.go:3
	_atomic_ "sync/atomic"
//line /usr/local/go/src/crypto/tls/common_string.go:3
)

import "strconv"

func _() {
//line /usr/local/go/src/crypto/tls/common_string.go:7
	_go_fuzz_dep_.CoverTab[21588]++
	// An "invalid array index" compiler error signifies that the constant values have changed.
								// Re-run the stringer command to generate them again.
								var x [1]struct{}
								_ = x[PKCS1WithSHA256-1025]
								_ = x[PKCS1WithSHA384-1281]
								_ = x[PKCS1WithSHA512-1537]
								_ = x[PSSWithSHA256-2052]
								_ = x[PSSWithSHA384-2053]
								_ = x[PSSWithSHA512-2054]
								_ = x[ECDSAWithP256AndSHA256-1027]
								_ = x[ECDSAWithP384AndSHA384-1283]
								_ = x[ECDSAWithP521AndSHA512-1539]
								_ = x[Ed25519-2055]
								_ = x[PKCS1WithSHA1-513]
								_ = x[ECDSAWithSHA1-515]
//line /usr/local/go/src/crypto/tls/common_string.go:22
	// _ = "end of CoverTab[21588]"
}

const (
	_SignatureScheme_name_0	= "PKCS1WithSHA1"
	_SignatureScheme_name_1	= "ECDSAWithSHA1"
	_SignatureScheme_name_2	= "PKCS1WithSHA256"
	_SignatureScheme_name_3	= "ECDSAWithP256AndSHA256"
	_SignatureScheme_name_4	= "PKCS1WithSHA384"
	_SignatureScheme_name_5	= "ECDSAWithP384AndSHA384"
	_SignatureScheme_name_6	= "PKCS1WithSHA512"
	_SignatureScheme_name_7	= "ECDSAWithP521AndSHA512"
	_SignatureScheme_name_8	= "PSSWithSHA256PSSWithSHA384PSSWithSHA512Ed25519"
)

var (
	_SignatureScheme_index_8 = [...]uint8{0, 13, 26, 39, 46}
)

func (i SignatureScheme) String() string {
//line /usr/local/go/src/crypto/tls/common_string.go:41
	_go_fuzz_dep_.CoverTab[21589]++
								switch {
	case i == 513:
//line /usr/local/go/src/crypto/tls/common_string.go:43
		_go_fuzz_dep_.CoverTab[21590]++
									return _SignatureScheme_name_0
//line /usr/local/go/src/crypto/tls/common_string.go:44
		// _ = "end of CoverTab[21590]"
	case i == 515:
//line /usr/local/go/src/crypto/tls/common_string.go:45
		_go_fuzz_dep_.CoverTab[21591]++
									return _SignatureScheme_name_1
//line /usr/local/go/src/crypto/tls/common_string.go:46
		// _ = "end of CoverTab[21591]"
	case i == 1025:
//line /usr/local/go/src/crypto/tls/common_string.go:47
		_go_fuzz_dep_.CoverTab[21592]++
									return _SignatureScheme_name_2
//line /usr/local/go/src/crypto/tls/common_string.go:48
		// _ = "end of CoverTab[21592]"
	case i == 1027:
//line /usr/local/go/src/crypto/tls/common_string.go:49
		_go_fuzz_dep_.CoverTab[21593]++
									return _SignatureScheme_name_3
//line /usr/local/go/src/crypto/tls/common_string.go:50
		// _ = "end of CoverTab[21593]"
	case i == 1281:
//line /usr/local/go/src/crypto/tls/common_string.go:51
		_go_fuzz_dep_.CoverTab[21594]++
									return _SignatureScheme_name_4
//line /usr/local/go/src/crypto/tls/common_string.go:52
		// _ = "end of CoverTab[21594]"
	case i == 1283:
//line /usr/local/go/src/crypto/tls/common_string.go:53
		_go_fuzz_dep_.CoverTab[21595]++
									return _SignatureScheme_name_5
//line /usr/local/go/src/crypto/tls/common_string.go:54
		// _ = "end of CoverTab[21595]"
	case i == 1537:
//line /usr/local/go/src/crypto/tls/common_string.go:55
		_go_fuzz_dep_.CoverTab[21596]++
									return _SignatureScheme_name_6
//line /usr/local/go/src/crypto/tls/common_string.go:56
		// _ = "end of CoverTab[21596]"
	case i == 1539:
//line /usr/local/go/src/crypto/tls/common_string.go:57
		_go_fuzz_dep_.CoverTab[21597]++
									return _SignatureScheme_name_7
//line /usr/local/go/src/crypto/tls/common_string.go:58
		// _ = "end of CoverTab[21597]"
	case 2052 <= i && func() bool {
//line /usr/local/go/src/crypto/tls/common_string.go:59
		_go_fuzz_dep_.CoverTab[21600]++
//line /usr/local/go/src/crypto/tls/common_string.go:59
		return i <= 2055
//line /usr/local/go/src/crypto/tls/common_string.go:59
		// _ = "end of CoverTab[21600]"
//line /usr/local/go/src/crypto/tls/common_string.go:59
	}():
//line /usr/local/go/src/crypto/tls/common_string.go:59
		_go_fuzz_dep_.CoverTab[21598]++
									i -= 2052
									return _SignatureScheme_name_8[_SignatureScheme_index_8[i]:_SignatureScheme_index_8[i+1]]
//line /usr/local/go/src/crypto/tls/common_string.go:61
		// _ = "end of CoverTab[21598]"
	default:
//line /usr/local/go/src/crypto/tls/common_string.go:62
		_go_fuzz_dep_.CoverTab[21599]++
									return "SignatureScheme(" + strconv.FormatInt(int64(i), 10) + ")"
//line /usr/local/go/src/crypto/tls/common_string.go:63
		// _ = "end of CoverTab[21599]"
	}
//line /usr/local/go/src/crypto/tls/common_string.go:64
	// _ = "end of CoverTab[21589]"
}
func _() {
//line /usr/local/go/src/crypto/tls/common_string.go:66
	_go_fuzz_dep_.CoverTab[21601]++
	// An "invalid array index" compiler error signifies that the constant values have changed.
								// Re-run the stringer command to generate them again.
								var x [1]struct{}
								_ = x[CurveP256-23]
								_ = x[CurveP384-24]
								_ = x[CurveP521-25]
								_ = x[X25519-29]
//line /usr/local/go/src/crypto/tls/common_string.go:73
	// _ = "end of CoverTab[21601]"
}

const (
	_CurveID_name_0	= "CurveP256CurveP384CurveP521"
	_CurveID_name_1	= "X25519"
)

var (
	_CurveID_index_0 = [...]uint8{0, 9, 18, 27}
)

func (i CurveID) String() string {
//line /usr/local/go/src/crypto/tls/common_string.go:85
	_go_fuzz_dep_.CoverTab[21602]++
								switch {
	case 23 <= i && func() bool {
//line /usr/local/go/src/crypto/tls/common_string.go:87
		_go_fuzz_dep_.CoverTab[21606]++
//line /usr/local/go/src/crypto/tls/common_string.go:87
		return i <= 25
//line /usr/local/go/src/crypto/tls/common_string.go:87
		// _ = "end of CoverTab[21606]"
//line /usr/local/go/src/crypto/tls/common_string.go:87
	}():
//line /usr/local/go/src/crypto/tls/common_string.go:87
		_go_fuzz_dep_.CoverTab[21603]++
									i -= 23
									return _CurveID_name_0[_CurveID_index_0[i]:_CurveID_index_0[i+1]]
//line /usr/local/go/src/crypto/tls/common_string.go:89
		// _ = "end of CoverTab[21603]"
	case i == 29:
//line /usr/local/go/src/crypto/tls/common_string.go:90
		_go_fuzz_dep_.CoverTab[21604]++
									return _CurveID_name_1
//line /usr/local/go/src/crypto/tls/common_string.go:91
		// _ = "end of CoverTab[21604]"
	default:
//line /usr/local/go/src/crypto/tls/common_string.go:92
		_go_fuzz_dep_.CoverTab[21605]++
									return "CurveID(" + strconv.FormatInt(int64(i), 10) + ")"
//line /usr/local/go/src/crypto/tls/common_string.go:93
		// _ = "end of CoverTab[21605]"
	}
//line /usr/local/go/src/crypto/tls/common_string.go:94
	// _ = "end of CoverTab[21602]"
}
func _() {
//line /usr/local/go/src/crypto/tls/common_string.go:96
	_go_fuzz_dep_.CoverTab[21607]++
	// An "invalid array index" compiler error signifies that the constant values have changed.
								// Re-run the stringer command to generate them again.
								var x [1]struct{}
								_ = x[NoClientCert-0]
								_ = x[RequestClientCert-1]
								_ = x[RequireAnyClientCert-2]
								_ = x[VerifyClientCertIfGiven-3]
								_ = x[RequireAndVerifyClientCert-4]
//line /usr/local/go/src/crypto/tls/common_string.go:104
	// _ = "end of CoverTab[21607]"
}

const _ClientAuthType_name = "NoClientCertRequestClientCertRequireAnyClientCertVerifyClientCertIfGivenRequireAndVerifyClientCert"

var _ClientAuthType_index = [...]uint8{0, 12, 29, 49, 72, 98}

func (i ClientAuthType) String() string {
//line /usr/local/go/src/crypto/tls/common_string.go:111
	_go_fuzz_dep_.CoverTab[21608]++
								if i < 0 || func() bool {
//line /usr/local/go/src/crypto/tls/common_string.go:112
		_go_fuzz_dep_.CoverTab[21610]++
//line /usr/local/go/src/crypto/tls/common_string.go:112
		return i >= ClientAuthType(len(_ClientAuthType_index)-1)
//line /usr/local/go/src/crypto/tls/common_string.go:112
		// _ = "end of CoverTab[21610]"
//line /usr/local/go/src/crypto/tls/common_string.go:112
	}() {
//line /usr/local/go/src/crypto/tls/common_string.go:112
		_go_fuzz_dep_.CoverTab[21611]++
									return "ClientAuthType(" + strconv.FormatInt(int64(i), 10) + ")"
//line /usr/local/go/src/crypto/tls/common_string.go:113
		// _ = "end of CoverTab[21611]"
	} else {
//line /usr/local/go/src/crypto/tls/common_string.go:114
		_go_fuzz_dep_.CoverTab[21612]++
//line /usr/local/go/src/crypto/tls/common_string.go:114
		// _ = "end of CoverTab[21612]"
//line /usr/local/go/src/crypto/tls/common_string.go:114
	}
//line /usr/local/go/src/crypto/tls/common_string.go:114
	// _ = "end of CoverTab[21608]"
//line /usr/local/go/src/crypto/tls/common_string.go:114
	_go_fuzz_dep_.CoverTab[21609]++
								return _ClientAuthType_name[_ClientAuthType_index[i]:_ClientAuthType_index[i+1]]
//line /usr/local/go/src/crypto/tls/common_string.go:115
	// _ = "end of CoverTab[21609]"
}

//line /usr/local/go/src/crypto/tls/common_string.go:116
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/crypto/tls/common_string.go:116
var _ = _go_fuzz_dep_.CoverTab
