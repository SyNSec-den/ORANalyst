// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.
//go:generate bundle -o socks_bundle.go -prefix socks golang.org/x/net/internal/socks

// Package socks provides a SOCKS version 5 client implementation.
//
// SOCKS protocol version 5 is defined in RFC 1928.
// Username/Password authentication for SOCKS version 5 is defined in
// RFC 1929.
//

//line /usr/local/go/src/net/http/socks_bundle.go:2
//go:generate bundle -o socks_bundle.go -prefix socks golang.org/x/net/internal/socks

//line /usr/local/go/src/net/http/socks_bundle.go:11
package http

//line /usr/local/go/src/net/http/socks_bundle.go:11
import (
//line /usr/local/go/src/net/http/socks_bundle.go:11
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/net/http/socks_bundle.go:11
)
//line /usr/local/go/src/net/http/socks_bundle.go:11
import (
//line /usr/local/go/src/net/http/socks_bundle.go:11
	_atomic_ "sync/atomic"
//line /usr/local/go/src/net/http/socks_bundle.go:11
)

import (
	"context"
	"errors"
	"io"
	"net"
	"strconv"
	"time"
)

var (
	socksnoDeadline		= time.Time{}
	socksaLongTimeAgo	= time.Unix(1, 0)
)

func (d *socksDialer) connect(ctx context.Context, c net.Conn, address string) (_ net.Addr, ctxErr error) {
//line /usr/local/go/src/net/http/socks_bundle.go:27
	_go_fuzz_dep_.CoverTab[43283]++
							host, port, err := sockssplitHostPort(address)
							if err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:29
		_go_fuzz_dep_.CoverTab[43303]++
								return nil, err
//line /usr/local/go/src/net/http/socks_bundle.go:30
		// _ = "end of CoverTab[43303]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:31
		_go_fuzz_dep_.CoverTab[43304]++
//line /usr/local/go/src/net/http/socks_bundle.go:31
		// _ = "end of CoverTab[43304]"
//line /usr/local/go/src/net/http/socks_bundle.go:31
	}
//line /usr/local/go/src/net/http/socks_bundle.go:31
	// _ = "end of CoverTab[43283]"
//line /usr/local/go/src/net/http/socks_bundle.go:31
	_go_fuzz_dep_.CoverTab[43284]++
							if deadline, ok := ctx.Deadline(); ok && func() bool {
//line /usr/local/go/src/net/http/socks_bundle.go:32
		_go_fuzz_dep_.CoverTab[43305]++
//line /usr/local/go/src/net/http/socks_bundle.go:32
		return !deadline.IsZero()
//line /usr/local/go/src/net/http/socks_bundle.go:32
		// _ = "end of CoverTab[43305]"
//line /usr/local/go/src/net/http/socks_bundle.go:32
	}() {
//line /usr/local/go/src/net/http/socks_bundle.go:32
		_go_fuzz_dep_.CoverTab[43306]++
								c.SetDeadline(deadline)
								defer c.SetDeadline(socksnoDeadline)
//line /usr/local/go/src/net/http/socks_bundle.go:34
		// _ = "end of CoverTab[43306]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:35
		_go_fuzz_dep_.CoverTab[43307]++
//line /usr/local/go/src/net/http/socks_bundle.go:35
		// _ = "end of CoverTab[43307]"
//line /usr/local/go/src/net/http/socks_bundle.go:35
	}
//line /usr/local/go/src/net/http/socks_bundle.go:35
	// _ = "end of CoverTab[43284]"
//line /usr/local/go/src/net/http/socks_bundle.go:35
	_go_fuzz_dep_.CoverTab[43285]++
							if ctx != context.Background() {
//line /usr/local/go/src/net/http/socks_bundle.go:36
		_go_fuzz_dep_.CoverTab[43308]++
								errCh := make(chan error, 1)
								done := make(chan struct{})
								defer func() {
//line /usr/local/go/src/net/http/socks_bundle.go:39
			_go_fuzz_dep_.CoverTab[43310]++
									close(done)
									if ctxErr == nil {
//line /usr/local/go/src/net/http/socks_bundle.go:41
				_go_fuzz_dep_.CoverTab[43311]++
										ctxErr = <-errCh
//line /usr/local/go/src/net/http/socks_bundle.go:42
				// _ = "end of CoverTab[43311]"
			} else {
//line /usr/local/go/src/net/http/socks_bundle.go:43
				_go_fuzz_dep_.CoverTab[43312]++
//line /usr/local/go/src/net/http/socks_bundle.go:43
				// _ = "end of CoverTab[43312]"
//line /usr/local/go/src/net/http/socks_bundle.go:43
			}
//line /usr/local/go/src/net/http/socks_bundle.go:43
			// _ = "end of CoverTab[43310]"
		}()
//line /usr/local/go/src/net/http/socks_bundle.go:44
		// _ = "end of CoverTab[43308]"
//line /usr/local/go/src/net/http/socks_bundle.go:44
		_go_fuzz_dep_.CoverTab[43309]++
//line /usr/local/go/src/net/http/socks_bundle.go:44
		_curRoutineNum35_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/socks_bundle.go:44
		_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum35_)
								go func() {
//line /usr/local/go/src/net/http/socks_bundle.go:45
			_go_fuzz_dep_.CoverTab[43313]++
//line /usr/local/go/src/net/http/socks_bundle.go:45
			defer func() {
//line /usr/local/go/src/net/http/socks_bundle.go:45
				_go_fuzz_dep_.CoverTab[43314]++
//line /usr/local/go/src/net/http/socks_bundle.go:45
				_go_fuzz_dep_.RoutineInfo.AddTerminatedRoutineNum(_curRoutineNum35_)
//line /usr/local/go/src/net/http/socks_bundle.go:45
				// _ = "end of CoverTab[43314]"
//line /usr/local/go/src/net/http/socks_bundle.go:45
			}()
									select {
			case <-ctx.Done():
//line /usr/local/go/src/net/http/socks_bundle.go:47
				_go_fuzz_dep_.CoverTab[43315]++
										c.SetDeadline(socksaLongTimeAgo)
										errCh <- ctx.Err()
//line /usr/local/go/src/net/http/socks_bundle.go:49
				// _ = "end of CoverTab[43315]"
			case <-done:
//line /usr/local/go/src/net/http/socks_bundle.go:50
				_go_fuzz_dep_.CoverTab[43316]++
										errCh <- nil
//line /usr/local/go/src/net/http/socks_bundle.go:51
				// _ = "end of CoverTab[43316]"
			}
//line /usr/local/go/src/net/http/socks_bundle.go:52
			// _ = "end of CoverTab[43313]"
		}()
//line /usr/local/go/src/net/http/socks_bundle.go:53
		// _ = "end of CoverTab[43309]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:54
		_go_fuzz_dep_.CoverTab[43317]++
//line /usr/local/go/src/net/http/socks_bundle.go:54
		// _ = "end of CoverTab[43317]"
//line /usr/local/go/src/net/http/socks_bundle.go:54
	}
//line /usr/local/go/src/net/http/socks_bundle.go:54
	// _ = "end of CoverTab[43285]"
//line /usr/local/go/src/net/http/socks_bundle.go:54
	_go_fuzz_dep_.CoverTab[43286]++

							b := make([]byte, 0, 6+len(host))
							b = append(b, socksVersion5)
							if len(d.AuthMethods) == 0 || func() bool {
//line /usr/local/go/src/net/http/socks_bundle.go:58
		_go_fuzz_dep_.CoverTab[43318]++
//line /usr/local/go/src/net/http/socks_bundle.go:58
		return d.Authenticate == nil
//line /usr/local/go/src/net/http/socks_bundle.go:58
		// _ = "end of CoverTab[43318]"
//line /usr/local/go/src/net/http/socks_bundle.go:58
	}() {
//line /usr/local/go/src/net/http/socks_bundle.go:58
		_go_fuzz_dep_.CoverTab[43319]++
								b = append(b, 1, byte(socksAuthMethodNotRequired))
//line /usr/local/go/src/net/http/socks_bundle.go:59
		// _ = "end of CoverTab[43319]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:60
		_go_fuzz_dep_.CoverTab[43320]++
								ams := d.AuthMethods
								if len(ams) > 255 {
//line /usr/local/go/src/net/http/socks_bundle.go:62
			_go_fuzz_dep_.CoverTab[43322]++
									return nil, errors.New("too many authentication methods")
//line /usr/local/go/src/net/http/socks_bundle.go:63
			// _ = "end of CoverTab[43322]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:64
			_go_fuzz_dep_.CoverTab[43323]++
//line /usr/local/go/src/net/http/socks_bundle.go:64
			// _ = "end of CoverTab[43323]"
//line /usr/local/go/src/net/http/socks_bundle.go:64
		}
//line /usr/local/go/src/net/http/socks_bundle.go:64
		// _ = "end of CoverTab[43320]"
//line /usr/local/go/src/net/http/socks_bundle.go:64
		_go_fuzz_dep_.CoverTab[43321]++
								b = append(b, byte(len(ams)))
								for _, am := range ams {
//line /usr/local/go/src/net/http/socks_bundle.go:66
			_go_fuzz_dep_.CoverTab[43324]++
									b = append(b, byte(am))
//line /usr/local/go/src/net/http/socks_bundle.go:67
			// _ = "end of CoverTab[43324]"
		}
//line /usr/local/go/src/net/http/socks_bundle.go:68
		// _ = "end of CoverTab[43321]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:69
	// _ = "end of CoverTab[43286]"
//line /usr/local/go/src/net/http/socks_bundle.go:69
	_go_fuzz_dep_.CoverTab[43287]++
							if _, ctxErr = c.Write(b); ctxErr != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:70
		_go_fuzz_dep_.CoverTab[43325]++
								return
//line /usr/local/go/src/net/http/socks_bundle.go:71
		// _ = "end of CoverTab[43325]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:72
		_go_fuzz_dep_.CoverTab[43326]++
//line /usr/local/go/src/net/http/socks_bundle.go:72
		// _ = "end of CoverTab[43326]"
//line /usr/local/go/src/net/http/socks_bundle.go:72
	}
//line /usr/local/go/src/net/http/socks_bundle.go:72
	// _ = "end of CoverTab[43287]"
//line /usr/local/go/src/net/http/socks_bundle.go:72
	_go_fuzz_dep_.CoverTab[43288]++

							if _, ctxErr = io.ReadFull(c, b[:2]); ctxErr != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:74
		_go_fuzz_dep_.CoverTab[43327]++
								return
//line /usr/local/go/src/net/http/socks_bundle.go:75
		// _ = "end of CoverTab[43327]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:76
		_go_fuzz_dep_.CoverTab[43328]++
//line /usr/local/go/src/net/http/socks_bundle.go:76
		// _ = "end of CoverTab[43328]"
//line /usr/local/go/src/net/http/socks_bundle.go:76
	}
//line /usr/local/go/src/net/http/socks_bundle.go:76
	// _ = "end of CoverTab[43288]"
//line /usr/local/go/src/net/http/socks_bundle.go:76
	_go_fuzz_dep_.CoverTab[43289]++
							if b[0] != socksVersion5 {
//line /usr/local/go/src/net/http/socks_bundle.go:77
		_go_fuzz_dep_.CoverTab[43329]++
								return nil, errors.New("unexpected protocol version " + strconv.Itoa(int(b[0])))
//line /usr/local/go/src/net/http/socks_bundle.go:78
		// _ = "end of CoverTab[43329]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:79
		_go_fuzz_dep_.CoverTab[43330]++
//line /usr/local/go/src/net/http/socks_bundle.go:79
		// _ = "end of CoverTab[43330]"
//line /usr/local/go/src/net/http/socks_bundle.go:79
	}
//line /usr/local/go/src/net/http/socks_bundle.go:79
	// _ = "end of CoverTab[43289]"
//line /usr/local/go/src/net/http/socks_bundle.go:79
	_go_fuzz_dep_.CoverTab[43290]++
							am := socksAuthMethod(b[1])
							if am == socksAuthMethodNoAcceptableMethods {
//line /usr/local/go/src/net/http/socks_bundle.go:81
		_go_fuzz_dep_.CoverTab[43331]++
								return nil, errors.New("no acceptable authentication methods")
//line /usr/local/go/src/net/http/socks_bundle.go:82
		// _ = "end of CoverTab[43331]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:83
		_go_fuzz_dep_.CoverTab[43332]++
//line /usr/local/go/src/net/http/socks_bundle.go:83
		// _ = "end of CoverTab[43332]"
//line /usr/local/go/src/net/http/socks_bundle.go:83
	}
//line /usr/local/go/src/net/http/socks_bundle.go:83
	// _ = "end of CoverTab[43290]"
//line /usr/local/go/src/net/http/socks_bundle.go:83
	_go_fuzz_dep_.CoverTab[43291]++
							if d.Authenticate != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:84
		_go_fuzz_dep_.CoverTab[43333]++
								if ctxErr = d.Authenticate(ctx, c, am); ctxErr != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:85
			_go_fuzz_dep_.CoverTab[43334]++
									return
//line /usr/local/go/src/net/http/socks_bundle.go:86
			// _ = "end of CoverTab[43334]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:87
			_go_fuzz_dep_.CoverTab[43335]++
//line /usr/local/go/src/net/http/socks_bundle.go:87
			// _ = "end of CoverTab[43335]"
//line /usr/local/go/src/net/http/socks_bundle.go:87
		}
//line /usr/local/go/src/net/http/socks_bundle.go:87
		// _ = "end of CoverTab[43333]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:88
		_go_fuzz_dep_.CoverTab[43336]++
//line /usr/local/go/src/net/http/socks_bundle.go:88
		// _ = "end of CoverTab[43336]"
//line /usr/local/go/src/net/http/socks_bundle.go:88
	}
//line /usr/local/go/src/net/http/socks_bundle.go:88
	// _ = "end of CoverTab[43291]"
//line /usr/local/go/src/net/http/socks_bundle.go:88
	_go_fuzz_dep_.CoverTab[43292]++

							b = b[:0]
							b = append(b, socksVersion5, byte(d.cmd), 0)
							if ip := net.ParseIP(host); ip != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:92
		_go_fuzz_dep_.CoverTab[43337]++
								if ip4 := ip.To4(); ip4 != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:93
			_go_fuzz_dep_.CoverTab[43338]++
									b = append(b, socksAddrTypeIPv4)
									b = append(b, ip4...)
//line /usr/local/go/src/net/http/socks_bundle.go:95
			// _ = "end of CoverTab[43338]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:96
			_go_fuzz_dep_.CoverTab[43339]++
//line /usr/local/go/src/net/http/socks_bundle.go:96
			if ip6 := ip.To16(); ip6 != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:96
				_go_fuzz_dep_.CoverTab[43340]++
										b = append(b, socksAddrTypeIPv6)
										b = append(b, ip6...)
//line /usr/local/go/src/net/http/socks_bundle.go:98
				// _ = "end of CoverTab[43340]"
			} else {
//line /usr/local/go/src/net/http/socks_bundle.go:99
				_go_fuzz_dep_.CoverTab[43341]++
										return nil, errors.New("unknown address type")
//line /usr/local/go/src/net/http/socks_bundle.go:100
				// _ = "end of CoverTab[43341]"
			}
//line /usr/local/go/src/net/http/socks_bundle.go:101
			// _ = "end of CoverTab[43339]"
//line /usr/local/go/src/net/http/socks_bundle.go:101
		}
//line /usr/local/go/src/net/http/socks_bundle.go:101
		// _ = "end of CoverTab[43337]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:102
		_go_fuzz_dep_.CoverTab[43342]++
								if len(host) > 255 {
//line /usr/local/go/src/net/http/socks_bundle.go:103
			_go_fuzz_dep_.CoverTab[43344]++
									return nil, errors.New("FQDN too long")
//line /usr/local/go/src/net/http/socks_bundle.go:104
			// _ = "end of CoverTab[43344]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:105
			_go_fuzz_dep_.CoverTab[43345]++
//line /usr/local/go/src/net/http/socks_bundle.go:105
			// _ = "end of CoverTab[43345]"
//line /usr/local/go/src/net/http/socks_bundle.go:105
		}
//line /usr/local/go/src/net/http/socks_bundle.go:105
		// _ = "end of CoverTab[43342]"
//line /usr/local/go/src/net/http/socks_bundle.go:105
		_go_fuzz_dep_.CoverTab[43343]++
								b = append(b, socksAddrTypeFQDN)
								b = append(b, byte(len(host)))
								b = append(b, host...)
//line /usr/local/go/src/net/http/socks_bundle.go:108
		// _ = "end of CoverTab[43343]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:109
	// _ = "end of CoverTab[43292]"
//line /usr/local/go/src/net/http/socks_bundle.go:109
	_go_fuzz_dep_.CoverTab[43293]++
							b = append(b, byte(port>>8), byte(port))
							if _, ctxErr = c.Write(b); ctxErr != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:111
		_go_fuzz_dep_.CoverTab[43346]++
								return
//line /usr/local/go/src/net/http/socks_bundle.go:112
		// _ = "end of CoverTab[43346]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:113
		_go_fuzz_dep_.CoverTab[43347]++
//line /usr/local/go/src/net/http/socks_bundle.go:113
		// _ = "end of CoverTab[43347]"
//line /usr/local/go/src/net/http/socks_bundle.go:113
	}
//line /usr/local/go/src/net/http/socks_bundle.go:113
	// _ = "end of CoverTab[43293]"
//line /usr/local/go/src/net/http/socks_bundle.go:113
	_go_fuzz_dep_.CoverTab[43294]++

							if _, ctxErr = io.ReadFull(c, b[:4]); ctxErr != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:115
		_go_fuzz_dep_.CoverTab[43348]++
								return
//line /usr/local/go/src/net/http/socks_bundle.go:116
		// _ = "end of CoverTab[43348]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:117
		_go_fuzz_dep_.CoverTab[43349]++
//line /usr/local/go/src/net/http/socks_bundle.go:117
		// _ = "end of CoverTab[43349]"
//line /usr/local/go/src/net/http/socks_bundle.go:117
	}
//line /usr/local/go/src/net/http/socks_bundle.go:117
	// _ = "end of CoverTab[43294]"
//line /usr/local/go/src/net/http/socks_bundle.go:117
	_go_fuzz_dep_.CoverTab[43295]++
							if b[0] != socksVersion5 {
//line /usr/local/go/src/net/http/socks_bundle.go:118
		_go_fuzz_dep_.CoverTab[43350]++
								return nil, errors.New("unexpected protocol version " + strconv.Itoa(int(b[0])))
//line /usr/local/go/src/net/http/socks_bundle.go:119
		// _ = "end of CoverTab[43350]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:120
		_go_fuzz_dep_.CoverTab[43351]++
//line /usr/local/go/src/net/http/socks_bundle.go:120
		// _ = "end of CoverTab[43351]"
//line /usr/local/go/src/net/http/socks_bundle.go:120
	}
//line /usr/local/go/src/net/http/socks_bundle.go:120
	// _ = "end of CoverTab[43295]"
//line /usr/local/go/src/net/http/socks_bundle.go:120
	_go_fuzz_dep_.CoverTab[43296]++
							if cmdErr := socksReply(b[1]); cmdErr != socksStatusSucceeded {
//line /usr/local/go/src/net/http/socks_bundle.go:121
		_go_fuzz_dep_.CoverTab[43352]++
								return nil, errors.New("unknown error " + cmdErr.String())
//line /usr/local/go/src/net/http/socks_bundle.go:122
		// _ = "end of CoverTab[43352]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:123
		_go_fuzz_dep_.CoverTab[43353]++
//line /usr/local/go/src/net/http/socks_bundle.go:123
		// _ = "end of CoverTab[43353]"
//line /usr/local/go/src/net/http/socks_bundle.go:123
	}
//line /usr/local/go/src/net/http/socks_bundle.go:123
	// _ = "end of CoverTab[43296]"
//line /usr/local/go/src/net/http/socks_bundle.go:123
	_go_fuzz_dep_.CoverTab[43297]++
							if b[2] != 0 {
//line /usr/local/go/src/net/http/socks_bundle.go:124
		_go_fuzz_dep_.CoverTab[43354]++
								return nil, errors.New("non-zero reserved field")
//line /usr/local/go/src/net/http/socks_bundle.go:125
		// _ = "end of CoverTab[43354]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:126
		_go_fuzz_dep_.CoverTab[43355]++
//line /usr/local/go/src/net/http/socks_bundle.go:126
		// _ = "end of CoverTab[43355]"
//line /usr/local/go/src/net/http/socks_bundle.go:126
	}
//line /usr/local/go/src/net/http/socks_bundle.go:126
	// _ = "end of CoverTab[43297]"
//line /usr/local/go/src/net/http/socks_bundle.go:126
	_go_fuzz_dep_.CoverTab[43298]++
							l := 2
							var a socksAddr
							switch b[3] {
	case socksAddrTypeIPv4:
//line /usr/local/go/src/net/http/socks_bundle.go:130
		_go_fuzz_dep_.CoverTab[43356]++
								l += net.IPv4len
								a.IP = make(net.IP, net.IPv4len)
//line /usr/local/go/src/net/http/socks_bundle.go:132
		// _ = "end of CoverTab[43356]"
	case socksAddrTypeIPv6:
//line /usr/local/go/src/net/http/socks_bundle.go:133
		_go_fuzz_dep_.CoverTab[43357]++
								l += net.IPv6len
								a.IP = make(net.IP, net.IPv6len)
//line /usr/local/go/src/net/http/socks_bundle.go:135
		// _ = "end of CoverTab[43357]"
	case socksAddrTypeFQDN:
//line /usr/local/go/src/net/http/socks_bundle.go:136
		_go_fuzz_dep_.CoverTab[43358]++
								if _, err := io.ReadFull(c, b[:1]); err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:137
			_go_fuzz_dep_.CoverTab[43361]++
									return nil, err
//line /usr/local/go/src/net/http/socks_bundle.go:138
			// _ = "end of CoverTab[43361]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:139
			_go_fuzz_dep_.CoverTab[43362]++
//line /usr/local/go/src/net/http/socks_bundle.go:139
			// _ = "end of CoverTab[43362]"
//line /usr/local/go/src/net/http/socks_bundle.go:139
		}
//line /usr/local/go/src/net/http/socks_bundle.go:139
		// _ = "end of CoverTab[43358]"
//line /usr/local/go/src/net/http/socks_bundle.go:139
		_go_fuzz_dep_.CoverTab[43359]++
								l += int(b[0])
//line /usr/local/go/src/net/http/socks_bundle.go:140
		// _ = "end of CoverTab[43359]"
	default:
//line /usr/local/go/src/net/http/socks_bundle.go:141
		_go_fuzz_dep_.CoverTab[43360]++
								return nil, errors.New("unknown address type " + strconv.Itoa(int(b[3])))
//line /usr/local/go/src/net/http/socks_bundle.go:142
		// _ = "end of CoverTab[43360]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:143
	// _ = "end of CoverTab[43298]"
//line /usr/local/go/src/net/http/socks_bundle.go:143
	_go_fuzz_dep_.CoverTab[43299]++
							if cap(b) < l {
//line /usr/local/go/src/net/http/socks_bundle.go:144
		_go_fuzz_dep_.CoverTab[43363]++
								b = make([]byte, l)
//line /usr/local/go/src/net/http/socks_bundle.go:145
		// _ = "end of CoverTab[43363]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:146
		_go_fuzz_dep_.CoverTab[43364]++
								b = b[:l]
//line /usr/local/go/src/net/http/socks_bundle.go:147
		// _ = "end of CoverTab[43364]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:148
	// _ = "end of CoverTab[43299]"
//line /usr/local/go/src/net/http/socks_bundle.go:148
	_go_fuzz_dep_.CoverTab[43300]++
							if _, ctxErr = io.ReadFull(c, b); ctxErr != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:149
		_go_fuzz_dep_.CoverTab[43365]++
								return
//line /usr/local/go/src/net/http/socks_bundle.go:150
		// _ = "end of CoverTab[43365]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:151
		_go_fuzz_dep_.CoverTab[43366]++
//line /usr/local/go/src/net/http/socks_bundle.go:151
		// _ = "end of CoverTab[43366]"
//line /usr/local/go/src/net/http/socks_bundle.go:151
	}
//line /usr/local/go/src/net/http/socks_bundle.go:151
	// _ = "end of CoverTab[43300]"
//line /usr/local/go/src/net/http/socks_bundle.go:151
	_go_fuzz_dep_.CoverTab[43301]++
							if a.IP != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:152
		_go_fuzz_dep_.CoverTab[43367]++
								copy(a.IP, b)
//line /usr/local/go/src/net/http/socks_bundle.go:153
		// _ = "end of CoverTab[43367]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:154
		_go_fuzz_dep_.CoverTab[43368]++
								a.Name = string(b[:len(b)-2])
//line /usr/local/go/src/net/http/socks_bundle.go:155
		// _ = "end of CoverTab[43368]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:156
	// _ = "end of CoverTab[43301]"
//line /usr/local/go/src/net/http/socks_bundle.go:156
	_go_fuzz_dep_.CoverTab[43302]++
							a.Port = int(b[len(b)-2])<<8 | int(b[len(b)-1])
							return &a, nil
//line /usr/local/go/src/net/http/socks_bundle.go:158
	// _ = "end of CoverTab[43302]"
}

func sockssplitHostPort(address string) (string, int, error) {
//line /usr/local/go/src/net/http/socks_bundle.go:161
	_go_fuzz_dep_.CoverTab[43369]++
							host, port, err := net.SplitHostPort(address)
							if err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:163
		_go_fuzz_dep_.CoverTab[43373]++
								return "", 0, err
//line /usr/local/go/src/net/http/socks_bundle.go:164
		// _ = "end of CoverTab[43373]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:165
		_go_fuzz_dep_.CoverTab[43374]++
//line /usr/local/go/src/net/http/socks_bundle.go:165
		// _ = "end of CoverTab[43374]"
//line /usr/local/go/src/net/http/socks_bundle.go:165
	}
//line /usr/local/go/src/net/http/socks_bundle.go:165
	// _ = "end of CoverTab[43369]"
//line /usr/local/go/src/net/http/socks_bundle.go:165
	_go_fuzz_dep_.CoverTab[43370]++
							portnum, err := strconv.Atoi(port)
							if err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:167
		_go_fuzz_dep_.CoverTab[43375]++
								return "", 0, err
//line /usr/local/go/src/net/http/socks_bundle.go:168
		// _ = "end of CoverTab[43375]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:169
		_go_fuzz_dep_.CoverTab[43376]++
//line /usr/local/go/src/net/http/socks_bundle.go:169
		// _ = "end of CoverTab[43376]"
//line /usr/local/go/src/net/http/socks_bundle.go:169
	}
//line /usr/local/go/src/net/http/socks_bundle.go:169
	// _ = "end of CoverTab[43370]"
//line /usr/local/go/src/net/http/socks_bundle.go:169
	_go_fuzz_dep_.CoverTab[43371]++
							if 1 > portnum || func() bool {
//line /usr/local/go/src/net/http/socks_bundle.go:170
		_go_fuzz_dep_.CoverTab[43377]++
//line /usr/local/go/src/net/http/socks_bundle.go:170
		return portnum > 0xffff
//line /usr/local/go/src/net/http/socks_bundle.go:170
		// _ = "end of CoverTab[43377]"
//line /usr/local/go/src/net/http/socks_bundle.go:170
	}() {
//line /usr/local/go/src/net/http/socks_bundle.go:170
		_go_fuzz_dep_.CoverTab[43378]++
								return "", 0, errors.New("port number out of range " + port)
//line /usr/local/go/src/net/http/socks_bundle.go:171
		// _ = "end of CoverTab[43378]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:172
		_go_fuzz_dep_.CoverTab[43379]++
//line /usr/local/go/src/net/http/socks_bundle.go:172
		// _ = "end of CoverTab[43379]"
//line /usr/local/go/src/net/http/socks_bundle.go:172
	}
//line /usr/local/go/src/net/http/socks_bundle.go:172
	// _ = "end of CoverTab[43371]"
//line /usr/local/go/src/net/http/socks_bundle.go:172
	_go_fuzz_dep_.CoverTab[43372]++
							return host, portnum, nil
//line /usr/local/go/src/net/http/socks_bundle.go:173
	// _ = "end of CoverTab[43372]"
}

//line /usr/local/go/src/net/http/socks_bundle.go:177
type socksCommand int

func (cmd socksCommand) String() string {
//line /usr/local/go/src/net/http/socks_bundle.go:179
	_go_fuzz_dep_.CoverTab[43380]++
							switch cmd {
	case socksCmdConnect:
//line /usr/local/go/src/net/http/socks_bundle.go:181
		_go_fuzz_dep_.CoverTab[43381]++
								return "socks connect"
//line /usr/local/go/src/net/http/socks_bundle.go:182
		// _ = "end of CoverTab[43381]"
	case sockscmdBind:
//line /usr/local/go/src/net/http/socks_bundle.go:183
		_go_fuzz_dep_.CoverTab[43382]++
								return "socks bind"
//line /usr/local/go/src/net/http/socks_bundle.go:184
		// _ = "end of CoverTab[43382]"
	default:
//line /usr/local/go/src/net/http/socks_bundle.go:185
		_go_fuzz_dep_.CoverTab[43383]++
								return "socks " + strconv.Itoa(int(cmd))
//line /usr/local/go/src/net/http/socks_bundle.go:186
		// _ = "end of CoverTab[43383]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:187
	// _ = "end of CoverTab[43380]"
}

//line /usr/local/go/src/net/http/socks_bundle.go:191
type socksAuthMethod int

//line /usr/local/go/src/net/http/socks_bundle.go:194
type socksReply int

func (code socksReply) String() string {
//line /usr/local/go/src/net/http/socks_bundle.go:196
	_go_fuzz_dep_.CoverTab[43384]++
							switch code {
	case socksStatusSucceeded:
//line /usr/local/go/src/net/http/socks_bundle.go:198
		_go_fuzz_dep_.CoverTab[43385]++
								return "succeeded"
//line /usr/local/go/src/net/http/socks_bundle.go:199
		// _ = "end of CoverTab[43385]"
	case 0x01:
//line /usr/local/go/src/net/http/socks_bundle.go:200
		_go_fuzz_dep_.CoverTab[43386]++
								return "general SOCKS server failure"
//line /usr/local/go/src/net/http/socks_bundle.go:201
		// _ = "end of CoverTab[43386]"
	case 0x02:
//line /usr/local/go/src/net/http/socks_bundle.go:202
		_go_fuzz_dep_.CoverTab[43387]++
								return "connection not allowed by ruleset"
//line /usr/local/go/src/net/http/socks_bundle.go:203
		// _ = "end of CoverTab[43387]"
	case 0x03:
//line /usr/local/go/src/net/http/socks_bundle.go:204
		_go_fuzz_dep_.CoverTab[43388]++
								return "network unreachable"
//line /usr/local/go/src/net/http/socks_bundle.go:205
		// _ = "end of CoverTab[43388]"
	case 0x04:
//line /usr/local/go/src/net/http/socks_bundle.go:206
		_go_fuzz_dep_.CoverTab[43389]++
								return "host unreachable"
//line /usr/local/go/src/net/http/socks_bundle.go:207
		// _ = "end of CoverTab[43389]"
	case 0x05:
//line /usr/local/go/src/net/http/socks_bundle.go:208
		_go_fuzz_dep_.CoverTab[43390]++
								return "connection refused"
//line /usr/local/go/src/net/http/socks_bundle.go:209
		// _ = "end of CoverTab[43390]"
	case 0x06:
//line /usr/local/go/src/net/http/socks_bundle.go:210
		_go_fuzz_dep_.CoverTab[43391]++
								return "TTL expired"
//line /usr/local/go/src/net/http/socks_bundle.go:211
		// _ = "end of CoverTab[43391]"
	case 0x07:
//line /usr/local/go/src/net/http/socks_bundle.go:212
		_go_fuzz_dep_.CoverTab[43392]++
								return "command not supported"
//line /usr/local/go/src/net/http/socks_bundle.go:213
		// _ = "end of CoverTab[43392]"
	case 0x08:
//line /usr/local/go/src/net/http/socks_bundle.go:214
		_go_fuzz_dep_.CoverTab[43393]++
								return "address type not supported"
//line /usr/local/go/src/net/http/socks_bundle.go:215
		// _ = "end of CoverTab[43393]"
	default:
//line /usr/local/go/src/net/http/socks_bundle.go:216
		_go_fuzz_dep_.CoverTab[43394]++
								return "unknown code: " + strconv.Itoa(int(code))
//line /usr/local/go/src/net/http/socks_bundle.go:217
		// _ = "end of CoverTab[43394]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:218
	// _ = "end of CoverTab[43384]"
}

//line /usr/local/go/src/net/http/socks_bundle.go:222
const (
	socksVersion5	= 0x05

	socksAddrTypeIPv4	= 0x01
	socksAddrTypeFQDN	= 0x03
	socksAddrTypeIPv6	= 0x04

	socksCmdConnect	socksCommand	= 0x01
	sockscmdBind	socksCommand	= 0x02

	socksAuthMethodNotRequired		socksAuthMethod	= 0x00
	socksAuthMethodUsernamePassword		socksAuthMethod	= 0x02
	socksAuthMethodNoAcceptableMethods	socksAuthMethod	= 0xff

	socksStatusSucceeded	socksReply	= 0x00
)

//line /usr/local/go/src/net/http/socks_bundle.go:241
type socksAddr struct {
	Name	string
	IP	net.IP
	Port	int
}

func (a *socksAddr) Network() string {
//line /usr/local/go/src/net/http/socks_bundle.go:247
	_go_fuzz_dep_.CoverTab[43395]++
//line /usr/local/go/src/net/http/socks_bundle.go:247
	return "socks"
//line /usr/local/go/src/net/http/socks_bundle.go:247
	// _ = "end of CoverTab[43395]"
//line /usr/local/go/src/net/http/socks_bundle.go:247
}

func (a *socksAddr) String() string {
//line /usr/local/go/src/net/http/socks_bundle.go:249
	_go_fuzz_dep_.CoverTab[43396]++
							if a == nil {
//line /usr/local/go/src/net/http/socks_bundle.go:250
		_go_fuzz_dep_.CoverTab[43399]++
								return "<nil>"
//line /usr/local/go/src/net/http/socks_bundle.go:251
		// _ = "end of CoverTab[43399]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:252
		_go_fuzz_dep_.CoverTab[43400]++
//line /usr/local/go/src/net/http/socks_bundle.go:252
		// _ = "end of CoverTab[43400]"
//line /usr/local/go/src/net/http/socks_bundle.go:252
	}
//line /usr/local/go/src/net/http/socks_bundle.go:252
	// _ = "end of CoverTab[43396]"
//line /usr/local/go/src/net/http/socks_bundle.go:252
	_go_fuzz_dep_.CoverTab[43397]++
							port := strconv.Itoa(a.Port)
							if a.IP == nil {
//line /usr/local/go/src/net/http/socks_bundle.go:254
		_go_fuzz_dep_.CoverTab[43401]++
								return net.JoinHostPort(a.Name, port)
//line /usr/local/go/src/net/http/socks_bundle.go:255
		// _ = "end of CoverTab[43401]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:256
		_go_fuzz_dep_.CoverTab[43402]++
//line /usr/local/go/src/net/http/socks_bundle.go:256
		// _ = "end of CoverTab[43402]"
//line /usr/local/go/src/net/http/socks_bundle.go:256
	}
//line /usr/local/go/src/net/http/socks_bundle.go:256
	// _ = "end of CoverTab[43397]"
//line /usr/local/go/src/net/http/socks_bundle.go:256
	_go_fuzz_dep_.CoverTab[43398]++
							return net.JoinHostPort(a.IP.String(), port)
//line /usr/local/go/src/net/http/socks_bundle.go:257
	// _ = "end of CoverTab[43398]"
}

//line /usr/local/go/src/net/http/socks_bundle.go:261
type socksConn struct {
	net.Conn

	boundAddr	net.Addr
}

//line /usr/local/go/src/net/http/socks_bundle.go:269
func (c *socksConn) BoundAddr() net.Addr {
//line /usr/local/go/src/net/http/socks_bundle.go:269
	_go_fuzz_dep_.CoverTab[43403]++
							if c == nil {
//line /usr/local/go/src/net/http/socks_bundle.go:270
		_go_fuzz_dep_.CoverTab[43405]++
								return nil
//line /usr/local/go/src/net/http/socks_bundle.go:271
		// _ = "end of CoverTab[43405]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:272
		_go_fuzz_dep_.CoverTab[43406]++
//line /usr/local/go/src/net/http/socks_bundle.go:272
		// _ = "end of CoverTab[43406]"
//line /usr/local/go/src/net/http/socks_bundle.go:272
	}
//line /usr/local/go/src/net/http/socks_bundle.go:272
	// _ = "end of CoverTab[43403]"
//line /usr/local/go/src/net/http/socks_bundle.go:272
	_go_fuzz_dep_.CoverTab[43404]++
							return c.boundAddr
//line /usr/local/go/src/net/http/socks_bundle.go:273
	// _ = "end of CoverTab[43404]"
}

//line /usr/local/go/src/net/http/socks_bundle.go:277
type socksDialer struct {
							cmd		socksCommand
							proxyNetwork	string
							proxyAddress	string

//line /usr/local/go/src/net/http/socks_bundle.go:284
	ProxyDial	func(context.Context, string, string) (net.Conn, error)

//line /usr/local/go/src/net/http/socks_bundle.go:289
	AuthMethods	[]socksAuthMethod

//line /usr/local/go/src/net/http/socks_bundle.go:294
	Authenticate	func(context.Context, io.ReadWriter, socksAuthMethod) error
}

//line /usr/local/go/src/net/http/socks_bundle.go:307
func (d *socksDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error) {
//line /usr/local/go/src/net/http/socks_bundle.go:307
	_go_fuzz_dep_.CoverTab[43407]++
							if err := d.validateTarget(network, address); err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:308
		_go_fuzz_dep_.CoverTab[43413]++
								proxy, dst, _ := d.pathAddrs(address)
								return nil, &net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
//line /usr/local/go/src/net/http/socks_bundle.go:310
		// _ = "end of CoverTab[43413]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:311
		_go_fuzz_dep_.CoverTab[43414]++
//line /usr/local/go/src/net/http/socks_bundle.go:311
		// _ = "end of CoverTab[43414]"
//line /usr/local/go/src/net/http/socks_bundle.go:311
	}
//line /usr/local/go/src/net/http/socks_bundle.go:311
	// _ = "end of CoverTab[43407]"
//line /usr/local/go/src/net/http/socks_bundle.go:311
	_go_fuzz_dep_.CoverTab[43408]++
							if ctx == nil {
//line /usr/local/go/src/net/http/socks_bundle.go:312
		_go_fuzz_dep_.CoverTab[43415]++
								proxy, dst, _ := d.pathAddrs(address)
								return nil, &net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: errors.New("nil context")}
//line /usr/local/go/src/net/http/socks_bundle.go:314
		// _ = "end of CoverTab[43415]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:315
		_go_fuzz_dep_.CoverTab[43416]++
//line /usr/local/go/src/net/http/socks_bundle.go:315
		// _ = "end of CoverTab[43416]"
//line /usr/local/go/src/net/http/socks_bundle.go:315
	}
//line /usr/local/go/src/net/http/socks_bundle.go:315
	// _ = "end of CoverTab[43408]"
//line /usr/local/go/src/net/http/socks_bundle.go:315
	_go_fuzz_dep_.CoverTab[43409]++
							var err error
							var c net.Conn
							if d.ProxyDial != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:318
		_go_fuzz_dep_.CoverTab[43417]++
								c, err = d.ProxyDial(ctx, d.proxyNetwork, d.proxyAddress)
//line /usr/local/go/src/net/http/socks_bundle.go:319
		// _ = "end of CoverTab[43417]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:320
		_go_fuzz_dep_.CoverTab[43418]++
								var dd net.Dialer
								c, err = dd.DialContext(ctx, d.proxyNetwork, d.proxyAddress)
//line /usr/local/go/src/net/http/socks_bundle.go:322
		// _ = "end of CoverTab[43418]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:323
	// _ = "end of CoverTab[43409]"
//line /usr/local/go/src/net/http/socks_bundle.go:323
	_go_fuzz_dep_.CoverTab[43410]++
							if err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:324
		_go_fuzz_dep_.CoverTab[43419]++
								proxy, dst, _ := d.pathAddrs(address)
								return nil, &net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
//line /usr/local/go/src/net/http/socks_bundle.go:326
		// _ = "end of CoverTab[43419]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:327
		_go_fuzz_dep_.CoverTab[43420]++
//line /usr/local/go/src/net/http/socks_bundle.go:327
		// _ = "end of CoverTab[43420]"
//line /usr/local/go/src/net/http/socks_bundle.go:327
	}
//line /usr/local/go/src/net/http/socks_bundle.go:327
	// _ = "end of CoverTab[43410]"
//line /usr/local/go/src/net/http/socks_bundle.go:327
	_go_fuzz_dep_.CoverTab[43411]++
							a, err := d.connect(ctx, c, address)
							if err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:329
		_go_fuzz_dep_.CoverTab[43421]++
								c.Close()
								proxy, dst, _ := d.pathAddrs(address)
								return nil, &net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
//line /usr/local/go/src/net/http/socks_bundle.go:332
		// _ = "end of CoverTab[43421]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:333
		_go_fuzz_dep_.CoverTab[43422]++
//line /usr/local/go/src/net/http/socks_bundle.go:333
		// _ = "end of CoverTab[43422]"
//line /usr/local/go/src/net/http/socks_bundle.go:333
	}
//line /usr/local/go/src/net/http/socks_bundle.go:333
	// _ = "end of CoverTab[43411]"
//line /usr/local/go/src/net/http/socks_bundle.go:333
	_go_fuzz_dep_.CoverTab[43412]++
							return &socksConn{Conn: c, boundAddr: a}, nil
//line /usr/local/go/src/net/http/socks_bundle.go:334
	// _ = "end of CoverTab[43412]"
}

//line /usr/local/go/src/net/http/socks_bundle.go:343
func (d *socksDialer) DialWithConn(ctx context.Context, c net.Conn, network, address string) (net.Addr, error) {
//line /usr/local/go/src/net/http/socks_bundle.go:343
	_go_fuzz_dep_.CoverTab[43423]++
							if err := d.validateTarget(network, address); err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:344
		_go_fuzz_dep_.CoverTab[43427]++
								proxy, dst, _ := d.pathAddrs(address)
								return nil, &net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
//line /usr/local/go/src/net/http/socks_bundle.go:346
		// _ = "end of CoverTab[43427]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:347
		_go_fuzz_dep_.CoverTab[43428]++
//line /usr/local/go/src/net/http/socks_bundle.go:347
		// _ = "end of CoverTab[43428]"
//line /usr/local/go/src/net/http/socks_bundle.go:347
	}
//line /usr/local/go/src/net/http/socks_bundle.go:347
	// _ = "end of CoverTab[43423]"
//line /usr/local/go/src/net/http/socks_bundle.go:347
	_go_fuzz_dep_.CoverTab[43424]++
							if ctx == nil {
//line /usr/local/go/src/net/http/socks_bundle.go:348
		_go_fuzz_dep_.CoverTab[43429]++
								proxy, dst, _ := d.pathAddrs(address)
								return nil, &net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: errors.New("nil context")}
//line /usr/local/go/src/net/http/socks_bundle.go:350
		// _ = "end of CoverTab[43429]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:351
		_go_fuzz_dep_.CoverTab[43430]++
//line /usr/local/go/src/net/http/socks_bundle.go:351
		// _ = "end of CoverTab[43430]"
//line /usr/local/go/src/net/http/socks_bundle.go:351
	}
//line /usr/local/go/src/net/http/socks_bundle.go:351
	// _ = "end of CoverTab[43424]"
//line /usr/local/go/src/net/http/socks_bundle.go:351
	_go_fuzz_dep_.CoverTab[43425]++
							a, err := d.connect(ctx, c, address)
							if err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:353
		_go_fuzz_dep_.CoverTab[43431]++
								proxy, dst, _ := d.pathAddrs(address)
								return nil, &net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
//line /usr/local/go/src/net/http/socks_bundle.go:355
		// _ = "end of CoverTab[43431]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:356
		_go_fuzz_dep_.CoverTab[43432]++
//line /usr/local/go/src/net/http/socks_bundle.go:356
		// _ = "end of CoverTab[43432]"
//line /usr/local/go/src/net/http/socks_bundle.go:356
	}
//line /usr/local/go/src/net/http/socks_bundle.go:356
	// _ = "end of CoverTab[43425]"
//line /usr/local/go/src/net/http/socks_bundle.go:356
	_go_fuzz_dep_.CoverTab[43426]++
							return a, nil
//line /usr/local/go/src/net/http/socks_bundle.go:357
	// _ = "end of CoverTab[43426]"
}

//line /usr/local/go/src/net/http/socks_bundle.go:366
func (d *socksDialer) Dial(network, address string) (net.Conn, error) {
//line /usr/local/go/src/net/http/socks_bundle.go:366
	_go_fuzz_dep_.CoverTab[43433]++
							if err := d.validateTarget(network, address); err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:367
		_go_fuzz_dep_.CoverTab[43438]++
								proxy, dst, _ := d.pathAddrs(address)
								return nil, &net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
//line /usr/local/go/src/net/http/socks_bundle.go:369
		// _ = "end of CoverTab[43438]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:370
		_go_fuzz_dep_.CoverTab[43439]++
//line /usr/local/go/src/net/http/socks_bundle.go:370
		// _ = "end of CoverTab[43439]"
//line /usr/local/go/src/net/http/socks_bundle.go:370
	}
//line /usr/local/go/src/net/http/socks_bundle.go:370
	// _ = "end of CoverTab[43433]"
//line /usr/local/go/src/net/http/socks_bundle.go:370
	_go_fuzz_dep_.CoverTab[43434]++
							var err error
							var c net.Conn
							if d.ProxyDial != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:373
		_go_fuzz_dep_.CoverTab[43440]++
								c, err = d.ProxyDial(context.Background(), d.proxyNetwork, d.proxyAddress)
//line /usr/local/go/src/net/http/socks_bundle.go:374
		// _ = "end of CoverTab[43440]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:375
		_go_fuzz_dep_.CoverTab[43441]++
								c, err = net.Dial(d.proxyNetwork, d.proxyAddress)
//line /usr/local/go/src/net/http/socks_bundle.go:376
		// _ = "end of CoverTab[43441]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:377
	// _ = "end of CoverTab[43434]"
//line /usr/local/go/src/net/http/socks_bundle.go:377
	_go_fuzz_dep_.CoverTab[43435]++
							if err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:378
		_go_fuzz_dep_.CoverTab[43442]++
								proxy, dst, _ := d.pathAddrs(address)
								return nil, &net.OpError{Op: d.cmd.String(), Net: network, Source: proxy, Addr: dst, Err: err}
//line /usr/local/go/src/net/http/socks_bundle.go:380
		// _ = "end of CoverTab[43442]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:381
		_go_fuzz_dep_.CoverTab[43443]++
//line /usr/local/go/src/net/http/socks_bundle.go:381
		// _ = "end of CoverTab[43443]"
//line /usr/local/go/src/net/http/socks_bundle.go:381
	}
//line /usr/local/go/src/net/http/socks_bundle.go:381
	// _ = "end of CoverTab[43435]"
//line /usr/local/go/src/net/http/socks_bundle.go:381
	_go_fuzz_dep_.CoverTab[43436]++
							if _, err := d.DialWithConn(context.Background(), c, network, address); err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:382
		_go_fuzz_dep_.CoverTab[43444]++
								c.Close()
								return nil, err
//line /usr/local/go/src/net/http/socks_bundle.go:384
		// _ = "end of CoverTab[43444]"
	} else {
//line /usr/local/go/src/net/http/socks_bundle.go:385
		_go_fuzz_dep_.CoverTab[43445]++
//line /usr/local/go/src/net/http/socks_bundle.go:385
		// _ = "end of CoverTab[43445]"
//line /usr/local/go/src/net/http/socks_bundle.go:385
	}
//line /usr/local/go/src/net/http/socks_bundle.go:385
	// _ = "end of CoverTab[43436]"
//line /usr/local/go/src/net/http/socks_bundle.go:385
	_go_fuzz_dep_.CoverTab[43437]++
							return c, nil
//line /usr/local/go/src/net/http/socks_bundle.go:386
	// _ = "end of CoverTab[43437]"
}

func (d *socksDialer) validateTarget(network, address string) error {
//line /usr/local/go/src/net/http/socks_bundle.go:389
	_go_fuzz_dep_.CoverTab[43446]++
							switch network {
	case "tcp", "tcp6", "tcp4":
//line /usr/local/go/src/net/http/socks_bundle.go:391
		_go_fuzz_dep_.CoverTab[43449]++
//line /usr/local/go/src/net/http/socks_bundle.go:391
		// _ = "end of CoverTab[43449]"
	default:
//line /usr/local/go/src/net/http/socks_bundle.go:392
		_go_fuzz_dep_.CoverTab[43450]++
								return errors.New("network not implemented")
//line /usr/local/go/src/net/http/socks_bundle.go:393
		// _ = "end of CoverTab[43450]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:394
	// _ = "end of CoverTab[43446]"
//line /usr/local/go/src/net/http/socks_bundle.go:394
	_go_fuzz_dep_.CoverTab[43447]++
							switch d.cmd {
	case socksCmdConnect, sockscmdBind:
//line /usr/local/go/src/net/http/socks_bundle.go:396
		_go_fuzz_dep_.CoverTab[43451]++
//line /usr/local/go/src/net/http/socks_bundle.go:396
		// _ = "end of CoverTab[43451]"
	default:
//line /usr/local/go/src/net/http/socks_bundle.go:397
		_go_fuzz_dep_.CoverTab[43452]++
								return errors.New("command not implemented")
//line /usr/local/go/src/net/http/socks_bundle.go:398
		// _ = "end of CoverTab[43452]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:399
	// _ = "end of CoverTab[43447]"
//line /usr/local/go/src/net/http/socks_bundle.go:399
	_go_fuzz_dep_.CoverTab[43448]++
							return nil
//line /usr/local/go/src/net/http/socks_bundle.go:400
	// _ = "end of CoverTab[43448]"
}

func (d *socksDialer) pathAddrs(address string) (proxy, dst net.Addr, err error) {
//line /usr/local/go/src/net/http/socks_bundle.go:403
	_go_fuzz_dep_.CoverTab[43453]++
							for i, s := range []string{d.proxyAddress, address} {
//line /usr/local/go/src/net/http/socks_bundle.go:404
		_go_fuzz_dep_.CoverTab[43455]++
								host, port, err := sockssplitHostPort(s)
								if err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:406
			_go_fuzz_dep_.CoverTab[43458]++
									return nil, nil, err
//line /usr/local/go/src/net/http/socks_bundle.go:407
			// _ = "end of CoverTab[43458]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:408
			_go_fuzz_dep_.CoverTab[43459]++
//line /usr/local/go/src/net/http/socks_bundle.go:408
			// _ = "end of CoverTab[43459]"
//line /usr/local/go/src/net/http/socks_bundle.go:408
		}
//line /usr/local/go/src/net/http/socks_bundle.go:408
		// _ = "end of CoverTab[43455]"
//line /usr/local/go/src/net/http/socks_bundle.go:408
		_go_fuzz_dep_.CoverTab[43456]++
								a := &socksAddr{Port: port}
								a.IP = net.ParseIP(host)
								if a.IP == nil {
//line /usr/local/go/src/net/http/socks_bundle.go:411
			_go_fuzz_dep_.CoverTab[43460]++
									a.Name = host
//line /usr/local/go/src/net/http/socks_bundle.go:412
			// _ = "end of CoverTab[43460]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:413
			_go_fuzz_dep_.CoverTab[43461]++
//line /usr/local/go/src/net/http/socks_bundle.go:413
			// _ = "end of CoverTab[43461]"
//line /usr/local/go/src/net/http/socks_bundle.go:413
		}
//line /usr/local/go/src/net/http/socks_bundle.go:413
		// _ = "end of CoverTab[43456]"
//line /usr/local/go/src/net/http/socks_bundle.go:413
		_go_fuzz_dep_.CoverTab[43457]++
								if i == 0 {
//line /usr/local/go/src/net/http/socks_bundle.go:414
			_go_fuzz_dep_.CoverTab[43462]++
									proxy = a
//line /usr/local/go/src/net/http/socks_bundle.go:415
			// _ = "end of CoverTab[43462]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:416
			_go_fuzz_dep_.CoverTab[43463]++
									dst = a
//line /usr/local/go/src/net/http/socks_bundle.go:417
			// _ = "end of CoverTab[43463]"
		}
//line /usr/local/go/src/net/http/socks_bundle.go:418
		// _ = "end of CoverTab[43457]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:419
	// _ = "end of CoverTab[43453]"
//line /usr/local/go/src/net/http/socks_bundle.go:419
	_go_fuzz_dep_.CoverTab[43454]++
							return
//line /usr/local/go/src/net/http/socks_bundle.go:420
	// _ = "end of CoverTab[43454]"
}

//line /usr/local/go/src/net/http/socks_bundle.go:425
func socksNewDialer(network, address string) *socksDialer {
//line /usr/local/go/src/net/http/socks_bundle.go:425
	_go_fuzz_dep_.CoverTab[43464]++
							return &socksDialer{proxyNetwork: network, proxyAddress: address, cmd: socksCmdConnect}
//line /usr/local/go/src/net/http/socks_bundle.go:426
	// _ = "end of CoverTab[43464]"
}

const (
	socksauthUsernamePasswordVersion	= 0x01
	socksauthStatusSucceeded		= 0x00
)

//line /usr/local/go/src/net/http/socks_bundle.go:436
type socksUsernamePassword struct {
	Username	string
	Password	string
}

//line /usr/local/go/src/net/http/socks_bundle.go:443
func (up *socksUsernamePassword) Authenticate(ctx context.Context, rw io.ReadWriter, auth socksAuthMethod) error {
//line /usr/local/go/src/net/http/socks_bundle.go:443
	_go_fuzz_dep_.CoverTab[43465]++
							switch auth {
	case socksAuthMethodNotRequired:
//line /usr/local/go/src/net/http/socks_bundle.go:445
		_go_fuzz_dep_.CoverTab[43467]++
								return nil
//line /usr/local/go/src/net/http/socks_bundle.go:446
		// _ = "end of CoverTab[43467]"
	case socksAuthMethodUsernamePassword:
//line /usr/local/go/src/net/http/socks_bundle.go:447
		_go_fuzz_dep_.CoverTab[43468]++
								if len(up.Username) == 0 || func() bool {
//line /usr/local/go/src/net/http/socks_bundle.go:448
			_go_fuzz_dep_.CoverTab[43475]++
//line /usr/local/go/src/net/http/socks_bundle.go:448
			return len(up.Username) > 255
//line /usr/local/go/src/net/http/socks_bundle.go:448
			// _ = "end of CoverTab[43475]"
//line /usr/local/go/src/net/http/socks_bundle.go:448
		}() || func() bool {
//line /usr/local/go/src/net/http/socks_bundle.go:448
			_go_fuzz_dep_.CoverTab[43476]++
//line /usr/local/go/src/net/http/socks_bundle.go:448
			return len(up.Password) == 0
//line /usr/local/go/src/net/http/socks_bundle.go:448
			// _ = "end of CoverTab[43476]"
//line /usr/local/go/src/net/http/socks_bundle.go:448
		}() || func() bool {
//line /usr/local/go/src/net/http/socks_bundle.go:448
			_go_fuzz_dep_.CoverTab[43477]++
//line /usr/local/go/src/net/http/socks_bundle.go:448
			return len(up.Password) > 255
//line /usr/local/go/src/net/http/socks_bundle.go:448
			// _ = "end of CoverTab[43477]"
//line /usr/local/go/src/net/http/socks_bundle.go:448
		}() {
//line /usr/local/go/src/net/http/socks_bundle.go:448
			_go_fuzz_dep_.CoverTab[43478]++
									return errors.New("invalid username/password")
//line /usr/local/go/src/net/http/socks_bundle.go:449
			// _ = "end of CoverTab[43478]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:450
			_go_fuzz_dep_.CoverTab[43479]++
//line /usr/local/go/src/net/http/socks_bundle.go:450
			// _ = "end of CoverTab[43479]"
//line /usr/local/go/src/net/http/socks_bundle.go:450
		}
//line /usr/local/go/src/net/http/socks_bundle.go:450
		// _ = "end of CoverTab[43468]"
//line /usr/local/go/src/net/http/socks_bundle.go:450
		_go_fuzz_dep_.CoverTab[43469]++
								b := []byte{socksauthUsernamePasswordVersion}
								b = append(b, byte(len(up.Username)))
								b = append(b, up.Username...)
								b = append(b, byte(len(up.Password)))
								b = append(b, up.Password...)

//line /usr/local/go/src/net/http/socks_bundle.go:458
		if _, err := rw.Write(b); err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:458
			_go_fuzz_dep_.CoverTab[43480]++
									return err
//line /usr/local/go/src/net/http/socks_bundle.go:459
			// _ = "end of CoverTab[43480]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:460
			_go_fuzz_dep_.CoverTab[43481]++
//line /usr/local/go/src/net/http/socks_bundle.go:460
			// _ = "end of CoverTab[43481]"
//line /usr/local/go/src/net/http/socks_bundle.go:460
		}
//line /usr/local/go/src/net/http/socks_bundle.go:460
		// _ = "end of CoverTab[43469]"
//line /usr/local/go/src/net/http/socks_bundle.go:460
		_go_fuzz_dep_.CoverTab[43470]++
								if _, err := io.ReadFull(rw, b[:2]); err != nil {
//line /usr/local/go/src/net/http/socks_bundle.go:461
			_go_fuzz_dep_.CoverTab[43482]++
									return err
//line /usr/local/go/src/net/http/socks_bundle.go:462
			// _ = "end of CoverTab[43482]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:463
			_go_fuzz_dep_.CoverTab[43483]++
//line /usr/local/go/src/net/http/socks_bundle.go:463
			// _ = "end of CoverTab[43483]"
//line /usr/local/go/src/net/http/socks_bundle.go:463
		}
//line /usr/local/go/src/net/http/socks_bundle.go:463
		// _ = "end of CoverTab[43470]"
//line /usr/local/go/src/net/http/socks_bundle.go:463
		_go_fuzz_dep_.CoverTab[43471]++
								if b[0] != socksauthUsernamePasswordVersion {
//line /usr/local/go/src/net/http/socks_bundle.go:464
			_go_fuzz_dep_.CoverTab[43484]++
									return errors.New("invalid username/password version")
//line /usr/local/go/src/net/http/socks_bundle.go:465
			// _ = "end of CoverTab[43484]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:466
			_go_fuzz_dep_.CoverTab[43485]++
//line /usr/local/go/src/net/http/socks_bundle.go:466
			// _ = "end of CoverTab[43485]"
//line /usr/local/go/src/net/http/socks_bundle.go:466
		}
//line /usr/local/go/src/net/http/socks_bundle.go:466
		// _ = "end of CoverTab[43471]"
//line /usr/local/go/src/net/http/socks_bundle.go:466
		_go_fuzz_dep_.CoverTab[43472]++
								if b[1] != socksauthStatusSucceeded {
//line /usr/local/go/src/net/http/socks_bundle.go:467
			_go_fuzz_dep_.CoverTab[43486]++
									return errors.New("username/password authentication failed")
//line /usr/local/go/src/net/http/socks_bundle.go:468
			// _ = "end of CoverTab[43486]"
		} else {
//line /usr/local/go/src/net/http/socks_bundle.go:469
			_go_fuzz_dep_.CoverTab[43487]++
//line /usr/local/go/src/net/http/socks_bundle.go:469
			// _ = "end of CoverTab[43487]"
//line /usr/local/go/src/net/http/socks_bundle.go:469
		}
//line /usr/local/go/src/net/http/socks_bundle.go:469
		// _ = "end of CoverTab[43472]"
//line /usr/local/go/src/net/http/socks_bundle.go:469
		_go_fuzz_dep_.CoverTab[43473]++
								return nil
//line /usr/local/go/src/net/http/socks_bundle.go:470
		// _ = "end of CoverTab[43473]"
//line /usr/local/go/src/net/http/socks_bundle.go:470
	default:
//line /usr/local/go/src/net/http/socks_bundle.go:470
		_go_fuzz_dep_.CoverTab[43474]++
//line /usr/local/go/src/net/http/socks_bundle.go:470
		// _ = "end of CoverTab[43474]"
	}
//line /usr/local/go/src/net/http/socks_bundle.go:471
	// _ = "end of CoverTab[43465]"
//line /usr/local/go/src/net/http/socks_bundle.go:471
	_go_fuzz_dep_.CoverTab[43466]++
							return errors.New("unsupported authentication method " + strconv.Itoa(int(auth)))
//line /usr/local/go/src/net/http/socks_bundle.go:472
	// _ = "end of CoverTab[43466]"
}

//line /usr/local/go/src/net/http/socks_bundle.go:473
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/net/http/socks_bundle.go:473
var _ = _go_fuzz_dep_.CoverTab
