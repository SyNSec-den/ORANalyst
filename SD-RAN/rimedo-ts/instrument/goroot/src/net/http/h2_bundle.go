//go:build !nethttpomithttp2
// +build !nethttpomithttp2

// Code generated by golang.org/x/tools/cmd/bundle. DO NOT EDIT.
//   $ bundle -o=h2_bundle.go -prefix=http2 -tags=!nethttpomithttp2 golang.org/x/net/http2

// Package http2 implements the HTTP/2 protocol.
//
// This package is low-level and intended to be used directly by very
// few people. Most users will use it indirectly through the automatic
// use by the net/http package (from Go 1.6 and later).
// For use in earlier Go versions see ConfigureServer. (Transport support
// requires Go 1.6 or later)
//
// See https://http2.github.io/ for more information on HTTP/2.
//
// See https://http2.golang.org/ for a test server running this code.
//

//line /usr/local/go/src/net/http/h2_bundle.go:20
package http

//line /usr/local/go/src/net/http/h2_bundle.go:20
import (
//line /usr/local/go/src/net/http/h2_bundle.go:20
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/net/http/h2_bundle.go:20
)
//line /usr/local/go/src/net/http/h2_bundle.go:20
import (
//line /usr/local/go/src/net/http/h2_bundle.go:20
	_atomic_ "sync/atomic"
//line /usr/local/go/src/net/http/h2_bundle.go:20
)

import (
	"bufio"
	"bytes"
	"compress/gzip"
	"context"
	"crypto/rand"
	"crypto/tls"
	"encoding/binary"
	"errors"
	"fmt"
	"io"
	"io/fs"
	"log"
	"math"
	mathrand "math/rand"
	"net"
	"net/http/httptrace"
	"net/textproto"
	"net/url"
	"os"
	"reflect"
	"runtime"
	"sort"
	"strconv"
	"strings"
	"sync"
	"sync/atomic"
	"time"

	"golang.org/x/net/http/httpguts"
	"golang.org/x/net/http2/hpack"
	"golang.org/x/net/idna"
)

//line /usr/local/go/src/net/http/h2_bundle.go:60
// asciiEqualFold is strings.EqualFold, ASCII only. It reports whether s and t
//line /usr/local/go/src/net/http/h2_bundle.go:60
// are equal, ASCII-case-insensitively.
//line /usr/local/go/src/net/http/h2_bundle.go:62
func http2asciiEqualFold(s, t string) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:62
	_go_fuzz_dep_.CoverTab[37589]++
							if len(s) != len(t) {
//line /usr/local/go/src/net/http/h2_bundle.go:63
		_go_fuzz_dep_.CoverTab[37592]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:64
		// _ = "end of CoverTab[37592]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:65
		_go_fuzz_dep_.CoverTab[37593]++
//line /usr/local/go/src/net/http/h2_bundle.go:65
		// _ = "end of CoverTab[37593]"
//line /usr/local/go/src/net/http/h2_bundle.go:65
	}
//line /usr/local/go/src/net/http/h2_bundle.go:65
	// _ = "end of CoverTab[37589]"
//line /usr/local/go/src/net/http/h2_bundle.go:65
	_go_fuzz_dep_.CoverTab[37590]++
							for i := 0; i < len(s); i++ {
//line /usr/local/go/src/net/http/h2_bundle.go:66
		_go_fuzz_dep_.CoverTab[37594]++
								if http2lower(s[i]) != http2lower(t[i]) {
//line /usr/local/go/src/net/http/h2_bundle.go:67
			_go_fuzz_dep_.CoverTab[37595]++
									return false
//line /usr/local/go/src/net/http/h2_bundle.go:68
			// _ = "end of CoverTab[37595]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:69
			_go_fuzz_dep_.CoverTab[37596]++
//line /usr/local/go/src/net/http/h2_bundle.go:69
			// _ = "end of CoverTab[37596]"
//line /usr/local/go/src/net/http/h2_bundle.go:69
		}
//line /usr/local/go/src/net/http/h2_bundle.go:69
		// _ = "end of CoverTab[37594]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:70
	// _ = "end of CoverTab[37590]"
//line /usr/local/go/src/net/http/h2_bundle.go:70
	_go_fuzz_dep_.CoverTab[37591]++
							return true
//line /usr/local/go/src/net/http/h2_bundle.go:71
	// _ = "end of CoverTab[37591]"
}

// lower returns the ASCII lowercase version of b.
func http2lower(b byte) byte {
//line /usr/local/go/src/net/http/h2_bundle.go:75
	_go_fuzz_dep_.CoverTab[37597]++
							if 'A' <= b && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:76
		_go_fuzz_dep_.CoverTab[37599]++
//line /usr/local/go/src/net/http/h2_bundle.go:76
		return b <= 'Z'
//line /usr/local/go/src/net/http/h2_bundle.go:76
		// _ = "end of CoverTab[37599]"
//line /usr/local/go/src/net/http/h2_bundle.go:76
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:76
		_go_fuzz_dep_.CoverTab[37600]++
								return b + ('a' - 'A')
//line /usr/local/go/src/net/http/h2_bundle.go:77
		// _ = "end of CoverTab[37600]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:78
		_go_fuzz_dep_.CoverTab[37601]++
//line /usr/local/go/src/net/http/h2_bundle.go:78
		// _ = "end of CoverTab[37601]"
//line /usr/local/go/src/net/http/h2_bundle.go:78
	}
//line /usr/local/go/src/net/http/h2_bundle.go:78
	// _ = "end of CoverTab[37597]"
//line /usr/local/go/src/net/http/h2_bundle.go:78
	_go_fuzz_dep_.CoverTab[37598]++
							return b
//line /usr/local/go/src/net/http/h2_bundle.go:79
	// _ = "end of CoverTab[37598]"
}

// isASCIIPrint returns whether s is ASCII and printable according to
//line /usr/local/go/src/net/http/h2_bundle.go:82
// https://tools.ietf.org/html/rfc20#section-4.2.
//line /usr/local/go/src/net/http/h2_bundle.go:84
func http2isASCIIPrint(s string) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:84
	_go_fuzz_dep_.CoverTab[37602]++
							for i := 0; i < len(s); i++ {
//line /usr/local/go/src/net/http/h2_bundle.go:85
		_go_fuzz_dep_.CoverTab[37604]++
								if s[i] < ' ' || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:86
			_go_fuzz_dep_.CoverTab[37605]++
//line /usr/local/go/src/net/http/h2_bundle.go:86
			return s[i] > '~'
//line /usr/local/go/src/net/http/h2_bundle.go:86
			// _ = "end of CoverTab[37605]"
//line /usr/local/go/src/net/http/h2_bundle.go:86
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:86
			_go_fuzz_dep_.CoverTab[37606]++
									return false
//line /usr/local/go/src/net/http/h2_bundle.go:87
			// _ = "end of CoverTab[37606]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:88
			_go_fuzz_dep_.CoverTab[37607]++
//line /usr/local/go/src/net/http/h2_bundle.go:88
			// _ = "end of CoverTab[37607]"
//line /usr/local/go/src/net/http/h2_bundle.go:88
		}
//line /usr/local/go/src/net/http/h2_bundle.go:88
		// _ = "end of CoverTab[37604]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:89
	// _ = "end of CoverTab[37602]"
//line /usr/local/go/src/net/http/h2_bundle.go:89
	_go_fuzz_dep_.CoverTab[37603]++
							return true
//line /usr/local/go/src/net/http/h2_bundle.go:90
	// _ = "end of CoverTab[37603]"
}

// asciiToLower returns the lowercase version of s if s is ASCII and printable,
//line /usr/local/go/src/net/http/h2_bundle.go:93
// and whether or not it was.
//line /usr/local/go/src/net/http/h2_bundle.go:95
func http2asciiToLower(s string) (lower string, ok bool) {
//line /usr/local/go/src/net/http/h2_bundle.go:95
	_go_fuzz_dep_.CoverTab[37608]++
							if !http2isASCIIPrint(s) {
//line /usr/local/go/src/net/http/h2_bundle.go:96
		_go_fuzz_dep_.CoverTab[37610]++
								return "", false
//line /usr/local/go/src/net/http/h2_bundle.go:97
		// _ = "end of CoverTab[37610]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:98
		_go_fuzz_dep_.CoverTab[37611]++
//line /usr/local/go/src/net/http/h2_bundle.go:98
		// _ = "end of CoverTab[37611]"
//line /usr/local/go/src/net/http/h2_bundle.go:98
	}
//line /usr/local/go/src/net/http/h2_bundle.go:98
	// _ = "end of CoverTab[37608]"
//line /usr/local/go/src/net/http/h2_bundle.go:98
	_go_fuzz_dep_.CoverTab[37609]++
							return strings.ToLower(s), true
//line /usr/local/go/src/net/http/h2_bundle.go:99
	// _ = "end of CoverTab[37609]"
}

//line /usr/local/go/src/net/http/h2_bundle.go:105
const (
	http2cipher_TLS_NULL_WITH_NULL_NULL			uint16	= 0x0000
	http2cipher_TLS_RSA_WITH_NULL_MD5			uint16	= 0x0001
	http2cipher_TLS_RSA_WITH_NULL_SHA			uint16	= 0x0002
	http2cipher_TLS_RSA_EXPORT_WITH_RC4_40_MD5		uint16	= 0x0003
	http2cipher_TLS_RSA_WITH_RC4_128_MD5			uint16	= 0x0004
	http2cipher_TLS_RSA_WITH_RC4_128_SHA			uint16	= 0x0005
	http2cipher_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5		uint16	= 0x0006
	http2cipher_TLS_RSA_WITH_IDEA_CBC_SHA			uint16	= 0x0007
	http2cipher_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA		uint16	= 0x0008
	http2cipher_TLS_RSA_WITH_DES_CBC_SHA			uint16	= 0x0009
	http2cipher_TLS_RSA_WITH_3DES_EDE_CBC_SHA		uint16	= 0x000A
	http2cipher_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA	uint16	= 0x000B
	http2cipher_TLS_DH_DSS_WITH_DES_CBC_SHA			uint16	= 0x000C
	http2cipher_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA		uint16	= 0x000D
	http2cipher_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA	uint16	= 0x000E
	http2cipher_TLS_DH_RSA_WITH_DES_CBC_SHA			uint16	= 0x000F
	http2cipher_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA		uint16	= 0x0010
	http2cipher_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA	uint16	= 0x0011
	http2cipher_TLS_DHE_DSS_WITH_DES_CBC_SHA		uint16	= 0x0012
	http2cipher_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA		uint16	= 0x0013
	http2cipher_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA	uint16	= 0x0014
	http2cipher_TLS_DHE_RSA_WITH_DES_CBC_SHA		uint16	= 0x0015
	http2cipher_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA		uint16	= 0x0016
	http2cipher_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5		uint16	= 0x0017
	http2cipher_TLS_DH_anon_WITH_RC4_128_MD5		uint16	= 0x0018
	http2cipher_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA	uint16	= 0x0019
	http2cipher_TLS_DH_anon_WITH_DES_CBC_SHA		uint16	= 0x001A
	http2cipher_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA		uint16	= 0x001B
	// Reserved uint16 =  0x001C-1D
	http2cipher_TLS_KRB5_WITH_DES_CBC_SHA			uint16	= 0x001E
	http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_SHA		uint16	= 0x001F
	http2cipher_TLS_KRB5_WITH_RC4_128_SHA			uint16	= 0x0020
	http2cipher_TLS_KRB5_WITH_IDEA_CBC_SHA			uint16	= 0x0021
	http2cipher_TLS_KRB5_WITH_DES_CBC_MD5			uint16	= 0x0022
	http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_MD5		uint16	= 0x0023
	http2cipher_TLS_KRB5_WITH_RC4_128_MD5			uint16	= 0x0024
	http2cipher_TLS_KRB5_WITH_IDEA_CBC_MD5			uint16	= 0x0025
	http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA		uint16	= 0x0026
	http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA		uint16	= 0x0027
	http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_SHA		uint16	= 0x0028
	http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5		uint16	= 0x0029
	http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5		uint16	= 0x002A
	http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_MD5		uint16	= 0x002B
	http2cipher_TLS_PSK_WITH_NULL_SHA			uint16	= 0x002C
	http2cipher_TLS_DHE_PSK_WITH_NULL_SHA			uint16	= 0x002D
	http2cipher_TLS_RSA_PSK_WITH_NULL_SHA			uint16	= 0x002E
	http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA		uint16	= 0x002F
	http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA		uint16	= 0x0030
	http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA		uint16	= 0x0031
	http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA		uint16	= 0x0032
	http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA		uint16	= 0x0033
	http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA		uint16	= 0x0034
	http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA		uint16	= 0x0035
	http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA		uint16	= 0x0036
	http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA		uint16	= 0x0037
	http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA		uint16	= 0x0038
	http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA		uint16	= 0x0039
	http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA		uint16	= 0x003A
	http2cipher_TLS_RSA_WITH_NULL_SHA256			uint16	= 0x003B
	http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA256		uint16	= 0x003C
	http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA256		uint16	= 0x003D
	http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA256		uint16	= 0x003E
	http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA256		uint16	= 0x003F
	http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256		uint16	= 0x0040
	http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA		uint16	= 0x0041
	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA	uint16	= 0x0042
	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA	uint16	= 0x0043
	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA	uint16	= 0x0044
	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA	uint16	= 0x0045
	http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA	uint16	= 0x0046
	// Reserved uint16 =  0x0047-4F
	// Reserved uint16 =  0x0050-58
	// Reserved uint16 =  0x0059-5C
	// Unassigned uint16 =  0x005D-5F
	// Reserved uint16 =  0x0060-66
	http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256	uint16	= 0x0067
	http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA256	uint16	= 0x0068
	http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA256	uint16	= 0x0069
	http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256	uint16	= 0x006A
	http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256	uint16	= 0x006B
	http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA256	uint16	= 0x006C
	http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA256	uint16	= 0x006D
	// Unassigned uint16 =  0x006E-83
	http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA		uint16	= 0x0084
	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA	uint16	= 0x0085
	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA	uint16	= 0x0086
	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA	uint16	= 0x0087
	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA	uint16	= 0x0088
	http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA	uint16	= 0x0089
	http2cipher_TLS_PSK_WITH_RC4_128_SHA			uint16	= 0x008A
	http2cipher_TLS_PSK_WITH_3DES_EDE_CBC_SHA		uint16	= 0x008B
	http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA		uint16	= 0x008C
	http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA		uint16	= 0x008D
	http2cipher_TLS_DHE_PSK_WITH_RC4_128_SHA		uint16	= 0x008E
	http2cipher_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA		uint16	= 0x008F
	http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA		uint16	= 0x0090
	http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA		uint16	= 0x0091
	http2cipher_TLS_RSA_PSK_WITH_RC4_128_SHA		uint16	= 0x0092
	http2cipher_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA		uint16	= 0x0093
	http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA		uint16	= 0x0094
	http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA		uint16	= 0x0095
	http2cipher_TLS_RSA_WITH_SEED_CBC_SHA			uint16	= 0x0096
	http2cipher_TLS_DH_DSS_WITH_SEED_CBC_SHA		uint16	= 0x0097
	http2cipher_TLS_DH_RSA_WITH_SEED_CBC_SHA		uint16	= 0x0098
	http2cipher_TLS_DHE_DSS_WITH_SEED_CBC_SHA		uint16	= 0x0099
	http2cipher_TLS_DHE_RSA_WITH_SEED_CBC_SHA		uint16	= 0x009A
	http2cipher_TLS_DH_anon_WITH_SEED_CBC_SHA		uint16	= 0x009B
	http2cipher_TLS_RSA_WITH_AES_128_GCM_SHA256		uint16	= 0x009C
	http2cipher_TLS_RSA_WITH_AES_256_GCM_SHA384		uint16	= 0x009D
	http2cipher_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256		uint16	= 0x009E
	http2cipher_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384		uint16	= 0x009F
	http2cipher_TLS_DH_RSA_WITH_AES_128_GCM_SHA256		uint16	= 0x00A0
	http2cipher_TLS_DH_RSA_WITH_AES_256_GCM_SHA384		uint16	= 0x00A1
	http2cipher_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256		uint16	= 0x00A2
	http2cipher_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384		uint16	= 0x00A3
	http2cipher_TLS_DH_DSS_WITH_AES_128_GCM_SHA256		uint16	= 0x00A4
	http2cipher_TLS_DH_DSS_WITH_AES_256_GCM_SHA384		uint16	= 0x00A5
	http2cipher_TLS_DH_anon_WITH_AES_128_GCM_SHA256		uint16	= 0x00A6
	http2cipher_TLS_DH_anon_WITH_AES_256_GCM_SHA384		uint16	= 0x00A7
	http2cipher_TLS_PSK_WITH_AES_128_GCM_SHA256		uint16	= 0x00A8
	http2cipher_TLS_PSK_WITH_AES_256_GCM_SHA384		uint16	= 0x00A9
	http2cipher_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256		uint16	= 0x00AA
	http2cipher_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384		uint16	= 0x00AB
	http2cipher_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256		uint16	= 0x00AC
	http2cipher_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384		uint16	= 0x00AD
	http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA256		uint16	= 0x00AE
	http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA384		uint16	= 0x00AF
	http2cipher_TLS_PSK_WITH_NULL_SHA256			uint16	= 0x00B0
	http2cipher_TLS_PSK_WITH_NULL_SHA384			uint16	= 0x00B1
	http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256		uint16	= 0x00B2
	http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384		uint16	= 0x00B3
	http2cipher_TLS_DHE_PSK_WITH_NULL_SHA256		uint16	= 0x00B4
	http2cipher_TLS_DHE_PSK_WITH_NULL_SHA384		uint16	= 0x00B5
	http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256		uint16	= 0x00B6
	http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384		uint16	= 0x00B7
	http2cipher_TLS_RSA_PSK_WITH_NULL_SHA256		uint16	= 0x00B8
	http2cipher_TLS_RSA_PSK_WITH_NULL_SHA384		uint16	= 0x00B9
	http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256	uint16	= 0x00BA
	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256	uint16	= 0x00BB
	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256	uint16	= 0x00BC
	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256	uint16	= 0x00BD
	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256	uint16	= 0x00BE
	http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256	uint16	= 0x00BF
	http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256	uint16	= 0x00C0
	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256	uint16	= 0x00C1
	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256	uint16	= 0x00C2
	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256	uint16	= 0x00C3
	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256	uint16	= 0x00C4
	http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256	uint16	= 0x00C5
	// Unassigned uint16 =  0x00C6-FE
	http2cipher_TLS_EMPTY_RENEGOTIATION_INFO_SCSV	uint16	= 0x00FF
	// Unassigned uint16 =  0x01-55,*
	http2cipher_TLS_FALLBACK_SCSV	uint16	= 0x5600
	// Unassigned                                   uint16 = 0x5601 - 0xC000
	http2cipher_TLS_ECDH_ECDSA_WITH_NULL_SHA			uint16	= 0xC001
	http2cipher_TLS_ECDH_ECDSA_WITH_RC4_128_SHA			uint16	= 0xC002
	http2cipher_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA		uint16	= 0xC003
	http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA			uint16	= 0xC004
	http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA			uint16	= 0xC005
	http2cipher_TLS_ECDHE_ECDSA_WITH_NULL_SHA			uint16	= 0xC006
	http2cipher_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA			uint16	= 0xC007
	http2cipher_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA		uint16	= 0xC008
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA		uint16	= 0xC009
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA		uint16	= 0xC00A
	http2cipher_TLS_ECDH_RSA_WITH_NULL_SHA				uint16	= 0xC00B
	http2cipher_TLS_ECDH_RSA_WITH_RC4_128_SHA			uint16	= 0xC00C
	http2cipher_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA			uint16	= 0xC00D
	http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA			uint16	= 0xC00E
	http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA			uint16	= 0xC00F
	http2cipher_TLS_ECDHE_RSA_WITH_NULL_SHA				uint16	= 0xC010
	http2cipher_TLS_ECDHE_RSA_WITH_RC4_128_SHA			uint16	= 0xC011
	http2cipher_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA			uint16	= 0xC012
	http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA			uint16	= 0xC013
	http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA			uint16	= 0xC014
	http2cipher_TLS_ECDH_anon_WITH_NULL_SHA				uint16	= 0xC015
	http2cipher_TLS_ECDH_anon_WITH_RC4_128_SHA			uint16	= 0xC016
	http2cipher_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA			uint16	= 0xC017
	http2cipher_TLS_ECDH_anon_WITH_AES_128_CBC_SHA			uint16	= 0xC018
	http2cipher_TLS_ECDH_anon_WITH_AES_256_CBC_SHA			uint16	= 0xC019
	http2cipher_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA			uint16	= 0xC01A
	http2cipher_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA		uint16	= 0xC01B
	http2cipher_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA		uint16	= 0xC01C
	http2cipher_TLS_SRP_SHA_WITH_AES_128_CBC_SHA			uint16	= 0xC01D
	http2cipher_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA		uint16	= 0xC01E
	http2cipher_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA		uint16	= 0xC01F
	http2cipher_TLS_SRP_SHA_WITH_AES_256_CBC_SHA			uint16	= 0xC020
	http2cipher_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA		uint16	= 0xC021
	http2cipher_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA		uint16	= 0xC022
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256		uint16	= 0xC023
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384		uint16	= 0xC024
	http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256		uint16	= 0xC025
	http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384		uint16	= 0xC026
	http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256		uint16	= 0xC027
	http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384		uint16	= 0xC028
	http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256		uint16	= 0xC029
	http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384		uint16	= 0xC02A
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256		uint16	= 0xC02B
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384		uint16	= 0xC02C
	http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256		uint16	= 0xC02D
	http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384		uint16	= 0xC02E
	http2cipher_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256		uint16	= 0xC02F
	http2cipher_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384		uint16	= 0xC030
	http2cipher_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256		uint16	= 0xC031
	http2cipher_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384		uint16	= 0xC032
	http2cipher_TLS_ECDHE_PSK_WITH_RC4_128_SHA			uint16	= 0xC033
	http2cipher_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA			uint16	= 0xC034
	http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA			uint16	= 0xC035
	http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA			uint16	= 0xC036
	http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256		uint16	= 0xC037
	http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384		uint16	= 0xC038
	http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA				uint16	= 0xC039
	http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA256			uint16	= 0xC03A
	http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA384			uint16	= 0xC03B
	http2cipher_TLS_RSA_WITH_ARIA_128_CBC_SHA256			uint16	= 0xC03C
	http2cipher_TLS_RSA_WITH_ARIA_256_CBC_SHA384			uint16	= 0xC03D
	http2cipher_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256			uint16	= 0xC03E
	http2cipher_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384			uint16	= 0xC03F
	http2cipher_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256			uint16	= 0xC040
	http2cipher_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384			uint16	= 0xC041
	http2cipher_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC042
	http2cipher_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC043
	http2cipher_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC044
	http2cipher_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC045
	http2cipher_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC046
	http2cipher_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC047
	http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC048
	http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC049
	http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC04A
	http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC04B
	http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC04C
	http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC04D
	http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC04E
	http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC04F
	http2cipher_TLS_RSA_WITH_ARIA_128_GCM_SHA256			uint16	= 0xC050
	http2cipher_TLS_RSA_WITH_ARIA_256_GCM_SHA384			uint16	= 0xC051
	http2cipher_TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256		uint16	= 0xC052
	http2cipher_TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384		uint16	= 0xC053
	http2cipher_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256			uint16	= 0xC054
	http2cipher_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384			uint16	= 0xC055
	http2cipher_TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256		uint16	= 0xC056
	http2cipher_TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384		uint16	= 0xC057
	http2cipher_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256			uint16	= 0xC058
	http2cipher_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384			uint16	= 0xC059
	http2cipher_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256		uint16	= 0xC05A
	http2cipher_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384		uint16	= 0xC05B
	http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256		uint16	= 0xC05C
	http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384		uint16	= 0xC05D
	http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256		uint16	= 0xC05E
	http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384		uint16	= 0xC05F
	http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256		uint16	= 0xC060
	http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384		uint16	= 0xC061
	http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256		uint16	= 0xC062
	http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384		uint16	= 0xC063
	http2cipher_TLS_PSK_WITH_ARIA_128_CBC_SHA256			uint16	= 0xC064
	http2cipher_TLS_PSK_WITH_ARIA_256_CBC_SHA384			uint16	= 0xC065
	http2cipher_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC066
	http2cipher_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC067
	http2cipher_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC068
	http2cipher_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC069
	http2cipher_TLS_PSK_WITH_ARIA_128_GCM_SHA256			uint16	= 0xC06A
	http2cipher_TLS_PSK_WITH_ARIA_256_GCM_SHA384			uint16	= 0xC06B
	http2cipher_TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256		uint16	= 0xC06C
	http2cipher_TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384		uint16	= 0xC06D
	http2cipher_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256		uint16	= 0xC06E
	http2cipher_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384		uint16	= 0xC06F
	http2cipher_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256		uint16	= 0xC070
	http2cipher_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384		uint16	= 0xC071
	http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256	uint16	= 0xC072
	http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384	uint16	= 0xC073
	http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256		uint16	= 0xC074
	http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384		uint16	= 0xC075
	http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256		uint16	= 0xC076
	http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384		uint16	= 0xC077
	http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256		uint16	= 0xC078
	http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384		uint16	= 0xC079
	http2cipher_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC07A
	http2cipher_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC07B
	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC07C
	http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC07D
	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC07E
	http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC07F
	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC080
	http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC081
	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC082
	http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC083
	http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC084
	http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC085
	http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256	uint16	= 0xC086
	http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384	uint16	= 0xC087
	http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC088
	http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC089
	http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC08A
	http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC08B
	http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC08C
	http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC08D
	http2cipher_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC08E
	http2cipher_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC08F
	http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC090
	http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC091
	http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256		uint16	= 0xC092
	http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384		uint16	= 0xC093
	http2cipher_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256		uint16	= 0xC094
	http2cipher_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384		uint16	= 0xC095
	http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256		uint16	= 0xC096
	http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384		uint16	= 0xC097
	http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256		uint16	= 0xC098
	http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384		uint16	= 0xC099
	http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256		uint16	= 0xC09A
	http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384		uint16	= 0xC09B
	http2cipher_TLS_RSA_WITH_AES_128_CCM				uint16	= 0xC09C
	http2cipher_TLS_RSA_WITH_AES_256_CCM				uint16	= 0xC09D
	http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM			uint16	= 0xC09E
	http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM			uint16	= 0xC09F
	http2cipher_TLS_RSA_WITH_AES_128_CCM_8				uint16	= 0xC0A0
	http2cipher_TLS_RSA_WITH_AES_256_CCM_8				uint16	= 0xC0A1
	http2cipher_TLS_DHE_RSA_WITH_AES_128_CCM_8			uint16	= 0xC0A2
	http2cipher_TLS_DHE_RSA_WITH_AES_256_CCM_8			uint16	= 0xC0A3
	http2cipher_TLS_PSK_WITH_AES_128_CCM				uint16	= 0xC0A4
	http2cipher_TLS_PSK_WITH_AES_256_CCM				uint16	= 0xC0A5
	http2cipher_TLS_DHE_PSK_WITH_AES_128_CCM			uint16	= 0xC0A6
	http2cipher_TLS_DHE_PSK_WITH_AES_256_CCM			uint16	= 0xC0A7
	http2cipher_TLS_PSK_WITH_AES_128_CCM_8				uint16	= 0xC0A8
	http2cipher_TLS_PSK_WITH_AES_256_CCM_8				uint16	= 0xC0A9
	http2cipher_TLS_PSK_DHE_WITH_AES_128_CCM_8			uint16	= 0xC0AA
	http2cipher_TLS_PSK_DHE_WITH_AES_256_CCM_8			uint16	= 0xC0AB
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM			uint16	= 0xC0AC
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM			uint16	= 0xC0AD
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8			uint16	= 0xC0AE
	http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8			uint16	= 0xC0AF
	// Unassigned uint16 =  0xC0B0-FF
	// Unassigned uint16 =  0xC1-CB,*
	// Unassigned uint16 =  0xCC00-A7
	http2cipher_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256		uint16	= 0xCCA8
	http2cipher_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256	uint16	= 0xCCA9
	http2cipher_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256		uint16	= 0xCCAA
	http2cipher_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256		uint16	= 0xCCAB
	http2cipher_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256		uint16	= 0xCCAC
	http2cipher_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256		uint16	= 0xCCAD
	http2cipher_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256		uint16	= 0xCCAE
)

// isBadCipher reports whether the cipher is blacklisted by the HTTP/2 spec.
//line /usr/local/go/src/net/http/h2_bundle.go:447
// References:
//line /usr/local/go/src/net/http/h2_bundle.go:447
// https://tools.ietf.org/html/rfc7540#appendix-A
//line /usr/local/go/src/net/http/h2_bundle.go:447
// Reject cipher suites from Appendix A.
//line /usr/local/go/src/net/http/h2_bundle.go:447
// "This list includes those cipher suites that do not
//line /usr/local/go/src/net/http/h2_bundle.go:447
// offer an ephemeral key exchange and those that are
//line /usr/local/go/src/net/http/h2_bundle.go:447
// based on the TLS null, stream or block cipher type"
//line /usr/local/go/src/net/http/h2_bundle.go:454
func http2isBadCipher(cipher uint16) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:454
	_go_fuzz_dep_.CoverTab[37612]++
							switch cipher {
	case http2cipher_TLS_NULL_WITH_NULL_NULL,
		http2cipher_TLS_RSA_WITH_NULL_MD5,
		http2cipher_TLS_RSA_WITH_NULL_SHA,
		http2cipher_TLS_RSA_EXPORT_WITH_RC4_40_MD5,
		http2cipher_TLS_RSA_WITH_RC4_128_MD5,
		http2cipher_TLS_RSA_WITH_RC4_128_SHA,
		http2cipher_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5,
		http2cipher_TLS_RSA_WITH_IDEA_CBC_SHA,
		http2cipher_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA,
		http2cipher_TLS_RSA_WITH_DES_CBC_SHA,
		http2cipher_TLS_RSA_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA,
		http2cipher_TLS_DH_DSS_WITH_DES_CBC_SHA,
		http2cipher_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA,
		http2cipher_TLS_DH_RSA_WITH_DES_CBC_SHA,
		http2cipher_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA,
		http2cipher_TLS_DHE_DSS_WITH_DES_CBC_SHA,
		http2cipher_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA,
		http2cipher_TLS_DHE_RSA_WITH_DES_CBC_SHA,
		http2cipher_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5,
		http2cipher_TLS_DH_anon_WITH_RC4_128_MD5,
		http2cipher_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA,
		http2cipher_TLS_DH_anon_WITH_DES_CBC_SHA,
		http2cipher_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_KRB5_WITH_DES_CBC_SHA,
		http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_KRB5_WITH_RC4_128_SHA,
		http2cipher_TLS_KRB5_WITH_IDEA_CBC_SHA,
		http2cipher_TLS_KRB5_WITH_DES_CBC_MD5,
		http2cipher_TLS_KRB5_WITH_3DES_EDE_CBC_MD5,
		http2cipher_TLS_KRB5_WITH_RC4_128_MD5,
		http2cipher_TLS_KRB5_WITH_IDEA_CBC_MD5,
		http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA,
		http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA,
		http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_SHA,
		http2cipher_TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5,
		http2cipher_TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5,
		http2cipher_TLS_KRB5_EXPORT_WITH_RC4_40_MD5,
		http2cipher_TLS_PSK_WITH_NULL_SHA,
		http2cipher_TLS_DHE_PSK_WITH_NULL_SHA,
		http2cipher_TLS_RSA_PSK_WITH_NULL_SHA,
		http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_RSA_WITH_NULL_SHA256,
		http2cipher_TLS_RSA_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_RSA_WITH_AES_256_CBC_SHA256,
		http2cipher_TLS_DH_DSS_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_DH_RSA_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,
		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,
		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,
		http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,
		http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
		http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA,
		http2cipher_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_DH_DSS_WITH_AES_256_CBC_SHA256,
		http2cipher_TLS_DH_RSA_WITH_AES_256_CBC_SHA256,
		http2cipher_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,
		http2cipher_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,
		http2cipher_TLS_DH_anon_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_DH_anon_WITH_AES_256_CBC_SHA256,
		http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,
		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,
		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,
		http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,
		http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
		http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA,
		http2cipher_TLS_PSK_WITH_RC4_128_SHA,
		http2cipher_TLS_PSK_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_DHE_PSK_WITH_RC4_128_SHA,
		http2cipher_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_RSA_PSK_WITH_RC4_128_SHA,
		http2cipher_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_RSA_WITH_SEED_CBC_SHA,
		http2cipher_TLS_DH_DSS_WITH_SEED_CBC_SHA,
		http2cipher_TLS_DH_RSA_WITH_SEED_CBC_SHA,
		http2cipher_TLS_DHE_DSS_WITH_SEED_CBC_SHA,
		http2cipher_TLS_DHE_RSA_WITH_SEED_CBC_SHA,
		http2cipher_TLS_DH_anon_WITH_SEED_CBC_SHA,
		http2cipher_TLS_RSA_WITH_AES_128_GCM_SHA256,
		http2cipher_TLS_RSA_WITH_AES_256_GCM_SHA384,
		http2cipher_TLS_DH_RSA_WITH_AES_128_GCM_SHA256,
		http2cipher_TLS_DH_RSA_WITH_AES_256_GCM_SHA384,
		http2cipher_TLS_DH_DSS_WITH_AES_128_GCM_SHA256,
		http2cipher_TLS_DH_DSS_WITH_AES_256_GCM_SHA384,
		http2cipher_TLS_DH_anon_WITH_AES_128_GCM_SHA256,
		http2cipher_TLS_DH_anon_WITH_AES_256_GCM_SHA384,
		http2cipher_TLS_PSK_WITH_AES_128_GCM_SHA256,
		http2cipher_TLS_PSK_WITH_AES_256_GCM_SHA384,
		http2cipher_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256,
		http2cipher_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384,
		http2cipher_TLS_PSK_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_PSK_WITH_AES_256_CBC_SHA384,
		http2cipher_TLS_PSK_WITH_NULL_SHA256,
		http2cipher_TLS_PSK_WITH_NULL_SHA384,
		http2cipher_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384,
		http2cipher_TLS_DHE_PSK_WITH_NULL_SHA256,
		http2cipher_TLS_DHE_PSK_WITH_NULL_SHA384,
		http2cipher_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384,
		http2cipher_TLS_RSA_PSK_WITH_NULL_SHA256,
		http2cipher_TLS_RSA_PSK_WITH_NULL_SHA384,
		http2cipher_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256,
		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256,
		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256,
		http2cipher_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256,
		http2cipher_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,
		http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256,
		http2cipher_TLS_EMPTY_RENEGOTIATION_INFO_SCSV,
		http2cipher_TLS_ECDH_ECDSA_WITH_NULL_SHA,
		http2cipher_TLS_ECDH_ECDSA_WITH_RC4_128_SHA,
		http2cipher_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_ECDHE_ECDSA_WITH_NULL_SHA,
		http2cipher_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
		http2cipher_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_ECDH_RSA_WITH_NULL_SHA,
		http2cipher_TLS_ECDH_RSA_WITH_RC4_128_SHA,
		http2cipher_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_ECDHE_RSA_WITH_NULL_SHA,
		http2cipher_TLS_ECDHE_RSA_WITH_RC4_128_SHA,
		http2cipher_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_ECDH_anon_WITH_NULL_SHA,
		http2cipher_TLS_ECDH_anon_WITH_RC4_128_SHA,
		http2cipher_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_ECDH_anon_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_ECDH_anon_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_SRP_SHA_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_SRP_SHA_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
		http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,
		http2cipher_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
		http2cipher_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,
		http2cipher_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,
		http2cipher_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,
		http2cipher_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,
		http2cipher_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,
		http2cipher_TLS_ECDHE_PSK_WITH_RC4_128_SHA,
		http2cipher_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA,
		http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA,
		http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA,
		http2cipher_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256,
		http2cipher_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384,
		http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA,
		http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA256,
		http2cipher_TLS_ECDHE_PSK_WITH_NULL_SHA384,
		http2cipher_TLS_RSA_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_RSA_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_DH_anon_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_DH_anon_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_RSA_WITH_ARIA_128_GCM_SHA256,
		http2cipher_TLS_RSA_WITH_ARIA_256_GCM_SHA384,
		http2cipher_TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256,
		http2cipher_TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384,
		http2cipher_TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256,
		http2cipher_TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384,
		http2cipher_TLS_DH_anon_WITH_ARIA_128_GCM_SHA256,
		http2cipher_TLS_DH_anon_WITH_ARIA_256_GCM_SHA384,
		http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256,
		http2cipher_TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384,
		http2cipher_TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256,
		http2cipher_TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384,
		http2cipher_TLS_PSK_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_PSK_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_PSK_WITH_ARIA_128_GCM_SHA256,
		http2cipher_TLS_PSK_WITH_ARIA_256_GCM_SHA384,
		http2cipher_TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256,
		http2cipher_TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384,
		http2cipher_TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256,
		http2cipher_TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384,
		http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
		http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,
		http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384,
		http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384,
		http2cipher_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256,
		http2cipher_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384,
		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256,
		http2cipher_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384,
		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256,
		http2cipher_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384,
		http2cipher_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256,
		http2cipher_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384,
		http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
		http2cipher_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,
		http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256,
		http2cipher_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384,
		http2cipher_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256,
		http2cipher_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384,
		http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256,
		http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384,
		http2cipher_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384,
		http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
		http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384,
		http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,
		http2cipher_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,
		http2cipher_TLS_RSA_WITH_AES_128_CCM,
		http2cipher_TLS_RSA_WITH_AES_256_CCM,
		http2cipher_TLS_RSA_WITH_AES_128_CCM_8,
		http2cipher_TLS_RSA_WITH_AES_256_CCM_8,
		http2cipher_TLS_PSK_WITH_AES_128_CCM,
		http2cipher_TLS_PSK_WITH_AES_256_CCM,
		http2cipher_TLS_PSK_WITH_AES_128_CCM_8,
		http2cipher_TLS_PSK_WITH_AES_256_CCM_8:
//line /usr/local/go/src/net/http/h2_bundle.go:731
		_go_fuzz_dep_.CoverTab[37613]++
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:732
		// _ = "end of CoverTab[37613]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:733
		_go_fuzz_dep_.CoverTab[37614]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:734
		// _ = "end of CoverTab[37614]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:735
	// _ = "end of CoverTab[37612]"
}

// ClientConnPool manages a pool of HTTP/2 client connections.
type http2ClientConnPool interface {
	// GetClientConn returns a specific HTTP/2 connection (usually
	// a TLS-TCP connection) to an HTTP/2 server. On success, the
	// returned ClientConn accounts for the upcoming RoundTrip
	// call, so the caller should not omit it. If the caller needs
	// to, ClientConn.RoundTrip can be called with a bogus
	// new(http.Request) to release the stream reservation.
	GetClientConn(req *Request, addr string) (*http2ClientConn, error)
	MarkDead(*http2ClientConn)
}

// clientConnPoolIdleCloser is the interface implemented by ClientConnPool
//line /usr/local/go/src/net/http/h2_bundle.go:750
// implementations which can close their idle connections.
//line /usr/local/go/src/net/http/h2_bundle.go:752
type http2clientConnPoolIdleCloser interface {
	http2ClientConnPool
	closeIdleConnections()
}

var (
	_	http2clientConnPoolIdleCloser	= (*http2clientConnPool)(nil)
	_	http2clientConnPoolIdleCloser	= http2noDialClientConnPool{}
)

// TODO: use singleflight for dialing and addConnCalls?
type http2clientConnPool struct {
	t	*http2Transport

	mu	sync.Mutex	// TODO: maybe switch to RWMutex
	// TODO: add support for sharing conns based on cert names
	// (e.g. share conn for googleapis.com and appspot.com)
	conns		map[string][]*http2ClientConn	// key is host:port
	dialing		map[string]*http2dialCall	// currently in-flight dials
	keys		map[*http2ClientConn][]string
	addConnCalls	map[string]*http2addConnCall	// in-flight addConnIfNeeded calls
}

func (p *http2clientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:775
	_go_fuzz_dep_.CoverTab[37615]++
							return p.getClientConn(req, addr, http2dialOnMiss)
//line /usr/local/go/src/net/http/h2_bundle.go:776
	// _ = "end of CoverTab[37615]"
}

const (
	http2dialOnMiss		= true
	http2noDialOnMiss	= false
)

func (p *http2clientConnPool) getClientConn(req *Request, addr string, dialOnMiss bool) (*http2ClientConn, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:784
	_go_fuzz_dep_.CoverTab[37616]++

							if http2isConnectionCloseRequest(req) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:786
		_go_fuzz_dep_.CoverTab[37618]++
//line /usr/local/go/src/net/http/h2_bundle.go:786
		return dialOnMiss
//line /usr/local/go/src/net/http/h2_bundle.go:786
		// _ = "end of CoverTab[37618]"
//line /usr/local/go/src/net/http/h2_bundle.go:786
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:786
		_go_fuzz_dep_.CoverTab[37619]++

								http2traceGetConn(req, addr)
								const singleUse = true
								cc, err := p.t.dialClientConn(req.Context(), addr, singleUse)
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:791
			_go_fuzz_dep_.CoverTab[37621]++
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:792
			// _ = "end of CoverTab[37621]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:793
			_go_fuzz_dep_.CoverTab[37622]++
//line /usr/local/go/src/net/http/h2_bundle.go:793
			// _ = "end of CoverTab[37622]"
//line /usr/local/go/src/net/http/h2_bundle.go:793
		}
//line /usr/local/go/src/net/http/h2_bundle.go:793
		// _ = "end of CoverTab[37619]"
//line /usr/local/go/src/net/http/h2_bundle.go:793
		_go_fuzz_dep_.CoverTab[37620]++
								return cc, nil
//line /usr/local/go/src/net/http/h2_bundle.go:794
		// _ = "end of CoverTab[37620]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:795
		_go_fuzz_dep_.CoverTab[37623]++
//line /usr/local/go/src/net/http/h2_bundle.go:795
		// _ = "end of CoverTab[37623]"
//line /usr/local/go/src/net/http/h2_bundle.go:795
	}
//line /usr/local/go/src/net/http/h2_bundle.go:795
	// _ = "end of CoverTab[37616]"
//line /usr/local/go/src/net/http/h2_bundle.go:795
	_go_fuzz_dep_.CoverTab[37617]++
							for {
//line /usr/local/go/src/net/http/h2_bundle.go:796
		_go_fuzz_dep_.CoverTab[37624]++
								p.mu.Lock()
								for _, cc := range p.conns[addr] {
//line /usr/local/go/src/net/http/h2_bundle.go:798
			_go_fuzz_dep_.CoverTab[37629]++
									if cc.ReserveNewRequest() {
//line /usr/local/go/src/net/http/h2_bundle.go:799
				_go_fuzz_dep_.CoverTab[37630]++

//line /usr/local/go/src/net/http/h2_bundle.go:803
				if !cc.getConnCalled {
//line /usr/local/go/src/net/http/h2_bundle.go:803
					_go_fuzz_dep_.CoverTab[37632]++
											http2traceGetConn(req, addr)
//line /usr/local/go/src/net/http/h2_bundle.go:804
					// _ = "end of CoverTab[37632]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:805
					_go_fuzz_dep_.CoverTab[37633]++
//line /usr/local/go/src/net/http/h2_bundle.go:805
					// _ = "end of CoverTab[37633]"
//line /usr/local/go/src/net/http/h2_bundle.go:805
				}
//line /usr/local/go/src/net/http/h2_bundle.go:805
				// _ = "end of CoverTab[37630]"
//line /usr/local/go/src/net/http/h2_bundle.go:805
				_go_fuzz_dep_.CoverTab[37631]++
										cc.getConnCalled = false
										p.mu.Unlock()
										return cc, nil
//line /usr/local/go/src/net/http/h2_bundle.go:808
				// _ = "end of CoverTab[37631]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:809
				_go_fuzz_dep_.CoverTab[37634]++
//line /usr/local/go/src/net/http/h2_bundle.go:809
				// _ = "end of CoverTab[37634]"
//line /usr/local/go/src/net/http/h2_bundle.go:809
			}
//line /usr/local/go/src/net/http/h2_bundle.go:809
			// _ = "end of CoverTab[37629]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:810
		// _ = "end of CoverTab[37624]"
//line /usr/local/go/src/net/http/h2_bundle.go:810
		_go_fuzz_dep_.CoverTab[37625]++
								if !dialOnMiss {
//line /usr/local/go/src/net/http/h2_bundle.go:811
			_go_fuzz_dep_.CoverTab[37635]++
									p.mu.Unlock()
									return nil, http2ErrNoCachedConn
//line /usr/local/go/src/net/http/h2_bundle.go:813
			// _ = "end of CoverTab[37635]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:814
			_go_fuzz_dep_.CoverTab[37636]++
//line /usr/local/go/src/net/http/h2_bundle.go:814
			// _ = "end of CoverTab[37636]"
//line /usr/local/go/src/net/http/h2_bundle.go:814
		}
//line /usr/local/go/src/net/http/h2_bundle.go:814
		// _ = "end of CoverTab[37625]"
//line /usr/local/go/src/net/http/h2_bundle.go:814
		_go_fuzz_dep_.CoverTab[37626]++
								http2traceGetConn(req, addr)
								call := p.getStartDialLocked(req.Context(), addr)
								p.mu.Unlock()
								<-call.done
								if http2shouldRetryDial(call, req) {
//line /usr/local/go/src/net/http/h2_bundle.go:819
			_go_fuzz_dep_.CoverTab[37637]++
									continue
//line /usr/local/go/src/net/http/h2_bundle.go:820
			// _ = "end of CoverTab[37637]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:821
			_go_fuzz_dep_.CoverTab[37638]++
//line /usr/local/go/src/net/http/h2_bundle.go:821
			// _ = "end of CoverTab[37638]"
//line /usr/local/go/src/net/http/h2_bundle.go:821
		}
//line /usr/local/go/src/net/http/h2_bundle.go:821
		// _ = "end of CoverTab[37626]"
//line /usr/local/go/src/net/http/h2_bundle.go:821
		_go_fuzz_dep_.CoverTab[37627]++
								cc, err := call.res, call.err
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:823
			_go_fuzz_dep_.CoverTab[37639]++
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:824
			// _ = "end of CoverTab[37639]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:825
			_go_fuzz_dep_.CoverTab[37640]++
//line /usr/local/go/src/net/http/h2_bundle.go:825
			// _ = "end of CoverTab[37640]"
//line /usr/local/go/src/net/http/h2_bundle.go:825
		}
//line /usr/local/go/src/net/http/h2_bundle.go:825
		// _ = "end of CoverTab[37627]"
//line /usr/local/go/src/net/http/h2_bundle.go:825
		_go_fuzz_dep_.CoverTab[37628]++
								if cc.ReserveNewRequest() {
//line /usr/local/go/src/net/http/h2_bundle.go:826
			_go_fuzz_dep_.CoverTab[37641]++
									return cc, nil
//line /usr/local/go/src/net/http/h2_bundle.go:827
			// _ = "end of CoverTab[37641]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:828
			_go_fuzz_dep_.CoverTab[37642]++
//line /usr/local/go/src/net/http/h2_bundle.go:828
			// _ = "end of CoverTab[37642]"
//line /usr/local/go/src/net/http/h2_bundle.go:828
		}
//line /usr/local/go/src/net/http/h2_bundle.go:828
		// _ = "end of CoverTab[37628]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:829
	// _ = "end of CoverTab[37617]"
}

// dialCall is an in-flight Transport dial call to a host.
type http2dialCall struct {
	_	http2incomparable
	p	*http2clientConnPool
	// the context associated with the request
	// that created this dialCall
	ctx	context.Context
	done	chan struct{}		// closed when done
	res	*http2ClientConn	// valid after done is closed
	err	error			// valid after done is closed
}

// requires p.mu is held.
func (p *http2clientConnPool) getStartDialLocked(ctx context.Context, addr string) *http2dialCall {
//line /usr/local/go/src/net/http/h2_bundle.go:845
	_go_fuzz_dep_.CoverTab[37643]++
							if call, ok := p.dialing[addr]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:846
		_go_fuzz_dep_.CoverTab[37646]++

								return call
//line /usr/local/go/src/net/http/h2_bundle.go:848
		// _ = "end of CoverTab[37646]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:849
		_go_fuzz_dep_.CoverTab[37647]++
//line /usr/local/go/src/net/http/h2_bundle.go:849
		// _ = "end of CoverTab[37647]"
//line /usr/local/go/src/net/http/h2_bundle.go:849
	}
//line /usr/local/go/src/net/http/h2_bundle.go:849
	// _ = "end of CoverTab[37643]"
//line /usr/local/go/src/net/http/h2_bundle.go:849
	_go_fuzz_dep_.CoverTab[37644]++
							call := &http2dialCall{p: p, done: make(chan struct{}), ctx: ctx}
							if p.dialing == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:851
		_go_fuzz_dep_.CoverTab[37648]++
								p.dialing = make(map[string]*http2dialCall)
//line /usr/local/go/src/net/http/h2_bundle.go:852
		// _ = "end of CoverTab[37648]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:853
		_go_fuzz_dep_.CoverTab[37649]++
//line /usr/local/go/src/net/http/h2_bundle.go:853
		// _ = "end of CoverTab[37649]"
//line /usr/local/go/src/net/http/h2_bundle.go:853
	}
//line /usr/local/go/src/net/http/h2_bundle.go:853
	// _ = "end of CoverTab[37644]"
//line /usr/local/go/src/net/http/h2_bundle.go:853
	_go_fuzz_dep_.CoverTab[37645]++
							p.dialing[addr] = call
//line /usr/local/go/src/net/http/h2_bundle.go:854
	_curRoutineNum15_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:854
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum15_)
							go call.dial(call.ctx, addr)
							return call
//line /usr/local/go/src/net/http/h2_bundle.go:856
	// _ = "end of CoverTab[37645]"
}

// run in its own goroutine.
func (c *http2dialCall) dial(ctx context.Context, addr string) {
//line /usr/local/go/src/net/http/h2_bundle.go:860
	_go_fuzz_dep_.CoverTab[37650]++
							const singleUse = false	// shared conn
							c.res, c.err = c.p.t.dialClientConn(ctx, addr, singleUse)

							c.p.mu.Lock()
							delete(c.p.dialing, addr)
							if c.err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:866
		_go_fuzz_dep_.CoverTab[37652]++
								c.p.addConnLocked(addr, c.res)
//line /usr/local/go/src/net/http/h2_bundle.go:867
		// _ = "end of CoverTab[37652]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:868
		_go_fuzz_dep_.CoverTab[37653]++
//line /usr/local/go/src/net/http/h2_bundle.go:868
		// _ = "end of CoverTab[37653]"
//line /usr/local/go/src/net/http/h2_bundle.go:868
	}
//line /usr/local/go/src/net/http/h2_bundle.go:868
	// _ = "end of CoverTab[37650]"
//line /usr/local/go/src/net/http/h2_bundle.go:868
	_go_fuzz_dep_.CoverTab[37651]++
							c.p.mu.Unlock()

							close(c.done)
//line /usr/local/go/src/net/http/h2_bundle.go:871
	// _ = "end of CoverTab[37651]"
}

// addConnIfNeeded makes a NewClientConn out of c if a connection for key doesn't
//line /usr/local/go/src/net/http/h2_bundle.go:874
// already exist. It coalesces concurrent calls with the same key.
//line /usr/local/go/src/net/http/h2_bundle.go:874
// This is used by the http1 Transport code when it creates a new connection. Because
//line /usr/local/go/src/net/http/h2_bundle.go:874
// the http1 Transport doesn't de-dup TCP dials to outbound hosts (because it doesn't know
//line /usr/local/go/src/net/http/h2_bundle.go:874
// the protocol), it can get into a situation where it has multiple TLS connections.
//line /usr/local/go/src/net/http/h2_bundle.go:874
// This code decides which ones live or die.
//line /usr/local/go/src/net/http/h2_bundle.go:874
// The return value used is whether c was used.
//line /usr/local/go/src/net/http/h2_bundle.go:874
// c is never closed.
//line /usr/local/go/src/net/http/h2_bundle.go:882
func (p *http2clientConnPool) addConnIfNeeded(key string, t *http2Transport, c *tls.Conn) (used bool, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:882
	_go_fuzz_dep_.CoverTab[37654]++
							p.mu.Lock()
							for _, cc := range p.conns[key] {
//line /usr/local/go/src/net/http/h2_bundle.go:884
		_go_fuzz_dep_.CoverTab[37658]++
								if cc.CanTakeNewRequest() {
//line /usr/local/go/src/net/http/h2_bundle.go:885
			_go_fuzz_dep_.CoverTab[37659]++
									p.mu.Unlock()
									return false, nil
//line /usr/local/go/src/net/http/h2_bundle.go:887
			// _ = "end of CoverTab[37659]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:888
			_go_fuzz_dep_.CoverTab[37660]++
//line /usr/local/go/src/net/http/h2_bundle.go:888
			// _ = "end of CoverTab[37660]"
//line /usr/local/go/src/net/http/h2_bundle.go:888
		}
//line /usr/local/go/src/net/http/h2_bundle.go:888
		// _ = "end of CoverTab[37658]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:889
	// _ = "end of CoverTab[37654]"
//line /usr/local/go/src/net/http/h2_bundle.go:889
	_go_fuzz_dep_.CoverTab[37655]++
							call, dup := p.addConnCalls[key]
							if !dup {
//line /usr/local/go/src/net/http/h2_bundle.go:891
		_go_fuzz_dep_.CoverTab[37661]++
								if p.addConnCalls == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:892
			_go_fuzz_dep_.CoverTab[37663]++
									p.addConnCalls = make(map[string]*http2addConnCall)
//line /usr/local/go/src/net/http/h2_bundle.go:893
			// _ = "end of CoverTab[37663]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:894
			_go_fuzz_dep_.CoverTab[37664]++
//line /usr/local/go/src/net/http/h2_bundle.go:894
			// _ = "end of CoverTab[37664]"
//line /usr/local/go/src/net/http/h2_bundle.go:894
		}
//line /usr/local/go/src/net/http/h2_bundle.go:894
		// _ = "end of CoverTab[37661]"
//line /usr/local/go/src/net/http/h2_bundle.go:894
		_go_fuzz_dep_.CoverTab[37662]++
								call = &http2addConnCall{
			p:	p,
			done:	make(chan struct{}),
		}
								p.addConnCalls[key] = call
//line /usr/local/go/src/net/http/h2_bundle.go:899
		_curRoutineNum16_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:899
		_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum16_)
								go call.run(t, key, c)
//line /usr/local/go/src/net/http/h2_bundle.go:900
		// _ = "end of CoverTab[37662]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:901
		_go_fuzz_dep_.CoverTab[37665]++
//line /usr/local/go/src/net/http/h2_bundle.go:901
		// _ = "end of CoverTab[37665]"
//line /usr/local/go/src/net/http/h2_bundle.go:901
	}
//line /usr/local/go/src/net/http/h2_bundle.go:901
	// _ = "end of CoverTab[37655]"
//line /usr/local/go/src/net/http/h2_bundle.go:901
	_go_fuzz_dep_.CoverTab[37656]++
							p.mu.Unlock()

							<-call.done
							if call.err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:905
		_go_fuzz_dep_.CoverTab[37666]++
								return false, call.err
//line /usr/local/go/src/net/http/h2_bundle.go:906
		// _ = "end of CoverTab[37666]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:907
		_go_fuzz_dep_.CoverTab[37667]++
//line /usr/local/go/src/net/http/h2_bundle.go:907
		// _ = "end of CoverTab[37667]"
//line /usr/local/go/src/net/http/h2_bundle.go:907
	}
//line /usr/local/go/src/net/http/h2_bundle.go:907
	// _ = "end of CoverTab[37656]"
//line /usr/local/go/src/net/http/h2_bundle.go:907
	_go_fuzz_dep_.CoverTab[37657]++
							return !dup, nil
//line /usr/local/go/src/net/http/h2_bundle.go:908
	// _ = "end of CoverTab[37657]"
}

type http2addConnCall struct {
	_	http2incomparable
	p	*http2clientConnPool
	done	chan struct{}	// closed when done
	err	error
}

func (c *http2addConnCall) run(t *http2Transport, key string, tc *tls.Conn) {
//line /usr/local/go/src/net/http/h2_bundle.go:918
	_go_fuzz_dep_.CoverTab[37668]++
							cc, err := t.NewClientConn(tc)

							p := c.p
							p.mu.Lock()
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:923
		_go_fuzz_dep_.CoverTab[37670]++
								c.err = err
//line /usr/local/go/src/net/http/h2_bundle.go:924
		// _ = "end of CoverTab[37670]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:925
		_go_fuzz_dep_.CoverTab[37671]++
								cc.getConnCalled = true
								p.addConnLocked(key, cc)
//line /usr/local/go/src/net/http/h2_bundle.go:927
		// _ = "end of CoverTab[37671]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:928
	// _ = "end of CoverTab[37668]"
//line /usr/local/go/src/net/http/h2_bundle.go:928
	_go_fuzz_dep_.CoverTab[37669]++
							delete(p.addConnCalls, key)
							p.mu.Unlock()
							close(c.done)
//line /usr/local/go/src/net/http/h2_bundle.go:931
	// _ = "end of CoverTab[37669]"
}

// p.mu must be held
func (p *http2clientConnPool) addConnLocked(key string, cc *http2ClientConn) {
//line /usr/local/go/src/net/http/h2_bundle.go:935
	_go_fuzz_dep_.CoverTab[37672]++
							for _, v := range p.conns[key] {
//line /usr/local/go/src/net/http/h2_bundle.go:936
		_go_fuzz_dep_.CoverTab[37676]++
								if v == cc {
//line /usr/local/go/src/net/http/h2_bundle.go:937
			_go_fuzz_dep_.CoverTab[37677]++
									return
//line /usr/local/go/src/net/http/h2_bundle.go:938
			// _ = "end of CoverTab[37677]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:939
			_go_fuzz_dep_.CoverTab[37678]++
//line /usr/local/go/src/net/http/h2_bundle.go:939
			// _ = "end of CoverTab[37678]"
//line /usr/local/go/src/net/http/h2_bundle.go:939
		}
//line /usr/local/go/src/net/http/h2_bundle.go:939
		// _ = "end of CoverTab[37676]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:940
	// _ = "end of CoverTab[37672]"
//line /usr/local/go/src/net/http/h2_bundle.go:940
	_go_fuzz_dep_.CoverTab[37673]++
							if p.conns == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:941
		_go_fuzz_dep_.CoverTab[37679]++
								p.conns = make(map[string][]*http2ClientConn)
//line /usr/local/go/src/net/http/h2_bundle.go:942
		// _ = "end of CoverTab[37679]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:943
		_go_fuzz_dep_.CoverTab[37680]++
//line /usr/local/go/src/net/http/h2_bundle.go:943
		// _ = "end of CoverTab[37680]"
//line /usr/local/go/src/net/http/h2_bundle.go:943
	}
//line /usr/local/go/src/net/http/h2_bundle.go:943
	// _ = "end of CoverTab[37673]"
//line /usr/local/go/src/net/http/h2_bundle.go:943
	_go_fuzz_dep_.CoverTab[37674]++
							if p.keys == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:944
		_go_fuzz_dep_.CoverTab[37681]++
								p.keys = make(map[*http2ClientConn][]string)
//line /usr/local/go/src/net/http/h2_bundle.go:945
		// _ = "end of CoverTab[37681]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:946
		_go_fuzz_dep_.CoverTab[37682]++
//line /usr/local/go/src/net/http/h2_bundle.go:946
		// _ = "end of CoverTab[37682]"
//line /usr/local/go/src/net/http/h2_bundle.go:946
	}
//line /usr/local/go/src/net/http/h2_bundle.go:946
	// _ = "end of CoverTab[37674]"
//line /usr/local/go/src/net/http/h2_bundle.go:946
	_go_fuzz_dep_.CoverTab[37675]++
							p.conns[key] = append(p.conns[key], cc)
							p.keys[cc] = append(p.keys[cc], key)
//line /usr/local/go/src/net/http/h2_bundle.go:948
	// _ = "end of CoverTab[37675]"
}

func (p *http2clientConnPool) MarkDead(cc *http2ClientConn) {
//line /usr/local/go/src/net/http/h2_bundle.go:951
	_go_fuzz_dep_.CoverTab[37683]++
							p.mu.Lock()
							defer p.mu.Unlock()
							for _, key := range p.keys[cc] {
//line /usr/local/go/src/net/http/h2_bundle.go:954
		_go_fuzz_dep_.CoverTab[37685]++
								vv, ok := p.conns[key]
								if !ok {
//line /usr/local/go/src/net/http/h2_bundle.go:956
			_go_fuzz_dep_.CoverTab[37687]++
									continue
//line /usr/local/go/src/net/http/h2_bundle.go:957
			// _ = "end of CoverTab[37687]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:958
			_go_fuzz_dep_.CoverTab[37688]++
//line /usr/local/go/src/net/http/h2_bundle.go:958
			// _ = "end of CoverTab[37688]"
//line /usr/local/go/src/net/http/h2_bundle.go:958
		}
//line /usr/local/go/src/net/http/h2_bundle.go:958
		// _ = "end of CoverTab[37685]"
//line /usr/local/go/src/net/http/h2_bundle.go:958
		_go_fuzz_dep_.CoverTab[37686]++
								newList := http2filterOutClientConn(vv, cc)
								if len(newList) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:960
			_go_fuzz_dep_.CoverTab[37689]++
									p.conns[key] = newList
//line /usr/local/go/src/net/http/h2_bundle.go:961
			// _ = "end of CoverTab[37689]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:962
			_go_fuzz_dep_.CoverTab[37690]++
									delete(p.conns, key)
//line /usr/local/go/src/net/http/h2_bundle.go:963
			// _ = "end of CoverTab[37690]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:964
		// _ = "end of CoverTab[37686]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:965
	// _ = "end of CoverTab[37683]"
//line /usr/local/go/src/net/http/h2_bundle.go:965
	_go_fuzz_dep_.CoverTab[37684]++
							delete(p.keys, cc)
//line /usr/local/go/src/net/http/h2_bundle.go:966
	// _ = "end of CoverTab[37684]"
}

func (p *http2clientConnPool) closeIdleConnections() {
//line /usr/local/go/src/net/http/h2_bundle.go:969
	_go_fuzz_dep_.CoverTab[37691]++
							p.mu.Lock()
							defer p.mu.Unlock()

//line /usr/local/go/src/net/http/h2_bundle.go:978
	for _, vv := range p.conns {
//line /usr/local/go/src/net/http/h2_bundle.go:978
		_go_fuzz_dep_.CoverTab[37692]++
								for _, cc := range vv {
//line /usr/local/go/src/net/http/h2_bundle.go:979
			_go_fuzz_dep_.CoverTab[37693]++
									cc.closeIfIdle()
//line /usr/local/go/src/net/http/h2_bundle.go:980
			// _ = "end of CoverTab[37693]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:981
		// _ = "end of CoverTab[37692]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:982
	// _ = "end of CoverTab[37691]"
}

func http2filterOutClientConn(in []*http2ClientConn, exclude *http2ClientConn) []*http2ClientConn {
//line /usr/local/go/src/net/http/h2_bundle.go:985
	_go_fuzz_dep_.CoverTab[37694]++
							out := in[:0]
							for _, v := range in {
//line /usr/local/go/src/net/http/h2_bundle.go:987
		_go_fuzz_dep_.CoverTab[37697]++
								if v != exclude {
//line /usr/local/go/src/net/http/h2_bundle.go:988
			_go_fuzz_dep_.CoverTab[37698]++
									out = append(out, v)
//line /usr/local/go/src/net/http/h2_bundle.go:989
			// _ = "end of CoverTab[37698]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:990
			_go_fuzz_dep_.CoverTab[37699]++
//line /usr/local/go/src/net/http/h2_bundle.go:990
			// _ = "end of CoverTab[37699]"
//line /usr/local/go/src/net/http/h2_bundle.go:990
		}
//line /usr/local/go/src/net/http/h2_bundle.go:990
		// _ = "end of CoverTab[37697]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:991
	// _ = "end of CoverTab[37694]"
//line /usr/local/go/src/net/http/h2_bundle.go:991
	_go_fuzz_dep_.CoverTab[37695]++

//line /usr/local/go/src/net/http/h2_bundle.go:994
	if len(in) != len(out) {
//line /usr/local/go/src/net/http/h2_bundle.go:994
		_go_fuzz_dep_.CoverTab[37700]++
								in[len(in)-1] = nil
//line /usr/local/go/src/net/http/h2_bundle.go:995
		// _ = "end of CoverTab[37700]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:996
		_go_fuzz_dep_.CoverTab[37701]++
//line /usr/local/go/src/net/http/h2_bundle.go:996
		// _ = "end of CoverTab[37701]"
//line /usr/local/go/src/net/http/h2_bundle.go:996
	}
//line /usr/local/go/src/net/http/h2_bundle.go:996
	// _ = "end of CoverTab[37695]"
//line /usr/local/go/src/net/http/h2_bundle.go:996
	_go_fuzz_dep_.CoverTab[37696]++
							return out
//line /usr/local/go/src/net/http/h2_bundle.go:997
	// _ = "end of CoverTab[37696]"
}

// noDialClientConnPool is an implementation of http2.ClientConnPool
//line /usr/local/go/src/net/http/h2_bundle.go:1000
// which never dials. We let the HTTP/1.1 client dial and use its TLS
//line /usr/local/go/src/net/http/h2_bundle.go:1000
// connection instead.
//line /usr/local/go/src/net/http/h2_bundle.go:1003
type http2noDialClientConnPool struct{ *http2clientConnPool }

func (p http2noDialClientConnPool) GetClientConn(req *Request, addr string) (*http2ClientConn, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:1005
	_go_fuzz_dep_.CoverTab[37702]++
							return p.getClientConn(req, addr, http2noDialOnMiss)
//line /usr/local/go/src/net/http/h2_bundle.go:1006
	// _ = "end of CoverTab[37702]"
}

// shouldRetryDial reports whether the current request should
//line /usr/local/go/src/net/http/h2_bundle.go:1009
// retry dialing after the call finished unsuccessfully, for example
//line /usr/local/go/src/net/http/h2_bundle.go:1009
// if the dial was canceled because of a context cancellation or
//line /usr/local/go/src/net/http/h2_bundle.go:1009
// deadline expiry.
//line /usr/local/go/src/net/http/h2_bundle.go:1013
func http2shouldRetryDial(call *http2dialCall, req *Request) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1013
	_go_fuzz_dep_.CoverTab[37703]++
							if call.err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1014
		_go_fuzz_dep_.CoverTab[37707]++

								return false
//line /usr/local/go/src/net/http/h2_bundle.go:1016
		// _ = "end of CoverTab[37707]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1017
		_go_fuzz_dep_.CoverTab[37708]++
//line /usr/local/go/src/net/http/h2_bundle.go:1017
		// _ = "end of CoverTab[37708]"
//line /usr/local/go/src/net/http/h2_bundle.go:1017
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1017
	// _ = "end of CoverTab[37703]"
//line /usr/local/go/src/net/http/h2_bundle.go:1017
	_go_fuzz_dep_.CoverTab[37704]++
							if call.ctx == req.Context() {
//line /usr/local/go/src/net/http/h2_bundle.go:1018
		_go_fuzz_dep_.CoverTab[37709]++

//line /usr/local/go/src/net/http/h2_bundle.go:1022
		return false
//line /usr/local/go/src/net/http/h2_bundle.go:1022
		// _ = "end of CoverTab[37709]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1023
		_go_fuzz_dep_.CoverTab[37710]++
//line /usr/local/go/src/net/http/h2_bundle.go:1023
		// _ = "end of CoverTab[37710]"
//line /usr/local/go/src/net/http/h2_bundle.go:1023
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1023
	// _ = "end of CoverTab[37704]"
//line /usr/local/go/src/net/http/h2_bundle.go:1023
	_go_fuzz_dep_.CoverTab[37705]++
							if !errors.Is(call.err, context.Canceled) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1024
		_go_fuzz_dep_.CoverTab[37711]++
//line /usr/local/go/src/net/http/h2_bundle.go:1024
		return !errors.Is(call.err, context.DeadlineExceeded)
//line /usr/local/go/src/net/http/h2_bundle.go:1024
		// _ = "end of CoverTab[37711]"
//line /usr/local/go/src/net/http/h2_bundle.go:1024
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:1024
		_go_fuzz_dep_.CoverTab[37712]++

//line /usr/local/go/src/net/http/h2_bundle.go:1027
		return false
//line /usr/local/go/src/net/http/h2_bundle.go:1027
		// _ = "end of CoverTab[37712]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1028
		_go_fuzz_dep_.CoverTab[37713]++
//line /usr/local/go/src/net/http/h2_bundle.go:1028
		// _ = "end of CoverTab[37713]"
//line /usr/local/go/src/net/http/h2_bundle.go:1028
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1028
	// _ = "end of CoverTab[37705]"
//line /usr/local/go/src/net/http/h2_bundle.go:1028
	_go_fuzz_dep_.CoverTab[37706]++

//line /usr/local/go/src/net/http/h2_bundle.go:1031
	return call.ctx.Err() != nil
//line /usr/local/go/src/net/http/h2_bundle.go:1031
	// _ = "end of CoverTab[37706]"
}

// Buffer chunks are allocated from a pool to reduce pressure on GC.
//line /usr/local/go/src/net/http/h2_bundle.go:1034
// The maximum wasted space per dataBuffer is 2x the largest size class,
//line /usr/local/go/src/net/http/h2_bundle.go:1034
// which happens when the dataBuffer has multiple chunks and there is
//line /usr/local/go/src/net/http/h2_bundle.go:1034
// one unread byte in both the first and last chunks. We use a few size
//line /usr/local/go/src/net/http/h2_bundle.go:1034
// classes to minimize overheads for servers that typically receive very
//line /usr/local/go/src/net/http/h2_bundle.go:1034
// small request bodies.
//line /usr/local/go/src/net/http/h2_bundle.go:1034
//
//line /usr/local/go/src/net/http/h2_bundle.go:1034
// TODO: Benchmark to determine if the pools are necessary. The GC may have
//line /usr/local/go/src/net/http/h2_bundle.go:1034
// improved enough that we can instead allocate chunks like this:
//line /usr/local/go/src/net/http/h2_bundle.go:1034
// make([]byte, max(16<<10, expectedBytesRemaining))
//line /usr/local/go/src/net/http/h2_bundle.go:1044
var (
	http2dataChunkSizeClasses	= []int{
		1 << 10,
		2 << 10,
		4 << 10,
		8 << 10,
		16 << 10,
	}
	http2dataChunkPools	= [...]sync.Pool{
		{New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:1053
			_go_fuzz_dep_.CoverTab[37714]++
//line /usr/local/go/src/net/http/h2_bundle.go:1053
			return make([]byte, 1<<10)
//line /usr/local/go/src/net/http/h2_bundle.go:1053
			// _ = "end of CoverTab[37714]"
//line /usr/local/go/src/net/http/h2_bundle.go:1053
		}},
		{New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:1054
			_go_fuzz_dep_.CoverTab[37715]++
//line /usr/local/go/src/net/http/h2_bundle.go:1054
			return make([]byte, 2<<10)
//line /usr/local/go/src/net/http/h2_bundle.go:1054
			// _ = "end of CoverTab[37715]"
//line /usr/local/go/src/net/http/h2_bundle.go:1054
		}},
		{New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:1055
			_go_fuzz_dep_.CoverTab[37716]++
//line /usr/local/go/src/net/http/h2_bundle.go:1055
			return make([]byte, 4<<10)
//line /usr/local/go/src/net/http/h2_bundle.go:1055
			// _ = "end of CoverTab[37716]"
//line /usr/local/go/src/net/http/h2_bundle.go:1055
		}},
		{New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:1056
			_go_fuzz_dep_.CoverTab[37717]++
//line /usr/local/go/src/net/http/h2_bundle.go:1056
			return make([]byte, 8<<10)
//line /usr/local/go/src/net/http/h2_bundle.go:1056
			// _ = "end of CoverTab[37717]"
//line /usr/local/go/src/net/http/h2_bundle.go:1056
		}},
		{New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:1057
			_go_fuzz_dep_.CoverTab[37718]++
//line /usr/local/go/src/net/http/h2_bundle.go:1057
			return make([]byte, 16<<10)
//line /usr/local/go/src/net/http/h2_bundle.go:1057
			// _ = "end of CoverTab[37718]"
//line /usr/local/go/src/net/http/h2_bundle.go:1057
		}},
	}
)

func http2getDataBufferChunk(size int64) []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:1061
	_go_fuzz_dep_.CoverTab[37719]++
							i := 0
							for ; i < len(http2dataChunkSizeClasses)-1; i++ {
//line /usr/local/go/src/net/http/h2_bundle.go:1063
		_go_fuzz_dep_.CoverTab[37721]++
								if size <= int64(http2dataChunkSizeClasses[i]) {
//line /usr/local/go/src/net/http/h2_bundle.go:1064
			_go_fuzz_dep_.CoverTab[37722]++
									break
//line /usr/local/go/src/net/http/h2_bundle.go:1065
			// _ = "end of CoverTab[37722]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1066
			_go_fuzz_dep_.CoverTab[37723]++
//line /usr/local/go/src/net/http/h2_bundle.go:1066
			// _ = "end of CoverTab[37723]"
//line /usr/local/go/src/net/http/h2_bundle.go:1066
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1066
		// _ = "end of CoverTab[37721]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1067
	// _ = "end of CoverTab[37719]"
//line /usr/local/go/src/net/http/h2_bundle.go:1067
	_go_fuzz_dep_.CoverTab[37720]++
							return http2dataChunkPools[i].Get().([]byte)
//line /usr/local/go/src/net/http/h2_bundle.go:1068
	// _ = "end of CoverTab[37720]"
}

func http2putDataBufferChunk(p []byte) {
//line /usr/local/go/src/net/http/h2_bundle.go:1071
	_go_fuzz_dep_.CoverTab[37724]++
							for i, n := range http2dataChunkSizeClasses {
//line /usr/local/go/src/net/http/h2_bundle.go:1072
		_go_fuzz_dep_.CoverTab[37726]++
								if len(p) == n {
//line /usr/local/go/src/net/http/h2_bundle.go:1073
			_go_fuzz_dep_.CoverTab[37727]++
									http2dataChunkPools[i].Put(p)
									return
//line /usr/local/go/src/net/http/h2_bundle.go:1075
			// _ = "end of CoverTab[37727]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1076
			_go_fuzz_dep_.CoverTab[37728]++
//line /usr/local/go/src/net/http/h2_bundle.go:1076
			// _ = "end of CoverTab[37728]"
//line /usr/local/go/src/net/http/h2_bundle.go:1076
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1076
		// _ = "end of CoverTab[37726]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1077
	// _ = "end of CoverTab[37724]"
//line /usr/local/go/src/net/http/h2_bundle.go:1077
	_go_fuzz_dep_.CoverTab[37725]++
							panic(fmt.Sprintf("unexpected buffer len=%v", len(p)))
//line /usr/local/go/src/net/http/h2_bundle.go:1078
	// _ = "end of CoverTab[37725]"
}

// dataBuffer is an io.ReadWriter backed by a list of data chunks.
//line /usr/local/go/src/net/http/h2_bundle.go:1081
// Each dataBuffer is used to read DATA frames on a single stream.
//line /usr/local/go/src/net/http/h2_bundle.go:1081
// The buffer is divided into chunks so the server can limit the
//line /usr/local/go/src/net/http/h2_bundle.go:1081
// total memory used by a single connection without limiting the
//line /usr/local/go/src/net/http/h2_bundle.go:1081
// request body size on any single stream.
//line /usr/local/go/src/net/http/h2_bundle.go:1086
type http2dataBuffer struct {
	chunks		[][]byte
	r		int	// next byte to read is chunks[0][r]
	w		int	// next byte to write is chunks[len(chunks)-1][w]
	size		int	// total buffered bytes
	expected	int64	// we expect at least this many bytes in future Write calls (ignored if <= 0)
}

var http2errReadEmpty = errors.New("read from empty dataBuffer")

// Read copies bytes from the buffer into p.
//line /usr/local/go/src/net/http/h2_bundle.go:1096
// It is an error to read when no data is available.
//line /usr/local/go/src/net/http/h2_bundle.go:1098
func (b *http2dataBuffer) Read(p []byte) (int, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:1098
	_go_fuzz_dep_.CoverTab[37729]++
							if b.size == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:1099
		_go_fuzz_dep_.CoverTab[37732]++
								return 0, http2errReadEmpty
//line /usr/local/go/src/net/http/h2_bundle.go:1100
		// _ = "end of CoverTab[37732]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1101
		_go_fuzz_dep_.CoverTab[37733]++
//line /usr/local/go/src/net/http/h2_bundle.go:1101
		// _ = "end of CoverTab[37733]"
//line /usr/local/go/src/net/http/h2_bundle.go:1101
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1101
	// _ = "end of CoverTab[37729]"
//line /usr/local/go/src/net/http/h2_bundle.go:1101
	_go_fuzz_dep_.CoverTab[37730]++
							var ntotal int
							for len(p) > 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1103
		_go_fuzz_dep_.CoverTab[37734]++
//line /usr/local/go/src/net/http/h2_bundle.go:1103
		return b.size > 0
//line /usr/local/go/src/net/http/h2_bundle.go:1103
		// _ = "end of CoverTab[37734]"
//line /usr/local/go/src/net/http/h2_bundle.go:1103
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:1103
		_go_fuzz_dep_.CoverTab[37735]++
								readFrom := b.bytesFromFirstChunk()
								n := copy(p, readFrom)
								p = p[n:]
								ntotal += n
								b.r += n
								b.size -= n

								if b.r == len(b.chunks[0]) {
//line /usr/local/go/src/net/http/h2_bundle.go:1111
			_go_fuzz_dep_.CoverTab[37736]++
									http2putDataBufferChunk(b.chunks[0])
									end := len(b.chunks) - 1
									copy(b.chunks[:end], b.chunks[1:])
									b.chunks[end] = nil
									b.chunks = b.chunks[:end]
									b.r = 0
//line /usr/local/go/src/net/http/h2_bundle.go:1117
			// _ = "end of CoverTab[37736]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1118
			_go_fuzz_dep_.CoverTab[37737]++
//line /usr/local/go/src/net/http/h2_bundle.go:1118
			// _ = "end of CoverTab[37737]"
//line /usr/local/go/src/net/http/h2_bundle.go:1118
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1118
		// _ = "end of CoverTab[37735]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1119
	// _ = "end of CoverTab[37730]"
//line /usr/local/go/src/net/http/h2_bundle.go:1119
	_go_fuzz_dep_.CoverTab[37731]++
							return ntotal, nil
//line /usr/local/go/src/net/http/h2_bundle.go:1120
	// _ = "end of CoverTab[37731]"
}

func (b *http2dataBuffer) bytesFromFirstChunk() []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:1123
	_go_fuzz_dep_.CoverTab[37738]++
							if len(b.chunks) == 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:1124
		_go_fuzz_dep_.CoverTab[37740]++
								return b.chunks[0][b.r:b.w]
//line /usr/local/go/src/net/http/h2_bundle.go:1125
		// _ = "end of CoverTab[37740]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1126
		_go_fuzz_dep_.CoverTab[37741]++
//line /usr/local/go/src/net/http/h2_bundle.go:1126
		// _ = "end of CoverTab[37741]"
//line /usr/local/go/src/net/http/h2_bundle.go:1126
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1126
	// _ = "end of CoverTab[37738]"
//line /usr/local/go/src/net/http/h2_bundle.go:1126
	_go_fuzz_dep_.CoverTab[37739]++
							return b.chunks[0][b.r:]
//line /usr/local/go/src/net/http/h2_bundle.go:1127
	// _ = "end of CoverTab[37739]"
}

// Len returns the number of bytes of the unread portion of the buffer.
func (b *http2dataBuffer) Len() int {
//line /usr/local/go/src/net/http/h2_bundle.go:1131
	_go_fuzz_dep_.CoverTab[37742]++
							return b.size
//line /usr/local/go/src/net/http/h2_bundle.go:1132
	// _ = "end of CoverTab[37742]"
}

// Write appends p to the buffer.
func (b *http2dataBuffer) Write(p []byte) (int, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:1136
	_go_fuzz_dep_.CoverTab[37743]++
							ntotal := len(p)
							for len(p) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:1138
		_go_fuzz_dep_.CoverTab[37745]++

//line /usr/local/go/src/net/http/h2_bundle.go:1142
		want := int64(len(p))
		if b.expected > want {
//line /usr/local/go/src/net/http/h2_bundle.go:1143
			_go_fuzz_dep_.CoverTab[37747]++
									want = b.expected
//line /usr/local/go/src/net/http/h2_bundle.go:1144
			// _ = "end of CoverTab[37747]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1145
			_go_fuzz_dep_.CoverTab[37748]++
//line /usr/local/go/src/net/http/h2_bundle.go:1145
			// _ = "end of CoverTab[37748]"
//line /usr/local/go/src/net/http/h2_bundle.go:1145
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1145
		// _ = "end of CoverTab[37745]"
//line /usr/local/go/src/net/http/h2_bundle.go:1145
		_go_fuzz_dep_.CoverTab[37746]++
								chunk := b.lastChunkOrAlloc(want)
								n := copy(chunk[b.w:], p)
								p = p[n:]
								b.w += n
								b.size += n
								b.expected -= int64(n)
//line /usr/local/go/src/net/http/h2_bundle.go:1151
		// _ = "end of CoverTab[37746]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1152
	// _ = "end of CoverTab[37743]"
//line /usr/local/go/src/net/http/h2_bundle.go:1152
	_go_fuzz_dep_.CoverTab[37744]++
							return ntotal, nil
//line /usr/local/go/src/net/http/h2_bundle.go:1153
	// _ = "end of CoverTab[37744]"
}

func (b *http2dataBuffer) lastChunkOrAlloc(want int64) []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:1156
	_go_fuzz_dep_.CoverTab[37749]++
							if len(b.chunks) != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:1157
		_go_fuzz_dep_.CoverTab[37751]++
								last := b.chunks[len(b.chunks)-1]
								if b.w < len(last) {
//line /usr/local/go/src/net/http/h2_bundle.go:1159
			_go_fuzz_dep_.CoverTab[37752]++
									return last
//line /usr/local/go/src/net/http/h2_bundle.go:1160
			// _ = "end of CoverTab[37752]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1161
			_go_fuzz_dep_.CoverTab[37753]++
//line /usr/local/go/src/net/http/h2_bundle.go:1161
			// _ = "end of CoverTab[37753]"
//line /usr/local/go/src/net/http/h2_bundle.go:1161
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1161
		// _ = "end of CoverTab[37751]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1162
		_go_fuzz_dep_.CoverTab[37754]++
//line /usr/local/go/src/net/http/h2_bundle.go:1162
		// _ = "end of CoverTab[37754]"
//line /usr/local/go/src/net/http/h2_bundle.go:1162
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1162
	// _ = "end of CoverTab[37749]"
//line /usr/local/go/src/net/http/h2_bundle.go:1162
	_go_fuzz_dep_.CoverTab[37750]++
							chunk := http2getDataBufferChunk(want)
							b.chunks = append(b.chunks, chunk)
							b.w = 0
							return chunk
//line /usr/local/go/src/net/http/h2_bundle.go:1166
	// _ = "end of CoverTab[37750]"
}

// An ErrCode is an unsigned 32-bit error code as defined in the HTTP/2 spec.
type http2ErrCode uint32

const (
	http2ErrCodeNo			http2ErrCode	= 0x0
	http2ErrCodeProtocol		http2ErrCode	= 0x1
	http2ErrCodeInternal		http2ErrCode	= 0x2
	http2ErrCodeFlowControl		http2ErrCode	= 0x3
	http2ErrCodeSettingsTimeout	http2ErrCode	= 0x4
	http2ErrCodeStreamClosed	http2ErrCode	= 0x5
	http2ErrCodeFrameSize		http2ErrCode	= 0x6
	http2ErrCodeRefusedStream	http2ErrCode	= 0x7
	http2ErrCodeCancel		http2ErrCode	= 0x8
	http2ErrCodeCompression		http2ErrCode	= 0x9
	http2ErrCodeConnect		http2ErrCode	= 0xa
	http2ErrCodeEnhanceYourCalm	http2ErrCode	= 0xb
	http2ErrCodeInadequateSecurity	http2ErrCode	= 0xc
	http2ErrCodeHTTP11Required	http2ErrCode	= 0xd
)

var http2errCodeName = map[http2ErrCode]string{
	http2ErrCodeNo:			"NO_ERROR",
	http2ErrCodeProtocol:		"PROTOCOL_ERROR",
	http2ErrCodeInternal:		"INTERNAL_ERROR",
	http2ErrCodeFlowControl:	"FLOW_CONTROL_ERROR",
	http2ErrCodeSettingsTimeout:	"SETTINGS_TIMEOUT",
	http2ErrCodeStreamClosed:	"STREAM_CLOSED",
	http2ErrCodeFrameSize:		"FRAME_SIZE_ERROR",
	http2ErrCodeRefusedStream:	"REFUSED_STREAM",
	http2ErrCodeCancel:		"CANCEL",
	http2ErrCodeCompression:	"COMPRESSION_ERROR",
	http2ErrCodeConnect:		"CONNECT_ERROR",
	http2ErrCodeEnhanceYourCalm:	"ENHANCE_YOUR_CALM",
	http2ErrCodeInadequateSecurity:	"INADEQUATE_SECURITY",
	http2ErrCodeHTTP11Required:	"HTTP_1_1_REQUIRED",
}

func (e http2ErrCode) String() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1206
	_go_fuzz_dep_.CoverTab[37755]++
							if s, ok := http2errCodeName[e]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:1207
		_go_fuzz_dep_.CoverTab[37757]++
								return s
//line /usr/local/go/src/net/http/h2_bundle.go:1208
		// _ = "end of CoverTab[37757]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1209
		_go_fuzz_dep_.CoverTab[37758]++
//line /usr/local/go/src/net/http/h2_bundle.go:1209
		// _ = "end of CoverTab[37758]"
//line /usr/local/go/src/net/http/h2_bundle.go:1209
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1209
	// _ = "end of CoverTab[37755]"
//line /usr/local/go/src/net/http/h2_bundle.go:1209
	_go_fuzz_dep_.CoverTab[37756]++
							return fmt.Sprintf("unknown error code 0x%x", uint32(e))
//line /usr/local/go/src/net/http/h2_bundle.go:1210
	// _ = "end of CoverTab[37756]"
}

func (e http2ErrCode) stringToken() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1213
	_go_fuzz_dep_.CoverTab[37759]++
							if s, ok := http2errCodeName[e]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:1214
		_go_fuzz_dep_.CoverTab[37761]++
								return s
//line /usr/local/go/src/net/http/h2_bundle.go:1215
		// _ = "end of CoverTab[37761]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1216
		_go_fuzz_dep_.CoverTab[37762]++
//line /usr/local/go/src/net/http/h2_bundle.go:1216
		// _ = "end of CoverTab[37762]"
//line /usr/local/go/src/net/http/h2_bundle.go:1216
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1216
	// _ = "end of CoverTab[37759]"
//line /usr/local/go/src/net/http/h2_bundle.go:1216
	_go_fuzz_dep_.CoverTab[37760]++
							return fmt.Sprintf("ERR_UNKNOWN_%d", uint32(e))
//line /usr/local/go/src/net/http/h2_bundle.go:1217
	// _ = "end of CoverTab[37760]"
}

// ConnectionError is an error that results in the termination of the
//line /usr/local/go/src/net/http/h2_bundle.go:1220
// entire connection.
//line /usr/local/go/src/net/http/h2_bundle.go:1222
type http2ConnectionError http2ErrCode

func (e http2ConnectionError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1224
	_go_fuzz_dep_.CoverTab[37763]++
							return fmt.Sprintf("connection error: %s", http2ErrCode(e))
//line /usr/local/go/src/net/http/h2_bundle.go:1225
	// _ = "end of CoverTab[37763]"
}

// StreamError is an error that only affects one stream within an
//line /usr/local/go/src/net/http/h2_bundle.go:1228
// HTTP/2 connection.
//line /usr/local/go/src/net/http/h2_bundle.go:1230
type http2StreamError struct {
	StreamID	uint32
	Code		http2ErrCode
	Cause		error	// optional additional detail
}

// errFromPeer is a sentinel error value for StreamError.Cause to
//line /usr/local/go/src/net/http/h2_bundle.go:1236
// indicate that the StreamError was sent from the peer over the wire
//line /usr/local/go/src/net/http/h2_bundle.go:1236
// and wasn't locally generated in the Transport.
//line /usr/local/go/src/net/http/h2_bundle.go:1239
var http2errFromPeer = errors.New("received from peer")

func http2streamError(id uint32, code http2ErrCode) http2StreamError {
//line /usr/local/go/src/net/http/h2_bundle.go:1241
	_go_fuzz_dep_.CoverTab[37764]++
							return http2StreamError{StreamID: id, Code: code}
//line /usr/local/go/src/net/http/h2_bundle.go:1242
	// _ = "end of CoverTab[37764]"
}

func (e http2StreamError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1245
	_go_fuzz_dep_.CoverTab[37765]++
							if e.Cause != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1246
		_go_fuzz_dep_.CoverTab[37767]++
								return fmt.Sprintf("stream error: stream ID %d; %v; %v", e.StreamID, e.Code, e.Cause)
//line /usr/local/go/src/net/http/h2_bundle.go:1247
		// _ = "end of CoverTab[37767]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1248
		_go_fuzz_dep_.CoverTab[37768]++
//line /usr/local/go/src/net/http/h2_bundle.go:1248
		// _ = "end of CoverTab[37768]"
//line /usr/local/go/src/net/http/h2_bundle.go:1248
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1248
	// _ = "end of CoverTab[37765]"
//line /usr/local/go/src/net/http/h2_bundle.go:1248
	_go_fuzz_dep_.CoverTab[37766]++
							return fmt.Sprintf("stream error: stream ID %d; %v", e.StreamID, e.Code)
//line /usr/local/go/src/net/http/h2_bundle.go:1249
	// _ = "end of CoverTab[37766]"
}

// 6.9.1 The Flow Control Window
//line /usr/local/go/src/net/http/h2_bundle.go:1252
// "If a sender receives a WINDOW_UPDATE that causes a flow control
//line /usr/local/go/src/net/http/h2_bundle.go:1252
// window to exceed this maximum it MUST terminate either the stream
//line /usr/local/go/src/net/http/h2_bundle.go:1252
// or the connection, as appropriate. For streams, [...]; for the
//line /usr/local/go/src/net/http/h2_bundle.go:1252
// connection, a GOAWAY frame with a FLOW_CONTROL_ERROR code."
//line /usr/local/go/src/net/http/h2_bundle.go:1257
type http2goAwayFlowError struct{}

func (http2goAwayFlowError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1259
	_go_fuzz_dep_.CoverTab[37769]++
//line /usr/local/go/src/net/http/h2_bundle.go:1259
	return "connection exceeded flow control window size"
//line /usr/local/go/src/net/http/h2_bundle.go:1259
	// _ = "end of CoverTab[37769]"
//line /usr/local/go/src/net/http/h2_bundle.go:1259
}

// connError represents an HTTP/2 ConnectionError error code, along
//line /usr/local/go/src/net/http/h2_bundle.go:1261
// with a string (for debugging) explaining why.
//line /usr/local/go/src/net/http/h2_bundle.go:1261
//
//line /usr/local/go/src/net/http/h2_bundle.go:1261
// Errors of this type are only returned by the frame parser functions
//line /usr/local/go/src/net/http/h2_bundle.go:1261
// and converted into ConnectionError(Code), after stashing away
//line /usr/local/go/src/net/http/h2_bundle.go:1261
// the Reason into the Framer's errDetail field, accessible via
//line /usr/local/go/src/net/http/h2_bundle.go:1261
// the (*Framer).ErrorDetail method.
//line /usr/local/go/src/net/http/h2_bundle.go:1268
type http2connError struct {
	Code	http2ErrCode	// the ConnectionError error code
	Reason	string		// additional reason
}

func (e http2connError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1273
	_go_fuzz_dep_.CoverTab[37770]++
							return fmt.Sprintf("http2: connection error: %v: %v", e.Code, e.Reason)
//line /usr/local/go/src/net/http/h2_bundle.go:1274
	// _ = "end of CoverTab[37770]"
}

type http2pseudoHeaderError string

func (e http2pseudoHeaderError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1279
	_go_fuzz_dep_.CoverTab[37771]++
							return fmt.Sprintf("invalid pseudo-header %q", string(e))
//line /usr/local/go/src/net/http/h2_bundle.go:1280
	// _ = "end of CoverTab[37771]"
}

type http2duplicatePseudoHeaderError string

func (e http2duplicatePseudoHeaderError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1285
	_go_fuzz_dep_.CoverTab[37772]++
							return fmt.Sprintf("duplicate pseudo-header %q", string(e))
//line /usr/local/go/src/net/http/h2_bundle.go:1286
	// _ = "end of CoverTab[37772]"
}

type http2headerFieldNameError string

func (e http2headerFieldNameError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1291
	_go_fuzz_dep_.CoverTab[37773]++
							return fmt.Sprintf("invalid header field name %q", string(e))
//line /usr/local/go/src/net/http/h2_bundle.go:1292
	// _ = "end of CoverTab[37773]"
}

type http2headerFieldValueError string

func (e http2headerFieldValueError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1297
	_go_fuzz_dep_.CoverTab[37774]++
							return fmt.Sprintf("invalid header field value for %q", string(e))
//line /usr/local/go/src/net/http/h2_bundle.go:1298
	// _ = "end of CoverTab[37774]"
}

var (
	http2errMixPseudoHeaderTypes	= errors.New("mix of request and response pseudo headers")
	http2errPseudoAfterRegular	= errors.New("pseudo header field after regular")
)

// flow is the flow control window's size.
type http2flow struct {
	_	http2incomparable

	// n is the number of DATA bytes we're allowed to send.
	// A flow is kept both on a conn and a per-stream.
	n	int32

	// conn points to the shared connection-level flow that is
	// shared by all streams on that conn. It is nil for the flow
	// that's on the conn directly.
	conn	*http2flow
}

func (f *http2flow) setConnFlow(cf *http2flow) {
//line /usr/local/go/src/net/http/h2_bundle.go:1320
	_go_fuzz_dep_.CoverTab[37775]++
//line /usr/local/go/src/net/http/h2_bundle.go:1320
	f.conn = cf
//line /usr/local/go/src/net/http/h2_bundle.go:1320
	// _ = "end of CoverTab[37775]"
//line /usr/local/go/src/net/http/h2_bundle.go:1320
}

func (f *http2flow) available() int32 {
//line /usr/local/go/src/net/http/h2_bundle.go:1322
	_go_fuzz_dep_.CoverTab[37776]++
							n := f.n
							if f.conn != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1324
		_go_fuzz_dep_.CoverTab[37778]++
//line /usr/local/go/src/net/http/h2_bundle.go:1324
		return f.conn.n < n
//line /usr/local/go/src/net/http/h2_bundle.go:1324
		// _ = "end of CoverTab[37778]"
//line /usr/local/go/src/net/http/h2_bundle.go:1324
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:1324
		_go_fuzz_dep_.CoverTab[37779]++
								n = f.conn.n
//line /usr/local/go/src/net/http/h2_bundle.go:1325
		// _ = "end of CoverTab[37779]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1326
		_go_fuzz_dep_.CoverTab[37780]++
//line /usr/local/go/src/net/http/h2_bundle.go:1326
		// _ = "end of CoverTab[37780]"
//line /usr/local/go/src/net/http/h2_bundle.go:1326
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1326
	// _ = "end of CoverTab[37776]"
//line /usr/local/go/src/net/http/h2_bundle.go:1326
	_go_fuzz_dep_.CoverTab[37777]++
							return n
//line /usr/local/go/src/net/http/h2_bundle.go:1327
	// _ = "end of CoverTab[37777]"
}

func (f *http2flow) take(n int32) {
//line /usr/local/go/src/net/http/h2_bundle.go:1330
	_go_fuzz_dep_.CoverTab[37781]++
							if n > f.available() {
//line /usr/local/go/src/net/http/h2_bundle.go:1331
		_go_fuzz_dep_.CoverTab[37783]++
								panic("internal error: took too much")
//line /usr/local/go/src/net/http/h2_bundle.go:1332
		// _ = "end of CoverTab[37783]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1333
		_go_fuzz_dep_.CoverTab[37784]++
//line /usr/local/go/src/net/http/h2_bundle.go:1333
		// _ = "end of CoverTab[37784]"
//line /usr/local/go/src/net/http/h2_bundle.go:1333
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1333
	// _ = "end of CoverTab[37781]"
//line /usr/local/go/src/net/http/h2_bundle.go:1333
	_go_fuzz_dep_.CoverTab[37782]++
							f.n -= n
							if f.conn != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1335
		_go_fuzz_dep_.CoverTab[37785]++
								f.conn.n -= n
//line /usr/local/go/src/net/http/h2_bundle.go:1336
		// _ = "end of CoverTab[37785]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1337
		_go_fuzz_dep_.CoverTab[37786]++
//line /usr/local/go/src/net/http/h2_bundle.go:1337
		// _ = "end of CoverTab[37786]"
//line /usr/local/go/src/net/http/h2_bundle.go:1337
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1337
	// _ = "end of CoverTab[37782]"
}

// add adds n bytes (positive or negative) to the flow control window.
//line /usr/local/go/src/net/http/h2_bundle.go:1340
// It returns false if the sum would exceed 2^31-1.
//line /usr/local/go/src/net/http/h2_bundle.go:1342
func (f *http2flow) add(n int32) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1342
	_go_fuzz_dep_.CoverTab[37787]++
							sum := f.n + n
							if (sum > n) == (f.n > 0) {
//line /usr/local/go/src/net/http/h2_bundle.go:1344
		_go_fuzz_dep_.CoverTab[37789]++
								f.n = sum
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:1346
		// _ = "end of CoverTab[37789]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1347
		_go_fuzz_dep_.CoverTab[37790]++
//line /usr/local/go/src/net/http/h2_bundle.go:1347
		// _ = "end of CoverTab[37790]"
//line /usr/local/go/src/net/http/h2_bundle.go:1347
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1347
	// _ = "end of CoverTab[37787]"
//line /usr/local/go/src/net/http/h2_bundle.go:1347
	_go_fuzz_dep_.CoverTab[37788]++
							return false
//line /usr/local/go/src/net/http/h2_bundle.go:1348
	// _ = "end of CoverTab[37788]"
}

const http2frameHeaderLen = 9

var http2padZeros = make([]byte, 255)	// zeros for padding

// A FrameType is a registered frame type as defined in
//line /usr/local/go/src/net/http/h2_bundle.go:1355
// https://httpwg.org/specs/rfc7540.html#rfc.section.11.2
//line /usr/local/go/src/net/http/h2_bundle.go:1357
type http2FrameType uint8

const (
	http2FrameData		http2FrameType	= 0x0
	http2FrameHeaders	http2FrameType	= 0x1
	http2FramePriority	http2FrameType	= 0x2
	http2FrameRSTStream	http2FrameType	= 0x3
	http2FrameSettings	http2FrameType	= 0x4
	http2FramePushPromise	http2FrameType	= 0x5
	http2FramePing		http2FrameType	= 0x6
	http2FrameGoAway	http2FrameType	= 0x7
	http2FrameWindowUpdate	http2FrameType	= 0x8
	http2FrameContinuation	http2FrameType	= 0x9
)

var http2frameName = map[http2FrameType]string{
	http2FrameData:		"DATA",
	http2FrameHeaders:	"HEADERS",
	http2FramePriority:	"PRIORITY",
	http2FrameRSTStream:	"RST_STREAM",
	http2FrameSettings:	"SETTINGS",
	http2FramePushPromise:	"PUSH_PROMISE",
	http2FramePing:		"PING",
	http2FrameGoAway:	"GOAWAY",
	http2FrameWindowUpdate:	"WINDOW_UPDATE",
	http2FrameContinuation:	"CONTINUATION",
}

func (t http2FrameType) String() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1385
	_go_fuzz_dep_.CoverTab[37791]++
							if s, ok := http2frameName[t]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:1386
		_go_fuzz_dep_.CoverTab[37793]++
								return s
//line /usr/local/go/src/net/http/h2_bundle.go:1387
		// _ = "end of CoverTab[37793]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1388
		_go_fuzz_dep_.CoverTab[37794]++
//line /usr/local/go/src/net/http/h2_bundle.go:1388
		// _ = "end of CoverTab[37794]"
//line /usr/local/go/src/net/http/h2_bundle.go:1388
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1388
	// _ = "end of CoverTab[37791]"
//line /usr/local/go/src/net/http/h2_bundle.go:1388
	_go_fuzz_dep_.CoverTab[37792]++
							return fmt.Sprintf("UNKNOWN_FRAME_TYPE_%d", uint8(t))
//line /usr/local/go/src/net/http/h2_bundle.go:1389
	// _ = "end of CoverTab[37792]"
}

// Flags is a bitmask of HTTP/2 flags.
//line /usr/local/go/src/net/http/h2_bundle.go:1392
// The meaning of flags varies depending on the frame type.
//line /usr/local/go/src/net/http/h2_bundle.go:1394
type http2Flags uint8

// Has reports whether f contains all (0 or more) flags in v.
func (f http2Flags) Has(v http2Flags) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1397
	_go_fuzz_dep_.CoverTab[37795]++
							return (f & v) == v
//line /usr/local/go/src/net/http/h2_bundle.go:1398
	// _ = "end of CoverTab[37795]"
}

// Frame-specific FrameHeader flag bits.
const (
	// Data Frame
	http2FlagDataEndStream	http2Flags	= 0x1
	http2FlagDataPadded	http2Flags	= 0x8

	// Headers Frame
	http2FlagHeadersEndStream	http2Flags	= 0x1
	http2FlagHeadersEndHeaders	http2Flags	= 0x4
	http2FlagHeadersPadded		http2Flags	= 0x8
	http2FlagHeadersPriority	http2Flags	= 0x20

	// Settings Frame
	http2FlagSettingsAck	http2Flags	= 0x1

	// Ping Frame
	http2FlagPingAck	http2Flags	= 0x1

	// Continuation Frame
	http2FlagContinuationEndHeaders	http2Flags	= 0x4

	http2FlagPushPromiseEndHeaders	http2Flags	= 0x4
	http2FlagPushPromisePadded	http2Flags	= 0x8
)

var http2flagName = map[http2FrameType]map[http2Flags]string{
	http2FrameData: {
		http2FlagDataEndStream:	"END_STREAM",
		http2FlagDataPadded:	"PADDED",
	},
	http2FrameHeaders: {
		http2FlagHeadersEndStream:	"END_STREAM",
		http2FlagHeadersEndHeaders:	"END_HEADERS",
		http2FlagHeadersPadded:		"PADDED",
		http2FlagHeadersPriority:	"PRIORITY",
	},
	http2FrameSettings: {
		http2FlagSettingsAck: "ACK",
	},
	http2FramePing: {
		http2FlagPingAck: "ACK",
	},
	http2FrameContinuation: {
		http2FlagContinuationEndHeaders: "END_HEADERS",
	},
	http2FramePushPromise: {
		http2FlagPushPromiseEndHeaders:	"END_HEADERS",
		http2FlagPushPromisePadded:	"PADDED",
	},
}

// a frameParser parses a frame given its FrameHeader and payload
//line /usr/local/go/src/net/http/h2_bundle.go:1452
// bytes. The length of payload will always equal fh.Length (which
//line /usr/local/go/src/net/http/h2_bundle.go:1452
// might be 0).
//line /usr/local/go/src/net/http/h2_bundle.go:1455
type http2frameParser func(fc *http2frameCache, fh http2FrameHeader, countError func(string), payload []byte) (http2Frame, error)

var http2frameParsers = map[http2FrameType]http2frameParser{
	http2FrameData:		http2parseDataFrame,
	http2FrameHeaders:	http2parseHeadersFrame,
	http2FramePriority:	http2parsePriorityFrame,
	http2FrameRSTStream:	http2parseRSTStreamFrame,
	http2FrameSettings:	http2parseSettingsFrame,
	http2FramePushPromise:	http2parsePushPromise,
	http2FramePing:		http2parsePingFrame,
	http2FrameGoAway:	http2parseGoAwayFrame,
	http2FrameWindowUpdate:	http2parseWindowUpdateFrame,
	http2FrameContinuation:	http2parseContinuationFrame,
}

func http2typeFrameParser(t http2FrameType) http2frameParser {
//line /usr/local/go/src/net/http/h2_bundle.go:1470
	_go_fuzz_dep_.CoverTab[37796]++
							if f := http2frameParsers[t]; f != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1471
		_go_fuzz_dep_.CoverTab[37798]++
								return f
//line /usr/local/go/src/net/http/h2_bundle.go:1472
		// _ = "end of CoverTab[37798]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1473
		_go_fuzz_dep_.CoverTab[37799]++
//line /usr/local/go/src/net/http/h2_bundle.go:1473
		// _ = "end of CoverTab[37799]"
//line /usr/local/go/src/net/http/h2_bundle.go:1473
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1473
	// _ = "end of CoverTab[37796]"
//line /usr/local/go/src/net/http/h2_bundle.go:1473
	_go_fuzz_dep_.CoverTab[37797]++
							return http2parseUnknownFrame
//line /usr/local/go/src/net/http/h2_bundle.go:1474
	// _ = "end of CoverTab[37797]"
}

// A FrameHeader is the 9 byte header of all HTTP/2 frames.
//line /usr/local/go/src/net/http/h2_bundle.go:1477
//
//line /usr/local/go/src/net/http/h2_bundle.go:1477
// See https://httpwg.org/specs/rfc7540.html#FrameHeader
//line /usr/local/go/src/net/http/h2_bundle.go:1480
type http2FrameHeader struct {
	valid	bool	// caller can access []byte fields in the Frame

	// Type is the 1 byte frame type. There are ten standard frame
	// types, but extension frame types may be written by WriteRawFrame
	// and will be returned by ReadFrame (as UnknownFrame).
	Type	http2FrameType

	// Flags are the 1 byte of 8 potential bit flags per frame.
	// They are specific to the frame type.
	Flags	http2Flags

	// Length is the length of the frame, not including the 9 byte header.
	// The maximum size is one byte less than 16MB (uint24), but only
	// frames up to 16KB are allowed without peer agreement.
	Length	uint32

	// StreamID is which stream this frame is for. Certain frames
	// are not stream-specific, in which case this field is 0.
	StreamID	uint32
}

// Header returns h. It exists so FrameHeaders can be embedded in other
//line /usr/local/go/src/net/http/h2_bundle.go:1502
// specific frame types and implement the Frame interface.
//line /usr/local/go/src/net/http/h2_bundle.go:1504
func (h http2FrameHeader) Header() http2FrameHeader {
//line /usr/local/go/src/net/http/h2_bundle.go:1504
	_go_fuzz_dep_.CoverTab[37800]++
//line /usr/local/go/src/net/http/h2_bundle.go:1504
	return h
//line /usr/local/go/src/net/http/h2_bundle.go:1504
	// _ = "end of CoverTab[37800]"
//line /usr/local/go/src/net/http/h2_bundle.go:1504
}

func (h http2FrameHeader) String() string {
//line /usr/local/go/src/net/http/h2_bundle.go:1506
	_go_fuzz_dep_.CoverTab[37801]++
							var buf bytes.Buffer
							buf.WriteString("[FrameHeader ")
							h.writeDebug(&buf)
							buf.WriteByte(']')
							return buf.String()
//line /usr/local/go/src/net/http/h2_bundle.go:1511
	// _ = "end of CoverTab[37801]"
}

func (h http2FrameHeader) writeDebug(buf *bytes.Buffer) {
//line /usr/local/go/src/net/http/h2_bundle.go:1514
	_go_fuzz_dep_.CoverTab[37802]++
							buf.WriteString(h.Type.String())
							if h.Flags != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:1516
		_go_fuzz_dep_.CoverTab[37805]++
								buf.WriteString(" flags=")
								set := 0
								for i := uint8(0); i < 8; i++ {
//line /usr/local/go/src/net/http/h2_bundle.go:1519
			_go_fuzz_dep_.CoverTab[37806]++
									if h.Flags&(1<<i) == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:1520
				_go_fuzz_dep_.CoverTab[37809]++
										continue
//line /usr/local/go/src/net/http/h2_bundle.go:1521
				// _ = "end of CoverTab[37809]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1522
				_go_fuzz_dep_.CoverTab[37810]++
//line /usr/local/go/src/net/http/h2_bundle.go:1522
				// _ = "end of CoverTab[37810]"
//line /usr/local/go/src/net/http/h2_bundle.go:1522
			}
//line /usr/local/go/src/net/http/h2_bundle.go:1522
			// _ = "end of CoverTab[37806]"
//line /usr/local/go/src/net/http/h2_bundle.go:1522
			_go_fuzz_dep_.CoverTab[37807]++
									set++
									if set > 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:1524
				_go_fuzz_dep_.CoverTab[37811]++
										buf.WriteByte('|')
//line /usr/local/go/src/net/http/h2_bundle.go:1525
				// _ = "end of CoverTab[37811]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1526
				_go_fuzz_dep_.CoverTab[37812]++
//line /usr/local/go/src/net/http/h2_bundle.go:1526
				// _ = "end of CoverTab[37812]"
//line /usr/local/go/src/net/http/h2_bundle.go:1526
			}
//line /usr/local/go/src/net/http/h2_bundle.go:1526
			// _ = "end of CoverTab[37807]"
//line /usr/local/go/src/net/http/h2_bundle.go:1526
			_go_fuzz_dep_.CoverTab[37808]++
									name := http2flagName[h.Type][http2Flags(1<<i)]
									if name != "" {
//line /usr/local/go/src/net/http/h2_bundle.go:1528
				_go_fuzz_dep_.CoverTab[37813]++
										buf.WriteString(name)
//line /usr/local/go/src/net/http/h2_bundle.go:1529
				// _ = "end of CoverTab[37813]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1530
				_go_fuzz_dep_.CoverTab[37814]++
										fmt.Fprintf(buf, "0x%x", 1<<i)
//line /usr/local/go/src/net/http/h2_bundle.go:1531
				// _ = "end of CoverTab[37814]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:1532
			// _ = "end of CoverTab[37808]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1533
		// _ = "end of CoverTab[37805]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1534
		_go_fuzz_dep_.CoverTab[37815]++
//line /usr/local/go/src/net/http/h2_bundle.go:1534
		// _ = "end of CoverTab[37815]"
//line /usr/local/go/src/net/http/h2_bundle.go:1534
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1534
	// _ = "end of CoverTab[37802]"
//line /usr/local/go/src/net/http/h2_bundle.go:1534
	_go_fuzz_dep_.CoverTab[37803]++
							if h.StreamID != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:1535
		_go_fuzz_dep_.CoverTab[37816]++
								fmt.Fprintf(buf, " stream=%d", h.StreamID)
//line /usr/local/go/src/net/http/h2_bundle.go:1536
		// _ = "end of CoverTab[37816]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1537
		_go_fuzz_dep_.CoverTab[37817]++
//line /usr/local/go/src/net/http/h2_bundle.go:1537
		// _ = "end of CoverTab[37817]"
//line /usr/local/go/src/net/http/h2_bundle.go:1537
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1537
	// _ = "end of CoverTab[37803]"
//line /usr/local/go/src/net/http/h2_bundle.go:1537
	_go_fuzz_dep_.CoverTab[37804]++
							fmt.Fprintf(buf, " len=%d", h.Length)
//line /usr/local/go/src/net/http/h2_bundle.go:1538
	// _ = "end of CoverTab[37804]"
}

func (h *http2FrameHeader) checkValid() {
//line /usr/local/go/src/net/http/h2_bundle.go:1541
	_go_fuzz_dep_.CoverTab[37818]++
							if !h.valid {
//line /usr/local/go/src/net/http/h2_bundle.go:1542
		_go_fuzz_dep_.CoverTab[37819]++
								panic("Frame accessor called on non-owned Frame")
//line /usr/local/go/src/net/http/h2_bundle.go:1543
		// _ = "end of CoverTab[37819]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1544
		_go_fuzz_dep_.CoverTab[37820]++
//line /usr/local/go/src/net/http/h2_bundle.go:1544
		// _ = "end of CoverTab[37820]"
//line /usr/local/go/src/net/http/h2_bundle.go:1544
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1544
	// _ = "end of CoverTab[37818]"
}

func (h *http2FrameHeader) invalidate() {
//line /usr/local/go/src/net/http/h2_bundle.go:1547
	_go_fuzz_dep_.CoverTab[37821]++
//line /usr/local/go/src/net/http/h2_bundle.go:1547
	h.valid = false
//line /usr/local/go/src/net/http/h2_bundle.go:1547
	// _ = "end of CoverTab[37821]"
//line /usr/local/go/src/net/http/h2_bundle.go:1547
}

// frame header bytes.
//line /usr/local/go/src/net/http/h2_bundle.go:1549
// Used only by ReadFrameHeader.
//line /usr/local/go/src/net/http/h2_bundle.go:1551
var http2fhBytes = sync.Pool{
	New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:1552
		_go_fuzz_dep_.CoverTab[37822]++
								buf := make([]byte, http2frameHeaderLen)
								return &buf
//line /usr/local/go/src/net/http/h2_bundle.go:1554
		// _ = "end of CoverTab[37822]"
	},
}

// ReadFrameHeader reads 9 bytes from r and returns a FrameHeader.
//line /usr/local/go/src/net/http/h2_bundle.go:1558
// Most users should use Framer.ReadFrame instead.
//line /usr/local/go/src/net/http/h2_bundle.go:1560
func http2ReadFrameHeader(r io.Reader) (http2FrameHeader, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:1560
	_go_fuzz_dep_.CoverTab[37823]++
							bufp := http2fhBytes.Get().(*[]byte)
							defer http2fhBytes.Put(bufp)
							return http2readFrameHeader(*bufp, r)
//line /usr/local/go/src/net/http/h2_bundle.go:1563
	// _ = "end of CoverTab[37823]"
}

func http2readFrameHeader(buf []byte, r io.Reader) (http2FrameHeader, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:1566
	_go_fuzz_dep_.CoverTab[37824]++
							_, err := io.ReadFull(r, buf[:http2frameHeaderLen])
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1568
		_go_fuzz_dep_.CoverTab[37826]++
								return http2FrameHeader{}, err
//line /usr/local/go/src/net/http/h2_bundle.go:1569
		// _ = "end of CoverTab[37826]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1570
		_go_fuzz_dep_.CoverTab[37827]++
//line /usr/local/go/src/net/http/h2_bundle.go:1570
		// _ = "end of CoverTab[37827]"
//line /usr/local/go/src/net/http/h2_bundle.go:1570
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1570
	// _ = "end of CoverTab[37824]"
//line /usr/local/go/src/net/http/h2_bundle.go:1570
	_go_fuzz_dep_.CoverTab[37825]++
							return http2FrameHeader{
		Length:		(uint32(buf[0])<<16 | uint32(buf[1])<<8 | uint32(buf[2])),
		Type:		http2FrameType(buf[3]),
		Flags:		http2Flags(buf[4]),
		StreamID:	binary.BigEndian.Uint32(buf[5:]) & (1<<31 - 1),
		valid:		true,
	}, nil
//line /usr/local/go/src/net/http/h2_bundle.go:1577
	// _ = "end of CoverTab[37825]"
}

// A Frame is the base interface implemented by all frame types.
//line /usr/local/go/src/net/http/h2_bundle.go:1580
// Callers will generally type-assert the specific frame type:
//line /usr/local/go/src/net/http/h2_bundle.go:1580
// *HeadersFrame, *SettingsFrame, *WindowUpdateFrame, etc.
//line /usr/local/go/src/net/http/h2_bundle.go:1580
//
//line /usr/local/go/src/net/http/h2_bundle.go:1580
// Frames are only valid until the next call to Framer.ReadFrame.
//line /usr/local/go/src/net/http/h2_bundle.go:1585
type http2Frame interface {
	Header() http2FrameHeader

	// invalidate is called by Framer.ReadFrame to make this
	// frame's buffers as being invalid, since the subsequent
	// frame will reuse them.
	invalidate()
}

// A Framer reads and writes Frames.
type http2Framer struct {
	r		io.Reader
	lastFrame	http2Frame
	errDetail	error

	// countError is a non-nil func that's called on a frame parse
	// error with some unique error path token. It's initialized
	// from Transport.CountError or Server.CountError.
	countError	func(errToken string)

	// lastHeaderStream is non-zero if the last frame was an
	// unfinished HEADERS/CONTINUATION.
	lastHeaderStream	uint32

	maxReadSize	uint32
	headerBuf	[http2frameHeaderLen]byte

	// TODO: let getReadBuf be configurable, and use a less memory-pinning
	// allocator in server.go to minimize memory pinned for many idle conns.
	// Will probably also need to make frame invalidation have a hook too.
	getReadBuf	func(size uint32) []byte
	readBuf		[]byte	// cache for default getReadBuf

	maxWriteSize	uint32	// zero means unlimited; TODO: implement

	w	io.Writer
	wbuf	[]byte

	// AllowIllegalWrites permits the Framer's Write methods to
	// write frames that do not conform to the HTTP/2 spec. This
	// permits using the Framer to test other HTTP/2
	// implementations' conformance to the spec.
	// If false, the Write methods will prefer to return an error
	// rather than comply.
	AllowIllegalWrites	bool

	// AllowIllegalReads permits the Framer's ReadFrame method
	// to return non-compliant frames or frame orders.
	// This is for testing and permits using the Framer to test
	// other HTTP/2 implementations' conformance to the spec.
	// It is not compatible with ReadMetaHeaders.
	AllowIllegalReads	bool

	// ReadMetaHeaders if non-nil causes ReadFrame to merge
	// HEADERS and CONTINUATION frames together and return
	// MetaHeadersFrame instead.
	ReadMetaHeaders	*hpack.Decoder

	// MaxHeaderListSize is the http2 MAX_HEADER_LIST_SIZE.
	// It's used only if ReadMetaHeaders is set; 0 means a sane default
	// (currently 16MB)
							// If the limit is hit, MetaHeadersFrame.Truncated is set true.
							MaxHeaderListSize	uint32

//line /usr/local/go/src/net/http/h2_bundle.go:1655
	logReads, logWrites	bool

	debugFramer		*http2Framer	// only use for logging written writes
	debugFramerBuf		*bytes.Buffer
	debugReadLoggerf	func(string, ...interface{})
	debugWriteLoggerf	func(string, ...interface{})

	frameCache	*http2frameCache	// nil if frames aren't reused (default)
}

func (fr *http2Framer) maxHeaderListSize() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:1665
	_go_fuzz_dep_.CoverTab[37828]++
							if fr.MaxHeaderListSize == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:1666
		_go_fuzz_dep_.CoverTab[37830]++
								return 16 << 20
//line /usr/local/go/src/net/http/h2_bundle.go:1667
		// _ = "end of CoverTab[37830]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1668
		_go_fuzz_dep_.CoverTab[37831]++
//line /usr/local/go/src/net/http/h2_bundle.go:1668
		// _ = "end of CoverTab[37831]"
//line /usr/local/go/src/net/http/h2_bundle.go:1668
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1668
	// _ = "end of CoverTab[37828]"
//line /usr/local/go/src/net/http/h2_bundle.go:1668
	_go_fuzz_dep_.CoverTab[37829]++
							return fr.MaxHeaderListSize
//line /usr/local/go/src/net/http/h2_bundle.go:1669
	// _ = "end of CoverTab[37829]"
}

func (f *http2Framer) startWrite(ftype http2FrameType, flags http2Flags, streamID uint32) {
//line /usr/local/go/src/net/http/h2_bundle.go:1672
	_go_fuzz_dep_.CoverTab[37832]++

							f.wbuf = append(f.wbuf[:0],
		0,
		0,
		0,
		byte(ftype),
		byte(flags),
		byte(streamID>>24),
		byte(streamID>>16),
		byte(streamID>>8),
		byte(streamID))
//line /usr/local/go/src/net/http/h2_bundle.go:1683
	// _ = "end of CoverTab[37832]"
}

func (f *http2Framer) endWrite() error {
//line /usr/local/go/src/net/http/h2_bundle.go:1686
	_go_fuzz_dep_.CoverTab[37833]++

//line /usr/local/go/src/net/http/h2_bundle.go:1689
	length := len(f.wbuf) - http2frameHeaderLen
	if length >= (1 << 24) {
//line /usr/local/go/src/net/http/h2_bundle.go:1690
		_go_fuzz_dep_.CoverTab[37837]++
								return http2ErrFrameTooLarge
//line /usr/local/go/src/net/http/h2_bundle.go:1691
		// _ = "end of CoverTab[37837]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1692
		_go_fuzz_dep_.CoverTab[37838]++
//line /usr/local/go/src/net/http/h2_bundle.go:1692
		// _ = "end of CoverTab[37838]"
//line /usr/local/go/src/net/http/h2_bundle.go:1692
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1692
	// _ = "end of CoverTab[37833]"
//line /usr/local/go/src/net/http/h2_bundle.go:1692
	_go_fuzz_dep_.CoverTab[37834]++
							_ = append(f.wbuf[:0],
		byte(length>>16),
		byte(length>>8),
		byte(length))
	if f.logWrites {
//line /usr/local/go/src/net/http/h2_bundle.go:1697
		_go_fuzz_dep_.CoverTab[37839]++
								f.logWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:1698
		// _ = "end of CoverTab[37839]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1699
		_go_fuzz_dep_.CoverTab[37840]++
//line /usr/local/go/src/net/http/h2_bundle.go:1699
		// _ = "end of CoverTab[37840]"
//line /usr/local/go/src/net/http/h2_bundle.go:1699
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1699
	// _ = "end of CoverTab[37834]"
//line /usr/local/go/src/net/http/h2_bundle.go:1699
	_go_fuzz_dep_.CoverTab[37835]++

							n, err := f.w.Write(f.wbuf)
							if err == nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1702
		_go_fuzz_dep_.CoverTab[37841]++
//line /usr/local/go/src/net/http/h2_bundle.go:1702
		return n != len(f.wbuf)
//line /usr/local/go/src/net/http/h2_bundle.go:1702
		// _ = "end of CoverTab[37841]"
//line /usr/local/go/src/net/http/h2_bundle.go:1702
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:1702
		_go_fuzz_dep_.CoverTab[37842]++
								err = io.ErrShortWrite
//line /usr/local/go/src/net/http/h2_bundle.go:1703
		// _ = "end of CoverTab[37842]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1704
		_go_fuzz_dep_.CoverTab[37843]++
//line /usr/local/go/src/net/http/h2_bundle.go:1704
		// _ = "end of CoverTab[37843]"
//line /usr/local/go/src/net/http/h2_bundle.go:1704
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1704
	// _ = "end of CoverTab[37835]"
//line /usr/local/go/src/net/http/h2_bundle.go:1704
	_go_fuzz_dep_.CoverTab[37836]++
							return err
//line /usr/local/go/src/net/http/h2_bundle.go:1705
	// _ = "end of CoverTab[37836]"
}

func (f *http2Framer) logWrite() {
//line /usr/local/go/src/net/http/h2_bundle.go:1708
	_go_fuzz_dep_.CoverTab[37844]++
							if f.debugFramer == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1709
		_go_fuzz_dep_.CoverTab[37847]++
								f.debugFramerBuf = new(bytes.Buffer)
								f.debugFramer = http2NewFramer(nil, f.debugFramerBuf)
								f.debugFramer.logReads = false

//line /usr/local/go/src/net/http/h2_bundle.go:1715
		f.debugFramer.AllowIllegalReads = true
//line /usr/local/go/src/net/http/h2_bundle.go:1715
		// _ = "end of CoverTab[37847]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1716
		_go_fuzz_dep_.CoverTab[37848]++
//line /usr/local/go/src/net/http/h2_bundle.go:1716
		// _ = "end of CoverTab[37848]"
//line /usr/local/go/src/net/http/h2_bundle.go:1716
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1716
	// _ = "end of CoverTab[37844]"
//line /usr/local/go/src/net/http/h2_bundle.go:1716
	_go_fuzz_dep_.CoverTab[37845]++
							f.debugFramerBuf.Write(f.wbuf)
							fr, err := f.debugFramer.ReadFrame()
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1719
		_go_fuzz_dep_.CoverTab[37849]++
								f.debugWriteLoggerf("http2: Framer %p: failed to decode just-written frame", f)
								return
//line /usr/local/go/src/net/http/h2_bundle.go:1721
		// _ = "end of CoverTab[37849]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1722
		_go_fuzz_dep_.CoverTab[37850]++
//line /usr/local/go/src/net/http/h2_bundle.go:1722
		// _ = "end of CoverTab[37850]"
//line /usr/local/go/src/net/http/h2_bundle.go:1722
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1722
	// _ = "end of CoverTab[37845]"
//line /usr/local/go/src/net/http/h2_bundle.go:1722
	_go_fuzz_dep_.CoverTab[37846]++
							f.debugWriteLoggerf("http2: Framer %p: wrote %v", f, http2summarizeFrame(fr))
//line /usr/local/go/src/net/http/h2_bundle.go:1723
	// _ = "end of CoverTab[37846]"
}

func (f *http2Framer) writeByte(v byte) {
//line /usr/local/go/src/net/http/h2_bundle.go:1726
	_go_fuzz_dep_.CoverTab[37851]++
//line /usr/local/go/src/net/http/h2_bundle.go:1726
	f.wbuf = append(f.wbuf, v)
//line /usr/local/go/src/net/http/h2_bundle.go:1726
	// _ = "end of CoverTab[37851]"
//line /usr/local/go/src/net/http/h2_bundle.go:1726
}

func (f *http2Framer) writeBytes(v []byte) {
//line /usr/local/go/src/net/http/h2_bundle.go:1728
	_go_fuzz_dep_.CoverTab[37852]++
//line /usr/local/go/src/net/http/h2_bundle.go:1728
	f.wbuf = append(f.wbuf, v...)
//line /usr/local/go/src/net/http/h2_bundle.go:1728
	// _ = "end of CoverTab[37852]"
//line /usr/local/go/src/net/http/h2_bundle.go:1728
}

func (f *http2Framer) writeUint16(v uint16) {
//line /usr/local/go/src/net/http/h2_bundle.go:1730
	_go_fuzz_dep_.CoverTab[37853]++
//line /usr/local/go/src/net/http/h2_bundle.go:1730
	f.wbuf = append(f.wbuf, byte(v>>8), byte(v))
//line /usr/local/go/src/net/http/h2_bundle.go:1730
	// _ = "end of CoverTab[37853]"
//line /usr/local/go/src/net/http/h2_bundle.go:1730
}

func (f *http2Framer) writeUint32(v uint32) {
//line /usr/local/go/src/net/http/h2_bundle.go:1732
	_go_fuzz_dep_.CoverTab[37854]++
							f.wbuf = append(f.wbuf, byte(v>>24), byte(v>>16), byte(v>>8), byte(v))
//line /usr/local/go/src/net/http/h2_bundle.go:1733
	// _ = "end of CoverTab[37854]"
}

const (
	http2minMaxFrameSize	= 1 << 14
	http2maxFrameSize	= 1<<24 - 1
)

// SetReuseFrames allows the Framer to reuse Frames.
//line /usr/local/go/src/net/http/h2_bundle.go:1741
// If called on a Framer, Frames returned by calls to ReadFrame are only
//line /usr/local/go/src/net/http/h2_bundle.go:1741
// valid until the next call to ReadFrame.
//line /usr/local/go/src/net/http/h2_bundle.go:1744
func (fr *http2Framer) SetReuseFrames() {
//line /usr/local/go/src/net/http/h2_bundle.go:1744
	_go_fuzz_dep_.CoverTab[37855]++
							if fr.frameCache != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1745
		_go_fuzz_dep_.CoverTab[37857]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:1746
		// _ = "end of CoverTab[37857]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1747
		_go_fuzz_dep_.CoverTab[37858]++
//line /usr/local/go/src/net/http/h2_bundle.go:1747
		// _ = "end of CoverTab[37858]"
//line /usr/local/go/src/net/http/h2_bundle.go:1747
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1747
	// _ = "end of CoverTab[37855]"
//line /usr/local/go/src/net/http/h2_bundle.go:1747
	_go_fuzz_dep_.CoverTab[37856]++
							fr.frameCache = &http2frameCache{}
//line /usr/local/go/src/net/http/h2_bundle.go:1748
	// _ = "end of CoverTab[37856]"
}

type http2frameCache struct {
	dataFrame http2DataFrame
}

func (fc *http2frameCache) getDataFrame() *http2DataFrame {
//line /usr/local/go/src/net/http/h2_bundle.go:1755
	_go_fuzz_dep_.CoverTab[37859]++
							if fc == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1756
		_go_fuzz_dep_.CoverTab[37861]++
								return &http2DataFrame{}
//line /usr/local/go/src/net/http/h2_bundle.go:1757
		// _ = "end of CoverTab[37861]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1758
		_go_fuzz_dep_.CoverTab[37862]++
//line /usr/local/go/src/net/http/h2_bundle.go:1758
		// _ = "end of CoverTab[37862]"
//line /usr/local/go/src/net/http/h2_bundle.go:1758
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1758
	// _ = "end of CoverTab[37859]"
//line /usr/local/go/src/net/http/h2_bundle.go:1758
	_go_fuzz_dep_.CoverTab[37860]++
							return &fc.dataFrame
//line /usr/local/go/src/net/http/h2_bundle.go:1759
	// _ = "end of CoverTab[37860]"
}

// NewFramer returns a Framer that writes frames to w and reads them from r.
func http2NewFramer(w io.Writer, r io.Reader) *http2Framer {
//line /usr/local/go/src/net/http/h2_bundle.go:1763
	_go_fuzz_dep_.CoverTab[37863]++
							fr := &http2Framer{
		w:			w,
		r:			r,
		countError:		func(string) { _go_fuzz_dep_.CoverTab[37866]++; // _ = "end of CoverTab[37866]" },
		logReads:		http2logFrameReads,
		logWrites:		http2logFrameWrites,
		debugReadLoggerf:	log.Printf,
		debugWriteLoggerf:	log.Printf,
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1772
	// _ = "end of CoverTab[37863]"
//line /usr/local/go/src/net/http/h2_bundle.go:1772
	_go_fuzz_dep_.CoverTab[37864]++
							fr.getReadBuf = func(size uint32) []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:1773
		_go_fuzz_dep_.CoverTab[37867]++
								if cap(fr.readBuf) >= int(size) {
//line /usr/local/go/src/net/http/h2_bundle.go:1774
			_go_fuzz_dep_.CoverTab[37869]++
									return fr.readBuf[:size]
//line /usr/local/go/src/net/http/h2_bundle.go:1775
			// _ = "end of CoverTab[37869]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1776
			_go_fuzz_dep_.CoverTab[37870]++
//line /usr/local/go/src/net/http/h2_bundle.go:1776
			// _ = "end of CoverTab[37870]"
//line /usr/local/go/src/net/http/h2_bundle.go:1776
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1776
		// _ = "end of CoverTab[37867]"
//line /usr/local/go/src/net/http/h2_bundle.go:1776
		_go_fuzz_dep_.CoverTab[37868]++
								fr.readBuf = make([]byte, size)
								return fr.readBuf
//line /usr/local/go/src/net/http/h2_bundle.go:1778
		// _ = "end of CoverTab[37868]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1779
	// _ = "end of CoverTab[37864]"
//line /usr/local/go/src/net/http/h2_bundle.go:1779
	_go_fuzz_dep_.CoverTab[37865]++
							fr.SetMaxReadFrameSize(http2maxFrameSize)
							return fr
//line /usr/local/go/src/net/http/h2_bundle.go:1781
	// _ = "end of CoverTab[37865]"
}

// SetMaxReadFrameSize sets the maximum size of a frame
//line /usr/local/go/src/net/http/h2_bundle.go:1784
// that will be read by a subsequent call to ReadFrame.
//line /usr/local/go/src/net/http/h2_bundle.go:1784
// It is the caller's responsibility to advertise this
//line /usr/local/go/src/net/http/h2_bundle.go:1784
// limit with a SETTINGS frame.
//line /usr/local/go/src/net/http/h2_bundle.go:1788
func (fr *http2Framer) SetMaxReadFrameSize(v uint32) {
//line /usr/local/go/src/net/http/h2_bundle.go:1788
	_go_fuzz_dep_.CoverTab[37871]++
							if v > http2maxFrameSize {
//line /usr/local/go/src/net/http/h2_bundle.go:1789
		_go_fuzz_dep_.CoverTab[37873]++
								v = http2maxFrameSize
//line /usr/local/go/src/net/http/h2_bundle.go:1790
		// _ = "end of CoverTab[37873]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1791
		_go_fuzz_dep_.CoverTab[37874]++
//line /usr/local/go/src/net/http/h2_bundle.go:1791
		// _ = "end of CoverTab[37874]"
//line /usr/local/go/src/net/http/h2_bundle.go:1791
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1791
	// _ = "end of CoverTab[37871]"
//line /usr/local/go/src/net/http/h2_bundle.go:1791
	_go_fuzz_dep_.CoverTab[37872]++
							fr.maxReadSize = v
//line /usr/local/go/src/net/http/h2_bundle.go:1792
	// _ = "end of CoverTab[37872]"
}

// ErrorDetail returns a more detailed error of the last error
//line /usr/local/go/src/net/http/h2_bundle.go:1795
// returned by Framer.ReadFrame. For instance, if ReadFrame
//line /usr/local/go/src/net/http/h2_bundle.go:1795
// returns a StreamError with code PROTOCOL_ERROR, ErrorDetail
//line /usr/local/go/src/net/http/h2_bundle.go:1795
// will say exactly what was invalid. ErrorDetail is not guaranteed
//line /usr/local/go/src/net/http/h2_bundle.go:1795
// to return a non-nil value and like the rest of the http2 package,
//line /usr/local/go/src/net/http/h2_bundle.go:1795
// its return value is not protected by an API compatibility promise.
//line /usr/local/go/src/net/http/h2_bundle.go:1795
// ErrorDetail is reset after the next call to ReadFrame.
//line /usr/local/go/src/net/http/h2_bundle.go:1802
func (fr *http2Framer) ErrorDetail() error {
//line /usr/local/go/src/net/http/h2_bundle.go:1802
	_go_fuzz_dep_.CoverTab[37875]++
							return fr.errDetail
//line /usr/local/go/src/net/http/h2_bundle.go:1803
	// _ = "end of CoverTab[37875]"
}

// ErrFrameTooLarge is returned from Framer.ReadFrame when the peer
//line /usr/local/go/src/net/http/h2_bundle.go:1806
// sends a frame that is larger than declared with SetMaxReadFrameSize.
//line /usr/local/go/src/net/http/h2_bundle.go:1808
var http2ErrFrameTooLarge = errors.New("http2: frame too large")

// terminalReadFrameError reports whether err is an unrecoverable
//line /usr/local/go/src/net/http/h2_bundle.go:1810
// error from ReadFrame and no other frames should be read.
//line /usr/local/go/src/net/http/h2_bundle.go:1812
func http2terminalReadFrameError(err error) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1812
	_go_fuzz_dep_.CoverTab[37876]++
							if _, ok := err.(http2StreamError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:1813
		_go_fuzz_dep_.CoverTab[37878]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:1814
		// _ = "end of CoverTab[37878]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1815
		_go_fuzz_dep_.CoverTab[37879]++
//line /usr/local/go/src/net/http/h2_bundle.go:1815
		// _ = "end of CoverTab[37879]"
//line /usr/local/go/src/net/http/h2_bundle.go:1815
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1815
	// _ = "end of CoverTab[37876]"
//line /usr/local/go/src/net/http/h2_bundle.go:1815
	_go_fuzz_dep_.CoverTab[37877]++
							return err != nil
//line /usr/local/go/src/net/http/h2_bundle.go:1816
	// _ = "end of CoverTab[37877]"
}

// ReadFrame reads a single frame. The returned Frame is only valid
//line /usr/local/go/src/net/http/h2_bundle.go:1819
// until the next call to ReadFrame.
//line /usr/local/go/src/net/http/h2_bundle.go:1819
//
//line /usr/local/go/src/net/http/h2_bundle.go:1819
// If the frame is larger than previously set with SetMaxReadFrameSize, the
//line /usr/local/go/src/net/http/h2_bundle.go:1819
// returned error is ErrFrameTooLarge. Other errors may be of type
//line /usr/local/go/src/net/http/h2_bundle.go:1819
// ConnectionError, StreamError, or anything else from the underlying
//line /usr/local/go/src/net/http/h2_bundle.go:1819
// reader.
//line /usr/local/go/src/net/http/h2_bundle.go:1826
func (fr *http2Framer) ReadFrame() (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:1826
	_go_fuzz_dep_.CoverTab[37880]++
							fr.errDetail = nil
							if fr.lastFrame != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1828
		_go_fuzz_dep_.CoverTab[37889]++
								fr.lastFrame.invalidate()
//line /usr/local/go/src/net/http/h2_bundle.go:1829
		// _ = "end of CoverTab[37889]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1830
		_go_fuzz_dep_.CoverTab[37890]++
//line /usr/local/go/src/net/http/h2_bundle.go:1830
		// _ = "end of CoverTab[37890]"
//line /usr/local/go/src/net/http/h2_bundle.go:1830
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1830
	// _ = "end of CoverTab[37880]"
//line /usr/local/go/src/net/http/h2_bundle.go:1830
	_go_fuzz_dep_.CoverTab[37881]++
							fh, err := http2readFrameHeader(fr.headerBuf[:], fr.r)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1832
		_go_fuzz_dep_.CoverTab[37891]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:1833
		// _ = "end of CoverTab[37891]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1834
		_go_fuzz_dep_.CoverTab[37892]++
//line /usr/local/go/src/net/http/h2_bundle.go:1834
		// _ = "end of CoverTab[37892]"
//line /usr/local/go/src/net/http/h2_bundle.go:1834
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1834
	// _ = "end of CoverTab[37881]"
//line /usr/local/go/src/net/http/h2_bundle.go:1834
	_go_fuzz_dep_.CoverTab[37882]++
							if fh.Length > fr.maxReadSize {
//line /usr/local/go/src/net/http/h2_bundle.go:1835
		_go_fuzz_dep_.CoverTab[37893]++
								return nil, http2ErrFrameTooLarge
//line /usr/local/go/src/net/http/h2_bundle.go:1836
		// _ = "end of CoverTab[37893]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1837
		_go_fuzz_dep_.CoverTab[37894]++
//line /usr/local/go/src/net/http/h2_bundle.go:1837
		// _ = "end of CoverTab[37894]"
//line /usr/local/go/src/net/http/h2_bundle.go:1837
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1837
	// _ = "end of CoverTab[37882]"
//line /usr/local/go/src/net/http/h2_bundle.go:1837
	_go_fuzz_dep_.CoverTab[37883]++
							payload := fr.getReadBuf(fh.Length)
							if _, err := io.ReadFull(fr.r, payload); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1839
		_go_fuzz_dep_.CoverTab[37895]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:1840
		// _ = "end of CoverTab[37895]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1841
		_go_fuzz_dep_.CoverTab[37896]++
//line /usr/local/go/src/net/http/h2_bundle.go:1841
		// _ = "end of CoverTab[37896]"
//line /usr/local/go/src/net/http/h2_bundle.go:1841
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1841
	// _ = "end of CoverTab[37883]"
//line /usr/local/go/src/net/http/h2_bundle.go:1841
	_go_fuzz_dep_.CoverTab[37884]++
							f, err := http2typeFrameParser(fh.Type)(fr.frameCache, fh, fr.countError, payload)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1843
		_go_fuzz_dep_.CoverTab[37897]++
								if ce, ok := err.(http2connError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:1844
			_go_fuzz_dep_.CoverTab[37899]++
									return nil, fr.connError(ce.Code, ce.Reason)
//line /usr/local/go/src/net/http/h2_bundle.go:1845
			// _ = "end of CoverTab[37899]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1846
			_go_fuzz_dep_.CoverTab[37900]++
//line /usr/local/go/src/net/http/h2_bundle.go:1846
			// _ = "end of CoverTab[37900]"
//line /usr/local/go/src/net/http/h2_bundle.go:1846
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1846
		// _ = "end of CoverTab[37897]"
//line /usr/local/go/src/net/http/h2_bundle.go:1846
		_go_fuzz_dep_.CoverTab[37898]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:1847
		// _ = "end of CoverTab[37898]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1848
		_go_fuzz_dep_.CoverTab[37901]++
//line /usr/local/go/src/net/http/h2_bundle.go:1848
		// _ = "end of CoverTab[37901]"
//line /usr/local/go/src/net/http/h2_bundle.go:1848
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1848
	// _ = "end of CoverTab[37884]"
//line /usr/local/go/src/net/http/h2_bundle.go:1848
	_go_fuzz_dep_.CoverTab[37885]++
							if err := fr.checkFrameOrder(f); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1849
		_go_fuzz_dep_.CoverTab[37902]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:1850
		// _ = "end of CoverTab[37902]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1851
		_go_fuzz_dep_.CoverTab[37903]++
//line /usr/local/go/src/net/http/h2_bundle.go:1851
		// _ = "end of CoverTab[37903]"
//line /usr/local/go/src/net/http/h2_bundle.go:1851
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1851
	// _ = "end of CoverTab[37885]"
//line /usr/local/go/src/net/http/h2_bundle.go:1851
	_go_fuzz_dep_.CoverTab[37886]++
							if fr.logReads {
//line /usr/local/go/src/net/http/h2_bundle.go:1852
		_go_fuzz_dep_.CoverTab[37904]++
								fr.debugReadLoggerf("http2: Framer %p: read %v", fr, http2summarizeFrame(f))
//line /usr/local/go/src/net/http/h2_bundle.go:1853
		// _ = "end of CoverTab[37904]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1854
		_go_fuzz_dep_.CoverTab[37905]++
//line /usr/local/go/src/net/http/h2_bundle.go:1854
		// _ = "end of CoverTab[37905]"
//line /usr/local/go/src/net/http/h2_bundle.go:1854
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1854
	// _ = "end of CoverTab[37886]"
//line /usr/local/go/src/net/http/h2_bundle.go:1854
	_go_fuzz_dep_.CoverTab[37887]++
							if fh.Type == http2FrameHeaders && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1855
		_go_fuzz_dep_.CoverTab[37906]++
//line /usr/local/go/src/net/http/h2_bundle.go:1855
		return fr.ReadMetaHeaders != nil
//line /usr/local/go/src/net/http/h2_bundle.go:1855
		// _ = "end of CoverTab[37906]"
//line /usr/local/go/src/net/http/h2_bundle.go:1855
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:1855
		_go_fuzz_dep_.CoverTab[37907]++
								return fr.readMetaFrame(f.(*http2HeadersFrame))
//line /usr/local/go/src/net/http/h2_bundle.go:1856
		// _ = "end of CoverTab[37907]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1857
		_go_fuzz_dep_.CoverTab[37908]++
//line /usr/local/go/src/net/http/h2_bundle.go:1857
		// _ = "end of CoverTab[37908]"
//line /usr/local/go/src/net/http/h2_bundle.go:1857
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1857
	// _ = "end of CoverTab[37887]"
//line /usr/local/go/src/net/http/h2_bundle.go:1857
	_go_fuzz_dep_.CoverTab[37888]++
							return f, nil
//line /usr/local/go/src/net/http/h2_bundle.go:1858
	// _ = "end of CoverTab[37888]"
}

// connError returns ConnectionError(code) but first
//line /usr/local/go/src/net/http/h2_bundle.go:1861
// stashes away a public reason to the caller can optionally relay it
//line /usr/local/go/src/net/http/h2_bundle.go:1861
// to the peer before hanging up on them. This might help others debug
//line /usr/local/go/src/net/http/h2_bundle.go:1861
// their implementations.
//line /usr/local/go/src/net/http/h2_bundle.go:1865
func (fr *http2Framer) connError(code http2ErrCode, reason string) error {
//line /usr/local/go/src/net/http/h2_bundle.go:1865
	_go_fuzz_dep_.CoverTab[37909]++
							fr.errDetail = errors.New(reason)
							return http2ConnectionError(code)
//line /usr/local/go/src/net/http/h2_bundle.go:1867
	// _ = "end of CoverTab[37909]"
}

// checkFrameOrder reports an error if f is an invalid frame to return
//line /usr/local/go/src/net/http/h2_bundle.go:1870
// next from ReadFrame. Mostly it checks whether HEADERS and
//line /usr/local/go/src/net/http/h2_bundle.go:1870
// CONTINUATION frames are contiguous.
//line /usr/local/go/src/net/http/h2_bundle.go:1873
func (fr *http2Framer) checkFrameOrder(f http2Frame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:1873
	_go_fuzz_dep_.CoverTab[37910]++
							last := fr.lastFrame
							fr.lastFrame = f
							if fr.AllowIllegalReads {
//line /usr/local/go/src/net/http/h2_bundle.go:1876
		_go_fuzz_dep_.CoverTab[37914]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:1877
		// _ = "end of CoverTab[37914]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1878
		_go_fuzz_dep_.CoverTab[37915]++
//line /usr/local/go/src/net/http/h2_bundle.go:1878
		// _ = "end of CoverTab[37915]"
//line /usr/local/go/src/net/http/h2_bundle.go:1878
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1878
	// _ = "end of CoverTab[37910]"
//line /usr/local/go/src/net/http/h2_bundle.go:1878
	_go_fuzz_dep_.CoverTab[37911]++

							fh := f.Header()
							if fr.lastHeaderStream != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:1881
		_go_fuzz_dep_.CoverTab[37916]++
								if fh.Type != http2FrameContinuation {
//line /usr/local/go/src/net/http/h2_bundle.go:1882
			_go_fuzz_dep_.CoverTab[37918]++
									return fr.connError(http2ErrCodeProtocol,
				fmt.Sprintf("got %s for stream %d; expected CONTINUATION following %s for stream %d",
					fh.Type, fh.StreamID,
					last.Header().Type, fr.lastHeaderStream))
//line /usr/local/go/src/net/http/h2_bundle.go:1886
			// _ = "end of CoverTab[37918]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1887
			_go_fuzz_dep_.CoverTab[37919]++
//line /usr/local/go/src/net/http/h2_bundle.go:1887
			// _ = "end of CoverTab[37919]"
//line /usr/local/go/src/net/http/h2_bundle.go:1887
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1887
		// _ = "end of CoverTab[37916]"
//line /usr/local/go/src/net/http/h2_bundle.go:1887
		_go_fuzz_dep_.CoverTab[37917]++
								if fh.StreamID != fr.lastHeaderStream {
//line /usr/local/go/src/net/http/h2_bundle.go:1888
			_go_fuzz_dep_.CoverTab[37920]++
									return fr.connError(http2ErrCodeProtocol,
				fmt.Sprintf("got CONTINUATION for stream %d; expected stream %d",
					fh.StreamID, fr.lastHeaderStream))
//line /usr/local/go/src/net/http/h2_bundle.go:1891
			// _ = "end of CoverTab[37920]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1892
			_go_fuzz_dep_.CoverTab[37921]++
//line /usr/local/go/src/net/http/h2_bundle.go:1892
			// _ = "end of CoverTab[37921]"
//line /usr/local/go/src/net/http/h2_bundle.go:1892
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1892
		// _ = "end of CoverTab[37917]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1893
		_go_fuzz_dep_.CoverTab[37922]++
//line /usr/local/go/src/net/http/h2_bundle.go:1893
		if fh.Type == http2FrameContinuation {
//line /usr/local/go/src/net/http/h2_bundle.go:1893
			_go_fuzz_dep_.CoverTab[37923]++
									return fr.connError(http2ErrCodeProtocol, fmt.Sprintf("unexpected CONTINUATION for stream %d", fh.StreamID))
//line /usr/local/go/src/net/http/h2_bundle.go:1894
			// _ = "end of CoverTab[37923]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1895
			_go_fuzz_dep_.CoverTab[37924]++
//line /usr/local/go/src/net/http/h2_bundle.go:1895
			// _ = "end of CoverTab[37924]"
//line /usr/local/go/src/net/http/h2_bundle.go:1895
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1895
		// _ = "end of CoverTab[37922]"
//line /usr/local/go/src/net/http/h2_bundle.go:1895
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1895
	// _ = "end of CoverTab[37911]"
//line /usr/local/go/src/net/http/h2_bundle.go:1895
	_go_fuzz_dep_.CoverTab[37912]++

							switch fh.Type {
	case http2FrameHeaders, http2FrameContinuation:
//line /usr/local/go/src/net/http/h2_bundle.go:1898
		_go_fuzz_dep_.CoverTab[37925]++
								if fh.Flags.Has(http2FlagHeadersEndHeaders) {
//line /usr/local/go/src/net/http/h2_bundle.go:1899
			_go_fuzz_dep_.CoverTab[37927]++
									fr.lastHeaderStream = 0
//line /usr/local/go/src/net/http/h2_bundle.go:1900
			// _ = "end of CoverTab[37927]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1901
			_go_fuzz_dep_.CoverTab[37928]++
									fr.lastHeaderStream = fh.StreamID
//line /usr/local/go/src/net/http/h2_bundle.go:1902
			// _ = "end of CoverTab[37928]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1903
		// _ = "end of CoverTab[37925]"
//line /usr/local/go/src/net/http/h2_bundle.go:1903
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:1903
		_go_fuzz_dep_.CoverTab[37926]++
//line /usr/local/go/src/net/http/h2_bundle.go:1903
		// _ = "end of CoverTab[37926]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1904
	// _ = "end of CoverTab[37912]"
//line /usr/local/go/src/net/http/h2_bundle.go:1904
	_go_fuzz_dep_.CoverTab[37913]++

							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:1906
	// _ = "end of CoverTab[37913]"
}

// A DataFrame conveys arbitrary, variable-length sequences of octets
//line /usr/local/go/src/net/http/h2_bundle.go:1909
// associated with a stream.
//line /usr/local/go/src/net/http/h2_bundle.go:1909
// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.1
//line /usr/local/go/src/net/http/h2_bundle.go:1912
type http2DataFrame struct {
	http2FrameHeader
	data	[]byte
}

func (f *http2DataFrame) StreamEnded() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1917
	_go_fuzz_dep_.CoverTab[37929]++
							return f.http2FrameHeader.Flags.Has(http2FlagDataEndStream)
//line /usr/local/go/src/net/http/h2_bundle.go:1918
	// _ = "end of CoverTab[37929]"
}

// Data returns the frame's data octets, not including any padding
//line /usr/local/go/src/net/http/h2_bundle.go:1921
// size byte or padding suffix bytes.
//line /usr/local/go/src/net/http/h2_bundle.go:1921
// The caller must not retain the returned memory past the next
//line /usr/local/go/src/net/http/h2_bundle.go:1921
// call to ReadFrame.
//line /usr/local/go/src/net/http/h2_bundle.go:1925
func (f *http2DataFrame) Data() []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:1925
	_go_fuzz_dep_.CoverTab[37930]++
							f.checkValid()
							return f.data
//line /usr/local/go/src/net/http/h2_bundle.go:1927
	// _ = "end of CoverTab[37930]"
}

func http2parseDataFrame(fc *http2frameCache, fh http2FrameHeader, countError func(string), payload []byte) (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:1930
	_go_fuzz_dep_.CoverTab[37931]++
							if fh.StreamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:1931
		_go_fuzz_dep_.CoverTab[37935]++

//line /usr/local/go/src/net/http/h2_bundle.go:1937
		countError("frame_data_stream_0")
								return nil, http2connError{http2ErrCodeProtocol, "DATA frame with stream ID 0"}
//line /usr/local/go/src/net/http/h2_bundle.go:1938
		// _ = "end of CoverTab[37935]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1939
		_go_fuzz_dep_.CoverTab[37936]++
//line /usr/local/go/src/net/http/h2_bundle.go:1939
		// _ = "end of CoverTab[37936]"
//line /usr/local/go/src/net/http/h2_bundle.go:1939
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1939
	// _ = "end of CoverTab[37931]"
//line /usr/local/go/src/net/http/h2_bundle.go:1939
	_go_fuzz_dep_.CoverTab[37932]++
							f := fc.getDataFrame()
							f.http2FrameHeader = fh

							var padSize byte
							if fh.Flags.Has(http2FlagDataPadded) {
//line /usr/local/go/src/net/http/h2_bundle.go:1944
		_go_fuzz_dep_.CoverTab[37937]++
								var err error
								payload, padSize, err = http2readByte(payload)
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:1947
			_go_fuzz_dep_.CoverTab[37938]++
									countError("frame_data_pad_byte_short")
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:1949
			// _ = "end of CoverTab[37938]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1950
			_go_fuzz_dep_.CoverTab[37939]++
//line /usr/local/go/src/net/http/h2_bundle.go:1950
			// _ = "end of CoverTab[37939]"
//line /usr/local/go/src/net/http/h2_bundle.go:1950
		}
//line /usr/local/go/src/net/http/h2_bundle.go:1950
		// _ = "end of CoverTab[37937]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1951
		_go_fuzz_dep_.CoverTab[37940]++
//line /usr/local/go/src/net/http/h2_bundle.go:1951
		// _ = "end of CoverTab[37940]"
//line /usr/local/go/src/net/http/h2_bundle.go:1951
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1951
	// _ = "end of CoverTab[37932]"
//line /usr/local/go/src/net/http/h2_bundle.go:1951
	_go_fuzz_dep_.CoverTab[37933]++
							if int(padSize) > len(payload) {
//line /usr/local/go/src/net/http/h2_bundle.go:1952
		_go_fuzz_dep_.CoverTab[37941]++

//line /usr/local/go/src/net/http/h2_bundle.go:1957
		countError("frame_data_pad_too_big")
								return nil, http2connError{http2ErrCodeProtocol, "pad size larger than data payload"}
//line /usr/local/go/src/net/http/h2_bundle.go:1958
		// _ = "end of CoverTab[37941]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:1959
		_go_fuzz_dep_.CoverTab[37942]++
//line /usr/local/go/src/net/http/h2_bundle.go:1959
		// _ = "end of CoverTab[37942]"
//line /usr/local/go/src/net/http/h2_bundle.go:1959
	}
//line /usr/local/go/src/net/http/h2_bundle.go:1959
	// _ = "end of CoverTab[37933]"
//line /usr/local/go/src/net/http/h2_bundle.go:1959
	_go_fuzz_dep_.CoverTab[37934]++
							f.data = payload[:len(payload)-int(padSize)]
							return f, nil
//line /usr/local/go/src/net/http/h2_bundle.go:1961
	// _ = "end of CoverTab[37934]"
}

var (
	http2errStreamID	= errors.New("invalid stream ID")
	http2errDepStreamID	= errors.New("invalid dependent stream ID")
	http2errPadLength	= errors.New("pad length too large")
	http2errPadBytes	= errors.New("padding bytes must all be zeros unless AllowIllegalWrites is enabled")
)

func http2validStreamIDOrZero(streamID uint32) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1971
	_go_fuzz_dep_.CoverTab[37943]++
							return streamID&(1<<31) == 0
//line /usr/local/go/src/net/http/h2_bundle.go:1972
	// _ = "end of CoverTab[37943]"
}

func http2validStreamID(streamID uint32) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1975
	_go_fuzz_dep_.CoverTab[37944]++
							return streamID != 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1976
		_go_fuzz_dep_.CoverTab[37945]++
//line /usr/local/go/src/net/http/h2_bundle.go:1976
		return streamID&(1<<31) == 0
//line /usr/local/go/src/net/http/h2_bundle.go:1976
		// _ = "end of CoverTab[37945]"
//line /usr/local/go/src/net/http/h2_bundle.go:1976
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:1976
	// _ = "end of CoverTab[37944]"
}

// WriteData writes a DATA frame.
//line /usr/local/go/src/net/http/h2_bundle.go:1979
//
//line /usr/local/go/src/net/http/h2_bundle.go:1979
// It will perform exactly one Write to the underlying Writer.
//line /usr/local/go/src/net/http/h2_bundle.go:1979
// It is the caller's responsibility not to violate the maximum frame size
//line /usr/local/go/src/net/http/h2_bundle.go:1979
// and to not call other Write methods concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:1984
func (f *http2Framer) WriteData(streamID uint32, endStream bool, data []byte) error {
//line /usr/local/go/src/net/http/h2_bundle.go:1984
	_go_fuzz_dep_.CoverTab[37946]++
							return f.WriteDataPadded(streamID, endStream, data, nil)
//line /usr/local/go/src/net/http/h2_bundle.go:1985
	// _ = "end of CoverTab[37946]"
}

// WriteDataPadded writes a DATA frame with optional padding.
//line /usr/local/go/src/net/http/h2_bundle.go:1988
//
//line /usr/local/go/src/net/http/h2_bundle.go:1988
// If pad is nil, the padding bit is not sent.
//line /usr/local/go/src/net/http/h2_bundle.go:1988
// The length of pad must not exceed 255 bytes.
//line /usr/local/go/src/net/http/h2_bundle.go:1988
// The bytes of pad must all be zero, unless f.AllowIllegalWrites is set.
//line /usr/local/go/src/net/http/h2_bundle.go:1988
//
//line /usr/local/go/src/net/http/h2_bundle.go:1988
// It will perform exactly one Write to the underlying Writer.
//line /usr/local/go/src/net/http/h2_bundle.go:1988
// It is the caller's responsibility not to violate the maximum frame size
//line /usr/local/go/src/net/http/h2_bundle.go:1988
// and to not call other Write methods concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:1997
func (f *http2Framer) WriteDataPadded(streamID uint32, endStream bool, data, pad []byte) error {
//line /usr/local/go/src/net/http/h2_bundle.go:1997
	_go_fuzz_dep_.CoverTab[37947]++
							if !http2validStreamID(streamID) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:1998
		_go_fuzz_dep_.CoverTab[37953]++
//line /usr/local/go/src/net/http/h2_bundle.go:1998
		return !f.AllowIllegalWrites
//line /usr/local/go/src/net/http/h2_bundle.go:1998
		// _ = "end of CoverTab[37953]"
//line /usr/local/go/src/net/http/h2_bundle.go:1998
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:1998
		_go_fuzz_dep_.CoverTab[37954]++
								return http2errStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:1999
		// _ = "end of CoverTab[37954]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2000
		_go_fuzz_dep_.CoverTab[37955]++
//line /usr/local/go/src/net/http/h2_bundle.go:2000
		// _ = "end of CoverTab[37955]"
//line /usr/local/go/src/net/http/h2_bundle.go:2000
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2000
	// _ = "end of CoverTab[37947]"
//line /usr/local/go/src/net/http/h2_bundle.go:2000
	_go_fuzz_dep_.CoverTab[37948]++
							if len(pad) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2001
		_go_fuzz_dep_.CoverTab[37956]++
								if len(pad) > 255 {
//line /usr/local/go/src/net/http/h2_bundle.go:2002
			_go_fuzz_dep_.CoverTab[37958]++
									return http2errPadLength
//line /usr/local/go/src/net/http/h2_bundle.go:2003
			// _ = "end of CoverTab[37958]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2004
			_go_fuzz_dep_.CoverTab[37959]++
//line /usr/local/go/src/net/http/h2_bundle.go:2004
			// _ = "end of CoverTab[37959]"
//line /usr/local/go/src/net/http/h2_bundle.go:2004
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2004
		// _ = "end of CoverTab[37956]"
//line /usr/local/go/src/net/http/h2_bundle.go:2004
		_go_fuzz_dep_.CoverTab[37957]++
								if !f.AllowIllegalWrites {
//line /usr/local/go/src/net/http/h2_bundle.go:2005
			_go_fuzz_dep_.CoverTab[37960]++
									for _, b := range pad {
//line /usr/local/go/src/net/http/h2_bundle.go:2006
				_go_fuzz_dep_.CoverTab[37961]++
										if b != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2007
					_go_fuzz_dep_.CoverTab[37962]++

											return http2errPadBytes
//line /usr/local/go/src/net/http/h2_bundle.go:2009
					// _ = "end of CoverTab[37962]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2010
					_go_fuzz_dep_.CoverTab[37963]++
//line /usr/local/go/src/net/http/h2_bundle.go:2010
					// _ = "end of CoverTab[37963]"
//line /usr/local/go/src/net/http/h2_bundle.go:2010
				}
//line /usr/local/go/src/net/http/h2_bundle.go:2010
				// _ = "end of CoverTab[37961]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:2011
			// _ = "end of CoverTab[37960]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2012
			_go_fuzz_dep_.CoverTab[37964]++
//line /usr/local/go/src/net/http/h2_bundle.go:2012
			// _ = "end of CoverTab[37964]"
//line /usr/local/go/src/net/http/h2_bundle.go:2012
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2012
		// _ = "end of CoverTab[37957]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2013
		_go_fuzz_dep_.CoverTab[37965]++
//line /usr/local/go/src/net/http/h2_bundle.go:2013
		// _ = "end of CoverTab[37965]"
//line /usr/local/go/src/net/http/h2_bundle.go:2013
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2013
	// _ = "end of CoverTab[37948]"
//line /usr/local/go/src/net/http/h2_bundle.go:2013
	_go_fuzz_dep_.CoverTab[37949]++
							var flags http2Flags
							if endStream {
//line /usr/local/go/src/net/http/h2_bundle.go:2015
		_go_fuzz_dep_.CoverTab[37966]++
								flags |= http2FlagDataEndStream
//line /usr/local/go/src/net/http/h2_bundle.go:2016
		// _ = "end of CoverTab[37966]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2017
		_go_fuzz_dep_.CoverTab[37967]++
//line /usr/local/go/src/net/http/h2_bundle.go:2017
		// _ = "end of CoverTab[37967]"
//line /usr/local/go/src/net/http/h2_bundle.go:2017
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2017
	// _ = "end of CoverTab[37949]"
//line /usr/local/go/src/net/http/h2_bundle.go:2017
	_go_fuzz_dep_.CoverTab[37950]++
							if pad != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2018
		_go_fuzz_dep_.CoverTab[37968]++
								flags |= http2FlagDataPadded
//line /usr/local/go/src/net/http/h2_bundle.go:2019
		// _ = "end of CoverTab[37968]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2020
		_go_fuzz_dep_.CoverTab[37969]++
//line /usr/local/go/src/net/http/h2_bundle.go:2020
		// _ = "end of CoverTab[37969]"
//line /usr/local/go/src/net/http/h2_bundle.go:2020
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2020
	// _ = "end of CoverTab[37950]"
//line /usr/local/go/src/net/http/h2_bundle.go:2020
	_go_fuzz_dep_.CoverTab[37951]++
							f.startWrite(http2FrameData, flags, streamID)
							if pad != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2022
		_go_fuzz_dep_.CoverTab[37970]++
								f.wbuf = append(f.wbuf, byte(len(pad)))
//line /usr/local/go/src/net/http/h2_bundle.go:2023
		// _ = "end of CoverTab[37970]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2024
		_go_fuzz_dep_.CoverTab[37971]++
//line /usr/local/go/src/net/http/h2_bundle.go:2024
		// _ = "end of CoverTab[37971]"
//line /usr/local/go/src/net/http/h2_bundle.go:2024
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2024
	// _ = "end of CoverTab[37951]"
//line /usr/local/go/src/net/http/h2_bundle.go:2024
	_go_fuzz_dep_.CoverTab[37952]++
							f.wbuf = append(f.wbuf, data...)
							f.wbuf = append(f.wbuf, pad...)
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2027
	// _ = "end of CoverTab[37952]"
}

// A SettingsFrame conveys configuration parameters that affect how
//line /usr/local/go/src/net/http/h2_bundle.go:2030
// endpoints communicate, such as preferences and constraints on peer
//line /usr/local/go/src/net/http/h2_bundle.go:2030
// behavior.
//line /usr/local/go/src/net/http/h2_bundle.go:2030
//
//line /usr/local/go/src/net/http/h2_bundle.go:2030
// See https://httpwg.org/specs/rfc7540.html#SETTINGS
//line /usr/local/go/src/net/http/h2_bundle.go:2035
type http2SettingsFrame struct {
	http2FrameHeader
	p	[]byte
}

func http2parseSettingsFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2040
	_go_fuzz_dep_.CoverTab[37972]++
							if fh.Flags.Has(http2FlagSettingsAck) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2041
		_go_fuzz_dep_.CoverTab[37977]++
//line /usr/local/go/src/net/http/h2_bundle.go:2041
		return fh.Length > 0
//line /usr/local/go/src/net/http/h2_bundle.go:2041
		// _ = "end of CoverTab[37977]"
//line /usr/local/go/src/net/http/h2_bundle.go:2041
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2041
		_go_fuzz_dep_.CoverTab[37978]++

//line /usr/local/go/src/net/http/h2_bundle.go:2048
		countError("frame_settings_ack_with_length")
								return nil, http2ConnectionError(http2ErrCodeFrameSize)
//line /usr/local/go/src/net/http/h2_bundle.go:2049
		// _ = "end of CoverTab[37978]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2050
		_go_fuzz_dep_.CoverTab[37979]++
//line /usr/local/go/src/net/http/h2_bundle.go:2050
		// _ = "end of CoverTab[37979]"
//line /usr/local/go/src/net/http/h2_bundle.go:2050
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2050
	// _ = "end of CoverTab[37972]"
//line /usr/local/go/src/net/http/h2_bundle.go:2050
	_go_fuzz_dep_.CoverTab[37973]++
							if fh.StreamID != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2051
		_go_fuzz_dep_.CoverTab[37980]++

//line /usr/local/go/src/net/http/h2_bundle.go:2059
		countError("frame_settings_has_stream")
								return nil, http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:2060
		// _ = "end of CoverTab[37980]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2061
		_go_fuzz_dep_.CoverTab[37981]++
//line /usr/local/go/src/net/http/h2_bundle.go:2061
		// _ = "end of CoverTab[37981]"
//line /usr/local/go/src/net/http/h2_bundle.go:2061
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2061
	// _ = "end of CoverTab[37973]"
//line /usr/local/go/src/net/http/h2_bundle.go:2061
	_go_fuzz_dep_.CoverTab[37974]++
							if len(p)%6 != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2062
		_go_fuzz_dep_.CoverTab[37982]++
								countError("frame_settings_mod_6")

								return nil, http2ConnectionError(http2ErrCodeFrameSize)
//line /usr/local/go/src/net/http/h2_bundle.go:2065
		// _ = "end of CoverTab[37982]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2066
		_go_fuzz_dep_.CoverTab[37983]++
//line /usr/local/go/src/net/http/h2_bundle.go:2066
		// _ = "end of CoverTab[37983]"
//line /usr/local/go/src/net/http/h2_bundle.go:2066
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2066
	// _ = "end of CoverTab[37974]"
//line /usr/local/go/src/net/http/h2_bundle.go:2066
	_go_fuzz_dep_.CoverTab[37975]++
							f := &http2SettingsFrame{http2FrameHeader: fh, p: p}
							if v, ok := f.Value(http2SettingInitialWindowSize); ok && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2068
		_go_fuzz_dep_.CoverTab[37984]++
//line /usr/local/go/src/net/http/h2_bundle.go:2068
		return v > (1<<31)-1
//line /usr/local/go/src/net/http/h2_bundle.go:2068
		// _ = "end of CoverTab[37984]"
//line /usr/local/go/src/net/http/h2_bundle.go:2068
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2068
		_go_fuzz_dep_.CoverTab[37985]++
								countError("frame_settings_window_size_too_big")

//line /usr/local/go/src/net/http/h2_bundle.go:2073
		return nil, http2ConnectionError(http2ErrCodeFlowControl)
//line /usr/local/go/src/net/http/h2_bundle.go:2073
		// _ = "end of CoverTab[37985]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2074
		_go_fuzz_dep_.CoverTab[37986]++
//line /usr/local/go/src/net/http/h2_bundle.go:2074
		// _ = "end of CoverTab[37986]"
//line /usr/local/go/src/net/http/h2_bundle.go:2074
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2074
	// _ = "end of CoverTab[37975]"
//line /usr/local/go/src/net/http/h2_bundle.go:2074
	_go_fuzz_dep_.CoverTab[37976]++
							return f, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2075
	// _ = "end of CoverTab[37976]"
}

func (f *http2SettingsFrame) IsAck() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2078
	_go_fuzz_dep_.CoverTab[37987]++
							return f.http2FrameHeader.Flags.Has(http2FlagSettingsAck)
//line /usr/local/go/src/net/http/h2_bundle.go:2079
	// _ = "end of CoverTab[37987]"
}

func (f *http2SettingsFrame) Value(id http2SettingID) (v uint32, ok bool) {
//line /usr/local/go/src/net/http/h2_bundle.go:2082
	_go_fuzz_dep_.CoverTab[37988]++
							f.checkValid()
							for i := 0; i < f.NumSettings(); i++ {
//line /usr/local/go/src/net/http/h2_bundle.go:2084
		_go_fuzz_dep_.CoverTab[37990]++
								if s := f.Setting(i); s.ID == id {
//line /usr/local/go/src/net/http/h2_bundle.go:2085
			_go_fuzz_dep_.CoverTab[37991]++
									return s.Val, true
//line /usr/local/go/src/net/http/h2_bundle.go:2086
			// _ = "end of CoverTab[37991]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2087
			_go_fuzz_dep_.CoverTab[37992]++
//line /usr/local/go/src/net/http/h2_bundle.go:2087
			// _ = "end of CoverTab[37992]"
//line /usr/local/go/src/net/http/h2_bundle.go:2087
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2087
		// _ = "end of CoverTab[37990]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2088
	// _ = "end of CoverTab[37988]"
//line /usr/local/go/src/net/http/h2_bundle.go:2088
	_go_fuzz_dep_.CoverTab[37989]++
							return 0, false
//line /usr/local/go/src/net/http/h2_bundle.go:2089
	// _ = "end of CoverTab[37989]"
}

// Setting returns the setting from the frame at the given 0-based index.
//line /usr/local/go/src/net/http/h2_bundle.go:2092
// The index must be >= 0 and less than f.NumSettings().
//line /usr/local/go/src/net/http/h2_bundle.go:2094
func (f *http2SettingsFrame) Setting(i int) http2Setting {
//line /usr/local/go/src/net/http/h2_bundle.go:2094
	_go_fuzz_dep_.CoverTab[37993]++
							buf := f.p
							return http2Setting{
		ID:	http2SettingID(binary.BigEndian.Uint16(buf[i*6 : i*6+2])),
		Val:	binary.BigEndian.Uint32(buf[i*6+2 : i*6+6]),
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2099
	// _ = "end of CoverTab[37993]"
}

func (f *http2SettingsFrame) NumSettings() int {
//line /usr/local/go/src/net/http/h2_bundle.go:2102
	_go_fuzz_dep_.CoverTab[37994]++
//line /usr/local/go/src/net/http/h2_bundle.go:2102
	return len(f.p) / 6
//line /usr/local/go/src/net/http/h2_bundle.go:2102
	// _ = "end of CoverTab[37994]"
//line /usr/local/go/src/net/http/h2_bundle.go:2102
}

// HasDuplicates reports whether f contains any duplicate setting IDs.
func (f *http2SettingsFrame) HasDuplicates() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2105
	_go_fuzz_dep_.CoverTab[37995]++
							num := f.NumSettings()
							if num == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2107
		_go_fuzz_dep_.CoverTab[37999]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:2108
		// _ = "end of CoverTab[37999]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2109
		_go_fuzz_dep_.CoverTab[38000]++
//line /usr/local/go/src/net/http/h2_bundle.go:2109
		// _ = "end of CoverTab[38000]"
//line /usr/local/go/src/net/http/h2_bundle.go:2109
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2109
	// _ = "end of CoverTab[37995]"
//line /usr/local/go/src/net/http/h2_bundle.go:2109
	_go_fuzz_dep_.CoverTab[37996]++

//line /usr/local/go/src/net/http/h2_bundle.go:2112
	if num < 10 {
//line /usr/local/go/src/net/http/h2_bundle.go:2112
		_go_fuzz_dep_.CoverTab[38001]++
								for i := 0; i < num; i++ {
//line /usr/local/go/src/net/http/h2_bundle.go:2113
			_go_fuzz_dep_.CoverTab[38003]++
									idi := f.Setting(i).ID
									for j := i + 1; j < num; j++ {
//line /usr/local/go/src/net/http/h2_bundle.go:2115
				_go_fuzz_dep_.CoverTab[38004]++
										idj := f.Setting(j).ID
										if idi == idj {
//line /usr/local/go/src/net/http/h2_bundle.go:2117
					_go_fuzz_dep_.CoverTab[38005]++
											return true
//line /usr/local/go/src/net/http/h2_bundle.go:2118
					// _ = "end of CoverTab[38005]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2119
					_go_fuzz_dep_.CoverTab[38006]++
//line /usr/local/go/src/net/http/h2_bundle.go:2119
					// _ = "end of CoverTab[38006]"
//line /usr/local/go/src/net/http/h2_bundle.go:2119
				}
//line /usr/local/go/src/net/http/h2_bundle.go:2119
				// _ = "end of CoverTab[38004]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:2120
			// _ = "end of CoverTab[38003]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2121
		// _ = "end of CoverTab[38001]"
//line /usr/local/go/src/net/http/h2_bundle.go:2121
		_go_fuzz_dep_.CoverTab[38002]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:2122
		// _ = "end of CoverTab[38002]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2123
		_go_fuzz_dep_.CoverTab[38007]++
//line /usr/local/go/src/net/http/h2_bundle.go:2123
		// _ = "end of CoverTab[38007]"
//line /usr/local/go/src/net/http/h2_bundle.go:2123
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2123
	// _ = "end of CoverTab[37996]"
//line /usr/local/go/src/net/http/h2_bundle.go:2123
	_go_fuzz_dep_.CoverTab[37997]++
							seen := map[http2SettingID]bool{}
							for i := 0; i < num; i++ {
//line /usr/local/go/src/net/http/h2_bundle.go:2125
		_go_fuzz_dep_.CoverTab[38008]++
								id := f.Setting(i).ID
								if seen[id] {
//line /usr/local/go/src/net/http/h2_bundle.go:2127
			_go_fuzz_dep_.CoverTab[38010]++
									return true
//line /usr/local/go/src/net/http/h2_bundle.go:2128
			// _ = "end of CoverTab[38010]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2129
			_go_fuzz_dep_.CoverTab[38011]++
//line /usr/local/go/src/net/http/h2_bundle.go:2129
			// _ = "end of CoverTab[38011]"
//line /usr/local/go/src/net/http/h2_bundle.go:2129
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2129
		// _ = "end of CoverTab[38008]"
//line /usr/local/go/src/net/http/h2_bundle.go:2129
		_go_fuzz_dep_.CoverTab[38009]++
								seen[id] = true
//line /usr/local/go/src/net/http/h2_bundle.go:2130
		// _ = "end of CoverTab[38009]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2131
	// _ = "end of CoverTab[37997]"
//line /usr/local/go/src/net/http/h2_bundle.go:2131
	_go_fuzz_dep_.CoverTab[37998]++
							return false
//line /usr/local/go/src/net/http/h2_bundle.go:2132
	// _ = "end of CoverTab[37998]"
}

// ForeachSetting runs fn for each setting.
//line /usr/local/go/src/net/http/h2_bundle.go:2135
// It stops and returns the first error.
//line /usr/local/go/src/net/http/h2_bundle.go:2137
func (f *http2SettingsFrame) ForeachSetting(fn func(http2Setting) error) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2137
	_go_fuzz_dep_.CoverTab[38012]++
							f.checkValid()
							for i := 0; i < f.NumSettings(); i++ {
//line /usr/local/go/src/net/http/h2_bundle.go:2139
		_go_fuzz_dep_.CoverTab[38014]++
								if err := fn(f.Setting(i)); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2140
			_go_fuzz_dep_.CoverTab[38015]++
									return err
//line /usr/local/go/src/net/http/h2_bundle.go:2141
			// _ = "end of CoverTab[38015]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2142
			_go_fuzz_dep_.CoverTab[38016]++
//line /usr/local/go/src/net/http/h2_bundle.go:2142
			// _ = "end of CoverTab[38016]"
//line /usr/local/go/src/net/http/h2_bundle.go:2142
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2142
		// _ = "end of CoverTab[38014]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2143
	// _ = "end of CoverTab[38012]"
//line /usr/local/go/src/net/http/h2_bundle.go:2143
	_go_fuzz_dep_.CoverTab[38013]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:2144
	// _ = "end of CoverTab[38013]"
}

// WriteSettings writes a SETTINGS frame with zero or more settings
//line /usr/local/go/src/net/http/h2_bundle.go:2147
// specified and the ACK bit not set.
//line /usr/local/go/src/net/http/h2_bundle.go:2147
//
//line /usr/local/go/src/net/http/h2_bundle.go:2147
// It will perform exactly one Write to the underlying Writer.
//line /usr/local/go/src/net/http/h2_bundle.go:2147
// It is the caller's responsibility to not call other Write methods concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:2152
func (f *http2Framer) WriteSettings(settings ...http2Setting) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2152
	_go_fuzz_dep_.CoverTab[38017]++
							f.startWrite(http2FrameSettings, 0, 0)
							for _, s := range settings {
//line /usr/local/go/src/net/http/h2_bundle.go:2154
		_go_fuzz_dep_.CoverTab[38019]++
								f.writeUint16(uint16(s.ID))
								f.writeUint32(s.Val)
//line /usr/local/go/src/net/http/h2_bundle.go:2156
		// _ = "end of CoverTab[38019]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2157
	// _ = "end of CoverTab[38017]"
//line /usr/local/go/src/net/http/h2_bundle.go:2157
	_go_fuzz_dep_.CoverTab[38018]++
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2158
	// _ = "end of CoverTab[38018]"
}

// WriteSettingsAck writes an empty SETTINGS frame with the ACK bit set.
//line /usr/local/go/src/net/http/h2_bundle.go:2161
//
//line /usr/local/go/src/net/http/h2_bundle.go:2161
// It will perform exactly one Write to the underlying Writer.
//line /usr/local/go/src/net/http/h2_bundle.go:2161
// It is the caller's responsibility to not call other Write methods concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:2165
func (f *http2Framer) WriteSettingsAck() error {
//line /usr/local/go/src/net/http/h2_bundle.go:2165
	_go_fuzz_dep_.CoverTab[38020]++
							f.startWrite(http2FrameSettings, http2FlagSettingsAck, 0)
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2167
	// _ = "end of CoverTab[38020]"
}

// A PingFrame is a mechanism for measuring a minimal round trip time
//line /usr/local/go/src/net/http/h2_bundle.go:2170
// from the sender, as well as determining whether an idle connection
//line /usr/local/go/src/net/http/h2_bundle.go:2170
// is still functional.
//line /usr/local/go/src/net/http/h2_bundle.go:2170
// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.7
//line /usr/local/go/src/net/http/h2_bundle.go:2174
type http2PingFrame struct {
	http2FrameHeader
	Data	[8]byte
}

func (f *http2PingFrame) IsAck() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2179
	_go_fuzz_dep_.CoverTab[38021]++
//line /usr/local/go/src/net/http/h2_bundle.go:2179
	return f.Flags.Has(http2FlagPingAck)
//line /usr/local/go/src/net/http/h2_bundle.go:2179
	// _ = "end of CoverTab[38021]"
//line /usr/local/go/src/net/http/h2_bundle.go:2179
}

func http2parsePingFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), payload []byte) (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2181
	_go_fuzz_dep_.CoverTab[38022]++
							if len(payload) != 8 {
//line /usr/local/go/src/net/http/h2_bundle.go:2182
		_go_fuzz_dep_.CoverTab[38025]++
								countError("frame_ping_length")
								return nil, http2ConnectionError(http2ErrCodeFrameSize)
//line /usr/local/go/src/net/http/h2_bundle.go:2184
		// _ = "end of CoverTab[38025]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2185
		_go_fuzz_dep_.CoverTab[38026]++
//line /usr/local/go/src/net/http/h2_bundle.go:2185
		// _ = "end of CoverTab[38026]"
//line /usr/local/go/src/net/http/h2_bundle.go:2185
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2185
	// _ = "end of CoverTab[38022]"
//line /usr/local/go/src/net/http/h2_bundle.go:2185
	_go_fuzz_dep_.CoverTab[38023]++
							if fh.StreamID != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2186
		_go_fuzz_dep_.CoverTab[38027]++
								countError("frame_ping_has_stream")
								return nil, http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:2188
		// _ = "end of CoverTab[38027]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2189
		_go_fuzz_dep_.CoverTab[38028]++
//line /usr/local/go/src/net/http/h2_bundle.go:2189
		// _ = "end of CoverTab[38028]"
//line /usr/local/go/src/net/http/h2_bundle.go:2189
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2189
	// _ = "end of CoverTab[38023]"
//line /usr/local/go/src/net/http/h2_bundle.go:2189
	_go_fuzz_dep_.CoverTab[38024]++
							f := &http2PingFrame{http2FrameHeader: fh}
							copy(f.Data[:], payload)
							return f, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2192
	// _ = "end of CoverTab[38024]"
}

func (f *http2Framer) WritePing(ack bool, data [8]byte) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2195
	_go_fuzz_dep_.CoverTab[38029]++
							var flags http2Flags
							if ack {
//line /usr/local/go/src/net/http/h2_bundle.go:2197
		_go_fuzz_dep_.CoverTab[38031]++
								flags = http2FlagPingAck
//line /usr/local/go/src/net/http/h2_bundle.go:2198
		// _ = "end of CoverTab[38031]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2199
		_go_fuzz_dep_.CoverTab[38032]++
//line /usr/local/go/src/net/http/h2_bundle.go:2199
		// _ = "end of CoverTab[38032]"
//line /usr/local/go/src/net/http/h2_bundle.go:2199
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2199
	// _ = "end of CoverTab[38029]"
//line /usr/local/go/src/net/http/h2_bundle.go:2199
	_go_fuzz_dep_.CoverTab[38030]++
							f.startWrite(http2FramePing, flags, 0)
							f.writeBytes(data[:])
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2202
	// _ = "end of CoverTab[38030]"
}

// A GoAwayFrame informs the remote peer to stop creating streams on this connection.
//line /usr/local/go/src/net/http/h2_bundle.go:2205
// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.8
//line /usr/local/go/src/net/http/h2_bundle.go:2207
type http2GoAwayFrame struct {
	http2FrameHeader
	LastStreamID	uint32
	ErrCode		http2ErrCode
	debugData	[]byte
}

// DebugData returns any debug data in the GOAWAY frame. Its contents
//line /usr/local/go/src/net/http/h2_bundle.go:2214
// are not defined.
//line /usr/local/go/src/net/http/h2_bundle.go:2214
// The caller must not retain the returned memory past the next
//line /usr/local/go/src/net/http/h2_bundle.go:2214
// call to ReadFrame.
//line /usr/local/go/src/net/http/h2_bundle.go:2218
func (f *http2GoAwayFrame) DebugData() []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:2218
	_go_fuzz_dep_.CoverTab[38033]++
							f.checkValid()
							return f.debugData
//line /usr/local/go/src/net/http/h2_bundle.go:2220
	// _ = "end of CoverTab[38033]"
}

func http2parseGoAwayFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2223
	_go_fuzz_dep_.CoverTab[38034]++
							if fh.StreamID != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2224
		_go_fuzz_dep_.CoverTab[38037]++
								countError("frame_goaway_has_stream")
								return nil, http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:2226
		// _ = "end of CoverTab[38037]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2227
		_go_fuzz_dep_.CoverTab[38038]++
//line /usr/local/go/src/net/http/h2_bundle.go:2227
		// _ = "end of CoverTab[38038]"
//line /usr/local/go/src/net/http/h2_bundle.go:2227
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2227
	// _ = "end of CoverTab[38034]"
//line /usr/local/go/src/net/http/h2_bundle.go:2227
	_go_fuzz_dep_.CoverTab[38035]++
							if len(p) < 8 {
//line /usr/local/go/src/net/http/h2_bundle.go:2228
		_go_fuzz_dep_.CoverTab[38039]++
								countError("frame_goaway_short")
								return nil, http2ConnectionError(http2ErrCodeFrameSize)
//line /usr/local/go/src/net/http/h2_bundle.go:2230
		// _ = "end of CoverTab[38039]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2231
		_go_fuzz_dep_.CoverTab[38040]++
//line /usr/local/go/src/net/http/h2_bundle.go:2231
		// _ = "end of CoverTab[38040]"
//line /usr/local/go/src/net/http/h2_bundle.go:2231
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2231
	// _ = "end of CoverTab[38035]"
//line /usr/local/go/src/net/http/h2_bundle.go:2231
	_go_fuzz_dep_.CoverTab[38036]++
							return &http2GoAwayFrame{
		http2FrameHeader:	fh,
		LastStreamID:		binary.BigEndian.Uint32(p[:4]) & (1<<31 - 1),
		ErrCode:		http2ErrCode(binary.BigEndian.Uint32(p[4:8])),
		debugData:		p[8:],
	}, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2237
	// _ = "end of CoverTab[38036]"
}

func (f *http2Framer) WriteGoAway(maxStreamID uint32, code http2ErrCode, debugData []byte) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2240
	_go_fuzz_dep_.CoverTab[38041]++
							f.startWrite(http2FrameGoAway, 0, 0)
							f.writeUint32(maxStreamID & (1<<31 - 1))
							f.writeUint32(uint32(code))
							f.writeBytes(debugData)
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2245
	// _ = "end of CoverTab[38041]"
}

// An UnknownFrame is the frame type returned when the frame type is unknown
//line /usr/local/go/src/net/http/h2_bundle.go:2248
// or no specific frame type parser exists.
//line /usr/local/go/src/net/http/h2_bundle.go:2250
type http2UnknownFrame struct {
	http2FrameHeader
	p	[]byte
}

// Payload returns the frame's payload (after the header).  It is not
//line /usr/local/go/src/net/http/h2_bundle.go:2255
// valid to call this method after a subsequent call to
//line /usr/local/go/src/net/http/h2_bundle.go:2255
// Framer.ReadFrame, nor is it valid to retain the returned slice.
//line /usr/local/go/src/net/http/h2_bundle.go:2255
// The memory is owned by the Framer and is invalidated when the next
//line /usr/local/go/src/net/http/h2_bundle.go:2255
// frame is read.
//line /usr/local/go/src/net/http/h2_bundle.go:2260
func (f *http2UnknownFrame) Payload() []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:2260
	_go_fuzz_dep_.CoverTab[38042]++
							f.checkValid()
							return f.p
//line /usr/local/go/src/net/http/h2_bundle.go:2262
	// _ = "end of CoverTab[38042]"
}

func http2parseUnknownFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2265
	_go_fuzz_dep_.CoverTab[38043]++
							return &http2UnknownFrame{fh, p}, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2266
	// _ = "end of CoverTab[38043]"
}

// A WindowUpdateFrame is used to implement flow control.
//line /usr/local/go/src/net/http/h2_bundle.go:2269
// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.9
//line /usr/local/go/src/net/http/h2_bundle.go:2271
type http2WindowUpdateFrame struct {
	http2FrameHeader
	Increment	uint32	// never read with high bit set
}

func http2parseWindowUpdateFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2276
	_go_fuzz_dep_.CoverTab[38044]++
							if len(p) != 4 {
//line /usr/local/go/src/net/http/h2_bundle.go:2277
		_go_fuzz_dep_.CoverTab[38047]++
								countError("frame_windowupdate_bad_len")
								return nil, http2ConnectionError(http2ErrCodeFrameSize)
//line /usr/local/go/src/net/http/h2_bundle.go:2279
		// _ = "end of CoverTab[38047]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2280
		_go_fuzz_dep_.CoverTab[38048]++
//line /usr/local/go/src/net/http/h2_bundle.go:2280
		// _ = "end of CoverTab[38048]"
//line /usr/local/go/src/net/http/h2_bundle.go:2280
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2280
	// _ = "end of CoverTab[38044]"
//line /usr/local/go/src/net/http/h2_bundle.go:2280
	_go_fuzz_dep_.CoverTab[38045]++
							inc := binary.BigEndian.Uint32(p[:4]) & 0x7fffffff
							if inc == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2282
		_go_fuzz_dep_.CoverTab[38049]++

//line /usr/local/go/src/net/http/h2_bundle.go:2289
		if fh.StreamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2289
			_go_fuzz_dep_.CoverTab[38051]++
									countError("frame_windowupdate_zero_inc_conn")
									return nil, http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:2291
			// _ = "end of CoverTab[38051]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2292
			_go_fuzz_dep_.CoverTab[38052]++
//line /usr/local/go/src/net/http/h2_bundle.go:2292
			// _ = "end of CoverTab[38052]"
//line /usr/local/go/src/net/http/h2_bundle.go:2292
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2292
		// _ = "end of CoverTab[38049]"
//line /usr/local/go/src/net/http/h2_bundle.go:2292
		_go_fuzz_dep_.CoverTab[38050]++
								countError("frame_windowupdate_zero_inc_stream")
								return nil, http2streamError(fh.StreamID, http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:2294
		// _ = "end of CoverTab[38050]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2295
		_go_fuzz_dep_.CoverTab[38053]++
//line /usr/local/go/src/net/http/h2_bundle.go:2295
		// _ = "end of CoverTab[38053]"
//line /usr/local/go/src/net/http/h2_bundle.go:2295
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2295
	// _ = "end of CoverTab[38045]"
//line /usr/local/go/src/net/http/h2_bundle.go:2295
	_go_fuzz_dep_.CoverTab[38046]++
							return &http2WindowUpdateFrame{
		http2FrameHeader:	fh,
		Increment:		inc,
	}, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2299
	// _ = "end of CoverTab[38046]"
}

// WriteWindowUpdate writes a WINDOW_UPDATE frame.
//line /usr/local/go/src/net/http/h2_bundle.go:2302
// The increment value must be between 1 and 2,147,483,647, inclusive.
//line /usr/local/go/src/net/http/h2_bundle.go:2302
// If the Stream ID is zero, the window update applies to the
//line /usr/local/go/src/net/http/h2_bundle.go:2302
// connection as a whole.
//line /usr/local/go/src/net/http/h2_bundle.go:2306
func (f *http2Framer) WriteWindowUpdate(streamID, incr uint32) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2306
	_go_fuzz_dep_.CoverTab[38054]++

							if (incr < 1 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2308
		_go_fuzz_dep_.CoverTab[38056]++
//line /usr/local/go/src/net/http/h2_bundle.go:2308
		return incr > 2147483647
//line /usr/local/go/src/net/http/h2_bundle.go:2308
		// _ = "end of CoverTab[38056]"
//line /usr/local/go/src/net/http/h2_bundle.go:2308
	}()) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2308
		_go_fuzz_dep_.CoverTab[38057]++
//line /usr/local/go/src/net/http/h2_bundle.go:2308
		return !f.AllowIllegalWrites
//line /usr/local/go/src/net/http/h2_bundle.go:2308
		// _ = "end of CoverTab[38057]"
//line /usr/local/go/src/net/http/h2_bundle.go:2308
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2308
		_go_fuzz_dep_.CoverTab[38058]++
								return errors.New("illegal window increment value")
//line /usr/local/go/src/net/http/h2_bundle.go:2309
		// _ = "end of CoverTab[38058]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2310
		_go_fuzz_dep_.CoverTab[38059]++
//line /usr/local/go/src/net/http/h2_bundle.go:2310
		// _ = "end of CoverTab[38059]"
//line /usr/local/go/src/net/http/h2_bundle.go:2310
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2310
	// _ = "end of CoverTab[38054]"
//line /usr/local/go/src/net/http/h2_bundle.go:2310
	_go_fuzz_dep_.CoverTab[38055]++
							f.startWrite(http2FrameWindowUpdate, 0, streamID)
							f.writeUint32(incr)
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2313
	// _ = "end of CoverTab[38055]"
}

// A HeadersFrame is used to open a stream and additionally carries a
//line /usr/local/go/src/net/http/h2_bundle.go:2316
// header block fragment.
//line /usr/local/go/src/net/http/h2_bundle.go:2318
type http2HeadersFrame struct {
	http2FrameHeader

	// Priority is set if FlagHeadersPriority is set in the FrameHeader.
	Priority	http2PriorityParam

	headerFragBuf	[]byte	// not owned
}

func (f *http2HeadersFrame) HeaderBlockFragment() []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:2327
	_go_fuzz_dep_.CoverTab[38060]++
							f.checkValid()
							return f.headerFragBuf
//line /usr/local/go/src/net/http/h2_bundle.go:2329
	// _ = "end of CoverTab[38060]"
}

func (f *http2HeadersFrame) HeadersEnded() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2332
	_go_fuzz_dep_.CoverTab[38061]++
							return f.http2FrameHeader.Flags.Has(http2FlagHeadersEndHeaders)
//line /usr/local/go/src/net/http/h2_bundle.go:2333
	// _ = "end of CoverTab[38061]"
}

func (f *http2HeadersFrame) StreamEnded() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2336
	_go_fuzz_dep_.CoverTab[38062]++
							return f.http2FrameHeader.Flags.Has(http2FlagHeadersEndStream)
//line /usr/local/go/src/net/http/h2_bundle.go:2337
	// _ = "end of CoverTab[38062]"
}

func (f *http2HeadersFrame) HasPriority() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2340
	_go_fuzz_dep_.CoverTab[38063]++
							return f.http2FrameHeader.Flags.Has(http2FlagHeadersPriority)
//line /usr/local/go/src/net/http/h2_bundle.go:2341
	// _ = "end of CoverTab[38063]"
}

func http2parseHeadersFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (_ http2Frame, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2344
	_go_fuzz_dep_.CoverTab[38064]++
							hf := &http2HeadersFrame{
		http2FrameHeader: fh,
	}
	if fh.StreamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2348
		_go_fuzz_dep_.CoverTab[38069]++

//line /usr/local/go/src/net/http/h2_bundle.go:2353
		countError("frame_headers_zero_stream")
								return nil, http2connError{http2ErrCodeProtocol, "HEADERS frame with stream ID 0"}
//line /usr/local/go/src/net/http/h2_bundle.go:2354
		// _ = "end of CoverTab[38069]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2355
		_go_fuzz_dep_.CoverTab[38070]++
//line /usr/local/go/src/net/http/h2_bundle.go:2355
		// _ = "end of CoverTab[38070]"
//line /usr/local/go/src/net/http/h2_bundle.go:2355
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2355
	// _ = "end of CoverTab[38064]"
//line /usr/local/go/src/net/http/h2_bundle.go:2355
	_go_fuzz_dep_.CoverTab[38065]++
							var padLength uint8
							if fh.Flags.Has(http2FlagHeadersPadded) {
//line /usr/local/go/src/net/http/h2_bundle.go:2357
		_go_fuzz_dep_.CoverTab[38071]++
								if p, padLength, err = http2readByte(p); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2358
			_go_fuzz_dep_.CoverTab[38072]++
									countError("frame_headers_pad_short")
									return
//line /usr/local/go/src/net/http/h2_bundle.go:2360
			// _ = "end of CoverTab[38072]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2361
			_go_fuzz_dep_.CoverTab[38073]++
//line /usr/local/go/src/net/http/h2_bundle.go:2361
			// _ = "end of CoverTab[38073]"
//line /usr/local/go/src/net/http/h2_bundle.go:2361
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2361
		// _ = "end of CoverTab[38071]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2362
		_go_fuzz_dep_.CoverTab[38074]++
//line /usr/local/go/src/net/http/h2_bundle.go:2362
		// _ = "end of CoverTab[38074]"
//line /usr/local/go/src/net/http/h2_bundle.go:2362
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2362
	// _ = "end of CoverTab[38065]"
//line /usr/local/go/src/net/http/h2_bundle.go:2362
	_go_fuzz_dep_.CoverTab[38066]++
							if fh.Flags.Has(http2FlagHeadersPriority) {
//line /usr/local/go/src/net/http/h2_bundle.go:2363
		_go_fuzz_dep_.CoverTab[38075]++
								var v uint32
								p, v, err = http2readUint32(p)
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2366
			_go_fuzz_dep_.CoverTab[38077]++
									countError("frame_headers_prio_short")
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:2368
			// _ = "end of CoverTab[38077]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2369
			_go_fuzz_dep_.CoverTab[38078]++
//line /usr/local/go/src/net/http/h2_bundle.go:2369
			// _ = "end of CoverTab[38078]"
//line /usr/local/go/src/net/http/h2_bundle.go:2369
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2369
		// _ = "end of CoverTab[38075]"
//line /usr/local/go/src/net/http/h2_bundle.go:2369
		_go_fuzz_dep_.CoverTab[38076]++
								hf.Priority.StreamDep = v & 0x7fffffff
								hf.Priority.Exclusive = (v != hf.Priority.StreamDep)
								p, hf.Priority.Weight, err = http2readByte(p)
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2373
			_go_fuzz_dep_.CoverTab[38079]++
									countError("frame_headers_prio_weight_short")
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:2375
			// _ = "end of CoverTab[38079]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2376
			_go_fuzz_dep_.CoverTab[38080]++
//line /usr/local/go/src/net/http/h2_bundle.go:2376
			// _ = "end of CoverTab[38080]"
//line /usr/local/go/src/net/http/h2_bundle.go:2376
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2376
		// _ = "end of CoverTab[38076]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2377
		_go_fuzz_dep_.CoverTab[38081]++
//line /usr/local/go/src/net/http/h2_bundle.go:2377
		// _ = "end of CoverTab[38081]"
//line /usr/local/go/src/net/http/h2_bundle.go:2377
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2377
	// _ = "end of CoverTab[38066]"
//line /usr/local/go/src/net/http/h2_bundle.go:2377
	_go_fuzz_dep_.CoverTab[38067]++
							if len(p)-int(padLength) < 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2378
		_go_fuzz_dep_.CoverTab[38082]++
								countError("frame_headers_pad_too_big")
								return nil, http2streamError(fh.StreamID, http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:2380
		// _ = "end of CoverTab[38082]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2381
		_go_fuzz_dep_.CoverTab[38083]++
//line /usr/local/go/src/net/http/h2_bundle.go:2381
		// _ = "end of CoverTab[38083]"
//line /usr/local/go/src/net/http/h2_bundle.go:2381
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2381
	// _ = "end of CoverTab[38067]"
//line /usr/local/go/src/net/http/h2_bundle.go:2381
	_go_fuzz_dep_.CoverTab[38068]++
							hf.headerFragBuf = p[:len(p)-int(padLength)]
							return hf, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2383
	// _ = "end of CoverTab[38068]"
}

// HeadersFrameParam are the parameters for writing a HEADERS frame.
type http2HeadersFrameParam struct {
	// StreamID is the required Stream ID to initiate.
	StreamID	uint32
	// BlockFragment is part (or all) of a Header Block.
	BlockFragment	[]byte

	// EndStream indicates that the header block is the last that
	// the endpoint will send for the identified stream. Setting
	// this flag causes the stream to enter one of "half closed"
	// states.
	EndStream	bool

	// EndHeaders indicates that this frame contains an entire
	// header block and is not followed by any
	// CONTINUATION frames.
	EndHeaders	bool

	// PadLength is the optional number of bytes of zeros to add
	// to this frame.
	PadLength	uint8

	// Priority, if non-zero, includes stream priority information
	// in the HEADER frame.
	Priority	http2PriorityParam
}

// WriteHeaders writes a single HEADERS frame.
//line /usr/local/go/src/net/http/h2_bundle.go:2413
//
//line /usr/local/go/src/net/http/h2_bundle.go:2413
// This is a low-level header writing method. Encoding headers and
//line /usr/local/go/src/net/http/h2_bundle.go:2413
// splitting them into any necessary CONTINUATION frames is handled
//line /usr/local/go/src/net/http/h2_bundle.go:2413
// elsewhere.
//line /usr/local/go/src/net/http/h2_bundle.go:2413
//
//line /usr/local/go/src/net/http/h2_bundle.go:2413
// It will perform exactly one Write to the underlying Writer.
//line /usr/local/go/src/net/http/h2_bundle.go:2413
// It is the caller's responsibility to not call other Write methods concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:2421
func (f *http2Framer) WriteHeaders(p http2HeadersFrameParam) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2421
	_go_fuzz_dep_.CoverTab[38084]++
							if !http2validStreamID(p.StreamID) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2422
		_go_fuzz_dep_.CoverTab[38092]++
//line /usr/local/go/src/net/http/h2_bundle.go:2422
		return !f.AllowIllegalWrites
//line /usr/local/go/src/net/http/h2_bundle.go:2422
		// _ = "end of CoverTab[38092]"
//line /usr/local/go/src/net/http/h2_bundle.go:2422
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2422
		_go_fuzz_dep_.CoverTab[38093]++
								return http2errStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:2423
		// _ = "end of CoverTab[38093]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2424
		_go_fuzz_dep_.CoverTab[38094]++
//line /usr/local/go/src/net/http/h2_bundle.go:2424
		// _ = "end of CoverTab[38094]"
//line /usr/local/go/src/net/http/h2_bundle.go:2424
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2424
	// _ = "end of CoverTab[38084]"
//line /usr/local/go/src/net/http/h2_bundle.go:2424
	_go_fuzz_dep_.CoverTab[38085]++
							var flags http2Flags
							if p.PadLength != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2426
		_go_fuzz_dep_.CoverTab[38095]++
								flags |= http2FlagHeadersPadded
//line /usr/local/go/src/net/http/h2_bundle.go:2427
		// _ = "end of CoverTab[38095]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2428
		_go_fuzz_dep_.CoverTab[38096]++
//line /usr/local/go/src/net/http/h2_bundle.go:2428
		// _ = "end of CoverTab[38096]"
//line /usr/local/go/src/net/http/h2_bundle.go:2428
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2428
	// _ = "end of CoverTab[38085]"
//line /usr/local/go/src/net/http/h2_bundle.go:2428
	_go_fuzz_dep_.CoverTab[38086]++
							if p.EndStream {
//line /usr/local/go/src/net/http/h2_bundle.go:2429
		_go_fuzz_dep_.CoverTab[38097]++
								flags |= http2FlagHeadersEndStream
//line /usr/local/go/src/net/http/h2_bundle.go:2430
		// _ = "end of CoverTab[38097]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2431
		_go_fuzz_dep_.CoverTab[38098]++
//line /usr/local/go/src/net/http/h2_bundle.go:2431
		// _ = "end of CoverTab[38098]"
//line /usr/local/go/src/net/http/h2_bundle.go:2431
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2431
	// _ = "end of CoverTab[38086]"
//line /usr/local/go/src/net/http/h2_bundle.go:2431
	_go_fuzz_dep_.CoverTab[38087]++
							if p.EndHeaders {
//line /usr/local/go/src/net/http/h2_bundle.go:2432
		_go_fuzz_dep_.CoverTab[38099]++
								flags |= http2FlagHeadersEndHeaders
//line /usr/local/go/src/net/http/h2_bundle.go:2433
		// _ = "end of CoverTab[38099]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2434
		_go_fuzz_dep_.CoverTab[38100]++
//line /usr/local/go/src/net/http/h2_bundle.go:2434
		// _ = "end of CoverTab[38100]"
//line /usr/local/go/src/net/http/h2_bundle.go:2434
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2434
	// _ = "end of CoverTab[38087]"
//line /usr/local/go/src/net/http/h2_bundle.go:2434
	_go_fuzz_dep_.CoverTab[38088]++
							if !p.Priority.IsZero() {
//line /usr/local/go/src/net/http/h2_bundle.go:2435
		_go_fuzz_dep_.CoverTab[38101]++
								flags |= http2FlagHeadersPriority
//line /usr/local/go/src/net/http/h2_bundle.go:2436
		// _ = "end of CoverTab[38101]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2437
		_go_fuzz_dep_.CoverTab[38102]++
//line /usr/local/go/src/net/http/h2_bundle.go:2437
		// _ = "end of CoverTab[38102]"
//line /usr/local/go/src/net/http/h2_bundle.go:2437
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2437
	// _ = "end of CoverTab[38088]"
//line /usr/local/go/src/net/http/h2_bundle.go:2437
	_go_fuzz_dep_.CoverTab[38089]++
							f.startWrite(http2FrameHeaders, flags, p.StreamID)
							if p.PadLength != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2439
		_go_fuzz_dep_.CoverTab[38103]++
								f.writeByte(p.PadLength)
//line /usr/local/go/src/net/http/h2_bundle.go:2440
		// _ = "end of CoverTab[38103]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2441
		_go_fuzz_dep_.CoverTab[38104]++
//line /usr/local/go/src/net/http/h2_bundle.go:2441
		// _ = "end of CoverTab[38104]"
//line /usr/local/go/src/net/http/h2_bundle.go:2441
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2441
	// _ = "end of CoverTab[38089]"
//line /usr/local/go/src/net/http/h2_bundle.go:2441
	_go_fuzz_dep_.CoverTab[38090]++
							if !p.Priority.IsZero() {
//line /usr/local/go/src/net/http/h2_bundle.go:2442
		_go_fuzz_dep_.CoverTab[38105]++
								v := p.Priority.StreamDep
								if !http2validStreamIDOrZero(v) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2444
			_go_fuzz_dep_.CoverTab[38108]++
//line /usr/local/go/src/net/http/h2_bundle.go:2444
			return !f.AllowIllegalWrites
//line /usr/local/go/src/net/http/h2_bundle.go:2444
			// _ = "end of CoverTab[38108]"
//line /usr/local/go/src/net/http/h2_bundle.go:2444
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2444
			_go_fuzz_dep_.CoverTab[38109]++
									return http2errDepStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:2445
			// _ = "end of CoverTab[38109]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2446
			_go_fuzz_dep_.CoverTab[38110]++
//line /usr/local/go/src/net/http/h2_bundle.go:2446
			// _ = "end of CoverTab[38110]"
//line /usr/local/go/src/net/http/h2_bundle.go:2446
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2446
		// _ = "end of CoverTab[38105]"
//line /usr/local/go/src/net/http/h2_bundle.go:2446
		_go_fuzz_dep_.CoverTab[38106]++
								if p.Priority.Exclusive {
//line /usr/local/go/src/net/http/h2_bundle.go:2447
			_go_fuzz_dep_.CoverTab[38111]++
									v |= 1 << 31
//line /usr/local/go/src/net/http/h2_bundle.go:2448
			// _ = "end of CoverTab[38111]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2449
			_go_fuzz_dep_.CoverTab[38112]++
//line /usr/local/go/src/net/http/h2_bundle.go:2449
			// _ = "end of CoverTab[38112]"
//line /usr/local/go/src/net/http/h2_bundle.go:2449
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2449
		// _ = "end of CoverTab[38106]"
//line /usr/local/go/src/net/http/h2_bundle.go:2449
		_go_fuzz_dep_.CoverTab[38107]++
								f.writeUint32(v)
								f.writeByte(p.Priority.Weight)
//line /usr/local/go/src/net/http/h2_bundle.go:2451
		// _ = "end of CoverTab[38107]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2452
		_go_fuzz_dep_.CoverTab[38113]++
//line /usr/local/go/src/net/http/h2_bundle.go:2452
		// _ = "end of CoverTab[38113]"
//line /usr/local/go/src/net/http/h2_bundle.go:2452
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2452
	// _ = "end of CoverTab[38090]"
//line /usr/local/go/src/net/http/h2_bundle.go:2452
	_go_fuzz_dep_.CoverTab[38091]++
							f.wbuf = append(f.wbuf, p.BlockFragment...)
							f.wbuf = append(f.wbuf, http2padZeros[:p.PadLength]...)
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2455
	// _ = "end of CoverTab[38091]"
}

// A PriorityFrame specifies the sender-advised priority of a stream.
//line /usr/local/go/src/net/http/h2_bundle.go:2458
// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.3
//line /usr/local/go/src/net/http/h2_bundle.go:2460
type http2PriorityFrame struct {
	http2FrameHeader
	http2PriorityParam
}

// PriorityParam are the stream prioritzation parameters.
type http2PriorityParam struct {
	// StreamDep is a 31-bit stream identifier for the
	// stream that this stream depends on. Zero means no
	// dependency.
	StreamDep	uint32

	// Exclusive is whether the dependency is exclusive.
	Exclusive	bool

	// Weight is the stream's zero-indexed weight. It should be
	// set together with StreamDep, or neither should be set. Per
	// the spec, "Add one to the value to obtain a weight between
	// 1 and 256."
	Weight	uint8
}

func (p http2PriorityParam) IsZero() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2482
	_go_fuzz_dep_.CoverTab[38114]++
							return p == http2PriorityParam{}
//line /usr/local/go/src/net/http/h2_bundle.go:2483
	// _ = "end of CoverTab[38114]"
}

func http2parsePriorityFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), payload []byte) (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2486
	_go_fuzz_dep_.CoverTab[38115]++
							if fh.StreamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2487
		_go_fuzz_dep_.CoverTab[38118]++
								countError("frame_priority_zero_stream")
								return nil, http2connError{http2ErrCodeProtocol, "PRIORITY frame with stream ID 0"}
//line /usr/local/go/src/net/http/h2_bundle.go:2489
		// _ = "end of CoverTab[38118]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2490
		_go_fuzz_dep_.CoverTab[38119]++
//line /usr/local/go/src/net/http/h2_bundle.go:2490
		// _ = "end of CoverTab[38119]"
//line /usr/local/go/src/net/http/h2_bundle.go:2490
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2490
	// _ = "end of CoverTab[38115]"
//line /usr/local/go/src/net/http/h2_bundle.go:2490
	_go_fuzz_dep_.CoverTab[38116]++
							if len(payload) != 5 {
//line /usr/local/go/src/net/http/h2_bundle.go:2491
		_go_fuzz_dep_.CoverTab[38120]++
								countError("frame_priority_bad_length")
								return nil, http2connError{http2ErrCodeFrameSize, fmt.Sprintf("PRIORITY frame payload size was %d; want 5", len(payload))}
//line /usr/local/go/src/net/http/h2_bundle.go:2493
		// _ = "end of CoverTab[38120]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2494
		_go_fuzz_dep_.CoverTab[38121]++
//line /usr/local/go/src/net/http/h2_bundle.go:2494
		// _ = "end of CoverTab[38121]"
//line /usr/local/go/src/net/http/h2_bundle.go:2494
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2494
	// _ = "end of CoverTab[38116]"
//line /usr/local/go/src/net/http/h2_bundle.go:2494
	_go_fuzz_dep_.CoverTab[38117]++
							v := binary.BigEndian.Uint32(payload[:4])
							streamID := v & 0x7fffffff
							return &http2PriorityFrame{
		http2FrameHeader:	fh,
		http2PriorityParam: http2PriorityParam{
			Weight:		payload[4],
			StreamDep:	streamID,
			Exclusive:	streamID != v,
		},
	}, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2504
	// _ = "end of CoverTab[38117]"
}

// WritePriority writes a PRIORITY frame.
//line /usr/local/go/src/net/http/h2_bundle.go:2507
//
//line /usr/local/go/src/net/http/h2_bundle.go:2507
// It will perform exactly one Write to the underlying Writer.
//line /usr/local/go/src/net/http/h2_bundle.go:2507
// It is the caller's responsibility to not call other Write methods concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:2511
func (f *http2Framer) WritePriority(streamID uint32, p http2PriorityParam) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2511
	_go_fuzz_dep_.CoverTab[38122]++
							if !http2validStreamID(streamID) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2512
		_go_fuzz_dep_.CoverTab[38126]++
//line /usr/local/go/src/net/http/h2_bundle.go:2512
		return !f.AllowIllegalWrites
//line /usr/local/go/src/net/http/h2_bundle.go:2512
		// _ = "end of CoverTab[38126]"
//line /usr/local/go/src/net/http/h2_bundle.go:2512
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2512
		_go_fuzz_dep_.CoverTab[38127]++
								return http2errStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:2513
		// _ = "end of CoverTab[38127]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2514
		_go_fuzz_dep_.CoverTab[38128]++
//line /usr/local/go/src/net/http/h2_bundle.go:2514
		// _ = "end of CoverTab[38128]"
//line /usr/local/go/src/net/http/h2_bundle.go:2514
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2514
	// _ = "end of CoverTab[38122]"
//line /usr/local/go/src/net/http/h2_bundle.go:2514
	_go_fuzz_dep_.CoverTab[38123]++
							if !http2validStreamIDOrZero(p.StreamDep) {
//line /usr/local/go/src/net/http/h2_bundle.go:2515
		_go_fuzz_dep_.CoverTab[38129]++
								return http2errDepStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:2516
		// _ = "end of CoverTab[38129]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2517
		_go_fuzz_dep_.CoverTab[38130]++
//line /usr/local/go/src/net/http/h2_bundle.go:2517
		// _ = "end of CoverTab[38130]"
//line /usr/local/go/src/net/http/h2_bundle.go:2517
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2517
	// _ = "end of CoverTab[38123]"
//line /usr/local/go/src/net/http/h2_bundle.go:2517
	_go_fuzz_dep_.CoverTab[38124]++
							f.startWrite(http2FramePriority, 0, streamID)
							v := p.StreamDep
							if p.Exclusive {
//line /usr/local/go/src/net/http/h2_bundle.go:2520
		_go_fuzz_dep_.CoverTab[38131]++
								v |= 1 << 31
//line /usr/local/go/src/net/http/h2_bundle.go:2521
		// _ = "end of CoverTab[38131]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2522
		_go_fuzz_dep_.CoverTab[38132]++
//line /usr/local/go/src/net/http/h2_bundle.go:2522
		// _ = "end of CoverTab[38132]"
//line /usr/local/go/src/net/http/h2_bundle.go:2522
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2522
	// _ = "end of CoverTab[38124]"
//line /usr/local/go/src/net/http/h2_bundle.go:2522
	_go_fuzz_dep_.CoverTab[38125]++
							f.writeUint32(v)
							f.writeByte(p.Weight)
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2525
	// _ = "end of CoverTab[38125]"
}

// A RSTStreamFrame allows for abnormal termination of a stream.
//line /usr/local/go/src/net/http/h2_bundle.go:2528
// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.4
//line /usr/local/go/src/net/http/h2_bundle.go:2530
type http2RSTStreamFrame struct {
	http2FrameHeader
	ErrCode	http2ErrCode
}

func http2parseRSTStreamFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2535
	_go_fuzz_dep_.CoverTab[38133]++
							if len(p) != 4 {
//line /usr/local/go/src/net/http/h2_bundle.go:2536
		_go_fuzz_dep_.CoverTab[38136]++
								countError("frame_rststream_bad_len")
								return nil, http2ConnectionError(http2ErrCodeFrameSize)
//line /usr/local/go/src/net/http/h2_bundle.go:2538
		// _ = "end of CoverTab[38136]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2539
		_go_fuzz_dep_.CoverTab[38137]++
//line /usr/local/go/src/net/http/h2_bundle.go:2539
		// _ = "end of CoverTab[38137]"
//line /usr/local/go/src/net/http/h2_bundle.go:2539
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2539
	// _ = "end of CoverTab[38133]"
//line /usr/local/go/src/net/http/h2_bundle.go:2539
	_go_fuzz_dep_.CoverTab[38134]++
							if fh.StreamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2540
		_go_fuzz_dep_.CoverTab[38138]++
								countError("frame_rststream_zero_stream")
								return nil, http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:2542
		// _ = "end of CoverTab[38138]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2543
		_go_fuzz_dep_.CoverTab[38139]++
//line /usr/local/go/src/net/http/h2_bundle.go:2543
		// _ = "end of CoverTab[38139]"
//line /usr/local/go/src/net/http/h2_bundle.go:2543
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2543
	// _ = "end of CoverTab[38134]"
//line /usr/local/go/src/net/http/h2_bundle.go:2543
	_go_fuzz_dep_.CoverTab[38135]++
							return &http2RSTStreamFrame{fh, http2ErrCode(binary.BigEndian.Uint32(p[:4]))}, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2544
	// _ = "end of CoverTab[38135]"
}

// WriteRSTStream writes a RST_STREAM frame.
//line /usr/local/go/src/net/http/h2_bundle.go:2547
//
//line /usr/local/go/src/net/http/h2_bundle.go:2547
// It will perform exactly one Write to the underlying Writer.
//line /usr/local/go/src/net/http/h2_bundle.go:2547
// It is the caller's responsibility to not call other Write methods concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:2551
func (f *http2Framer) WriteRSTStream(streamID uint32, code http2ErrCode) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2551
	_go_fuzz_dep_.CoverTab[38140]++
							if !http2validStreamID(streamID) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2552
		_go_fuzz_dep_.CoverTab[38142]++
//line /usr/local/go/src/net/http/h2_bundle.go:2552
		return !f.AllowIllegalWrites
//line /usr/local/go/src/net/http/h2_bundle.go:2552
		// _ = "end of CoverTab[38142]"
//line /usr/local/go/src/net/http/h2_bundle.go:2552
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2552
		_go_fuzz_dep_.CoverTab[38143]++
								return http2errStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:2553
		// _ = "end of CoverTab[38143]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2554
		_go_fuzz_dep_.CoverTab[38144]++
//line /usr/local/go/src/net/http/h2_bundle.go:2554
		// _ = "end of CoverTab[38144]"
//line /usr/local/go/src/net/http/h2_bundle.go:2554
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2554
	// _ = "end of CoverTab[38140]"
//line /usr/local/go/src/net/http/h2_bundle.go:2554
	_go_fuzz_dep_.CoverTab[38141]++
							f.startWrite(http2FrameRSTStream, 0, streamID)
							f.writeUint32(uint32(code))
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2557
	// _ = "end of CoverTab[38141]"
}

// A ContinuationFrame is used to continue a sequence of header block fragments.
//line /usr/local/go/src/net/http/h2_bundle.go:2560
// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.10
//line /usr/local/go/src/net/http/h2_bundle.go:2562
type http2ContinuationFrame struct {
	http2FrameHeader
	headerFragBuf	[]byte
}

func http2parseContinuationFrame(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (http2Frame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2567
	_go_fuzz_dep_.CoverTab[38145]++
							if fh.StreamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2568
		_go_fuzz_dep_.CoverTab[38147]++
								countError("frame_continuation_zero_stream")
								return nil, http2connError{http2ErrCodeProtocol, "CONTINUATION frame with stream ID 0"}
//line /usr/local/go/src/net/http/h2_bundle.go:2570
		// _ = "end of CoverTab[38147]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2571
		_go_fuzz_dep_.CoverTab[38148]++
//line /usr/local/go/src/net/http/h2_bundle.go:2571
		// _ = "end of CoverTab[38148]"
//line /usr/local/go/src/net/http/h2_bundle.go:2571
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2571
	// _ = "end of CoverTab[38145]"
//line /usr/local/go/src/net/http/h2_bundle.go:2571
	_go_fuzz_dep_.CoverTab[38146]++
							return &http2ContinuationFrame{fh, p}, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2572
	// _ = "end of CoverTab[38146]"
}

func (f *http2ContinuationFrame) HeaderBlockFragment() []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:2575
	_go_fuzz_dep_.CoverTab[38149]++
							f.checkValid()
							return f.headerFragBuf
//line /usr/local/go/src/net/http/h2_bundle.go:2577
	// _ = "end of CoverTab[38149]"
}

func (f *http2ContinuationFrame) HeadersEnded() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2580
	_go_fuzz_dep_.CoverTab[38150]++
							return f.http2FrameHeader.Flags.Has(http2FlagContinuationEndHeaders)
//line /usr/local/go/src/net/http/h2_bundle.go:2581
	// _ = "end of CoverTab[38150]"
}

// WriteContinuation writes a CONTINUATION frame.
//line /usr/local/go/src/net/http/h2_bundle.go:2584
//
//line /usr/local/go/src/net/http/h2_bundle.go:2584
// It will perform exactly one Write to the underlying Writer.
//line /usr/local/go/src/net/http/h2_bundle.go:2584
// It is the caller's responsibility to not call other Write methods concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:2588
func (f *http2Framer) WriteContinuation(streamID uint32, endHeaders bool, headerBlockFragment []byte) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2588
	_go_fuzz_dep_.CoverTab[38151]++
							if !http2validStreamID(streamID) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2589
		_go_fuzz_dep_.CoverTab[38154]++
//line /usr/local/go/src/net/http/h2_bundle.go:2589
		return !f.AllowIllegalWrites
//line /usr/local/go/src/net/http/h2_bundle.go:2589
		// _ = "end of CoverTab[38154]"
//line /usr/local/go/src/net/http/h2_bundle.go:2589
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2589
		_go_fuzz_dep_.CoverTab[38155]++
								return http2errStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:2590
		// _ = "end of CoverTab[38155]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2591
		_go_fuzz_dep_.CoverTab[38156]++
//line /usr/local/go/src/net/http/h2_bundle.go:2591
		// _ = "end of CoverTab[38156]"
//line /usr/local/go/src/net/http/h2_bundle.go:2591
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2591
	// _ = "end of CoverTab[38151]"
//line /usr/local/go/src/net/http/h2_bundle.go:2591
	_go_fuzz_dep_.CoverTab[38152]++
							var flags http2Flags
							if endHeaders {
//line /usr/local/go/src/net/http/h2_bundle.go:2593
		_go_fuzz_dep_.CoverTab[38157]++
								flags |= http2FlagContinuationEndHeaders
//line /usr/local/go/src/net/http/h2_bundle.go:2594
		// _ = "end of CoverTab[38157]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2595
		_go_fuzz_dep_.CoverTab[38158]++
//line /usr/local/go/src/net/http/h2_bundle.go:2595
		// _ = "end of CoverTab[38158]"
//line /usr/local/go/src/net/http/h2_bundle.go:2595
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2595
	// _ = "end of CoverTab[38152]"
//line /usr/local/go/src/net/http/h2_bundle.go:2595
	_go_fuzz_dep_.CoverTab[38153]++
							f.startWrite(http2FrameContinuation, flags, streamID)
							f.wbuf = append(f.wbuf, headerBlockFragment...)
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2598
	// _ = "end of CoverTab[38153]"
}

// A PushPromiseFrame is used to initiate a server stream.
//line /usr/local/go/src/net/http/h2_bundle.go:2601
// See https://httpwg.org/specs/rfc7540.html#rfc.section.6.6
//line /usr/local/go/src/net/http/h2_bundle.go:2603
type http2PushPromiseFrame struct {
	http2FrameHeader
	PromiseID	uint32
	headerFragBuf	[]byte	// not owned
}

func (f *http2PushPromiseFrame) HeaderBlockFragment() []byte {
//line /usr/local/go/src/net/http/h2_bundle.go:2609
	_go_fuzz_dep_.CoverTab[38159]++
							f.checkValid()
							return f.headerFragBuf
//line /usr/local/go/src/net/http/h2_bundle.go:2611
	// _ = "end of CoverTab[38159]"
}

func (f *http2PushPromiseFrame) HeadersEnded() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2614
	_go_fuzz_dep_.CoverTab[38160]++
							return f.http2FrameHeader.Flags.Has(http2FlagPushPromiseEndHeaders)
//line /usr/local/go/src/net/http/h2_bundle.go:2615
	// _ = "end of CoverTab[38160]"
}

func http2parsePushPromise(_ *http2frameCache, fh http2FrameHeader, countError func(string), p []byte) (_ http2Frame, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2618
	_go_fuzz_dep_.CoverTab[38161]++
							pp := &http2PushPromiseFrame{
		http2FrameHeader: fh,
	}
	if pp.StreamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2622
		_go_fuzz_dep_.CoverTab[38166]++

//line /usr/local/go/src/net/http/h2_bundle.go:2629
		countError("frame_pushpromise_zero_stream")
								return nil, http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:2630
		// _ = "end of CoverTab[38166]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2631
		_go_fuzz_dep_.CoverTab[38167]++
//line /usr/local/go/src/net/http/h2_bundle.go:2631
		// _ = "end of CoverTab[38167]"
//line /usr/local/go/src/net/http/h2_bundle.go:2631
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2631
	// _ = "end of CoverTab[38161]"
//line /usr/local/go/src/net/http/h2_bundle.go:2631
	_go_fuzz_dep_.CoverTab[38162]++
	// The PUSH_PROMISE frame includes optional padding.
	// Padding fields and flags are identical to those defined for DATA frames
	var padLength uint8
	if fh.Flags.Has(http2FlagPushPromisePadded) {
//line /usr/local/go/src/net/http/h2_bundle.go:2635
		_go_fuzz_dep_.CoverTab[38168]++
								if p, padLength, err = http2readByte(p); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2636
			_go_fuzz_dep_.CoverTab[38169]++
									countError("frame_pushpromise_pad_short")
									return
//line /usr/local/go/src/net/http/h2_bundle.go:2638
			// _ = "end of CoverTab[38169]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2639
			_go_fuzz_dep_.CoverTab[38170]++
//line /usr/local/go/src/net/http/h2_bundle.go:2639
			// _ = "end of CoverTab[38170]"
//line /usr/local/go/src/net/http/h2_bundle.go:2639
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2639
		// _ = "end of CoverTab[38168]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2640
		_go_fuzz_dep_.CoverTab[38171]++
//line /usr/local/go/src/net/http/h2_bundle.go:2640
		// _ = "end of CoverTab[38171]"
//line /usr/local/go/src/net/http/h2_bundle.go:2640
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2640
	// _ = "end of CoverTab[38162]"
//line /usr/local/go/src/net/http/h2_bundle.go:2640
	_go_fuzz_dep_.CoverTab[38163]++

							p, pp.PromiseID, err = http2readUint32(p)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2643
		_go_fuzz_dep_.CoverTab[38172]++
								countError("frame_pushpromise_promiseid_short")
								return
//line /usr/local/go/src/net/http/h2_bundle.go:2645
		// _ = "end of CoverTab[38172]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2646
		_go_fuzz_dep_.CoverTab[38173]++
//line /usr/local/go/src/net/http/h2_bundle.go:2646
		// _ = "end of CoverTab[38173]"
//line /usr/local/go/src/net/http/h2_bundle.go:2646
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2646
	// _ = "end of CoverTab[38163]"
//line /usr/local/go/src/net/http/h2_bundle.go:2646
	_go_fuzz_dep_.CoverTab[38164]++
							pp.PromiseID = pp.PromiseID & (1<<31 - 1)

							if int(padLength) > len(p) {
//line /usr/local/go/src/net/http/h2_bundle.go:2649
		_go_fuzz_dep_.CoverTab[38174]++

								countError("frame_pushpromise_pad_too_big")
								return nil, http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:2652
		// _ = "end of CoverTab[38174]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2653
		_go_fuzz_dep_.CoverTab[38175]++
//line /usr/local/go/src/net/http/h2_bundle.go:2653
		// _ = "end of CoverTab[38175]"
//line /usr/local/go/src/net/http/h2_bundle.go:2653
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2653
	// _ = "end of CoverTab[38164]"
//line /usr/local/go/src/net/http/h2_bundle.go:2653
	_go_fuzz_dep_.CoverTab[38165]++
							pp.headerFragBuf = p[:len(p)-int(padLength)]
							return pp, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2655
	// _ = "end of CoverTab[38165]"
}

// PushPromiseParam are the parameters for writing a PUSH_PROMISE frame.
type http2PushPromiseParam struct {
	// StreamID is the required Stream ID to initiate.
	StreamID	uint32

	// PromiseID is the required Stream ID which this
	// Push Promises
	PromiseID	uint32

	// BlockFragment is part (or all) of a Header Block.
	BlockFragment	[]byte

	// EndHeaders indicates that this frame contains an entire
	// header block and is not followed by any
	// CONTINUATION frames.
	EndHeaders	bool

	// PadLength is the optional number of bytes of zeros to add
	// to this frame.
	PadLength	uint8
}

// WritePushPromise writes a single PushPromise Frame.
//line /usr/local/go/src/net/http/h2_bundle.go:2680
//
//line /usr/local/go/src/net/http/h2_bundle.go:2680
// As with Header Frames, This is the low level call for writing
//line /usr/local/go/src/net/http/h2_bundle.go:2680
// individual frames. Continuation frames are handled elsewhere.
//line /usr/local/go/src/net/http/h2_bundle.go:2680
//
//line /usr/local/go/src/net/http/h2_bundle.go:2680
// It will perform exactly one Write to the underlying Writer.
//line /usr/local/go/src/net/http/h2_bundle.go:2680
// It is the caller's responsibility to not call other Write methods concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:2687
func (f *http2Framer) WritePushPromise(p http2PushPromiseParam) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2687
	_go_fuzz_dep_.CoverTab[38176]++
							if !http2validStreamID(p.StreamID) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2688
		_go_fuzz_dep_.CoverTab[38182]++
//line /usr/local/go/src/net/http/h2_bundle.go:2688
		return !f.AllowIllegalWrites
//line /usr/local/go/src/net/http/h2_bundle.go:2688
		// _ = "end of CoverTab[38182]"
//line /usr/local/go/src/net/http/h2_bundle.go:2688
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2688
		_go_fuzz_dep_.CoverTab[38183]++
								return http2errStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:2689
		// _ = "end of CoverTab[38183]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2690
		_go_fuzz_dep_.CoverTab[38184]++
//line /usr/local/go/src/net/http/h2_bundle.go:2690
		// _ = "end of CoverTab[38184]"
//line /usr/local/go/src/net/http/h2_bundle.go:2690
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2690
	// _ = "end of CoverTab[38176]"
//line /usr/local/go/src/net/http/h2_bundle.go:2690
	_go_fuzz_dep_.CoverTab[38177]++
							var flags http2Flags
							if p.PadLength != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2692
		_go_fuzz_dep_.CoverTab[38185]++
								flags |= http2FlagPushPromisePadded
//line /usr/local/go/src/net/http/h2_bundle.go:2693
		// _ = "end of CoverTab[38185]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2694
		_go_fuzz_dep_.CoverTab[38186]++
//line /usr/local/go/src/net/http/h2_bundle.go:2694
		// _ = "end of CoverTab[38186]"
//line /usr/local/go/src/net/http/h2_bundle.go:2694
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2694
	// _ = "end of CoverTab[38177]"
//line /usr/local/go/src/net/http/h2_bundle.go:2694
	_go_fuzz_dep_.CoverTab[38178]++
							if p.EndHeaders {
//line /usr/local/go/src/net/http/h2_bundle.go:2695
		_go_fuzz_dep_.CoverTab[38187]++
								flags |= http2FlagPushPromiseEndHeaders
//line /usr/local/go/src/net/http/h2_bundle.go:2696
		// _ = "end of CoverTab[38187]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2697
		_go_fuzz_dep_.CoverTab[38188]++
//line /usr/local/go/src/net/http/h2_bundle.go:2697
		// _ = "end of CoverTab[38188]"
//line /usr/local/go/src/net/http/h2_bundle.go:2697
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2697
	// _ = "end of CoverTab[38178]"
//line /usr/local/go/src/net/http/h2_bundle.go:2697
	_go_fuzz_dep_.CoverTab[38179]++
							f.startWrite(http2FramePushPromise, flags, p.StreamID)
							if p.PadLength != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2699
		_go_fuzz_dep_.CoverTab[38189]++
								f.writeByte(p.PadLength)
//line /usr/local/go/src/net/http/h2_bundle.go:2700
		// _ = "end of CoverTab[38189]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2701
		_go_fuzz_dep_.CoverTab[38190]++
//line /usr/local/go/src/net/http/h2_bundle.go:2701
		// _ = "end of CoverTab[38190]"
//line /usr/local/go/src/net/http/h2_bundle.go:2701
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2701
	// _ = "end of CoverTab[38179]"
//line /usr/local/go/src/net/http/h2_bundle.go:2701
	_go_fuzz_dep_.CoverTab[38180]++
							if !http2validStreamID(p.PromiseID) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2702
		_go_fuzz_dep_.CoverTab[38191]++
//line /usr/local/go/src/net/http/h2_bundle.go:2702
		return !f.AllowIllegalWrites
//line /usr/local/go/src/net/http/h2_bundle.go:2702
		// _ = "end of CoverTab[38191]"
//line /usr/local/go/src/net/http/h2_bundle.go:2702
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2702
		_go_fuzz_dep_.CoverTab[38192]++
								return http2errStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:2703
		// _ = "end of CoverTab[38192]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2704
		_go_fuzz_dep_.CoverTab[38193]++
//line /usr/local/go/src/net/http/h2_bundle.go:2704
		// _ = "end of CoverTab[38193]"
//line /usr/local/go/src/net/http/h2_bundle.go:2704
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2704
	// _ = "end of CoverTab[38180]"
//line /usr/local/go/src/net/http/h2_bundle.go:2704
	_go_fuzz_dep_.CoverTab[38181]++
							f.writeUint32(p.PromiseID)
							f.wbuf = append(f.wbuf, p.BlockFragment...)
							f.wbuf = append(f.wbuf, http2padZeros[:p.PadLength]...)
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2708
	// _ = "end of CoverTab[38181]"
}

// WriteRawFrame writes a raw frame. This can be used to write
//line /usr/local/go/src/net/http/h2_bundle.go:2711
// extension frames unknown to this package.
//line /usr/local/go/src/net/http/h2_bundle.go:2713
func (f *http2Framer) WriteRawFrame(t http2FrameType, flags http2Flags, streamID uint32, payload []byte) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2713
	_go_fuzz_dep_.CoverTab[38194]++
							f.startWrite(t, flags, streamID)
							f.writeBytes(payload)
							return f.endWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:2716
	// _ = "end of CoverTab[38194]"
}

func http2readByte(p []byte) (remain []byte, b byte, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2719
	_go_fuzz_dep_.CoverTab[38195]++
							if len(p) == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2720
		_go_fuzz_dep_.CoverTab[38197]++
								return nil, 0, io.ErrUnexpectedEOF
//line /usr/local/go/src/net/http/h2_bundle.go:2721
		// _ = "end of CoverTab[38197]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2722
		_go_fuzz_dep_.CoverTab[38198]++
//line /usr/local/go/src/net/http/h2_bundle.go:2722
		// _ = "end of CoverTab[38198]"
//line /usr/local/go/src/net/http/h2_bundle.go:2722
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2722
	// _ = "end of CoverTab[38195]"
//line /usr/local/go/src/net/http/h2_bundle.go:2722
	_go_fuzz_dep_.CoverTab[38196]++
							return p[1:], p[0], nil
//line /usr/local/go/src/net/http/h2_bundle.go:2723
	// _ = "end of CoverTab[38196]"
}

func http2readUint32(p []byte) (remain []byte, v uint32, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2726
	_go_fuzz_dep_.CoverTab[38199]++
							if len(p) < 4 {
//line /usr/local/go/src/net/http/h2_bundle.go:2727
		_go_fuzz_dep_.CoverTab[38201]++
								return nil, 0, io.ErrUnexpectedEOF
//line /usr/local/go/src/net/http/h2_bundle.go:2728
		// _ = "end of CoverTab[38201]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2729
		_go_fuzz_dep_.CoverTab[38202]++
//line /usr/local/go/src/net/http/h2_bundle.go:2729
		// _ = "end of CoverTab[38202]"
//line /usr/local/go/src/net/http/h2_bundle.go:2729
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2729
	// _ = "end of CoverTab[38199]"
//line /usr/local/go/src/net/http/h2_bundle.go:2729
	_go_fuzz_dep_.CoverTab[38200]++
							return p[4:], binary.BigEndian.Uint32(p[:4]), nil
//line /usr/local/go/src/net/http/h2_bundle.go:2730
	// _ = "end of CoverTab[38200]"
}

type http2streamEnder interface {
	StreamEnded() bool
}

type http2headersEnder interface {
	HeadersEnded() bool
}

type http2headersOrContinuation interface {
	http2headersEnder
	HeaderBlockFragment() []byte
}

// A MetaHeadersFrame is the representation of one HEADERS frame and
//line /usr/local/go/src/net/http/h2_bundle.go:2746
// zero or more contiguous CONTINUATION frames and the decoding of
//line /usr/local/go/src/net/http/h2_bundle.go:2746
// their HPACK-encoded contents.
//line /usr/local/go/src/net/http/h2_bundle.go:2746
//
//line /usr/local/go/src/net/http/h2_bundle.go:2746
// This type of frame does not appear on the wire and is only returned
//line /usr/local/go/src/net/http/h2_bundle.go:2746
// by the Framer when Framer.ReadMetaHeaders is set.
//line /usr/local/go/src/net/http/h2_bundle.go:2752
type http2MetaHeadersFrame struct {
	*http2HeadersFrame

	// Fields are the fields contained in the HEADERS and
	// CONTINUATION frames. The underlying slice is owned by the
	// Framer and must not be retained after the next call to
	// ReadFrame.
	//
	// Fields are guaranteed to be in the correct http2 order and
	// not have unknown pseudo header fields or invalid header
	// field names or values. Required pseudo header fields may be
	// missing, however. Use the MetaHeadersFrame.Pseudo accessor
	// method access pseudo headers.
	Fields	[]hpack.HeaderField

	// Truncated is whether the max header list size limit was hit
	// and Fields is incomplete. The hpack decoder state is still
	// valid, however.
	Truncated	bool
}

// PseudoValue returns the given pseudo header field's value.
//line /usr/local/go/src/net/http/h2_bundle.go:2773
// The provided pseudo field should not contain the leading colon.
//line /usr/local/go/src/net/http/h2_bundle.go:2775
func (mh *http2MetaHeadersFrame) PseudoValue(pseudo string) string {
//line /usr/local/go/src/net/http/h2_bundle.go:2775
	_go_fuzz_dep_.CoverTab[38203]++
							for _, hf := range mh.Fields {
//line /usr/local/go/src/net/http/h2_bundle.go:2776
		_go_fuzz_dep_.CoverTab[38205]++
								if !hf.IsPseudo() {
//line /usr/local/go/src/net/http/h2_bundle.go:2777
			_go_fuzz_dep_.CoverTab[38207]++
									return ""
//line /usr/local/go/src/net/http/h2_bundle.go:2778
			// _ = "end of CoverTab[38207]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2779
			_go_fuzz_dep_.CoverTab[38208]++
//line /usr/local/go/src/net/http/h2_bundle.go:2779
			// _ = "end of CoverTab[38208]"
//line /usr/local/go/src/net/http/h2_bundle.go:2779
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2779
		// _ = "end of CoverTab[38205]"
//line /usr/local/go/src/net/http/h2_bundle.go:2779
		_go_fuzz_dep_.CoverTab[38206]++
								if hf.Name[1:] == pseudo {
//line /usr/local/go/src/net/http/h2_bundle.go:2780
			_go_fuzz_dep_.CoverTab[38209]++
									return hf.Value
//line /usr/local/go/src/net/http/h2_bundle.go:2781
			// _ = "end of CoverTab[38209]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2782
			_go_fuzz_dep_.CoverTab[38210]++
//line /usr/local/go/src/net/http/h2_bundle.go:2782
			// _ = "end of CoverTab[38210]"
//line /usr/local/go/src/net/http/h2_bundle.go:2782
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2782
		// _ = "end of CoverTab[38206]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2783
	// _ = "end of CoverTab[38203]"
//line /usr/local/go/src/net/http/h2_bundle.go:2783
	_go_fuzz_dep_.CoverTab[38204]++
							return ""
//line /usr/local/go/src/net/http/h2_bundle.go:2784
	// _ = "end of CoverTab[38204]"
}

// RegularFields returns the regular (non-pseudo) header fields of mh.
//line /usr/local/go/src/net/http/h2_bundle.go:2787
// The caller does not own the returned slice.
//line /usr/local/go/src/net/http/h2_bundle.go:2789
func (mh *http2MetaHeadersFrame) RegularFields() []hpack.HeaderField {
//line /usr/local/go/src/net/http/h2_bundle.go:2789
	_go_fuzz_dep_.CoverTab[38211]++
							for i, hf := range mh.Fields {
//line /usr/local/go/src/net/http/h2_bundle.go:2790
		_go_fuzz_dep_.CoverTab[38213]++
								if !hf.IsPseudo() {
//line /usr/local/go/src/net/http/h2_bundle.go:2791
			_go_fuzz_dep_.CoverTab[38214]++
									return mh.Fields[i:]
//line /usr/local/go/src/net/http/h2_bundle.go:2792
			// _ = "end of CoverTab[38214]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2793
			_go_fuzz_dep_.CoverTab[38215]++
//line /usr/local/go/src/net/http/h2_bundle.go:2793
			// _ = "end of CoverTab[38215]"
//line /usr/local/go/src/net/http/h2_bundle.go:2793
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2793
		// _ = "end of CoverTab[38213]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2794
	// _ = "end of CoverTab[38211]"
//line /usr/local/go/src/net/http/h2_bundle.go:2794
	_go_fuzz_dep_.CoverTab[38212]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:2795
	// _ = "end of CoverTab[38212]"
}

// PseudoFields returns the pseudo header fields of mh.
//line /usr/local/go/src/net/http/h2_bundle.go:2798
// The caller does not own the returned slice.
//line /usr/local/go/src/net/http/h2_bundle.go:2800
func (mh *http2MetaHeadersFrame) PseudoFields() []hpack.HeaderField {
//line /usr/local/go/src/net/http/h2_bundle.go:2800
	_go_fuzz_dep_.CoverTab[38216]++
							for i, hf := range mh.Fields {
//line /usr/local/go/src/net/http/h2_bundle.go:2801
		_go_fuzz_dep_.CoverTab[38218]++
								if !hf.IsPseudo() {
//line /usr/local/go/src/net/http/h2_bundle.go:2802
			_go_fuzz_dep_.CoverTab[38219]++
									return mh.Fields[:i]
//line /usr/local/go/src/net/http/h2_bundle.go:2803
			// _ = "end of CoverTab[38219]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2804
			_go_fuzz_dep_.CoverTab[38220]++
//line /usr/local/go/src/net/http/h2_bundle.go:2804
			// _ = "end of CoverTab[38220]"
//line /usr/local/go/src/net/http/h2_bundle.go:2804
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2804
		// _ = "end of CoverTab[38218]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2805
	// _ = "end of CoverTab[38216]"
//line /usr/local/go/src/net/http/h2_bundle.go:2805
	_go_fuzz_dep_.CoverTab[38217]++
							return mh.Fields
//line /usr/local/go/src/net/http/h2_bundle.go:2806
	// _ = "end of CoverTab[38217]"
}

func (mh *http2MetaHeadersFrame) checkPseudos() error {
//line /usr/local/go/src/net/http/h2_bundle.go:2809
	_go_fuzz_dep_.CoverTab[38221]++
							var isRequest, isResponse bool
							pf := mh.PseudoFields()
							for i, hf := range pf {
//line /usr/local/go/src/net/http/h2_bundle.go:2812
		_go_fuzz_dep_.CoverTab[38224]++
								switch hf.Name {
		case ":method", ":path", ":scheme", ":authority":
//line /usr/local/go/src/net/http/h2_bundle.go:2814
			_go_fuzz_dep_.CoverTab[38226]++
									isRequest = true
//line /usr/local/go/src/net/http/h2_bundle.go:2815
			// _ = "end of CoverTab[38226]"
		case ":status":
//line /usr/local/go/src/net/http/h2_bundle.go:2816
			_go_fuzz_dep_.CoverTab[38227]++
									isResponse = true
//line /usr/local/go/src/net/http/h2_bundle.go:2817
			// _ = "end of CoverTab[38227]"
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:2818
			_go_fuzz_dep_.CoverTab[38228]++
									return http2pseudoHeaderError(hf.Name)
//line /usr/local/go/src/net/http/h2_bundle.go:2819
			// _ = "end of CoverTab[38228]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2820
		// _ = "end of CoverTab[38224]"
//line /usr/local/go/src/net/http/h2_bundle.go:2820
		_go_fuzz_dep_.CoverTab[38225]++

//line /usr/local/go/src/net/http/h2_bundle.go:2824
		for _, hf2 := range pf[:i] {
//line /usr/local/go/src/net/http/h2_bundle.go:2824
			_go_fuzz_dep_.CoverTab[38229]++
									if hf.Name == hf2.Name {
//line /usr/local/go/src/net/http/h2_bundle.go:2825
				_go_fuzz_dep_.CoverTab[38230]++
										return http2duplicatePseudoHeaderError(hf.Name)
//line /usr/local/go/src/net/http/h2_bundle.go:2826
				// _ = "end of CoverTab[38230]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2827
				_go_fuzz_dep_.CoverTab[38231]++
//line /usr/local/go/src/net/http/h2_bundle.go:2827
				// _ = "end of CoverTab[38231]"
//line /usr/local/go/src/net/http/h2_bundle.go:2827
			}
//line /usr/local/go/src/net/http/h2_bundle.go:2827
			// _ = "end of CoverTab[38229]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2828
		// _ = "end of CoverTab[38225]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2829
	// _ = "end of CoverTab[38221]"
//line /usr/local/go/src/net/http/h2_bundle.go:2829
	_go_fuzz_dep_.CoverTab[38222]++
							if isRequest && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2830
		_go_fuzz_dep_.CoverTab[38232]++
//line /usr/local/go/src/net/http/h2_bundle.go:2830
		return isResponse
//line /usr/local/go/src/net/http/h2_bundle.go:2830
		// _ = "end of CoverTab[38232]"
//line /usr/local/go/src/net/http/h2_bundle.go:2830
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2830
		_go_fuzz_dep_.CoverTab[38233]++
								return http2errMixPseudoHeaderTypes
//line /usr/local/go/src/net/http/h2_bundle.go:2831
		// _ = "end of CoverTab[38233]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2832
		_go_fuzz_dep_.CoverTab[38234]++
//line /usr/local/go/src/net/http/h2_bundle.go:2832
		// _ = "end of CoverTab[38234]"
//line /usr/local/go/src/net/http/h2_bundle.go:2832
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2832
	// _ = "end of CoverTab[38222]"
//line /usr/local/go/src/net/http/h2_bundle.go:2832
	_go_fuzz_dep_.CoverTab[38223]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:2833
	// _ = "end of CoverTab[38223]"
}

func (fr *http2Framer) maxHeaderStringLen() int {
//line /usr/local/go/src/net/http/h2_bundle.go:2836
	_go_fuzz_dep_.CoverTab[38235]++
							v := fr.maxHeaderListSize()
							if uint32(int(v)) == v {
//line /usr/local/go/src/net/http/h2_bundle.go:2838
		_go_fuzz_dep_.CoverTab[38237]++
								return int(v)
//line /usr/local/go/src/net/http/h2_bundle.go:2839
		// _ = "end of CoverTab[38237]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2840
		_go_fuzz_dep_.CoverTab[38238]++
//line /usr/local/go/src/net/http/h2_bundle.go:2840
		// _ = "end of CoverTab[38238]"
//line /usr/local/go/src/net/http/h2_bundle.go:2840
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2840
	// _ = "end of CoverTab[38235]"
//line /usr/local/go/src/net/http/h2_bundle.go:2840
	_go_fuzz_dep_.CoverTab[38236]++

//line /usr/local/go/src/net/http/h2_bundle.go:2843
	return 0
//line /usr/local/go/src/net/http/h2_bundle.go:2843
	// _ = "end of CoverTab[38236]"
}

// readMetaFrame returns 0 or more CONTINUATION frames from fr and
//line /usr/local/go/src/net/http/h2_bundle.go:2846
// merge them into the provided hf and returns a MetaHeadersFrame
//line /usr/local/go/src/net/http/h2_bundle.go:2846
// with the decoded hpack values.
//line /usr/local/go/src/net/http/h2_bundle.go:2849
func (fr *http2Framer) readMetaFrame(hf *http2HeadersFrame) (*http2MetaHeadersFrame, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:2849
	_go_fuzz_dep_.CoverTab[38239]++
							if fr.AllowIllegalReads {
//line /usr/local/go/src/net/http/h2_bundle.go:2850
		_go_fuzz_dep_.CoverTab[38247]++
								return nil, errors.New("illegal use of AllowIllegalReads with ReadMetaHeaders")
//line /usr/local/go/src/net/http/h2_bundle.go:2851
		// _ = "end of CoverTab[38247]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2852
		_go_fuzz_dep_.CoverTab[38248]++
//line /usr/local/go/src/net/http/h2_bundle.go:2852
		// _ = "end of CoverTab[38248]"
//line /usr/local/go/src/net/http/h2_bundle.go:2852
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2852
	// _ = "end of CoverTab[38239]"
//line /usr/local/go/src/net/http/h2_bundle.go:2852
	_go_fuzz_dep_.CoverTab[38240]++
							mh := &http2MetaHeadersFrame{
		http2HeadersFrame: hf,
	}
	var remainSize = fr.maxHeaderListSize()
	var sawRegular bool

	var invalid error	// pseudo header field errors
	hdec := fr.ReadMetaHeaders
	hdec.SetEmitEnabled(true)
	hdec.SetMaxStringLength(fr.maxHeaderStringLen())
	hdec.SetEmitFunc(func(hf hpack.HeaderField) {
//line /usr/local/go/src/net/http/h2_bundle.go:2863
		_go_fuzz_dep_.CoverTab[38249]++
								if http2VerboseLogs && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2864
			_go_fuzz_dep_.CoverTab[38255]++
//line /usr/local/go/src/net/http/h2_bundle.go:2864
			return fr.logReads
//line /usr/local/go/src/net/http/h2_bundle.go:2864
			// _ = "end of CoverTab[38255]"
//line /usr/local/go/src/net/http/h2_bundle.go:2864
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2864
			_go_fuzz_dep_.CoverTab[38256]++
									fr.debugReadLoggerf("http2: decoded hpack field %+v", hf)
//line /usr/local/go/src/net/http/h2_bundle.go:2865
			// _ = "end of CoverTab[38256]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2866
			_go_fuzz_dep_.CoverTab[38257]++
//line /usr/local/go/src/net/http/h2_bundle.go:2866
			// _ = "end of CoverTab[38257]"
//line /usr/local/go/src/net/http/h2_bundle.go:2866
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2866
		// _ = "end of CoverTab[38249]"
//line /usr/local/go/src/net/http/h2_bundle.go:2866
		_go_fuzz_dep_.CoverTab[38250]++
								if !httpguts.ValidHeaderFieldValue(hf.Value) {
//line /usr/local/go/src/net/http/h2_bundle.go:2867
			_go_fuzz_dep_.CoverTab[38258]++

									invalid = http2headerFieldValueError(hf.Name)
//line /usr/local/go/src/net/http/h2_bundle.go:2869
			// _ = "end of CoverTab[38258]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2870
			_go_fuzz_dep_.CoverTab[38259]++
//line /usr/local/go/src/net/http/h2_bundle.go:2870
			// _ = "end of CoverTab[38259]"
//line /usr/local/go/src/net/http/h2_bundle.go:2870
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2870
		// _ = "end of CoverTab[38250]"
//line /usr/local/go/src/net/http/h2_bundle.go:2870
		_go_fuzz_dep_.CoverTab[38251]++
								isPseudo := strings.HasPrefix(hf.Name, ":")
								if isPseudo {
//line /usr/local/go/src/net/http/h2_bundle.go:2872
			_go_fuzz_dep_.CoverTab[38260]++
									if sawRegular {
//line /usr/local/go/src/net/http/h2_bundle.go:2873
				_go_fuzz_dep_.CoverTab[38261]++
										invalid = http2errPseudoAfterRegular
//line /usr/local/go/src/net/http/h2_bundle.go:2874
				// _ = "end of CoverTab[38261]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2875
				_go_fuzz_dep_.CoverTab[38262]++
//line /usr/local/go/src/net/http/h2_bundle.go:2875
				// _ = "end of CoverTab[38262]"
//line /usr/local/go/src/net/http/h2_bundle.go:2875
			}
//line /usr/local/go/src/net/http/h2_bundle.go:2875
			// _ = "end of CoverTab[38260]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2876
			_go_fuzz_dep_.CoverTab[38263]++
									sawRegular = true
									if !http2validWireHeaderFieldName(hf.Name) {
//line /usr/local/go/src/net/http/h2_bundle.go:2878
				_go_fuzz_dep_.CoverTab[38264]++
										invalid = http2headerFieldNameError(hf.Name)
//line /usr/local/go/src/net/http/h2_bundle.go:2879
				// _ = "end of CoverTab[38264]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2880
				_go_fuzz_dep_.CoverTab[38265]++
//line /usr/local/go/src/net/http/h2_bundle.go:2880
				// _ = "end of CoverTab[38265]"
//line /usr/local/go/src/net/http/h2_bundle.go:2880
			}
//line /usr/local/go/src/net/http/h2_bundle.go:2880
			// _ = "end of CoverTab[38263]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2881
		// _ = "end of CoverTab[38251]"
//line /usr/local/go/src/net/http/h2_bundle.go:2881
		_go_fuzz_dep_.CoverTab[38252]++

								if invalid != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2883
			_go_fuzz_dep_.CoverTab[38266]++
									hdec.SetEmitEnabled(false)
									return
//line /usr/local/go/src/net/http/h2_bundle.go:2885
			// _ = "end of CoverTab[38266]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2886
			_go_fuzz_dep_.CoverTab[38267]++
//line /usr/local/go/src/net/http/h2_bundle.go:2886
			// _ = "end of CoverTab[38267]"
//line /usr/local/go/src/net/http/h2_bundle.go:2886
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2886
		// _ = "end of CoverTab[38252]"
//line /usr/local/go/src/net/http/h2_bundle.go:2886
		_go_fuzz_dep_.CoverTab[38253]++

								size := hf.Size()
								if size > remainSize {
//line /usr/local/go/src/net/http/h2_bundle.go:2889
			_go_fuzz_dep_.CoverTab[38268]++
									hdec.SetEmitEnabled(false)
									mh.Truncated = true
									return
//line /usr/local/go/src/net/http/h2_bundle.go:2892
			// _ = "end of CoverTab[38268]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2893
			_go_fuzz_dep_.CoverTab[38269]++
//line /usr/local/go/src/net/http/h2_bundle.go:2893
			// _ = "end of CoverTab[38269]"
//line /usr/local/go/src/net/http/h2_bundle.go:2893
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2893
		// _ = "end of CoverTab[38253]"
//line /usr/local/go/src/net/http/h2_bundle.go:2893
		_go_fuzz_dep_.CoverTab[38254]++
								remainSize -= size

								mh.Fields = append(mh.Fields, hf)
//line /usr/local/go/src/net/http/h2_bundle.go:2896
		// _ = "end of CoverTab[38254]"
	})
//line /usr/local/go/src/net/http/h2_bundle.go:2897
	// _ = "end of CoverTab[38240]"
//line /usr/local/go/src/net/http/h2_bundle.go:2897
	_go_fuzz_dep_.CoverTab[38241]++

							defer hdec.SetEmitFunc(func(hf hpack.HeaderField) { _go_fuzz_dep_.CoverTab[38270]++; // _ = "end of CoverTab[38270]" })
//line /usr/local/go/src/net/http/h2_bundle.go:2899
	// _ = "end of CoverTab[38241]"
//line /usr/local/go/src/net/http/h2_bundle.go:2899
	_go_fuzz_dep_.CoverTab[38242]++

							var hc http2headersOrContinuation = hf
							for {
//line /usr/local/go/src/net/http/h2_bundle.go:2902
		_go_fuzz_dep_.CoverTab[38271]++
								frag := hc.HeaderBlockFragment()
								if _, err := hdec.Write(frag); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2904
			_go_fuzz_dep_.CoverTab[38274]++
									return nil, http2ConnectionError(http2ErrCodeCompression)
//line /usr/local/go/src/net/http/h2_bundle.go:2905
			// _ = "end of CoverTab[38274]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2906
			_go_fuzz_dep_.CoverTab[38275]++
//line /usr/local/go/src/net/http/h2_bundle.go:2906
			// _ = "end of CoverTab[38275]"
//line /usr/local/go/src/net/http/h2_bundle.go:2906
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2906
		// _ = "end of CoverTab[38271]"
//line /usr/local/go/src/net/http/h2_bundle.go:2906
		_go_fuzz_dep_.CoverTab[38272]++

								if hc.HeadersEnded() {
//line /usr/local/go/src/net/http/h2_bundle.go:2908
			_go_fuzz_dep_.CoverTab[38276]++
									break
//line /usr/local/go/src/net/http/h2_bundle.go:2909
			// _ = "end of CoverTab[38276]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2910
			_go_fuzz_dep_.CoverTab[38277]++
//line /usr/local/go/src/net/http/h2_bundle.go:2910
			// _ = "end of CoverTab[38277]"
//line /usr/local/go/src/net/http/h2_bundle.go:2910
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2910
		// _ = "end of CoverTab[38272]"
//line /usr/local/go/src/net/http/h2_bundle.go:2910
		_go_fuzz_dep_.CoverTab[38273]++
								if f, err := fr.ReadFrame(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2911
			_go_fuzz_dep_.CoverTab[38278]++
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:2912
			// _ = "end of CoverTab[38278]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2913
			_go_fuzz_dep_.CoverTab[38279]++
									hc = f.(*http2ContinuationFrame)
//line /usr/local/go/src/net/http/h2_bundle.go:2914
			// _ = "end of CoverTab[38279]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2915
		// _ = "end of CoverTab[38273]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2916
	// _ = "end of CoverTab[38242]"
//line /usr/local/go/src/net/http/h2_bundle.go:2916
	_go_fuzz_dep_.CoverTab[38243]++

							mh.http2HeadersFrame.headerFragBuf = nil
							mh.http2HeadersFrame.invalidate()

							if err := hdec.Close(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2921
		_go_fuzz_dep_.CoverTab[38280]++
								return nil, http2ConnectionError(http2ErrCodeCompression)
//line /usr/local/go/src/net/http/h2_bundle.go:2922
		// _ = "end of CoverTab[38280]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2923
		_go_fuzz_dep_.CoverTab[38281]++
//line /usr/local/go/src/net/http/h2_bundle.go:2923
		// _ = "end of CoverTab[38281]"
//line /usr/local/go/src/net/http/h2_bundle.go:2923
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2923
	// _ = "end of CoverTab[38243]"
//line /usr/local/go/src/net/http/h2_bundle.go:2923
	_go_fuzz_dep_.CoverTab[38244]++
							if invalid != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2924
		_go_fuzz_dep_.CoverTab[38282]++
								fr.errDetail = invalid
								if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:2926
			_go_fuzz_dep_.CoverTab[38284]++
									log.Printf("http2: invalid header: %v", invalid)
//line /usr/local/go/src/net/http/h2_bundle.go:2927
			// _ = "end of CoverTab[38284]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2928
			_go_fuzz_dep_.CoverTab[38285]++
//line /usr/local/go/src/net/http/h2_bundle.go:2928
			// _ = "end of CoverTab[38285]"
//line /usr/local/go/src/net/http/h2_bundle.go:2928
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2928
		// _ = "end of CoverTab[38282]"
//line /usr/local/go/src/net/http/h2_bundle.go:2928
		_go_fuzz_dep_.CoverTab[38283]++
								return nil, http2StreamError{mh.StreamID, http2ErrCodeProtocol, invalid}
//line /usr/local/go/src/net/http/h2_bundle.go:2929
		// _ = "end of CoverTab[38283]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2930
		_go_fuzz_dep_.CoverTab[38286]++
//line /usr/local/go/src/net/http/h2_bundle.go:2930
		// _ = "end of CoverTab[38286]"
//line /usr/local/go/src/net/http/h2_bundle.go:2930
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2930
	// _ = "end of CoverTab[38244]"
//line /usr/local/go/src/net/http/h2_bundle.go:2930
	_go_fuzz_dep_.CoverTab[38245]++
							if err := mh.checkPseudos(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2931
		_go_fuzz_dep_.CoverTab[38287]++
								fr.errDetail = err
								if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:2933
			_go_fuzz_dep_.CoverTab[38289]++
									log.Printf("http2: invalid pseudo headers: %v", err)
//line /usr/local/go/src/net/http/h2_bundle.go:2934
			// _ = "end of CoverTab[38289]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2935
			_go_fuzz_dep_.CoverTab[38290]++
//line /usr/local/go/src/net/http/h2_bundle.go:2935
			// _ = "end of CoverTab[38290]"
//line /usr/local/go/src/net/http/h2_bundle.go:2935
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2935
		// _ = "end of CoverTab[38287]"
//line /usr/local/go/src/net/http/h2_bundle.go:2935
		_go_fuzz_dep_.CoverTab[38288]++
								return nil, http2StreamError{mh.StreamID, http2ErrCodeProtocol, err}
//line /usr/local/go/src/net/http/h2_bundle.go:2936
		// _ = "end of CoverTab[38288]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2937
		_go_fuzz_dep_.CoverTab[38291]++
//line /usr/local/go/src/net/http/h2_bundle.go:2937
		// _ = "end of CoverTab[38291]"
//line /usr/local/go/src/net/http/h2_bundle.go:2937
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2937
	// _ = "end of CoverTab[38245]"
//line /usr/local/go/src/net/http/h2_bundle.go:2937
	_go_fuzz_dep_.CoverTab[38246]++
							return mh, nil
//line /usr/local/go/src/net/http/h2_bundle.go:2938
	// _ = "end of CoverTab[38246]"
}

func http2summarizeFrame(f http2Frame) string {
//line /usr/local/go/src/net/http/h2_bundle.go:2941
	_go_fuzz_dep_.CoverTab[38292]++
							var buf bytes.Buffer
							f.Header().writeDebug(&buf)
							switch f := f.(type) {
	case *http2SettingsFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:2945
		_go_fuzz_dep_.CoverTab[38294]++
								n := 0
								f.ForeachSetting(func(s http2Setting) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2947
			_go_fuzz_dep_.CoverTab[38303]++
									n++
									if n == 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:2949
				_go_fuzz_dep_.CoverTab[38305]++
										buf.WriteString(", settings:")
//line /usr/local/go/src/net/http/h2_bundle.go:2950
				// _ = "end of CoverTab[38305]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2951
				_go_fuzz_dep_.CoverTab[38306]++
//line /usr/local/go/src/net/http/h2_bundle.go:2951
				// _ = "end of CoverTab[38306]"
//line /usr/local/go/src/net/http/h2_bundle.go:2951
			}
//line /usr/local/go/src/net/http/h2_bundle.go:2951
			// _ = "end of CoverTab[38303]"
//line /usr/local/go/src/net/http/h2_bundle.go:2951
			_go_fuzz_dep_.CoverTab[38304]++
									fmt.Fprintf(&buf, " %v=%v,", s.ID, s.Val)
									return nil
//line /usr/local/go/src/net/http/h2_bundle.go:2953
			// _ = "end of CoverTab[38304]"
		})
//line /usr/local/go/src/net/http/h2_bundle.go:2954
		// _ = "end of CoverTab[38294]"
//line /usr/local/go/src/net/http/h2_bundle.go:2954
		_go_fuzz_dep_.CoverTab[38295]++
								if n > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2955
			_go_fuzz_dep_.CoverTab[38307]++
									buf.Truncate(buf.Len() - 1)
//line /usr/local/go/src/net/http/h2_bundle.go:2956
			// _ = "end of CoverTab[38307]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2957
			_go_fuzz_dep_.CoverTab[38308]++
//line /usr/local/go/src/net/http/h2_bundle.go:2957
			// _ = "end of CoverTab[38308]"
//line /usr/local/go/src/net/http/h2_bundle.go:2957
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2957
		// _ = "end of CoverTab[38295]"
	case *http2DataFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:2958
		_go_fuzz_dep_.CoverTab[38296]++
								data := f.Data()
								const max = 256
								if len(data) > max {
//line /usr/local/go/src/net/http/h2_bundle.go:2961
			_go_fuzz_dep_.CoverTab[38309]++
									data = data[:max]
//line /usr/local/go/src/net/http/h2_bundle.go:2962
			// _ = "end of CoverTab[38309]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2963
			_go_fuzz_dep_.CoverTab[38310]++
//line /usr/local/go/src/net/http/h2_bundle.go:2963
			// _ = "end of CoverTab[38310]"
//line /usr/local/go/src/net/http/h2_bundle.go:2963
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2963
		// _ = "end of CoverTab[38296]"
//line /usr/local/go/src/net/http/h2_bundle.go:2963
		_go_fuzz_dep_.CoverTab[38297]++
								fmt.Fprintf(&buf, " data=%q", data)
								if len(f.Data()) > max {
//line /usr/local/go/src/net/http/h2_bundle.go:2965
			_go_fuzz_dep_.CoverTab[38311]++
									fmt.Fprintf(&buf, " (%d bytes omitted)", len(f.Data())-max)
//line /usr/local/go/src/net/http/h2_bundle.go:2966
			// _ = "end of CoverTab[38311]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2967
			_go_fuzz_dep_.CoverTab[38312]++
//line /usr/local/go/src/net/http/h2_bundle.go:2967
			// _ = "end of CoverTab[38312]"
//line /usr/local/go/src/net/http/h2_bundle.go:2967
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2967
		// _ = "end of CoverTab[38297]"
	case *http2WindowUpdateFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:2968
		_go_fuzz_dep_.CoverTab[38298]++
								if f.StreamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:2969
			_go_fuzz_dep_.CoverTab[38313]++
									buf.WriteString(" (conn)")
//line /usr/local/go/src/net/http/h2_bundle.go:2970
			// _ = "end of CoverTab[38313]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2971
			_go_fuzz_dep_.CoverTab[38314]++
//line /usr/local/go/src/net/http/h2_bundle.go:2971
			// _ = "end of CoverTab[38314]"
//line /usr/local/go/src/net/http/h2_bundle.go:2971
		}
//line /usr/local/go/src/net/http/h2_bundle.go:2971
		// _ = "end of CoverTab[38298]"
//line /usr/local/go/src/net/http/h2_bundle.go:2971
		_go_fuzz_dep_.CoverTab[38299]++
								fmt.Fprintf(&buf, " incr=%v", f.Increment)
//line /usr/local/go/src/net/http/h2_bundle.go:2972
		// _ = "end of CoverTab[38299]"
	case *http2PingFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:2973
		_go_fuzz_dep_.CoverTab[38300]++
								fmt.Fprintf(&buf, " ping=%q", f.Data[:])
//line /usr/local/go/src/net/http/h2_bundle.go:2974
		// _ = "end of CoverTab[38300]"
	case *http2GoAwayFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:2975
		_go_fuzz_dep_.CoverTab[38301]++
								fmt.Fprintf(&buf, " LastStreamID=%v ErrCode=%v Debug=%q",
			f.LastStreamID, f.ErrCode, f.debugData)
//line /usr/local/go/src/net/http/h2_bundle.go:2977
		// _ = "end of CoverTab[38301]"
	case *http2RSTStreamFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:2978
		_go_fuzz_dep_.CoverTab[38302]++
								fmt.Fprintf(&buf, " ErrCode=%v", f.ErrCode)
//line /usr/local/go/src/net/http/h2_bundle.go:2979
		// _ = "end of CoverTab[38302]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2980
	// _ = "end of CoverTab[38292]"
//line /usr/local/go/src/net/http/h2_bundle.go:2980
	_go_fuzz_dep_.CoverTab[38293]++
							return buf.String()
//line /usr/local/go/src/net/http/h2_bundle.go:2981
	// _ = "end of CoverTab[38293]"
}

func http2traceHasWroteHeaderField(trace *httptrace.ClientTrace) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2984
	_go_fuzz_dep_.CoverTab[38315]++
							return trace != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2985
		_go_fuzz_dep_.CoverTab[38316]++
//line /usr/local/go/src/net/http/h2_bundle.go:2985
		return trace.WroteHeaderField != nil
//line /usr/local/go/src/net/http/h2_bundle.go:2985
		// _ = "end of CoverTab[38316]"
//line /usr/local/go/src/net/http/h2_bundle.go:2985
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:2985
	// _ = "end of CoverTab[38315]"
}

func http2traceWroteHeaderField(trace *httptrace.ClientTrace, k, v string) {
//line /usr/local/go/src/net/http/h2_bundle.go:2988
	_go_fuzz_dep_.CoverTab[38317]++
							if trace != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:2989
		_go_fuzz_dep_.CoverTab[38318]++
//line /usr/local/go/src/net/http/h2_bundle.go:2989
		return trace.WroteHeaderField != nil
//line /usr/local/go/src/net/http/h2_bundle.go:2989
		// _ = "end of CoverTab[38318]"
//line /usr/local/go/src/net/http/h2_bundle.go:2989
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:2989
		_go_fuzz_dep_.CoverTab[38319]++
								trace.WroteHeaderField(k, []string{v})
//line /usr/local/go/src/net/http/h2_bundle.go:2990
		// _ = "end of CoverTab[38319]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2991
		_go_fuzz_dep_.CoverTab[38320]++
//line /usr/local/go/src/net/http/h2_bundle.go:2991
		// _ = "end of CoverTab[38320]"
//line /usr/local/go/src/net/http/h2_bundle.go:2991
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2991
	// _ = "end of CoverTab[38317]"
}

func http2traceGot1xxResponseFunc(trace *httptrace.ClientTrace) func(int, textproto.MIMEHeader) error {
//line /usr/local/go/src/net/http/h2_bundle.go:2994
	_go_fuzz_dep_.CoverTab[38321]++
							if trace != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:2995
		_go_fuzz_dep_.CoverTab[38323]++
								return trace.Got1xxResponse
//line /usr/local/go/src/net/http/h2_bundle.go:2996
		// _ = "end of CoverTab[38323]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:2997
		_go_fuzz_dep_.CoverTab[38324]++
//line /usr/local/go/src/net/http/h2_bundle.go:2997
		// _ = "end of CoverTab[38324]"
//line /usr/local/go/src/net/http/h2_bundle.go:2997
	}
//line /usr/local/go/src/net/http/h2_bundle.go:2997
	// _ = "end of CoverTab[38321]"
//line /usr/local/go/src/net/http/h2_bundle.go:2997
	_go_fuzz_dep_.CoverTab[38322]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:2998
	// _ = "end of CoverTab[38322]"
}

// dialTLSWithContext uses tls.Dialer, added in Go 1.15, to open a TLS
//line /usr/local/go/src/net/http/h2_bundle.go:3001
// connection.
//line /usr/local/go/src/net/http/h2_bundle.go:3003
func (t *http2Transport) dialTLSWithContext(ctx context.Context, network, addr string, cfg *tls.Config) (*tls.Conn, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:3003
	_go_fuzz_dep_.CoverTab[38325]++
							dialer := &tls.Dialer{
		Config: cfg,
	}
	cn, err := dialer.DialContext(ctx, network, addr)
	if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3008
		_go_fuzz_dep_.CoverTab[38327]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:3009
		// _ = "end of CoverTab[38327]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3010
		_go_fuzz_dep_.CoverTab[38328]++
//line /usr/local/go/src/net/http/h2_bundle.go:3010
		// _ = "end of CoverTab[38328]"
//line /usr/local/go/src/net/http/h2_bundle.go:3010
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3010
	// _ = "end of CoverTab[38325]"
//line /usr/local/go/src/net/http/h2_bundle.go:3010
	_go_fuzz_dep_.CoverTab[38326]++
							tlsCn := cn.(*tls.Conn)
							return tlsCn, nil
//line /usr/local/go/src/net/http/h2_bundle.go:3012
	// _ = "end of CoverTab[38326]"
}

func http2tlsUnderlyingConn(tc *tls.Conn) net.Conn {
//line /usr/local/go/src/net/http/h2_bundle.go:3015
	_go_fuzz_dep_.CoverTab[38329]++
							return tc.NetConn()
//line /usr/local/go/src/net/http/h2_bundle.go:3016
	// _ = "end of CoverTab[38329]"
}

var http2DebugGoroutines = os.Getenv("DEBUG_HTTP2_GOROUTINES") == "1"

type http2goroutineLock uint64

func http2newGoroutineLock() http2goroutineLock {
//line /usr/local/go/src/net/http/h2_bundle.go:3023
	_go_fuzz_dep_.CoverTab[38330]++
							if !http2DebugGoroutines {
//line /usr/local/go/src/net/http/h2_bundle.go:3024
		_go_fuzz_dep_.CoverTab[38332]++
								return 0
//line /usr/local/go/src/net/http/h2_bundle.go:3025
		// _ = "end of CoverTab[38332]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3026
		_go_fuzz_dep_.CoverTab[38333]++
//line /usr/local/go/src/net/http/h2_bundle.go:3026
		// _ = "end of CoverTab[38333]"
//line /usr/local/go/src/net/http/h2_bundle.go:3026
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3026
	// _ = "end of CoverTab[38330]"
//line /usr/local/go/src/net/http/h2_bundle.go:3026
	_go_fuzz_dep_.CoverTab[38331]++
							return http2goroutineLock(http2curGoroutineID())
//line /usr/local/go/src/net/http/h2_bundle.go:3027
	// _ = "end of CoverTab[38331]"
}

func (g http2goroutineLock) check() {
//line /usr/local/go/src/net/http/h2_bundle.go:3030
	_go_fuzz_dep_.CoverTab[38334]++
							if !http2DebugGoroutines {
//line /usr/local/go/src/net/http/h2_bundle.go:3031
		_go_fuzz_dep_.CoverTab[38336]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:3032
		// _ = "end of CoverTab[38336]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3033
		_go_fuzz_dep_.CoverTab[38337]++
//line /usr/local/go/src/net/http/h2_bundle.go:3033
		// _ = "end of CoverTab[38337]"
//line /usr/local/go/src/net/http/h2_bundle.go:3033
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3033
	// _ = "end of CoverTab[38334]"
//line /usr/local/go/src/net/http/h2_bundle.go:3033
	_go_fuzz_dep_.CoverTab[38335]++
							if http2curGoroutineID() != uint64(g) {
//line /usr/local/go/src/net/http/h2_bundle.go:3034
		_go_fuzz_dep_.CoverTab[38338]++
								panic("running on the wrong goroutine")
//line /usr/local/go/src/net/http/h2_bundle.go:3035
		// _ = "end of CoverTab[38338]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3036
		_go_fuzz_dep_.CoverTab[38339]++
//line /usr/local/go/src/net/http/h2_bundle.go:3036
		// _ = "end of CoverTab[38339]"
//line /usr/local/go/src/net/http/h2_bundle.go:3036
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3036
	// _ = "end of CoverTab[38335]"
}

func (g http2goroutineLock) checkNotOn() {
//line /usr/local/go/src/net/http/h2_bundle.go:3039
	_go_fuzz_dep_.CoverTab[38340]++
							if !http2DebugGoroutines {
//line /usr/local/go/src/net/http/h2_bundle.go:3040
		_go_fuzz_dep_.CoverTab[38342]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:3041
		// _ = "end of CoverTab[38342]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3042
		_go_fuzz_dep_.CoverTab[38343]++
//line /usr/local/go/src/net/http/h2_bundle.go:3042
		// _ = "end of CoverTab[38343]"
//line /usr/local/go/src/net/http/h2_bundle.go:3042
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3042
	// _ = "end of CoverTab[38340]"
//line /usr/local/go/src/net/http/h2_bundle.go:3042
	_go_fuzz_dep_.CoverTab[38341]++
							if http2curGoroutineID() == uint64(g) {
//line /usr/local/go/src/net/http/h2_bundle.go:3043
		_go_fuzz_dep_.CoverTab[38344]++
								panic("running on the wrong goroutine")
//line /usr/local/go/src/net/http/h2_bundle.go:3044
		// _ = "end of CoverTab[38344]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3045
		_go_fuzz_dep_.CoverTab[38345]++
//line /usr/local/go/src/net/http/h2_bundle.go:3045
		// _ = "end of CoverTab[38345]"
//line /usr/local/go/src/net/http/h2_bundle.go:3045
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3045
	// _ = "end of CoverTab[38341]"
}

var http2goroutineSpace = []byte("goroutine ")

func http2curGoroutineID() uint64 {
//line /usr/local/go/src/net/http/h2_bundle.go:3050
	_go_fuzz_dep_.CoverTab[38346]++
							bp := http2littleBuf.Get().(*[]byte)
							defer http2littleBuf.Put(bp)
							b := *bp
							b = b[:runtime.Stack(b, false)]

							b = bytes.TrimPrefix(b, http2goroutineSpace)
							i := bytes.IndexByte(b, ' ')
							if i < 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:3058
		_go_fuzz_dep_.CoverTab[38349]++
								panic(fmt.Sprintf("No space found in %q", b))
//line /usr/local/go/src/net/http/h2_bundle.go:3059
		// _ = "end of CoverTab[38349]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3060
		_go_fuzz_dep_.CoverTab[38350]++
//line /usr/local/go/src/net/http/h2_bundle.go:3060
		// _ = "end of CoverTab[38350]"
//line /usr/local/go/src/net/http/h2_bundle.go:3060
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3060
	// _ = "end of CoverTab[38346]"
//line /usr/local/go/src/net/http/h2_bundle.go:3060
	_go_fuzz_dep_.CoverTab[38347]++
							b = b[:i]
							n, err := http2parseUintBytes(b, 10, 64)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3063
		_go_fuzz_dep_.CoverTab[38351]++
								panic(fmt.Sprintf("Failed to parse goroutine ID out of %q: %v", b, err))
//line /usr/local/go/src/net/http/h2_bundle.go:3064
		// _ = "end of CoverTab[38351]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3065
		_go_fuzz_dep_.CoverTab[38352]++
//line /usr/local/go/src/net/http/h2_bundle.go:3065
		// _ = "end of CoverTab[38352]"
//line /usr/local/go/src/net/http/h2_bundle.go:3065
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3065
	// _ = "end of CoverTab[38347]"
//line /usr/local/go/src/net/http/h2_bundle.go:3065
	_go_fuzz_dep_.CoverTab[38348]++
							return n
//line /usr/local/go/src/net/http/h2_bundle.go:3066
	// _ = "end of CoverTab[38348]"
}

var http2littleBuf = sync.Pool{
	New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:3070
		_go_fuzz_dep_.CoverTab[38353]++
								buf := make([]byte, 64)
								return &buf
//line /usr/local/go/src/net/http/h2_bundle.go:3072
		// _ = "end of CoverTab[38353]"
	},
}

// parseUintBytes is like strconv.ParseUint, but using a []byte.
func http2parseUintBytes(s []byte, base int, bitSize int) (n uint64, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:3077
	_go_fuzz_dep_.CoverTab[38354]++
							var cutoff, maxVal uint64

							if bitSize == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:3080
		_go_fuzz_dep_.CoverTab[38358]++
								bitSize = int(strconv.IntSize)
//line /usr/local/go/src/net/http/h2_bundle.go:3081
		// _ = "end of CoverTab[38358]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3082
		_go_fuzz_dep_.CoverTab[38359]++
//line /usr/local/go/src/net/http/h2_bundle.go:3082
		// _ = "end of CoverTab[38359]"
//line /usr/local/go/src/net/http/h2_bundle.go:3082
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3082
	// _ = "end of CoverTab[38354]"
//line /usr/local/go/src/net/http/h2_bundle.go:3082
	_go_fuzz_dep_.CoverTab[38355]++

							s0 := s
							switch {
	case len(s) < 1:
//line /usr/local/go/src/net/http/h2_bundle.go:3086
		_go_fuzz_dep_.CoverTab[38360]++
								err = strconv.ErrSyntax
								goto Error
//line /usr/local/go/src/net/http/h2_bundle.go:3088
		// _ = "end of CoverTab[38360]"

	case 2 <= base && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3090
		_go_fuzz_dep_.CoverTab[38364]++
//line /usr/local/go/src/net/http/h2_bundle.go:3090
		return base <= 36
//line /usr/local/go/src/net/http/h2_bundle.go:3090
		// _ = "end of CoverTab[38364]"
//line /usr/local/go/src/net/http/h2_bundle.go:3090
	}():
//line /usr/local/go/src/net/http/h2_bundle.go:3090
		_go_fuzz_dep_.CoverTab[38361]++
//line /usr/local/go/src/net/http/h2_bundle.go:3090
		// _ = "end of CoverTab[38361]"

//line /usr/local/go/src/net/http/h2_bundle.go:3093
	case base == 0:
//line /usr/local/go/src/net/http/h2_bundle.go:3093
		_go_fuzz_dep_.CoverTab[38362]++

								switch {
		case s[0] == '0' && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3096
			_go_fuzz_dep_.CoverTab[38368]++
//line /usr/local/go/src/net/http/h2_bundle.go:3096
			return len(s) > 1
//line /usr/local/go/src/net/http/h2_bundle.go:3096
			// _ = "end of CoverTab[38368]"
//line /usr/local/go/src/net/http/h2_bundle.go:3096
		}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3096
			_go_fuzz_dep_.CoverTab[38369]++
//line /usr/local/go/src/net/http/h2_bundle.go:3096
			return (s[1] == 'x' || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3096
				_go_fuzz_dep_.CoverTab[38370]++
//line /usr/local/go/src/net/http/h2_bundle.go:3096
				return s[1] == 'X'
//line /usr/local/go/src/net/http/h2_bundle.go:3096
				// _ = "end of CoverTab[38370]"
//line /usr/local/go/src/net/http/h2_bundle.go:3096
			}())
//line /usr/local/go/src/net/http/h2_bundle.go:3096
			// _ = "end of CoverTab[38369]"
//line /usr/local/go/src/net/http/h2_bundle.go:3096
		}():
//line /usr/local/go/src/net/http/h2_bundle.go:3096
			_go_fuzz_dep_.CoverTab[38365]++
									base = 16
									s = s[2:]
									if len(s) < 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:3099
				_go_fuzz_dep_.CoverTab[38371]++
										err = strconv.ErrSyntax
										goto Error
//line /usr/local/go/src/net/http/h2_bundle.go:3101
				// _ = "end of CoverTab[38371]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3102
				_go_fuzz_dep_.CoverTab[38372]++
//line /usr/local/go/src/net/http/h2_bundle.go:3102
				// _ = "end of CoverTab[38372]"
//line /usr/local/go/src/net/http/h2_bundle.go:3102
			}
//line /usr/local/go/src/net/http/h2_bundle.go:3102
			// _ = "end of CoverTab[38365]"
		case s[0] == '0':
//line /usr/local/go/src/net/http/h2_bundle.go:3103
			_go_fuzz_dep_.CoverTab[38366]++
									base = 8
//line /usr/local/go/src/net/http/h2_bundle.go:3104
			// _ = "end of CoverTab[38366]"
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:3105
			_go_fuzz_dep_.CoverTab[38367]++
									base = 10
//line /usr/local/go/src/net/http/h2_bundle.go:3106
			// _ = "end of CoverTab[38367]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3107
		// _ = "end of CoverTab[38362]"

	default:
//line /usr/local/go/src/net/http/h2_bundle.go:3109
		_go_fuzz_dep_.CoverTab[38363]++
								err = errors.New("invalid base " + strconv.Itoa(base))
								goto Error
//line /usr/local/go/src/net/http/h2_bundle.go:3111
		// _ = "end of CoverTab[38363]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3112
	// _ = "end of CoverTab[38355]"
//line /usr/local/go/src/net/http/h2_bundle.go:3112
	_go_fuzz_dep_.CoverTab[38356]++

							n = 0
							cutoff = http2cutoff64(base)
							maxVal = 1<<uint(bitSize) - 1

							for i := 0; i < len(s); i++ {
//line /usr/local/go/src/net/http/h2_bundle.go:3118
		_go_fuzz_dep_.CoverTab[38373]++
								var v byte
								d := s[i]
								switch {
		case '0' <= d && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3122
			_go_fuzz_dep_.CoverTab[38382]++
//line /usr/local/go/src/net/http/h2_bundle.go:3122
			return d <= '9'
//line /usr/local/go/src/net/http/h2_bundle.go:3122
			// _ = "end of CoverTab[38382]"
//line /usr/local/go/src/net/http/h2_bundle.go:3122
		}():
//line /usr/local/go/src/net/http/h2_bundle.go:3122
			_go_fuzz_dep_.CoverTab[38378]++
									v = d - '0'
//line /usr/local/go/src/net/http/h2_bundle.go:3123
			// _ = "end of CoverTab[38378]"
		case 'a' <= d && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3124
			_go_fuzz_dep_.CoverTab[38383]++
//line /usr/local/go/src/net/http/h2_bundle.go:3124
			return d <= 'z'
//line /usr/local/go/src/net/http/h2_bundle.go:3124
			// _ = "end of CoverTab[38383]"
//line /usr/local/go/src/net/http/h2_bundle.go:3124
		}():
//line /usr/local/go/src/net/http/h2_bundle.go:3124
			_go_fuzz_dep_.CoverTab[38379]++
									v = d - 'a' + 10
//line /usr/local/go/src/net/http/h2_bundle.go:3125
			// _ = "end of CoverTab[38379]"
		case 'A' <= d && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3126
			_go_fuzz_dep_.CoverTab[38384]++
//line /usr/local/go/src/net/http/h2_bundle.go:3126
			return d <= 'Z'
//line /usr/local/go/src/net/http/h2_bundle.go:3126
			// _ = "end of CoverTab[38384]"
//line /usr/local/go/src/net/http/h2_bundle.go:3126
		}():
//line /usr/local/go/src/net/http/h2_bundle.go:3126
			_go_fuzz_dep_.CoverTab[38380]++
									v = d - 'A' + 10
//line /usr/local/go/src/net/http/h2_bundle.go:3127
			// _ = "end of CoverTab[38380]"
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:3128
			_go_fuzz_dep_.CoverTab[38381]++
									n = 0
									err = strconv.ErrSyntax
									goto Error
//line /usr/local/go/src/net/http/h2_bundle.go:3131
			// _ = "end of CoverTab[38381]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3132
		// _ = "end of CoverTab[38373]"
//line /usr/local/go/src/net/http/h2_bundle.go:3132
		_go_fuzz_dep_.CoverTab[38374]++
								if int(v) >= base {
//line /usr/local/go/src/net/http/h2_bundle.go:3133
			_go_fuzz_dep_.CoverTab[38385]++
									n = 0
									err = strconv.ErrSyntax
									goto Error
//line /usr/local/go/src/net/http/h2_bundle.go:3136
			// _ = "end of CoverTab[38385]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3137
			_go_fuzz_dep_.CoverTab[38386]++
//line /usr/local/go/src/net/http/h2_bundle.go:3137
			// _ = "end of CoverTab[38386]"
//line /usr/local/go/src/net/http/h2_bundle.go:3137
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3137
		// _ = "end of CoverTab[38374]"
//line /usr/local/go/src/net/http/h2_bundle.go:3137
		_go_fuzz_dep_.CoverTab[38375]++

								if n >= cutoff {
//line /usr/local/go/src/net/http/h2_bundle.go:3139
			_go_fuzz_dep_.CoverTab[38387]++

									n = 1<<64 - 1
									err = strconv.ErrRange
									goto Error
//line /usr/local/go/src/net/http/h2_bundle.go:3143
			// _ = "end of CoverTab[38387]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3144
			_go_fuzz_dep_.CoverTab[38388]++
//line /usr/local/go/src/net/http/h2_bundle.go:3144
			// _ = "end of CoverTab[38388]"
//line /usr/local/go/src/net/http/h2_bundle.go:3144
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3144
		// _ = "end of CoverTab[38375]"
//line /usr/local/go/src/net/http/h2_bundle.go:3144
		_go_fuzz_dep_.CoverTab[38376]++
								n *= uint64(base)

								n1 := n + uint64(v)
								if n1 < n || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3148
			_go_fuzz_dep_.CoverTab[38389]++
//line /usr/local/go/src/net/http/h2_bundle.go:3148
			return n1 > maxVal
//line /usr/local/go/src/net/http/h2_bundle.go:3148
			// _ = "end of CoverTab[38389]"
//line /usr/local/go/src/net/http/h2_bundle.go:3148
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:3148
			_go_fuzz_dep_.CoverTab[38390]++

									n = 1<<64 - 1
									err = strconv.ErrRange
									goto Error
//line /usr/local/go/src/net/http/h2_bundle.go:3152
			// _ = "end of CoverTab[38390]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3153
			_go_fuzz_dep_.CoverTab[38391]++
//line /usr/local/go/src/net/http/h2_bundle.go:3153
			// _ = "end of CoverTab[38391]"
//line /usr/local/go/src/net/http/h2_bundle.go:3153
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3153
		// _ = "end of CoverTab[38376]"
//line /usr/local/go/src/net/http/h2_bundle.go:3153
		_go_fuzz_dep_.CoverTab[38377]++
								n = n1
//line /usr/local/go/src/net/http/h2_bundle.go:3154
		// _ = "end of CoverTab[38377]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3155
	// _ = "end of CoverTab[38356]"
//line /usr/local/go/src/net/http/h2_bundle.go:3155
	_go_fuzz_dep_.CoverTab[38357]++

							return n, nil

Error:
							return n, &strconv.NumError{Func: "ParseUint", Num: string(s0), Err: err}
//line /usr/local/go/src/net/http/h2_bundle.go:3160
	// _ = "end of CoverTab[38357]"
}

// Return the first number n such that n*base >= 1<<64.
func http2cutoff64(base int) uint64 {
//line /usr/local/go/src/net/http/h2_bundle.go:3164
	_go_fuzz_dep_.CoverTab[38392]++
							if base < 2 {
//line /usr/local/go/src/net/http/h2_bundle.go:3165
		_go_fuzz_dep_.CoverTab[38394]++
								return 0
//line /usr/local/go/src/net/http/h2_bundle.go:3166
		// _ = "end of CoverTab[38394]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3167
		_go_fuzz_dep_.CoverTab[38395]++
//line /usr/local/go/src/net/http/h2_bundle.go:3167
		// _ = "end of CoverTab[38395]"
//line /usr/local/go/src/net/http/h2_bundle.go:3167
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3167
	// _ = "end of CoverTab[38392]"
//line /usr/local/go/src/net/http/h2_bundle.go:3167
	_go_fuzz_dep_.CoverTab[38393]++
							return (1<<64-1)/uint64(base) + 1
//line /usr/local/go/src/net/http/h2_bundle.go:3168
	// _ = "end of CoverTab[38393]"
}

var (
	http2commonBuildOnce	sync.Once
	http2commonLowerHeader	map[string]string	// Go-Canonical-Case -> lower-case
	http2commonCanonHeader	map[string]string	// lower-case -> Go-Canonical-Case
)

func http2buildCommonHeaderMapsOnce() {
//line /usr/local/go/src/net/http/h2_bundle.go:3177
	_go_fuzz_dep_.CoverTab[38396]++
							http2commonBuildOnce.Do(http2buildCommonHeaderMaps)
//line /usr/local/go/src/net/http/h2_bundle.go:3178
	// _ = "end of CoverTab[38396]"
}

func http2buildCommonHeaderMaps() {
//line /usr/local/go/src/net/http/h2_bundle.go:3181
	_go_fuzz_dep_.CoverTab[38397]++
							common := []string{
		"accept",
		"accept-charset",
		"accept-encoding",
		"accept-language",
		"accept-ranges",
		"age",
		"access-control-allow-credentials",
		"access-control-allow-headers",
		"access-control-allow-methods",
		"access-control-allow-origin",
		"access-control-expose-headers",
		"access-control-max-age",
		"access-control-request-headers",
		"access-control-request-method",
		"allow",
		"authorization",
		"cache-control",
		"content-disposition",
		"content-encoding",
		"content-language",
		"content-length",
		"content-location",
		"content-range",
		"content-type",
		"cookie",
		"date",
		"etag",
		"expect",
		"expires",
		"from",
		"host",
		"if-match",
		"if-modified-since",
		"if-none-match",
		"if-unmodified-since",
		"last-modified",
		"link",
		"location",
		"max-forwards",
		"origin",
		"proxy-authenticate",
		"proxy-authorization",
		"range",
		"referer",
		"refresh",
		"retry-after",
		"server",
		"set-cookie",
		"strict-transport-security",
		"trailer",
		"transfer-encoding",
		"user-agent",
		"vary",
		"via",
		"www-authenticate",
		"x-forwarded-for",
		"x-forwarded-proto",
	}
	http2commonLowerHeader = make(map[string]string, len(common))
	http2commonCanonHeader = make(map[string]string, len(common))
	for _, v := range common {
//line /usr/local/go/src/net/http/h2_bundle.go:3243
		_go_fuzz_dep_.CoverTab[38398]++
								chk := CanonicalHeaderKey(v)
								http2commonLowerHeader[chk] = v
								http2commonCanonHeader[v] = chk
//line /usr/local/go/src/net/http/h2_bundle.go:3246
		// _ = "end of CoverTab[38398]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3247
	// _ = "end of CoverTab[38397]"
}

func http2lowerHeader(v string) (lower string, ascii bool) {
//line /usr/local/go/src/net/http/h2_bundle.go:3250
	_go_fuzz_dep_.CoverTab[38399]++
							http2buildCommonHeaderMapsOnce()
							if s, ok := http2commonLowerHeader[v]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:3252
		_go_fuzz_dep_.CoverTab[38401]++
								return s, true
//line /usr/local/go/src/net/http/h2_bundle.go:3253
		// _ = "end of CoverTab[38401]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3254
		_go_fuzz_dep_.CoverTab[38402]++
//line /usr/local/go/src/net/http/h2_bundle.go:3254
		// _ = "end of CoverTab[38402]"
//line /usr/local/go/src/net/http/h2_bundle.go:3254
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3254
	// _ = "end of CoverTab[38399]"
//line /usr/local/go/src/net/http/h2_bundle.go:3254
	_go_fuzz_dep_.CoverTab[38400]++
							return http2asciiToLower(v)
//line /usr/local/go/src/net/http/h2_bundle.go:3255
	// _ = "end of CoverTab[38400]"
}

func http2canonicalHeader(v string) string {
//line /usr/local/go/src/net/http/h2_bundle.go:3258
	_go_fuzz_dep_.CoverTab[38403]++
							http2buildCommonHeaderMapsOnce()
							if s, ok := http2commonCanonHeader[v]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:3260
		_go_fuzz_dep_.CoverTab[38405]++
								return s
//line /usr/local/go/src/net/http/h2_bundle.go:3261
		// _ = "end of CoverTab[38405]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3262
		_go_fuzz_dep_.CoverTab[38406]++
//line /usr/local/go/src/net/http/h2_bundle.go:3262
		// _ = "end of CoverTab[38406]"
//line /usr/local/go/src/net/http/h2_bundle.go:3262
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3262
	// _ = "end of CoverTab[38403]"
//line /usr/local/go/src/net/http/h2_bundle.go:3262
	_go_fuzz_dep_.CoverTab[38404]++
							return CanonicalHeaderKey(v)
//line /usr/local/go/src/net/http/h2_bundle.go:3263
	// _ = "end of CoverTab[38404]"
}

var (
	http2VerboseLogs	bool
	http2logFrameWrites	bool
	http2logFrameReads	bool
	http2inTests		bool
)

func init() {
	e := os.Getenv("GODEBUG")
	if strings.Contains(e, "http2debug=1") {
		http2VerboseLogs = true
	}
	if strings.Contains(e, "http2debug=2") {
		http2VerboseLogs = true
		http2logFrameWrites = true
		http2logFrameReads = true
	}
}

const (
	// ClientPreface is the string that must be sent by new
	// connections from clients.
	http2ClientPreface	= "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n"

	// SETTINGS_MAX_FRAME_SIZE default
	// https://httpwg.org/specs/rfc7540.html#rfc.section.6.5.2
	http2initialMaxFrameSize	= 16384

	// NextProtoTLS is the NPN/ALPN protocol negotiated during
	// HTTP/2's TLS setup.
	http2NextProtoTLS	= "h2"

	// https://httpwg.org/specs/rfc7540.html#SettingValues
	http2initialHeaderTableSize	= 4096

	http2initialWindowSize	= 65535	// 6.9.2 Initial Flow Control Window Size

	http2defaultMaxReadFrameSize	= 1 << 20
)

var (
	http2clientPreface = []byte(http2ClientPreface)
)

type http2streamState int

// HTTP/2 stream states.
//line /usr/local/go/src/net/http/h2_bundle.go:3312
//
//line /usr/local/go/src/net/http/h2_bundle.go:3312
// See http://tools.ietf.org/html/rfc7540#section-5.1.
//line /usr/local/go/src/net/http/h2_bundle.go:3312
//
//line /usr/local/go/src/net/http/h2_bundle.go:3312
// For simplicity, the server code merges "reserved (local)" into
//line /usr/local/go/src/net/http/h2_bundle.go:3312
// "half-closed (remote)". This is one less state transition to track.
//line /usr/local/go/src/net/http/h2_bundle.go:3312
// The only downside is that we send PUSH_PROMISEs slightly less
//line /usr/local/go/src/net/http/h2_bundle.go:3312
// liberally than allowable. More discussion here:
//line /usr/local/go/src/net/http/h2_bundle.go:3312
// https://lists.w3.org/Archives/Public/ietf-http-wg/2016JulSep/0599.html
//line /usr/local/go/src/net/http/h2_bundle.go:3312
//
//line /usr/local/go/src/net/http/h2_bundle.go:3312
// "reserved (remote)" is omitted since the client code does not
//line /usr/local/go/src/net/http/h2_bundle.go:3312
// support server push.
//line /usr/local/go/src/net/http/h2_bundle.go:3324
const (
	http2stateIdle	http2streamState	= iota
	http2stateOpen
	http2stateHalfClosedLocal
	http2stateHalfClosedRemote
	http2stateClosed
)

var http2stateName = [...]string{
	http2stateIdle:			"Idle",
	http2stateOpen:			"Open",
	http2stateHalfClosedLocal:	"HalfClosedLocal",
	http2stateHalfClosedRemote:	"HalfClosedRemote",
	http2stateClosed:		"Closed",
}

func (st http2streamState) String() string {
//line /usr/local/go/src/net/http/h2_bundle.go:3340
	_go_fuzz_dep_.CoverTab[38407]++
							return http2stateName[st]
//line /usr/local/go/src/net/http/h2_bundle.go:3341
	// _ = "end of CoverTab[38407]"
}

// Setting is a setting parameter: which setting it is, and its value.
type http2Setting struct {
	// ID is which setting is being set.
	// See https://httpwg.org/specs/rfc7540.html#SettingFormat
	ID	http2SettingID

	// Val is the value.
	Val	uint32
}

func (s http2Setting) String() string {
//line /usr/local/go/src/net/http/h2_bundle.go:3354
	_go_fuzz_dep_.CoverTab[38408]++
							return fmt.Sprintf("[%v = %d]", s.ID, s.Val)
//line /usr/local/go/src/net/http/h2_bundle.go:3355
	// _ = "end of CoverTab[38408]"
}

// Valid reports whether the setting is valid.
func (s http2Setting) Valid() error {
//line /usr/local/go/src/net/http/h2_bundle.go:3359
	_go_fuzz_dep_.CoverTab[38409]++

							switch s.ID {
	case http2SettingEnablePush:
//line /usr/local/go/src/net/http/h2_bundle.go:3362
		_go_fuzz_dep_.CoverTab[38411]++
								if s.Val != 1 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3363
			_go_fuzz_dep_.CoverTab[38415]++
//line /usr/local/go/src/net/http/h2_bundle.go:3363
			return s.Val != 0
//line /usr/local/go/src/net/http/h2_bundle.go:3363
			// _ = "end of CoverTab[38415]"
//line /usr/local/go/src/net/http/h2_bundle.go:3363
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:3363
			_go_fuzz_dep_.CoverTab[38416]++
									return http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:3364
			// _ = "end of CoverTab[38416]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3365
			_go_fuzz_dep_.CoverTab[38417]++
//line /usr/local/go/src/net/http/h2_bundle.go:3365
			// _ = "end of CoverTab[38417]"
//line /usr/local/go/src/net/http/h2_bundle.go:3365
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3365
		// _ = "end of CoverTab[38411]"
	case http2SettingInitialWindowSize:
//line /usr/local/go/src/net/http/h2_bundle.go:3366
		_go_fuzz_dep_.CoverTab[38412]++
								if s.Val > 1<<31-1 {
//line /usr/local/go/src/net/http/h2_bundle.go:3367
			_go_fuzz_dep_.CoverTab[38418]++
									return http2ConnectionError(http2ErrCodeFlowControl)
//line /usr/local/go/src/net/http/h2_bundle.go:3368
			// _ = "end of CoverTab[38418]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3369
			_go_fuzz_dep_.CoverTab[38419]++
//line /usr/local/go/src/net/http/h2_bundle.go:3369
			// _ = "end of CoverTab[38419]"
//line /usr/local/go/src/net/http/h2_bundle.go:3369
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3369
		// _ = "end of CoverTab[38412]"
	case http2SettingMaxFrameSize:
//line /usr/local/go/src/net/http/h2_bundle.go:3370
		_go_fuzz_dep_.CoverTab[38413]++
								if s.Val < 16384 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3371
			_go_fuzz_dep_.CoverTab[38420]++
//line /usr/local/go/src/net/http/h2_bundle.go:3371
			return s.Val > 1<<24-1
//line /usr/local/go/src/net/http/h2_bundle.go:3371
			// _ = "end of CoverTab[38420]"
//line /usr/local/go/src/net/http/h2_bundle.go:3371
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:3371
			_go_fuzz_dep_.CoverTab[38421]++
									return http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:3372
			// _ = "end of CoverTab[38421]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3373
			_go_fuzz_dep_.CoverTab[38422]++
//line /usr/local/go/src/net/http/h2_bundle.go:3373
			// _ = "end of CoverTab[38422]"
//line /usr/local/go/src/net/http/h2_bundle.go:3373
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3373
		// _ = "end of CoverTab[38413]"
//line /usr/local/go/src/net/http/h2_bundle.go:3373
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:3373
		_go_fuzz_dep_.CoverTab[38414]++
//line /usr/local/go/src/net/http/h2_bundle.go:3373
		// _ = "end of CoverTab[38414]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3374
	// _ = "end of CoverTab[38409]"
//line /usr/local/go/src/net/http/h2_bundle.go:3374
	_go_fuzz_dep_.CoverTab[38410]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:3375
	// _ = "end of CoverTab[38410]"
}

// A SettingID is an HTTP/2 setting as defined in
//line /usr/local/go/src/net/http/h2_bundle.go:3378
// https://httpwg.org/specs/rfc7540.html#iana-settings
//line /usr/local/go/src/net/http/h2_bundle.go:3380
type http2SettingID uint16

const (
	http2SettingHeaderTableSize		http2SettingID	= 0x1
	http2SettingEnablePush			http2SettingID	= 0x2
	http2SettingMaxConcurrentStreams	http2SettingID	= 0x3
	http2SettingInitialWindowSize		http2SettingID	= 0x4
	http2SettingMaxFrameSize		http2SettingID	= 0x5
	http2SettingMaxHeaderListSize		http2SettingID	= 0x6
)

var http2settingName = map[http2SettingID]string{
	http2SettingHeaderTableSize:		"HEADER_TABLE_SIZE",
	http2SettingEnablePush:			"ENABLE_PUSH",
	http2SettingMaxConcurrentStreams:	"MAX_CONCURRENT_STREAMS",
	http2SettingInitialWindowSize:		"INITIAL_WINDOW_SIZE",
	http2SettingMaxFrameSize:		"MAX_FRAME_SIZE",
	http2SettingMaxHeaderListSize:		"MAX_HEADER_LIST_SIZE",
}

func (s http2SettingID) String() string {
//line /usr/local/go/src/net/http/h2_bundle.go:3400
	_go_fuzz_dep_.CoverTab[38423]++
							if v, ok := http2settingName[s]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:3401
		_go_fuzz_dep_.CoverTab[38425]++
								return v
//line /usr/local/go/src/net/http/h2_bundle.go:3402
		// _ = "end of CoverTab[38425]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3403
		_go_fuzz_dep_.CoverTab[38426]++
//line /usr/local/go/src/net/http/h2_bundle.go:3403
		// _ = "end of CoverTab[38426]"
//line /usr/local/go/src/net/http/h2_bundle.go:3403
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3403
	// _ = "end of CoverTab[38423]"
//line /usr/local/go/src/net/http/h2_bundle.go:3403
	_go_fuzz_dep_.CoverTab[38424]++
							return fmt.Sprintf("UNKNOWN_SETTING_%d", uint16(s))
//line /usr/local/go/src/net/http/h2_bundle.go:3404
	// _ = "end of CoverTab[38424]"
}

// validWireHeaderFieldName reports whether v is a valid header field
//line /usr/local/go/src/net/http/h2_bundle.go:3407
// name (key). See httpguts.ValidHeaderName for the base rules.
//line /usr/local/go/src/net/http/h2_bundle.go:3407
//
//line /usr/local/go/src/net/http/h2_bundle.go:3407
// Further, http2 says:
//line /usr/local/go/src/net/http/h2_bundle.go:3407
//
//line /usr/local/go/src/net/http/h2_bundle.go:3407
//	"Just as in HTTP/1.x, header field names are strings of ASCII
//line /usr/local/go/src/net/http/h2_bundle.go:3407
//	characters that are compared in a case-insensitive
//line /usr/local/go/src/net/http/h2_bundle.go:3407
//	fashion. However, header field names MUST be converted to
//line /usr/local/go/src/net/http/h2_bundle.go:3407
//	lowercase prior to their encoding in HTTP/2. "
//line /usr/local/go/src/net/http/h2_bundle.go:3416
func http2validWireHeaderFieldName(v string) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3416
	_go_fuzz_dep_.CoverTab[38427]++
							if len(v) == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:3417
		_go_fuzz_dep_.CoverTab[38430]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:3418
		// _ = "end of CoverTab[38430]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3419
		_go_fuzz_dep_.CoverTab[38431]++
//line /usr/local/go/src/net/http/h2_bundle.go:3419
		// _ = "end of CoverTab[38431]"
//line /usr/local/go/src/net/http/h2_bundle.go:3419
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3419
	// _ = "end of CoverTab[38427]"
//line /usr/local/go/src/net/http/h2_bundle.go:3419
	_go_fuzz_dep_.CoverTab[38428]++
							for _, r := range v {
//line /usr/local/go/src/net/http/h2_bundle.go:3420
		_go_fuzz_dep_.CoverTab[38432]++
								if !httpguts.IsTokenRune(r) {
//line /usr/local/go/src/net/http/h2_bundle.go:3421
			_go_fuzz_dep_.CoverTab[38434]++
									return false
//line /usr/local/go/src/net/http/h2_bundle.go:3422
			// _ = "end of CoverTab[38434]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3423
			_go_fuzz_dep_.CoverTab[38435]++
//line /usr/local/go/src/net/http/h2_bundle.go:3423
			// _ = "end of CoverTab[38435]"
//line /usr/local/go/src/net/http/h2_bundle.go:3423
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3423
		// _ = "end of CoverTab[38432]"
//line /usr/local/go/src/net/http/h2_bundle.go:3423
		_go_fuzz_dep_.CoverTab[38433]++
								if 'A' <= r && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3424
			_go_fuzz_dep_.CoverTab[38436]++
//line /usr/local/go/src/net/http/h2_bundle.go:3424
			return r <= 'Z'
//line /usr/local/go/src/net/http/h2_bundle.go:3424
			// _ = "end of CoverTab[38436]"
//line /usr/local/go/src/net/http/h2_bundle.go:3424
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:3424
			_go_fuzz_dep_.CoverTab[38437]++
									return false
//line /usr/local/go/src/net/http/h2_bundle.go:3425
			// _ = "end of CoverTab[38437]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3426
			_go_fuzz_dep_.CoverTab[38438]++
//line /usr/local/go/src/net/http/h2_bundle.go:3426
			// _ = "end of CoverTab[38438]"
//line /usr/local/go/src/net/http/h2_bundle.go:3426
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3426
		// _ = "end of CoverTab[38433]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3427
	// _ = "end of CoverTab[38428]"
//line /usr/local/go/src/net/http/h2_bundle.go:3427
	_go_fuzz_dep_.CoverTab[38429]++
							return true
//line /usr/local/go/src/net/http/h2_bundle.go:3428
	// _ = "end of CoverTab[38429]"
}

func http2httpCodeString(code int) string {
//line /usr/local/go/src/net/http/h2_bundle.go:3431
	_go_fuzz_dep_.CoverTab[38439]++
							switch code {
	case 200:
//line /usr/local/go/src/net/http/h2_bundle.go:3433
		_go_fuzz_dep_.CoverTab[38441]++
								return "200"
//line /usr/local/go/src/net/http/h2_bundle.go:3434
		// _ = "end of CoverTab[38441]"
	case 404:
//line /usr/local/go/src/net/http/h2_bundle.go:3435
		_go_fuzz_dep_.CoverTab[38442]++
								return "404"
//line /usr/local/go/src/net/http/h2_bundle.go:3436
		// _ = "end of CoverTab[38442]"
//line /usr/local/go/src/net/http/h2_bundle.go:3436
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:3436
		_go_fuzz_dep_.CoverTab[38443]++
//line /usr/local/go/src/net/http/h2_bundle.go:3436
		// _ = "end of CoverTab[38443]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3437
	// _ = "end of CoverTab[38439]"
//line /usr/local/go/src/net/http/h2_bundle.go:3437
	_go_fuzz_dep_.CoverTab[38440]++
							return strconv.Itoa(code)
//line /usr/local/go/src/net/http/h2_bundle.go:3438
	// _ = "end of CoverTab[38440]"
}

// from pkg io
type http2stringWriter interface {
	WriteString(s string) (n int, err error)
}

// A gate lets two goroutines coordinate their activities.
type http2gate chan struct{}

func (g http2gate) Done() {
//line /usr/local/go/src/net/http/h2_bundle.go:3449
	_go_fuzz_dep_.CoverTab[38444]++
//line /usr/local/go/src/net/http/h2_bundle.go:3449
	g <- struct{}{}
//line /usr/local/go/src/net/http/h2_bundle.go:3449
	// _ = "end of CoverTab[38444]"
//line /usr/local/go/src/net/http/h2_bundle.go:3449
}

func (g http2gate) Wait()	{ _go_fuzz_dep_.CoverTab[38445]++; <-g; // _ = "end of CoverTab[38445]" }

// A closeWaiter is like a sync.WaitGroup but only goes 1 to 0 (open to closed).
type http2closeWaiter chan struct{}

// Init makes a closeWaiter usable.
//line /usr/local/go/src/net/http/h2_bundle.go:3456
// It exists because so a closeWaiter value can be placed inside a
//line /usr/local/go/src/net/http/h2_bundle.go:3456
// larger struct and have the Mutex and Cond's memory in the same
//line /usr/local/go/src/net/http/h2_bundle.go:3456
// allocation.
//line /usr/local/go/src/net/http/h2_bundle.go:3460
func (cw *http2closeWaiter) Init() {
//line /usr/local/go/src/net/http/h2_bundle.go:3460
	_go_fuzz_dep_.CoverTab[38446]++
							*cw = make(chan struct{})
//line /usr/local/go/src/net/http/h2_bundle.go:3461
	// _ = "end of CoverTab[38446]"
}

// Close marks the closeWaiter as closed and unblocks any waiters.
func (cw http2closeWaiter) Close() {
//line /usr/local/go/src/net/http/h2_bundle.go:3465
	_go_fuzz_dep_.CoverTab[38447]++
							close(cw)
//line /usr/local/go/src/net/http/h2_bundle.go:3466
	// _ = "end of CoverTab[38447]"
}

// Wait waits for the closeWaiter to become closed.
func (cw http2closeWaiter) Wait() {
//line /usr/local/go/src/net/http/h2_bundle.go:3470
	_go_fuzz_dep_.CoverTab[38448]++
							<-cw
//line /usr/local/go/src/net/http/h2_bundle.go:3471
	// _ = "end of CoverTab[38448]"
}

// bufferedWriter is a buffered writer that writes to w.
//line /usr/local/go/src/net/http/h2_bundle.go:3474
// Its buffered writer is lazily allocated as needed, to minimize
//line /usr/local/go/src/net/http/h2_bundle.go:3474
// idle memory usage with many connections.
//line /usr/local/go/src/net/http/h2_bundle.go:3477
type http2bufferedWriter struct {
	_	http2incomparable
	w	io.Writer	// immutable
	bw	*bufio.Writer	// non-nil when data is buffered
}

func http2newBufferedWriter(w io.Writer) *http2bufferedWriter {
//line /usr/local/go/src/net/http/h2_bundle.go:3483
	_go_fuzz_dep_.CoverTab[38449]++
							return &http2bufferedWriter{w: w}
//line /usr/local/go/src/net/http/h2_bundle.go:3484
	// _ = "end of CoverTab[38449]"
}

// bufWriterPoolBufferSize is the size of bufio.Writer's
//line /usr/local/go/src/net/http/h2_bundle.go:3487
// buffers created using bufWriterPool.
//line /usr/local/go/src/net/http/h2_bundle.go:3487
//
//line /usr/local/go/src/net/http/h2_bundle.go:3487
// TODO: pick a less arbitrary value? this is a bit under
//line /usr/local/go/src/net/http/h2_bundle.go:3487
// (3 x typical 1500 byte MTU) at least. Other than that,
//line /usr/local/go/src/net/http/h2_bundle.go:3487
// not much thought went into it.
//line /usr/local/go/src/net/http/h2_bundle.go:3493
const http2bufWriterPoolBufferSize = 4 << 10

var http2bufWriterPool = sync.Pool{
	New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:3496
		_go_fuzz_dep_.CoverTab[38450]++
								return bufio.NewWriterSize(nil, http2bufWriterPoolBufferSize)
//line /usr/local/go/src/net/http/h2_bundle.go:3497
		// _ = "end of CoverTab[38450]"
	},
}

func (w *http2bufferedWriter) Available() int {
//line /usr/local/go/src/net/http/h2_bundle.go:3501
	_go_fuzz_dep_.CoverTab[38451]++
							if w.bw == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3502
		_go_fuzz_dep_.CoverTab[38453]++
								return http2bufWriterPoolBufferSize
//line /usr/local/go/src/net/http/h2_bundle.go:3503
		// _ = "end of CoverTab[38453]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3504
		_go_fuzz_dep_.CoverTab[38454]++
//line /usr/local/go/src/net/http/h2_bundle.go:3504
		// _ = "end of CoverTab[38454]"
//line /usr/local/go/src/net/http/h2_bundle.go:3504
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3504
	// _ = "end of CoverTab[38451]"
//line /usr/local/go/src/net/http/h2_bundle.go:3504
	_go_fuzz_dep_.CoverTab[38452]++
							return w.bw.Available()
//line /usr/local/go/src/net/http/h2_bundle.go:3505
	// _ = "end of CoverTab[38452]"
}

func (w *http2bufferedWriter) Write(p []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:3508
	_go_fuzz_dep_.CoverTab[38455]++
							if w.bw == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3509
		_go_fuzz_dep_.CoverTab[38457]++
								bw := http2bufWriterPool.Get().(*bufio.Writer)
								bw.Reset(w.w)
								w.bw = bw
//line /usr/local/go/src/net/http/h2_bundle.go:3512
		// _ = "end of CoverTab[38457]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3513
		_go_fuzz_dep_.CoverTab[38458]++
//line /usr/local/go/src/net/http/h2_bundle.go:3513
		// _ = "end of CoverTab[38458]"
//line /usr/local/go/src/net/http/h2_bundle.go:3513
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3513
	// _ = "end of CoverTab[38455]"
//line /usr/local/go/src/net/http/h2_bundle.go:3513
	_go_fuzz_dep_.CoverTab[38456]++
							return w.bw.Write(p)
//line /usr/local/go/src/net/http/h2_bundle.go:3514
	// _ = "end of CoverTab[38456]"
}

func (w *http2bufferedWriter) Flush() error {
//line /usr/local/go/src/net/http/h2_bundle.go:3517
	_go_fuzz_dep_.CoverTab[38459]++
							bw := w.bw
							if bw == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3519
		_go_fuzz_dep_.CoverTab[38461]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:3520
		// _ = "end of CoverTab[38461]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3521
		_go_fuzz_dep_.CoverTab[38462]++
//line /usr/local/go/src/net/http/h2_bundle.go:3521
		// _ = "end of CoverTab[38462]"
//line /usr/local/go/src/net/http/h2_bundle.go:3521
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3521
	// _ = "end of CoverTab[38459]"
//line /usr/local/go/src/net/http/h2_bundle.go:3521
	_go_fuzz_dep_.CoverTab[38460]++
							err := bw.Flush()
							bw.Reset(nil)
							http2bufWriterPool.Put(bw)
							w.bw = nil
							return err
//line /usr/local/go/src/net/http/h2_bundle.go:3526
	// _ = "end of CoverTab[38460]"
}

func http2mustUint31(v int32) uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:3529
	_go_fuzz_dep_.CoverTab[38463]++
							if v < 0 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3530
		_go_fuzz_dep_.CoverTab[38465]++
//line /usr/local/go/src/net/http/h2_bundle.go:3530
		return v > 2147483647
//line /usr/local/go/src/net/http/h2_bundle.go:3530
		// _ = "end of CoverTab[38465]"
//line /usr/local/go/src/net/http/h2_bundle.go:3530
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:3530
		_go_fuzz_dep_.CoverTab[38466]++
								panic("out of range")
//line /usr/local/go/src/net/http/h2_bundle.go:3531
		// _ = "end of CoverTab[38466]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3532
		_go_fuzz_dep_.CoverTab[38467]++
//line /usr/local/go/src/net/http/h2_bundle.go:3532
		// _ = "end of CoverTab[38467]"
//line /usr/local/go/src/net/http/h2_bundle.go:3532
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3532
	// _ = "end of CoverTab[38463]"
//line /usr/local/go/src/net/http/h2_bundle.go:3532
	_go_fuzz_dep_.CoverTab[38464]++
							return uint32(v)
//line /usr/local/go/src/net/http/h2_bundle.go:3533
	// _ = "end of CoverTab[38464]"
}

// bodyAllowedForStatus reports whether a given response status code
//line /usr/local/go/src/net/http/h2_bundle.go:3536
// permits a body. See RFC 7230, section 3.3.
//line /usr/local/go/src/net/http/h2_bundle.go:3538
func http2bodyAllowedForStatus(status int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3538
	_go_fuzz_dep_.CoverTab[38468]++
							switch {
	case status >= 100 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3540
		_go_fuzz_dep_.CoverTab[38474]++
//line /usr/local/go/src/net/http/h2_bundle.go:3540
		return status <= 199
//line /usr/local/go/src/net/http/h2_bundle.go:3540
		// _ = "end of CoverTab[38474]"
//line /usr/local/go/src/net/http/h2_bundle.go:3540
	}():
//line /usr/local/go/src/net/http/h2_bundle.go:3540
		_go_fuzz_dep_.CoverTab[38470]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:3541
		// _ = "end of CoverTab[38470]"
	case status == 204:
//line /usr/local/go/src/net/http/h2_bundle.go:3542
		_go_fuzz_dep_.CoverTab[38471]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:3543
		// _ = "end of CoverTab[38471]"
	case status == 304:
//line /usr/local/go/src/net/http/h2_bundle.go:3544
		_go_fuzz_dep_.CoverTab[38472]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:3545
		// _ = "end of CoverTab[38472]"
//line /usr/local/go/src/net/http/h2_bundle.go:3545
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:3545
		_go_fuzz_dep_.CoverTab[38473]++
//line /usr/local/go/src/net/http/h2_bundle.go:3545
		// _ = "end of CoverTab[38473]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3546
	// _ = "end of CoverTab[38468]"
//line /usr/local/go/src/net/http/h2_bundle.go:3546
	_go_fuzz_dep_.CoverTab[38469]++
							return true
//line /usr/local/go/src/net/http/h2_bundle.go:3547
	// _ = "end of CoverTab[38469]"
}

type http2httpError struct {
	_	http2incomparable
	msg	string
	timeout	bool
}

func (e *http2httpError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:3556
	_go_fuzz_dep_.CoverTab[38475]++
//line /usr/local/go/src/net/http/h2_bundle.go:3556
	return e.msg
//line /usr/local/go/src/net/http/h2_bundle.go:3556
	// _ = "end of CoverTab[38475]"
//line /usr/local/go/src/net/http/h2_bundle.go:3556
}

func (e *http2httpError) Timeout() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3558
	_go_fuzz_dep_.CoverTab[38476]++
//line /usr/local/go/src/net/http/h2_bundle.go:3558
	return e.timeout
//line /usr/local/go/src/net/http/h2_bundle.go:3558
	// _ = "end of CoverTab[38476]"
//line /usr/local/go/src/net/http/h2_bundle.go:3558
}

func (e *http2httpError) Temporary() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3560
	_go_fuzz_dep_.CoverTab[38477]++
//line /usr/local/go/src/net/http/h2_bundle.go:3560
	return true
//line /usr/local/go/src/net/http/h2_bundle.go:3560
	// _ = "end of CoverTab[38477]"
//line /usr/local/go/src/net/http/h2_bundle.go:3560
}

var http2errTimeout error = &http2httpError{msg: "http2: timeout awaiting response headers", timeout: true}

type http2connectionStater interface {
	ConnectionState() tls.ConnectionState
}

var http2sorterPool = sync.Pool{New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:3568
	_go_fuzz_dep_.CoverTab[38478]++
//line /usr/local/go/src/net/http/h2_bundle.go:3568
	return new(http2sorter)
//line /usr/local/go/src/net/http/h2_bundle.go:3568
	// _ = "end of CoverTab[38478]"
//line /usr/local/go/src/net/http/h2_bundle.go:3568
}}

type http2sorter struct {
	v []string	// owned by sorter
}

func (s *http2sorter) Len() int {
//line /usr/local/go/src/net/http/h2_bundle.go:3574
	_go_fuzz_dep_.CoverTab[38479]++
//line /usr/local/go/src/net/http/h2_bundle.go:3574
	return len(s.v)
//line /usr/local/go/src/net/http/h2_bundle.go:3574
	// _ = "end of CoverTab[38479]"
//line /usr/local/go/src/net/http/h2_bundle.go:3574
}

func (s *http2sorter) Swap(i, j int) {
//line /usr/local/go/src/net/http/h2_bundle.go:3576
	_go_fuzz_dep_.CoverTab[38480]++
//line /usr/local/go/src/net/http/h2_bundle.go:3576
	s.v[i], s.v[j] = s.v[j], s.v[i]
//line /usr/local/go/src/net/http/h2_bundle.go:3576
	// _ = "end of CoverTab[38480]"
//line /usr/local/go/src/net/http/h2_bundle.go:3576
}

func (s *http2sorter) Less(i, j int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3578
	_go_fuzz_dep_.CoverTab[38481]++
//line /usr/local/go/src/net/http/h2_bundle.go:3578
	return s.v[i] < s.v[j]
//line /usr/local/go/src/net/http/h2_bundle.go:3578
	// _ = "end of CoverTab[38481]"
//line /usr/local/go/src/net/http/h2_bundle.go:3578
}

// Keys returns the sorted keys of h.
//line /usr/local/go/src/net/http/h2_bundle.go:3580
//
//line /usr/local/go/src/net/http/h2_bundle.go:3580
// The returned slice is only valid until s used again or returned to
//line /usr/local/go/src/net/http/h2_bundle.go:3580
// its pool.
//line /usr/local/go/src/net/http/h2_bundle.go:3584
func (s *http2sorter) Keys(h Header) []string {
//line /usr/local/go/src/net/http/h2_bundle.go:3584
	_go_fuzz_dep_.CoverTab[38482]++
							keys := s.v[:0]
							for k := range h {
//line /usr/local/go/src/net/http/h2_bundle.go:3586
		_go_fuzz_dep_.CoverTab[38484]++
								keys = append(keys, k)
//line /usr/local/go/src/net/http/h2_bundle.go:3587
		// _ = "end of CoverTab[38484]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3588
	// _ = "end of CoverTab[38482]"
//line /usr/local/go/src/net/http/h2_bundle.go:3588
	_go_fuzz_dep_.CoverTab[38483]++
							s.v = keys
							sort.Sort(s)
							return keys
//line /usr/local/go/src/net/http/h2_bundle.go:3591
	// _ = "end of CoverTab[38483]"
}

func (s *http2sorter) SortStrings(ss []string) {
//line /usr/local/go/src/net/http/h2_bundle.go:3594
	_go_fuzz_dep_.CoverTab[38485]++

//line /usr/local/go/src/net/http/h2_bundle.go:3597
	save := s.v
							s.v = ss
							sort.Sort(s)
							s.v = save
//line /usr/local/go/src/net/http/h2_bundle.go:3600
	// _ = "end of CoverTab[38485]"
}

// validPseudoPath reports whether v is a valid :path pseudo-header
//line /usr/local/go/src/net/http/h2_bundle.go:3603
// value. It must be either:
//line /usr/local/go/src/net/http/h2_bundle.go:3603
//
//line /usr/local/go/src/net/http/h2_bundle.go:3603
//   - a non-empty string starting with '/'
//line /usr/local/go/src/net/http/h2_bundle.go:3603
//   - the string '*', for OPTIONS requests.
//line /usr/local/go/src/net/http/h2_bundle.go:3603
//
//line /usr/local/go/src/net/http/h2_bundle.go:3603
// For now this is only used a quick check for deciding when to clean
//line /usr/local/go/src/net/http/h2_bundle.go:3603
// up Opaque URLs before sending requests from the Transport.
//line /usr/local/go/src/net/http/h2_bundle.go:3603
// See golang.org/issue/16847
//line /usr/local/go/src/net/http/h2_bundle.go:3603
//
//line /usr/local/go/src/net/http/h2_bundle.go:3603
// We used to enforce that the path also didn't start with "//", but
//line /usr/local/go/src/net/http/h2_bundle.go:3603
// Google's GFE accepts such paths and Chrome sends them, so ignore
//line /usr/local/go/src/net/http/h2_bundle.go:3603
// that part of the spec. See golang.org/issue/19103.
//line /usr/local/go/src/net/http/h2_bundle.go:3616
func http2validPseudoPath(v string) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3616
	_go_fuzz_dep_.CoverTab[38486]++
							return (len(v) > 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3617
		_go_fuzz_dep_.CoverTab[38487]++
//line /usr/local/go/src/net/http/h2_bundle.go:3617
		return v[0] == '/'
//line /usr/local/go/src/net/http/h2_bundle.go:3617
		// _ = "end of CoverTab[38487]"
//line /usr/local/go/src/net/http/h2_bundle.go:3617
	}()) || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3617
		_go_fuzz_dep_.CoverTab[38488]++
//line /usr/local/go/src/net/http/h2_bundle.go:3617
		return v == "*"
//line /usr/local/go/src/net/http/h2_bundle.go:3617
		// _ = "end of CoverTab[38488]"
//line /usr/local/go/src/net/http/h2_bundle.go:3617
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:3617
	// _ = "end of CoverTab[38486]"
}

// incomparable is a zero-width, non-comparable type. Adding it to a struct
//line /usr/local/go/src/net/http/h2_bundle.go:3620
// makes that struct also non-comparable, and generally doesn't add
//line /usr/local/go/src/net/http/h2_bundle.go:3620
// any size (as long as it's first).
//line /usr/local/go/src/net/http/h2_bundle.go:3623
type http2incomparable [0]func()

// pipe is a goroutine-safe io.Reader/io.Writer pair. It's like
//line /usr/local/go/src/net/http/h2_bundle.go:3625
// io.Pipe except there are no PipeReader/PipeWriter halves, and the
//line /usr/local/go/src/net/http/h2_bundle.go:3625
// underlying buffer is an interface. (io.Pipe is always unbuffered)
//line /usr/local/go/src/net/http/h2_bundle.go:3628
type http2pipe struct {
	mu		sync.Mutex
	c		sync.Cond	// c.L lazily initialized to &p.mu
	b		http2pipeBuffer	// nil when done reading
	unread		int		// bytes unread when done
	err		error		// read error once empty. non-nil means closed.
	breakErr	error		// immediate read error (caller doesn't see rest of b)
	donec		chan struct{}	// closed on error
	readFn		func()		// optional code to run in Read before error
}

type http2pipeBuffer interface {
	Len() int
	io.Writer
	io.Reader
}

// setBuffer initializes the pipe buffer.
//line /usr/local/go/src/net/http/h2_bundle.go:3645
// It has no effect if the pipe is already closed.
//line /usr/local/go/src/net/http/h2_bundle.go:3647
func (p *http2pipe) setBuffer(b http2pipeBuffer) {
//line /usr/local/go/src/net/http/h2_bundle.go:3647
	_go_fuzz_dep_.CoverTab[38489]++
							p.mu.Lock()
							defer p.mu.Unlock()
							if p.err != nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3650
		_go_fuzz_dep_.CoverTab[38491]++
//line /usr/local/go/src/net/http/h2_bundle.go:3650
		return p.breakErr != nil
//line /usr/local/go/src/net/http/h2_bundle.go:3650
		// _ = "end of CoverTab[38491]"
//line /usr/local/go/src/net/http/h2_bundle.go:3650
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:3650
		_go_fuzz_dep_.CoverTab[38492]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:3651
		// _ = "end of CoverTab[38492]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3652
		_go_fuzz_dep_.CoverTab[38493]++
//line /usr/local/go/src/net/http/h2_bundle.go:3652
		// _ = "end of CoverTab[38493]"
//line /usr/local/go/src/net/http/h2_bundle.go:3652
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3652
	// _ = "end of CoverTab[38489]"
//line /usr/local/go/src/net/http/h2_bundle.go:3652
	_go_fuzz_dep_.CoverTab[38490]++
							p.b = b
//line /usr/local/go/src/net/http/h2_bundle.go:3653
	// _ = "end of CoverTab[38490]"
}

func (p *http2pipe) Len() int {
//line /usr/local/go/src/net/http/h2_bundle.go:3656
	_go_fuzz_dep_.CoverTab[38494]++
							p.mu.Lock()
							defer p.mu.Unlock()
							if p.b == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3659
		_go_fuzz_dep_.CoverTab[38496]++
								return p.unread
//line /usr/local/go/src/net/http/h2_bundle.go:3660
		// _ = "end of CoverTab[38496]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3661
		_go_fuzz_dep_.CoverTab[38497]++
//line /usr/local/go/src/net/http/h2_bundle.go:3661
		// _ = "end of CoverTab[38497]"
//line /usr/local/go/src/net/http/h2_bundle.go:3661
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3661
	// _ = "end of CoverTab[38494]"
//line /usr/local/go/src/net/http/h2_bundle.go:3661
	_go_fuzz_dep_.CoverTab[38495]++
							return p.b.Len()
//line /usr/local/go/src/net/http/h2_bundle.go:3662
	// _ = "end of CoverTab[38495]"
}

// Read waits until data is available and copies bytes
//line /usr/local/go/src/net/http/h2_bundle.go:3665
// from the buffer into p.
//line /usr/local/go/src/net/http/h2_bundle.go:3667
func (p *http2pipe) Read(d []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:3667
	_go_fuzz_dep_.CoverTab[38498]++
							p.mu.Lock()
							defer p.mu.Unlock()
							if p.c.L == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3670
		_go_fuzz_dep_.CoverTab[38500]++
								p.c.L = &p.mu
//line /usr/local/go/src/net/http/h2_bundle.go:3671
		// _ = "end of CoverTab[38500]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3672
		_go_fuzz_dep_.CoverTab[38501]++
//line /usr/local/go/src/net/http/h2_bundle.go:3672
		// _ = "end of CoverTab[38501]"
//line /usr/local/go/src/net/http/h2_bundle.go:3672
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3672
	// _ = "end of CoverTab[38498]"
//line /usr/local/go/src/net/http/h2_bundle.go:3672
	_go_fuzz_dep_.CoverTab[38499]++
							for {
//line /usr/local/go/src/net/http/h2_bundle.go:3673
		_go_fuzz_dep_.CoverTab[38502]++
								if p.breakErr != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3674
			_go_fuzz_dep_.CoverTab[38506]++
									return 0, p.breakErr
//line /usr/local/go/src/net/http/h2_bundle.go:3675
			// _ = "end of CoverTab[38506]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3676
			_go_fuzz_dep_.CoverTab[38507]++
//line /usr/local/go/src/net/http/h2_bundle.go:3676
			// _ = "end of CoverTab[38507]"
//line /usr/local/go/src/net/http/h2_bundle.go:3676
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3676
		// _ = "end of CoverTab[38502]"
//line /usr/local/go/src/net/http/h2_bundle.go:3676
		_go_fuzz_dep_.CoverTab[38503]++
								if p.b != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3677
			_go_fuzz_dep_.CoverTab[38508]++
//line /usr/local/go/src/net/http/h2_bundle.go:3677
			return p.b.Len() > 0
//line /usr/local/go/src/net/http/h2_bundle.go:3677
			// _ = "end of CoverTab[38508]"
//line /usr/local/go/src/net/http/h2_bundle.go:3677
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:3677
			_go_fuzz_dep_.CoverTab[38509]++
									return p.b.Read(d)
//line /usr/local/go/src/net/http/h2_bundle.go:3678
			// _ = "end of CoverTab[38509]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3679
			_go_fuzz_dep_.CoverTab[38510]++
//line /usr/local/go/src/net/http/h2_bundle.go:3679
			// _ = "end of CoverTab[38510]"
//line /usr/local/go/src/net/http/h2_bundle.go:3679
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3679
		// _ = "end of CoverTab[38503]"
//line /usr/local/go/src/net/http/h2_bundle.go:3679
		_go_fuzz_dep_.CoverTab[38504]++
								if p.err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3680
			_go_fuzz_dep_.CoverTab[38511]++
									if p.readFn != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3681
				_go_fuzz_dep_.CoverTab[38513]++
										p.readFn()
										p.readFn = nil
//line /usr/local/go/src/net/http/h2_bundle.go:3683
				// _ = "end of CoverTab[38513]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3684
				_go_fuzz_dep_.CoverTab[38514]++
//line /usr/local/go/src/net/http/h2_bundle.go:3684
				// _ = "end of CoverTab[38514]"
//line /usr/local/go/src/net/http/h2_bundle.go:3684
			}
//line /usr/local/go/src/net/http/h2_bundle.go:3684
			// _ = "end of CoverTab[38511]"
//line /usr/local/go/src/net/http/h2_bundle.go:3684
			_go_fuzz_dep_.CoverTab[38512]++
									p.b = nil
									return 0, p.err
//line /usr/local/go/src/net/http/h2_bundle.go:3686
			// _ = "end of CoverTab[38512]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3687
			_go_fuzz_dep_.CoverTab[38515]++
//line /usr/local/go/src/net/http/h2_bundle.go:3687
			// _ = "end of CoverTab[38515]"
//line /usr/local/go/src/net/http/h2_bundle.go:3687
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3687
		// _ = "end of CoverTab[38504]"
//line /usr/local/go/src/net/http/h2_bundle.go:3687
		_go_fuzz_dep_.CoverTab[38505]++
								p.c.Wait()
//line /usr/local/go/src/net/http/h2_bundle.go:3688
		// _ = "end of CoverTab[38505]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3689
	// _ = "end of CoverTab[38499]"
}

var http2errClosedPipeWrite = errors.New("write on closed buffer")

// Write copies bytes from p into the buffer and wakes a reader.
//line /usr/local/go/src/net/http/h2_bundle.go:3694
// It is an error to write more data than the buffer can hold.
//line /usr/local/go/src/net/http/h2_bundle.go:3696
func (p *http2pipe) Write(d []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:3696
	_go_fuzz_dep_.CoverTab[38516]++
							p.mu.Lock()
							defer p.mu.Unlock()
							if p.c.L == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3699
		_go_fuzz_dep_.CoverTab[38520]++
								p.c.L = &p.mu
//line /usr/local/go/src/net/http/h2_bundle.go:3700
		// _ = "end of CoverTab[38520]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3701
		_go_fuzz_dep_.CoverTab[38521]++
//line /usr/local/go/src/net/http/h2_bundle.go:3701
		// _ = "end of CoverTab[38521]"
//line /usr/local/go/src/net/http/h2_bundle.go:3701
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3701
	// _ = "end of CoverTab[38516]"
//line /usr/local/go/src/net/http/h2_bundle.go:3701
	_go_fuzz_dep_.CoverTab[38517]++
							defer p.c.Signal()
							if p.err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3703
		_go_fuzz_dep_.CoverTab[38522]++
								return 0, http2errClosedPipeWrite
//line /usr/local/go/src/net/http/h2_bundle.go:3704
		// _ = "end of CoverTab[38522]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3705
		_go_fuzz_dep_.CoverTab[38523]++
//line /usr/local/go/src/net/http/h2_bundle.go:3705
		// _ = "end of CoverTab[38523]"
//line /usr/local/go/src/net/http/h2_bundle.go:3705
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3705
	// _ = "end of CoverTab[38517]"
//line /usr/local/go/src/net/http/h2_bundle.go:3705
	_go_fuzz_dep_.CoverTab[38518]++
							if p.breakErr != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3706
		_go_fuzz_dep_.CoverTab[38524]++
								p.unread += len(d)
								return len(d), nil
//line /usr/local/go/src/net/http/h2_bundle.go:3708
		// _ = "end of CoverTab[38524]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3709
		_go_fuzz_dep_.CoverTab[38525]++
//line /usr/local/go/src/net/http/h2_bundle.go:3709
		// _ = "end of CoverTab[38525]"
//line /usr/local/go/src/net/http/h2_bundle.go:3709
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3709
	// _ = "end of CoverTab[38518]"
//line /usr/local/go/src/net/http/h2_bundle.go:3709
	_go_fuzz_dep_.CoverTab[38519]++
							return p.b.Write(d)
//line /usr/local/go/src/net/http/h2_bundle.go:3710
	// _ = "end of CoverTab[38519]"
}

// CloseWithError causes the next Read (waking up a current blocked
//line /usr/local/go/src/net/http/h2_bundle.go:3713
// Read if needed) to return the provided err after all data has been
//line /usr/local/go/src/net/http/h2_bundle.go:3713
// read.
//line /usr/local/go/src/net/http/h2_bundle.go:3713
//
//line /usr/local/go/src/net/http/h2_bundle.go:3713
// The error must be non-nil.
//line /usr/local/go/src/net/http/h2_bundle.go:3718
func (p *http2pipe) CloseWithError(err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:3718
	_go_fuzz_dep_.CoverTab[38526]++
//line /usr/local/go/src/net/http/h2_bundle.go:3718
	p.closeWithError(&p.err, err, nil)
//line /usr/local/go/src/net/http/h2_bundle.go:3718
	// _ = "end of CoverTab[38526]"
//line /usr/local/go/src/net/http/h2_bundle.go:3718
}

// BreakWithError causes the next Read (waking up a current blocked
//line /usr/local/go/src/net/http/h2_bundle.go:3720
// Read if needed) to return the provided err immediately, without
//line /usr/local/go/src/net/http/h2_bundle.go:3720
// waiting for unread data.
//line /usr/local/go/src/net/http/h2_bundle.go:3723
func (p *http2pipe) BreakWithError(err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:3723
	_go_fuzz_dep_.CoverTab[38527]++
//line /usr/local/go/src/net/http/h2_bundle.go:3723
	p.closeWithError(&p.breakErr, err, nil)
//line /usr/local/go/src/net/http/h2_bundle.go:3723
	// _ = "end of CoverTab[38527]"
//line /usr/local/go/src/net/http/h2_bundle.go:3723
}

// closeWithErrorAndCode is like CloseWithError but also sets some code to run
//line /usr/local/go/src/net/http/h2_bundle.go:3725
// in the caller's goroutine before returning the error.
//line /usr/local/go/src/net/http/h2_bundle.go:3727
func (p *http2pipe) closeWithErrorAndCode(err error, fn func()) {
//line /usr/local/go/src/net/http/h2_bundle.go:3727
	_go_fuzz_dep_.CoverTab[38528]++
//line /usr/local/go/src/net/http/h2_bundle.go:3727
	p.closeWithError(&p.err, err, fn)
//line /usr/local/go/src/net/http/h2_bundle.go:3727
	// _ = "end of CoverTab[38528]"
//line /usr/local/go/src/net/http/h2_bundle.go:3727
}

func (p *http2pipe) closeWithError(dst *error, err error, fn func()) {
//line /usr/local/go/src/net/http/h2_bundle.go:3729
	_go_fuzz_dep_.CoverTab[38529]++
							if err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3730
		_go_fuzz_dep_.CoverTab[38534]++
								panic("err must be non-nil")
//line /usr/local/go/src/net/http/h2_bundle.go:3731
		// _ = "end of CoverTab[38534]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3732
		_go_fuzz_dep_.CoverTab[38535]++
//line /usr/local/go/src/net/http/h2_bundle.go:3732
		// _ = "end of CoverTab[38535]"
//line /usr/local/go/src/net/http/h2_bundle.go:3732
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3732
	// _ = "end of CoverTab[38529]"
//line /usr/local/go/src/net/http/h2_bundle.go:3732
	_go_fuzz_dep_.CoverTab[38530]++
							p.mu.Lock()
							defer p.mu.Unlock()
							if p.c.L == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3735
		_go_fuzz_dep_.CoverTab[38536]++
								p.c.L = &p.mu
//line /usr/local/go/src/net/http/h2_bundle.go:3736
		// _ = "end of CoverTab[38536]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3737
		_go_fuzz_dep_.CoverTab[38537]++
//line /usr/local/go/src/net/http/h2_bundle.go:3737
		// _ = "end of CoverTab[38537]"
//line /usr/local/go/src/net/http/h2_bundle.go:3737
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3737
	// _ = "end of CoverTab[38530]"
//line /usr/local/go/src/net/http/h2_bundle.go:3737
	_go_fuzz_dep_.CoverTab[38531]++
							defer p.c.Signal()
							if *dst != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3739
		_go_fuzz_dep_.CoverTab[38538]++

								return
//line /usr/local/go/src/net/http/h2_bundle.go:3741
		// _ = "end of CoverTab[38538]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3742
		_go_fuzz_dep_.CoverTab[38539]++
//line /usr/local/go/src/net/http/h2_bundle.go:3742
		// _ = "end of CoverTab[38539]"
//line /usr/local/go/src/net/http/h2_bundle.go:3742
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3742
	// _ = "end of CoverTab[38531]"
//line /usr/local/go/src/net/http/h2_bundle.go:3742
	_go_fuzz_dep_.CoverTab[38532]++
							p.readFn = fn
							if dst == &p.breakErr {
//line /usr/local/go/src/net/http/h2_bundle.go:3744
		_go_fuzz_dep_.CoverTab[38540]++
								if p.b != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3745
			_go_fuzz_dep_.CoverTab[38542]++
									p.unread += p.b.Len()
//line /usr/local/go/src/net/http/h2_bundle.go:3746
			// _ = "end of CoverTab[38542]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3747
			_go_fuzz_dep_.CoverTab[38543]++
//line /usr/local/go/src/net/http/h2_bundle.go:3747
			// _ = "end of CoverTab[38543]"
//line /usr/local/go/src/net/http/h2_bundle.go:3747
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3747
		// _ = "end of CoverTab[38540]"
//line /usr/local/go/src/net/http/h2_bundle.go:3747
		_go_fuzz_dep_.CoverTab[38541]++
								p.b = nil
//line /usr/local/go/src/net/http/h2_bundle.go:3748
		// _ = "end of CoverTab[38541]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3749
		_go_fuzz_dep_.CoverTab[38544]++
//line /usr/local/go/src/net/http/h2_bundle.go:3749
		// _ = "end of CoverTab[38544]"
//line /usr/local/go/src/net/http/h2_bundle.go:3749
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3749
	// _ = "end of CoverTab[38532]"
//line /usr/local/go/src/net/http/h2_bundle.go:3749
	_go_fuzz_dep_.CoverTab[38533]++
							*dst = err
							p.closeDoneLocked()
//line /usr/local/go/src/net/http/h2_bundle.go:3751
	// _ = "end of CoverTab[38533]"
}

// requires p.mu be held.
func (p *http2pipe) closeDoneLocked() {
//line /usr/local/go/src/net/http/h2_bundle.go:3755
	_go_fuzz_dep_.CoverTab[38545]++
							if p.donec == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3756
		_go_fuzz_dep_.CoverTab[38547]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:3757
		// _ = "end of CoverTab[38547]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3758
		_go_fuzz_dep_.CoverTab[38548]++
//line /usr/local/go/src/net/http/h2_bundle.go:3758
		// _ = "end of CoverTab[38548]"
//line /usr/local/go/src/net/http/h2_bundle.go:3758
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3758
	// _ = "end of CoverTab[38545]"
//line /usr/local/go/src/net/http/h2_bundle.go:3758
	_go_fuzz_dep_.CoverTab[38546]++

//line /usr/local/go/src/net/http/h2_bundle.go:3761
	select {
	case <-p.donec:
//line /usr/local/go/src/net/http/h2_bundle.go:3762
		_go_fuzz_dep_.CoverTab[38549]++
//line /usr/local/go/src/net/http/h2_bundle.go:3762
		// _ = "end of CoverTab[38549]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:3763
		_go_fuzz_dep_.CoverTab[38550]++
								close(p.donec)
//line /usr/local/go/src/net/http/h2_bundle.go:3764
		// _ = "end of CoverTab[38550]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3765
	// _ = "end of CoverTab[38546]"
}

// Err returns the error (if any) first set by BreakWithError or CloseWithError.
func (p *http2pipe) Err() error {
//line /usr/local/go/src/net/http/h2_bundle.go:3769
	_go_fuzz_dep_.CoverTab[38551]++
							p.mu.Lock()
							defer p.mu.Unlock()
							if p.breakErr != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3772
		_go_fuzz_dep_.CoverTab[38553]++
								return p.breakErr
//line /usr/local/go/src/net/http/h2_bundle.go:3773
		// _ = "end of CoverTab[38553]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3774
		_go_fuzz_dep_.CoverTab[38554]++
//line /usr/local/go/src/net/http/h2_bundle.go:3774
		// _ = "end of CoverTab[38554]"
//line /usr/local/go/src/net/http/h2_bundle.go:3774
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3774
	// _ = "end of CoverTab[38551]"
//line /usr/local/go/src/net/http/h2_bundle.go:3774
	_go_fuzz_dep_.CoverTab[38552]++
							return p.err
//line /usr/local/go/src/net/http/h2_bundle.go:3775
	// _ = "end of CoverTab[38552]"
}

// Done returns a channel which is closed if and when this pipe is closed
//line /usr/local/go/src/net/http/h2_bundle.go:3778
// with CloseWithError.
//line /usr/local/go/src/net/http/h2_bundle.go:3780
func (p *http2pipe) Done() <-chan struct{} {
//line /usr/local/go/src/net/http/h2_bundle.go:3780
	_go_fuzz_dep_.CoverTab[38555]++
							p.mu.Lock()
							defer p.mu.Unlock()
							if p.donec == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3783
		_go_fuzz_dep_.CoverTab[38557]++
								p.donec = make(chan struct{})
								if p.err != nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3785
			_go_fuzz_dep_.CoverTab[38558]++
//line /usr/local/go/src/net/http/h2_bundle.go:3785
			return p.breakErr != nil
//line /usr/local/go/src/net/http/h2_bundle.go:3785
			// _ = "end of CoverTab[38558]"
//line /usr/local/go/src/net/http/h2_bundle.go:3785
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:3785
			_go_fuzz_dep_.CoverTab[38559]++

									p.closeDoneLocked()
//line /usr/local/go/src/net/http/h2_bundle.go:3787
			// _ = "end of CoverTab[38559]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3788
			_go_fuzz_dep_.CoverTab[38560]++
//line /usr/local/go/src/net/http/h2_bundle.go:3788
			// _ = "end of CoverTab[38560]"
//line /usr/local/go/src/net/http/h2_bundle.go:3788
		}
//line /usr/local/go/src/net/http/h2_bundle.go:3788
		// _ = "end of CoverTab[38557]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3789
		_go_fuzz_dep_.CoverTab[38561]++
//line /usr/local/go/src/net/http/h2_bundle.go:3789
		// _ = "end of CoverTab[38561]"
//line /usr/local/go/src/net/http/h2_bundle.go:3789
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3789
	// _ = "end of CoverTab[38555]"
//line /usr/local/go/src/net/http/h2_bundle.go:3789
	_go_fuzz_dep_.CoverTab[38556]++
							return p.donec
//line /usr/local/go/src/net/http/h2_bundle.go:3790
	// _ = "end of CoverTab[38556]"
}

const (
	http2prefaceTimeout		= 10 * time.Second
	http2firstSettingsTimeout	= 2 * time.Second	// should be in-flight with preface anyway
	http2handlerChunkWriteSize	= 4 << 10
	http2defaultMaxStreams		= 250	// TODO: make this 100 as the GFE seems to?
	http2maxQueuedControlFrames	= 10000
)

var (
	http2errClientDisconnected	= errors.New("client disconnected")
	http2errClosedBody		= errors.New("body closed by handler")
	http2errHandlerComplete		= errors.New("http2: request body closed due to handler exiting")
	http2errStreamClosed		= errors.New("http2: stream closed")
)

var http2responseWriterStatePool = sync.Pool{
	New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:3809
		_go_fuzz_dep_.CoverTab[38562]++
								rws := &http2responseWriterState{}
								rws.bw = bufio.NewWriterSize(http2chunkWriter{rws}, http2handlerChunkWriteSize)
								return rws
//line /usr/local/go/src/net/http/h2_bundle.go:3812
		// _ = "end of CoverTab[38562]"
	},
}

// Test hooks.
var (
	http2testHookOnConn		func()
	http2testHookGetServerConn	func(*http2serverConn)
	http2testHookOnPanicMu		*sync.Mutex	// nil except in tests
	http2testHookOnPanic		func(sc *http2serverConn, panicVal interface{}) (rePanic bool)
)

// Server is an HTTP/2 server.
type http2Server struct {
	// MaxHandlers limits the number of http.Handler ServeHTTP goroutines
	// which may run at a time over all connections.
	// Negative or zero no limit.
	// TODO: implement
	MaxHandlers	int

	// MaxConcurrentStreams optionally specifies the number of
	// concurrent streams that each client may have open at a
	// time. This is unrelated to the number of http.Handler goroutines
	// which may be active globally, which is MaxHandlers.
	// If zero, MaxConcurrentStreams defaults to at least 100, per
	// the HTTP/2 spec's recommendations.
	MaxConcurrentStreams	uint32

	// MaxDecoderHeaderTableSize optionally specifies the http2
	// SETTINGS_HEADER_TABLE_SIZE to send in the initial settings frame. It
	// informs the remote endpoint of the maximum size of the header compression
	// table used to decode header blocks, in octets. If zero, the default value
	// of 4096 is used.
	MaxDecoderHeaderTableSize	uint32

	// MaxEncoderHeaderTableSize optionally specifies an upper limit for the
	// header compression table used for encoding request headers. Received
	// SETTINGS_HEADER_TABLE_SIZE settings are capped at this limit. If zero,
	// the default value of 4096 is used.
	MaxEncoderHeaderTableSize	uint32

	// MaxReadFrameSize optionally specifies the largest frame
	// this server is willing to read. A valid value is between
	// 16k and 16M, inclusive. If zero or otherwise invalid, a
	// default value is used.
	MaxReadFrameSize	uint32

	// PermitProhibitedCipherSuites, if true, permits the use of
	// cipher suites prohibited by the HTTP/2 spec.
	PermitProhibitedCipherSuites	bool

	// IdleTimeout specifies how long until idle clients should be
	// closed with a GOAWAY frame. PING frames are not considered
	// activity for the purposes of IdleTimeout.
	IdleTimeout	time.Duration

	// MaxUploadBufferPerConnection is the size of the initial flow
	// control window for each connections. The HTTP/2 spec does not
	// allow this to be smaller than 65535 or larger than 2^32-1.
	// If the value is outside this range, a default value will be
	// used instead.
	MaxUploadBufferPerConnection	int32

	// MaxUploadBufferPerStream is the size of the initial flow control
	// window for each stream. The HTTP/2 spec does not allow this to
	// be larger than 2^32-1. If the value is zero or larger than the
	// maximum, a default value will be used instead.
	MaxUploadBufferPerStream	int32

	// NewWriteScheduler constructs a write scheduler for a connection.
	// If nil, a default scheduler is chosen.
	NewWriteScheduler	func() http2WriteScheduler

	// CountError, if non-nil, is called on HTTP/2 server errors.
	// It's intended to increment a metric for monitoring, such
	// as an expvar or Prometheus metric.
	// The errType consists of only ASCII word characters.
	CountError	func(errType string)

	// Internal state. This is a pointer (rather than embedded directly)
	// so that we don't embed a Mutex in this struct, which will make the
	// struct non-copyable, which might break some callers.
	state	*http2serverInternalState
}

func (s *http2Server) initialConnRecvWindowSize() int32 {
//line /usr/local/go/src/net/http/h2_bundle.go:3897
	_go_fuzz_dep_.CoverTab[38563]++
							if s.MaxUploadBufferPerConnection >= http2initialWindowSize {
//line /usr/local/go/src/net/http/h2_bundle.go:3898
		_go_fuzz_dep_.CoverTab[38565]++
								return s.MaxUploadBufferPerConnection
//line /usr/local/go/src/net/http/h2_bundle.go:3899
		// _ = "end of CoverTab[38565]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3900
		_go_fuzz_dep_.CoverTab[38566]++
//line /usr/local/go/src/net/http/h2_bundle.go:3900
		// _ = "end of CoverTab[38566]"
//line /usr/local/go/src/net/http/h2_bundle.go:3900
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3900
	// _ = "end of CoverTab[38563]"
//line /usr/local/go/src/net/http/h2_bundle.go:3900
	_go_fuzz_dep_.CoverTab[38564]++
							return 1 << 20
//line /usr/local/go/src/net/http/h2_bundle.go:3901
	// _ = "end of CoverTab[38564]"
}

func (s *http2Server) initialStreamRecvWindowSize() int32 {
//line /usr/local/go/src/net/http/h2_bundle.go:3904
	_go_fuzz_dep_.CoverTab[38567]++
							if s.MaxUploadBufferPerStream > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:3905
		_go_fuzz_dep_.CoverTab[38569]++
								return s.MaxUploadBufferPerStream
//line /usr/local/go/src/net/http/h2_bundle.go:3906
		// _ = "end of CoverTab[38569]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3907
		_go_fuzz_dep_.CoverTab[38570]++
//line /usr/local/go/src/net/http/h2_bundle.go:3907
		// _ = "end of CoverTab[38570]"
//line /usr/local/go/src/net/http/h2_bundle.go:3907
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3907
	// _ = "end of CoverTab[38567]"
//line /usr/local/go/src/net/http/h2_bundle.go:3907
	_go_fuzz_dep_.CoverTab[38568]++
							return 1 << 20
//line /usr/local/go/src/net/http/h2_bundle.go:3908
	// _ = "end of CoverTab[38568]"
}

func (s *http2Server) maxReadFrameSize() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:3911
	_go_fuzz_dep_.CoverTab[38571]++
							if v := s.MaxReadFrameSize; v >= http2minMaxFrameSize && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:3912
		_go_fuzz_dep_.CoverTab[38573]++
//line /usr/local/go/src/net/http/h2_bundle.go:3912
		return v <= http2maxFrameSize
//line /usr/local/go/src/net/http/h2_bundle.go:3912
		// _ = "end of CoverTab[38573]"
//line /usr/local/go/src/net/http/h2_bundle.go:3912
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:3912
		_go_fuzz_dep_.CoverTab[38574]++
								return v
//line /usr/local/go/src/net/http/h2_bundle.go:3913
		// _ = "end of CoverTab[38574]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3914
		_go_fuzz_dep_.CoverTab[38575]++
//line /usr/local/go/src/net/http/h2_bundle.go:3914
		// _ = "end of CoverTab[38575]"
//line /usr/local/go/src/net/http/h2_bundle.go:3914
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3914
	// _ = "end of CoverTab[38571]"
//line /usr/local/go/src/net/http/h2_bundle.go:3914
	_go_fuzz_dep_.CoverTab[38572]++
							return http2defaultMaxReadFrameSize
//line /usr/local/go/src/net/http/h2_bundle.go:3915
	// _ = "end of CoverTab[38572]"
}

func (s *http2Server) maxConcurrentStreams() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:3918
	_go_fuzz_dep_.CoverTab[38576]++
							if v := s.MaxConcurrentStreams; v > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:3919
		_go_fuzz_dep_.CoverTab[38578]++
								return v
//line /usr/local/go/src/net/http/h2_bundle.go:3920
		// _ = "end of CoverTab[38578]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3921
		_go_fuzz_dep_.CoverTab[38579]++
//line /usr/local/go/src/net/http/h2_bundle.go:3921
		// _ = "end of CoverTab[38579]"
//line /usr/local/go/src/net/http/h2_bundle.go:3921
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3921
	// _ = "end of CoverTab[38576]"
//line /usr/local/go/src/net/http/h2_bundle.go:3921
	_go_fuzz_dep_.CoverTab[38577]++
							return http2defaultMaxStreams
//line /usr/local/go/src/net/http/h2_bundle.go:3922
	// _ = "end of CoverTab[38577]"
}

func (s *http2Server) maxDecoderHeaderTableSize() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:3925
	_go_fuzz_dep_.CoverTab[38580]++
							if v := s.MaxDecoderHeaderTableSize; v > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:3926
		_go_fuzz_dep_.CoverTab[38582]++
								return v
//line /usr/local/go/src/net/http/h2_bundle.go:3927
		// _ = "end of CoverTab[38582]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3928
		_go_fuzz_dep_.CoverTab[38583]++
//line /usr/local/go/src/net/http/h2_bundle.go:3928
		// _ = "end of CoverTab[38583]"
//line /usr/local/go/src/net/http/h2_bundle.go:3928
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3928
	// _ = "end of CoverTab[38580]"
//line /usr/local/go/src/net/http/h2_bundle.go:3928
	_go_fuzz_dep_.CoverTab[38581]++
							return http2initialHeaderTableSize
//line /usr/local/go/src/net/http/h2_bundle.go:3929
	// _ = "end of CoverTab[38581]"
}

func (s *http2Server) maxEncoderHeaderTableSize() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:3932
	_go_fuzz_dep_.CoverTab[38584]++
							if v := s.MaxEncoderHeaderTableSize; v > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:3933
		_go_fuzz_dep_.CoverTab[38586]++
								return v
//line /usr/local/go/src/net/http/h2_bundle.go:3934
		// _ = "end of CoverTab[38586]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3935
		_go_fuzz_dep_.CoverTab[38587]++
//line /usr/local/go/src/net/http/h2_bundle.go:3935
		// _ = "end of CoverTab[38587]"
//line /usr/local/go/src/net/http/h2_bundle.go:3935
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3935
	// _ = "end of CoverTab[38584]"
//line /usr/local/go/src/net/http/h2_bundle.go:3935
	_go_fuzz_dep_.CoverTab[38585]++
							return http2initialHeaderTableSize
//line /usr/local/go/src/net/http/h2_bundle.go:3936
	// _ = "end of CoverTab[38585]"
}

// maxQueuedControlFrames is the maximum number of control frames like
//line /usr/local/go/src/net/http/h2_bundle.go:3939
// SETTINGS, PING and RST_STREAM that will be queued for writing before
//line /usr/local/go/src/net/http/h2_bundle.go:3939
// the connection is closed to prevent memory exhaustion attacks.
//line /usr/local/go/src/net/http/h2_bundle.go:3942
func (s *http2Server) maxQueuedControlFrames() int {
//line /usr/local/go/src/net/http/h2_bundle.go:3942
	_go_fuzz_dep_.CoverTab[38588]++

//line /usr/local/go/src/net/http/h2_bundle.go:3945
	return http2maxQueuedControlFrames
//line /usr/local/go/src/net/http/h2_bundle.go:3945
	// _ = "end of CoverTab[38588]"
}

type http2serverInternalState struct {
	mu		sync.Mutex
	activeConns	map[*http2serverConn]struct{}
}

func (s *http2serverInternalState) registerConn(sc *http2serverConn) {
//line /usr/local/go/src/net/http/h2_bundle.go:3953
	_go_fuzz_dep_.CoverTab[38589]++
							if s == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3954
		_go_fuzz_dep_.CoverTab[38591]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:3955
		// _ = "end of CoverTab[38591]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3956
		_go_fuzz_dep_.CoverTab[38592]++
//line /usr/local/go/src/net/http/h2_bundle.go:3956
		// _ = "end of CoverTab[38592]"
//line /usr/local/go/src/net/http/h2_bundle.go:3956
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3956
	// _ = "end of CoverTab[38589]"
//line /usr/local/go/src/net/http/h2_bundle.go:3956
	_go_fuzz_dep_.CoverTab[38590]++
							s.mu.Lock()
							s.activeConns[sc] = struct{}{}
							s.mu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:3959
	// _ = "end of CoverTab[38590]"
}

func (s *http2serverInternalState) unregisterConn(sc *http2serverConn) {
//line /usr/local/go/src/net/http/h2_bundle.go:3962
	_go_fuzz_dep_.CoverTab[38593]++
							if s == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3963
		_go_fuzz_dep_.CoverTab[38595]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:3964
		// _ = "end of CoverTab[38595]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3965
		_go_fuzz_dep_.CoverTab[38596]++
//line /usr/local/go/src/net/http/h2_bundle.go:3965
		// _ = "end of CoverTab[38596]"
//line /usr/local/go/src/net/http/h2_bundle.go:3965
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3965
	// _ = "end of CoverTab[38593]"
//line /usr/local/go/src/net/http/h2_bundle.go:3965
	_go_fuzz_dep_.CoverTab[38594]++
							s.mu.Lock()
							delete(s.activeConns, sc)
							s.mu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:3968
	// _ = "end of CoverTab[38594]"
}

func (s *http2serverInternalState) startGracefulShutdown() {
//line /usr/local/go/src/net/http/h2_bundle.go:3971
	_go_fuzz_dep_.CoverTab[38597]++
							if s == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3972
		_go_fuzz_dep_.CoverTab[38600]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:3973
		// _ = "end of CoverTab[38600]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3974
		_go_fuzz_dep_.CoverTab[38601]++
//line /usr/local/go/src/net/http/h2_bundle.go:3974
		// _ = "end of CoverTab[38601]"
//line /usr/local/go/src/net/http/h2_bundle.go:3974
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3974
	// _ = "end of CoverTab[38597]"
//line /usr/local/go/src/net/http/h2_bundle.go:3974
	_go_fuzz_dep_.CoverTab[38598]++
							s.mu.Lock()
							for sc := range s.activeConns {
//line /usr/local/go/src/net/http/h2_bundle.go:3976
		_go_fuzz_dep_.CoverTab[38602]++
								sc.startGracefulShutdown()
//line /usr/local/go/src/net/http/h2_bundle.go:3977
		// _ = "end of CoverTab[38602]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3978
	// _ = "end of CoverTab[38598]"
//line /usr/local/go/src/net/http/h2_bundle.go:3978
	_go_fuzz_dep_.CoverTab[38599]++
							s.mu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:3979
	// _ = "end of CoverTab[38599]"
}

// ConfigureServer adds HTTP/2 support to a net/http Server.
//line /usr/local/go/src/net/http/h2_bundle.go:3982
//
//line /usr/local/go/src/net/http/h2_bundle.go:3982
// The configuration conf may be nil.
//line /usr/local/go/src/net/http/h2_bundle.go:3982
//
//line /usr/local/go/src/net/http/h2_bundle.go:3982
// ConfigureServer must be called before s begins serving.
//line /usr/local/go/src/net/http/h2_bundle.go:3987
func http2ConfigureServer(s *Server, conf *http2Server) error {
//line /usr/local/go/src/net/http/h2_bundle.go:3987
	_go_fuzz_dep_.CoverTab[38603]++
							if s == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3988
		_go_fuzz_dep_.CoverTab[38612]++
								panic("nil *http.Server")
//line /usr/local/go/src/net/http/h2_bundle.go:3989
		// _ = "end of CoverTab[38612]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3990
		_go_fuzz_dep_.CoverTab[38613]++
//line /usr/local/go/src/net/http/h2_bundle.go:3990
		// _ = "end of CoverTab[38613]"
//line /usr/local/go/src/net/http/h2_bundle.go:3990
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3990
	// _ = "end of CoverTab[38603]"
//line /usr/local/go/src/net/http/h2_bundle.go:3990
	_go_fuzz_dep_.CoverTab[38604]++
							if conf == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:3991
		_go_fuzz_dep_.CoverTab[38614]++
								conf = new(http2Server)
//line /usr/local/go/src/net/http/h2_bundle.go:3992
		// _ = "end of CoverTab[38614]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3993
		_go_fuzz_dep_.CoverTab[38615]++
//line /usr/local/go/src/net/http/h2_bundle.go:3993
		// _ = "end of CoverTab[38615]"
//line /usr/local/go/src/net/http/h2_bundle.go:3993
	}
//line /usr/local/go/src/net/http/h2_bundle.go:3993
	// _ = "end of CoverTab[38604]"
//line /usr/local/go/src/net/http/h2_bundle.go:3993
	_go_fuzz_dep_.CoverTab[38605]++
							conf.state = &http2serverInternalState{activeConns: make(map[*http2serverConn]struct{})}
							if h1, h2 := s, conf; h2.IdleTimeout == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:3995
		_go_fuzz_dep_.CoverTab[38616]++
								if h1.IdleTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:3996
			_go_fuzz_dep_.CoverTab[38617]++
									h2.IdleTimeout = h1.IdleTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:3997
			// _ = "end of CoverTab[38617]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:3998
			_go_fuzz_dep_.CoverTab[38618]++
									h2.IdleTimeout = h1.ReadTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:3999
			// _ = "end of CoverTab[38618]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4000
		// _ = "end of CoverTab[38616]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4001
		_go_fuzz_dep_.CoverTab[38619]++
//line /usr/local/go/src/net/http/h2_bundle.go:4001
		// _ = "end of CoverTab[38619]"
//line /usr/local/go/src/net/http/h2_bundle.go:4001
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4001
	// _ = "end of CoverTab[38605]"
//line /usr/local/go/src/net/http/h2_bundle.go:4001
	_go_fuzz_dep_.CoverTab[38606]++
							s.RegisterOnShutdown(conf.state.startGracefulShutdown)

							if s.TLSConfig == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4004
		_go_fuzz_dep_.CoverTab[38620]++
								s.TLSConfig = new(tls.Config)
//line /usr/local/go/src/net/http/h2_bundle.go:4005
		// _ = "end of CoverTab[38620]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4006
		_go_fuzz_dep_.CoverTab[38621]++
//line /usr/local/go/src/net/http/h2_bundle.go:4006
		if s.TLSConfig.CipherSuites != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4006
			_go_fuzz_dep_.CoverTab[38622]++
//line /usr/local/go/src/net/http/h2_bundle.go:4006
			return s.TLSConfig.MinVersion < tls.VersionTLS13
//line /usr/local/go/src/net/http/h2_bundle.go:4006
			// _ = "end of CoverTab[38622]"
//line /usr/local/go/src/net/http/h2_bundle.go:4006
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4006
			_go_fuzz_dep_.CoverTab[38623]++

//line /usr/local/go/src/net/http/h2_bundle.go:4010
			haveRequired := false
			for _, cs := range s.TLSConfig.CipherSuites {
//line /usr/local/go/src/net/http/h2_bundle.go:4011
				_go_fuzz_dep_.CoverTab[38625]++
										switch cs {
				case tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,

//line /usr/local/go/src/net/http/h2_bundle.go:4016
					tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
//line /usr/local/go/src/net/http/h2_bundle.go:4016
					_go_fuzz_dep_.CoverTab[38626]++
											haveRequired = true
//line /usr/local/go/src/net/http/h2_bundle.go:4017
					// _ = "end of CoverTab[38626]"
//line /usr/local/go/src/net/http/h2_bundle.go:4017
				default:
//line /usr/local/go/src/net/http/h2_bundle.go:4017
					_go_fuzz_dep_.CoverTab[38627]++
//line /usr/local/go/src/net/http/h2_bundle.go:4017
					// _ = "end of CoverTab[38627]"
				}
//line /usr/local/go/src/net/http/h2_bundle.go:4018
				// _ = "end of CoverTab[38625]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4019
			// _ = "end of CoverTab[38623]"
//line /usr/local/go/src/net/http/h2_bundle.go:4019
			_go_fuzz_dep_.CoverTab[38624]++
									if !haveRequired {
//line /usr/local/go/src/net/http/h2_bundle.go:4020
				_go_fuzz_dep_.CoverTab[38628]++
										return fmt.Errorf("http2: TLSConfig.CipherSuites is missing an HTTP/2-required AES_128_GCM_SHA256 cipher (need at least one of TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 or TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)")
//line /usr/local/go/src/net/http/h2_bundle.go:4021
				// _ = "end of CoverTab[38628]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4022
				_go_fuzz_dep_.CoverTab[38629]++
//line /usr/local/go/src/net/http/h2_bundle.go:4022
				// _ = "end of CoverTab[38629]"
//line /usr/local/go/src/net/http/h2_bundle.go:4022
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4022
			// _ = "end of CoverTab[38624]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4023
			_go_fuzz_dep_.CoverTab[38630]++
//line /usr/local/go/src/net/http/h2_bundle.go:4023
			// _ = "end of CoverTab[38630]"
//line /usr/local/go/src/net/http/h2_bundle.go:4023
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4023
		// _ = "end of CoverTab[38621]"
//line /usr/local/go/src/net/http/h2_bundle.go:4023
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4023
	// _ = "end of CoverTab[38606]"
//line /usr/local/go/src/net/http/h2_bundle.go:4023
	_go_fuzz_dep_.CoverTab[38607]++

//line /usr/local/go/src/net/http/h2_bundle.go:4032
	s.TLSConfig.PreferServerCipherSuites = true

	if !http2strSliceContains(s.TLSConfig.NextProtos, http2NextProtoTLS) {
//line /usr/local/go/src/net/http/h2_bundle.go:4034
		_go_fuzz_dep_.CoverTab[38631]++
								s.TLSConfig.NextProtos = append(s.TLSConfig.NextProtos, http2NextProtoTLS)
//line /usr/local/go/src/net/http/h2_bundle.go:4035
		// _ = "end of CoverTab[38631]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4036
		_go_fuzz_dep_.CoverTab[38632]++
//line /usr/local/go/src/net/http/h2_bundle.go:4036
		// _ = "end of CoverTab[38632]"
//line /usr/local/go/src/net/http/h2_bundle.go:4036
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4036
	// _ = "end of CoverTab[38607]"
//line /usr/local/go/src/net/http/h2_bundle.go:4036
	_go_fuzz_dep_.CoverTab[38608]++
							if !http2strSliceContains(s.TLSConfig.NextProtos, "http/1.1") {
//line /usr/local/go/src/net/http/h2_bundle.go:4037
		_go_fuzz_dep_.CoverTab[38633]++
								s.TLSConfig.NextProtos = append(s.TLSConfig.NextProtos, "http/1.1")
//line /usr/local/go/src/net/http/h2_bundle.go:4038
		// _ = "end of CoverTab[38633]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4039
		_go_fuzz_dep_.CoverTab[38634]++
//line /usr/local/go/src/net/http/h2_bundle.go:4039
		// _ = "end of CoverTab[38634]"
//line /usr/local/go/src/net/http/h2_bundle.go:4039
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4039
	// _ = "end of CoverTab[38608]"
//line /usr/local/go/src/net/http/h2_bundle.go:4039
	_go_fuzz_dep_.CoverTab[38609]++

							if s.TLSNextProto == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4041
		_go_fuzz_dep_.CoverTab[38635]++
								s.TLSNextProto = map[string]func(*Server, *tls.Conn, Handler){}
//line /usr/local/go/src/net/http/h2_bundle.go:4042
		// _ = "end of CoverTab[38635]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4043
		_go_fuzz_dep_.CoverTab[38636]++
//line /usr/local/go/src/net/http/h2_bundle.go:4043
		// _ = "end of CoverTab[38636]"
//line /usr/local/go/src/net/http/h2_bundle.go:4043
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4043
	// _ = "end of CoverTab[38609]"
//line /usr/local/go/src/net/http/h2_bundle.go:4043
	_go_fuzz_dep_.CoverTab[38610]++
							protoHandler := func(hs *Server, c *tls.Conn, h Handler) {
//line /usr/local/go/src/net/http/h2_bundle.go:4044
		_go_fuzz_dep_.CoverTab[38637]++
								if http2testHookOnConn != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4045
			_go_fuzz_dep_.CoverTab[38640]++
									http2testHookOnConn()
//line /usr/local/go/src/net/http/h2_bundle.go:4046
			// _ = "end of CoverTab[38640]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4047
			_go_fuzz_dep_.CoverTab[38641]++
//line /usr/local/go/src/net/http/h2_bundle.go:4047
			// _ = "end of CoverTab[38641]"
//line /usr/local/go/src/net/http/h2_bundle.go:4047
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4047
		// _ = "end of CoverTab[38637]"
//line /usr/local/go/src/net/http/h2_bundle.go:4047
		_go_fuzz_dep_.CoverTab[38638]++
		// The TLSNextProto interface predates contexts, so
		// the net/http package passes down its per-connection
		// base context via an exported but unadvertised
		// method on the Handler. This is for internal
		// net/http<=>http2 use only.
		var ctx context.Context
		type baseContexter interface {
			BaseContext() context.Context
		}
		if bc, ok := h.(baseContexter); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:4057
			_go_fuzz_dep_.CoverTab[38642]++
									ctx = bc.BaseContext()
//line /usr/local/go/src/net/http/h2_bundle.go:4058
			// _ = "end of CoverTab[38642]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4059
			_go_fuzz_dep_.CoverTab[38643]++
//line /usr/local/go/src/net/http/h2_bundle.go:4059
			// _ = "end of CoverTab[38643]"
//line /usr/local/go/src/net/http/h2_bundle.go:4059
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4059
		// _ = "end of CoverTab[38638]"
//line /usr/local/go/src/net/http/h2_bundle.go:4059
		_go_fuzz_dep_.CoverTab[38639]++
								conf.ServeConn(c, &http2ServeConnOpts{
			Context:	ctx,
			Handler:	h,
			BaseConfig:	hs,
		})
//line /usr/local/go/src/net/http/h2_bundle.go:4064
		// _ = "end of CoverTab[38639]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4065
	// _ = "end of CoverTab[38610]"
//line /usr/local/go/src/net/http/h2_bundle.go:4065
	_go_fuzz_dep_.CoverTab[38611]++
							s.TLSNextProto[http2NextProtoTLS] = protoHandler
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:4067
	// _ = "end of CoverTab[38611]"
}

// ServeConnOpts are options for the Server.ServeConn method.
type http2ServeConnOpts struct {
	// Context is the base context to use.
	// If nil, context.Background is used.
	Context	context.Context

	// BaseConfig optionally sets the base configuration
	// for values. If nil, defaults are used.
	BaseConfig	*Server

	// Handler specifies which handler to use for processing
	// requests. If nil, BaseConfig.Handler is used. If BaseConfig
	// or BaseConfig.Handler is nil, http.DefaultServeMux is used.
	Handler	Handler

	// UpgradeRequest is an initial request received on a connection
	// undergoing an h2c upgrade. The request body must have been
	// completely read from the connection before calling ServeConn,
	// and the 101 Switching Protocols response written.
	UpgradeRequest	*Request

	// Settings is the decoded contents of the HTTP2-Settings header
	// in an h2c upgrade request.
	Settings	[]byte

	// SawClientPreface is set if the HTTP/2 connection preface
	// has already been read from the connection.
	SawClientPreface	bool
}

func (o *http2ServeConnOpts) context() context.Context {
//line /usr/local/go/src/net/http/h2_bundle.go:4100
	_go_fuzz_dep_.CoverTab[38644]++
							if o != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4101
		_go_fuzz_dep_.CoverTab[38646]++
//line /usr/local/go/src/net/http/h2_bundle.go:4101
		return o.Context != nil
//line /usr/local/go/src/net/http/h2_bundle.go:4101
		// _ = "end of CoverTab[38646]"
//line /usr/local/go/src/net/http/h2_bundle.go:4101
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4101
		_go_fuzz_dep_.CoverTab[38647]++
								return o.Context
//line /usr/local/go/src/net/http/h2_bundle.go:4102
		// _ = "end of CoverTab[38647]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4103
		_go_fuzz_dep_.CoverTab[38648]++
//line /usr/local/go/src/net/http/h2_bundle.go:4103
		// _ = "end of CoverTab[38648]"
//line /usr/local/go/src/net/http/h2_bundle.go:4103
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4103
	// _ = "end of CoverTab[38644]"
//line /usr/local/go/src/net/http/h2_bundle.go:4103
	_go_fuzz_dep_.CoverTab[38645]++
							return context.Background()
//line /usr/local/go/src/net/http/h2_bundle.go:4104
	// _ = "end of CoverTab[38645]"
}

func (o *http2ServeConnOpts) baseConfig() *Server {
//line /usr/local/go/src/net/http/h2_bundle.go:4107
	_go_fuzz_dep_.CoverTab[38649]++
							if o != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4108
		_go_fuzz_dep_.CoverTab[38651]++
//line /usr/local/go/src/net/http/h2_bundle.go:4108
		return o.BaseConfig != nil
//line /usr/local/go/src/net/http/h2_bundle.go:4108
		// _ = "end of CoverTab[38651]"
//line /usr/local/go/src/net/http/h2_bundle.go:4108
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4108
		_go_fuzz_dep_.CoverTab[38652]++
								return o.BaseConfig
//line /usr/local/go/src/net/http/h2_bundle.go:4109
		// _ = "end of CoverTab[38652]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4110
		_go_fuzz_dep_.CoverTab[38653]++
//line /usr/local/go/src/net/http/h2_bundle.go:4110
		// _ = "end of CoverTab[38653]"
//line /usr/local/go/src/net/http/h2_bundle.go:4110
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4110
	// _ = "end of CoverTab[38649]"
//line /usr/local/go/src/net/http/h2_bundle.go:4110
	_go_fuzz_dep_.CoverTab[38650]++
							return new(Server)
//line /usr/local/go/src/net/http/h2_bundle.go:4111
	// _ = "end of CoverTab[38650]"
}

func (o *http2ServeConnOpts) handler() Handler {
//line /usr/local/go/src/net/http/h2_bundle.go:4114
	_go_fuzz_dep_.CoverTab[38654]++
							if o != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4115
		_go_fuzz_dep_.CoverTab[38656]++
								if o.Handler != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4116
			_go_fuzz_dep_.CoverTab[38658]++
									return o.Handler
//line /usr/local/go/src/net/http/h2_bundle.go:4117
			// _ = "end of CoverTab[38658]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4118
			_go_fuzz_dep_.CoverTab[38659]++
//line /usr/local/go/src/net/http/h2_bundle.go:4118
			// _ = "end of CoverTab[38659]"
//line /usr/local/go/src/net/http/h2_bundle.go:4118
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4118
		// _ = "end of CoverTab[38656]"
//line /usr/local/go/src/net/http/h2_bundle.go:4118
		_go_fuzz_dep_.CoverTab[38657]++
								if o.BaseConfig != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4119
			_go_fuzz_dep_.CoverTab[38660]++
//line /usr/local/go/src/net/http/h2_bundle.go:4119
			return o.BaseConfig.Handler != nil
//line /usr/local/go/src/net/http/h2_bundle.go:4119
			// _ = "end of CoverTab[38660]"
//line /usr/local/go/src/net/http/h2_bundle.go:4119
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4119
			_go_fuzz_dep_.CoverTab[38661]++
									return o.BaseConfig.Handler
//line /usr/local/go/src/net/http/h2_bundle.go:4120
			// _ = "end of CoverTab[38661]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4121
			_go_fuzz_dep_.CoverTab[38662]++
//line /usr/local/go/src/net/http/h2_bundle.go:4121
			// _ = "end of CoverTab[38662]"
//line /usr/local/go/src/net/http/h2_bundle.go:4121
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4121
		// _ = "end of CoverTab[38657]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4122
		_go_fuzz_dep_.CoverTab[38663]++
//line /usr/local/go/src/net/http/h2_bundle.go:4122
		// _ = "end of CoverTab[38663]"
//line /usr/local/go/src/net/http/h2_bundle.go:4122
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4122
	// _ = "end of CoverTab[38654]"
//line /usr/local/go/src/net/http/h2_bundle.go:4122
	_go_fuzz_dep_.CoverTab[38655]++
							return DefaultServeMux
//line /usr/local/go/src/net/http/h2_bundle.go:4123
	// _ = "end of CoverTab[38655]"
}

// ServeConn serves HTTP/2 requests on the provided connection and
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// blocks until the connection is no longer readable.
//line /usr/local/go/src/net/http/h2_bundle.go:4126
//
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// ServeConn starts speaking HTTP/2 assuming that c has not had any
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// reads or writes. It writes its initial settings frame and expects
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// to be able to read the preface and settings frame from the
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// client. If c has a ConnectionState method like a *tls.Conn, the
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// ConnectionState is used to verify the TLS ciphersuite and to set
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// the Request.TLS field in Handlers.
//line /usr/local/go/src/net/http/h2_bundle.go:4126
//
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// ServeConn does not support h2c by itself. Any h2c support must be
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// implemented in terms of providing a suitably-behaving net.Conn.
//line /usr/local/go/src/net/http/h2_bundle.go:4126
//
//line /usr/local/go/src/net/http/h2_bundle.go:4126
// The opts parameter is optional. If nil, default values are used.
//line /usr/local/go/src/net/http/h2_bundle.go:4140
func (s *http2Server) ServeConn(c net.Conn, opts *http2ServeConnOpts) {
//line /usr/local/go/src/net/http/h2_bundle.go:4140
	_go_fuzz_dep_.CoverTab[38664]++
							baseCtx, cancel := http2serverConnBaseContext(c, opts)
							defer cancel()

							sc := &http2serverConn{
		srv:				s,
		hs:				opts.baseConfig(),
		conn:				c,
		baseCtx:			baseCtx,
		remoteAddrStr:			c.RemoteAddr().String(),
		bw:				http2newBufferedWriter(c),
		handler:			opts.handler(),
		streams:			make(map[uint32]*http2stream),
		readFrameCh:			make(chan http2readFrameResult),
		wantWriteFrameCh:		make(chan http2FrameWriteRequest, 8),
		serveMsgCh:			make(chan interface{}, 8),
		wroteFrameCh:			make(chan http2frameWriteResult, 1),
		bodyReadCh:			make(chan http2bodyReadMsg),
		doneServing:			make(chan struct{}),
		clientMaxStreams:		math.MaxUint32,
		advMaxStreams:			s.maxConcurrentStreams(),
		initialStreamSendWindowSize:	http2initialWindowSize,
		maxFrameSize:			http2initialMaxFrameSize,
		serveG:				http2newGoroutineLock(),
		pushEnabled:			true,
		sawClientPreface:		opts.SawClientPreface,
	}

							s.state.registerConn(sc)
							defer s.state.unregisterConn(sc)

//line /usr/local/go/src/net/http/h2_bundle.go:4176
	if sc.hs.WriteTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:4176
		_go_fuzz_dep_.CoverTab[38672]++
								sc.conn.SetWriteDeadline(time.Time{})
//line /usr/local/go/src/net/http/h2_bundle.go:4177
		// _ = "end of CoverTab[38672]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4178
		_go_fuzz_dep_.CoverTab[38673]++
//line /usr/local/go/src/net/http/h2_bundle.go:4178
		// _ = "end of CoverTab[38673]"
//line /usr/local/go/src/net/http/h2_bundle.go:4178
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4178
	// _ = "end of CoverTab[38664]"
//line /usr/local/go/src/net/http/h2_bundle.go:4178
	_go_fuzz_dep_.CoverTab[38665]++

							if s.NewWriteScheduler != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4180
		_go_fuzz_dep_.CoverTab[38674]++
								sc.writeSched = s.NewWriteScheduler()
//line /usr/local/go/src/net/http/h2_bundle.go:4181
		// _ = "end of CoverTab[38674]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4182
		_go_fuzz_dep_.CoverTab[38675]++
								sc.writeSched = http2NewPriorityWriteScheduler(nil)
//line /usr/local/go/src/net/http/h2_bundle.go:4183
		// _ = "end of CoverTab[38675]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4184
	// _ = "end of CoverTab[38665]"
//line /usr/local/go/src/net/http/h2_bundle.go:4184
	_go_fuzz_dep_.CoverTab[38666]++

//line /usr/local/go/src/net/http/h2_bundle.go:4189
	sc.flow.add(http2initialWindowSize)
	sc.inflow.add(http2initialWindowSize)
	sc.hpackEncoder = hpack.NewEncoder(&sc.headerWriteBuf)
	sc.hpackEncoder.SetMaxDynamicTableSizeLimit(s.maxEncoderHeaderTableSize())

	fr := http2NewFramer(sc.bw, c)
	if s.CountError != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4195
		_go_fuzz_dep_.CoverTab[38676]++
								fr.countError = s.CountError
//line /usr/local/go/src/net/http/h2_bundle.go:4196
		// _ = "end of CoverTab[38676]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4197
		_go_fuzz_dep_.CoverTab[38677]++
//line /usr/local/go/src/net/http/h2_bundle.go:4197
		// _ = "end of CoverTab[38677]"
//line /usr/local/go/src/net/http/h2_bundle.go:4197
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4197
	// _ = "end of CoverTab[38666]"
//line /usr/local/go/src/net/http/h2_bundle.go:4197
	_go_fuzz_dep_.CoverTab[38667]++
							fr.ReadMetaHeaders = hpack.NewDecoder(s.maxDecoderHeaderTableSize(), nil)
							fr.MaxHeaderListSize = sc.maxHeaderListSize()
							fr.SetMaxReadFrameSize(s.maxReadFrameSize())
							sc.framer = fr

							if tc, ok := c.(http2connectionStater); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:4203
		_go_fuzz_dep_.CoverTab[38678]++
								sc.tlsState = new(tls.ConnectionState)
								*sc.tlsState = tc.ConnectionState()

//line /usr/local/go/src/net/http/h2_bundle.go:4216
		if sc.tlsState.Version < tls.VersionTLS12 {
//line /usr/local/go/src/net/http/h2_bundle.go:4216
			_go_fuzz_dep_.CoverTab[38681]++
									sc.rejectConn(http2ErrCodeInadequateSecurity, "TLS version too low")
									return
//line /usr/local/go/src/net/http/h2_bundle.go:4218
			// _ = "end of CoverTab[38681]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4219
			_go_fuzz_dep_.CoverTab[38682]++
//line /usr/local/go/src/net/http/h2_bundle.go:4219
			// _ = "end of CoverTab[38682]"
//line /usr/local/go/src/net/http/h2_bundle.go:4219
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4219
		// _ = "end of CoverTab[38678]"
//line /usr/local/go/src/net/http/h2_bundle.go:4219
		_go_fuzz_dep_.CoverTab[38679]++

								if sc.tlsState.ServerName == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:4221
			_go_fuzz_dep_.CoverTab[38683]++
//line /usr/local/go/src/net/http/h2_bundle.go:4221
			// _ = "end of CoverTab[38683]"

//line /usr/local/go/src/net/http/h2_bundle.go:4231
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4231
			_go_fuzz_dep_.CoverTab[38684]++
//line /usr/local/go/src/net/http/h2_bundle.go:4231
			// _ = "end of CoverTab[38684]"
//line /usr/local/go/src/net/http/h2_bundle.go:4231
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4231
		// _ = "end of CoverTab[38679]"
//line /usr/local/go/src/net/http/h2_bundle.go:4231
		_go_fuzz_dep_.CoverTab[38680]++

								if !s.PermitProhibitedCipherSuites && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4233
			_go_fuzz_dep_.CoverTab[38685]++
//line /usr/local/go/src/net/http/h2_bundle.go:4233
			return http2isBadCipher(sc.tlsState.CipherSuite)
//line /usr/local/go/src/net/http/h2_bundle.go:4233
			// _ = "end of CoverTab[38685]"
//line /usr/local/go/src/net/http/h2_bundle.go:4233
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4233
			_go_fuzz_dep_.CoverTab[38686]++

//line /usr/local/go/src/net/http/h2_bundle.go:4244
			sc.rejectConn(http2ErrCodeInadequateSecurity, fmt.Sprintf("Prohibited TLS 1.2 Cipher Suite: %x", sc.tlsState.CipherSuite))
									return
//line /usr/local/go/src/net/http/h2_bundle.go:4245
			// _ = "end of CoverTab[38686]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4246
			_go_fuzz_dep_.CoverTab[38687]++
//line /usr/local/go/src/net/http/h2_bundle.go:4246
			// _ = "end of CoverTab[38687]"
//line /usr/local/go/src/net/http/h2_bundle.go:4246
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4246
		// _ = "end of CoverTab[38680]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4247
		_go_fuzz_dep_.CoverTab[38688]++
//line /usr/local/go/src/net/http/h2_bundle.go:4247
		// _ = "end of CoverTab[38688]"
//line /usr/local/go/src/net/http/h2_bundle.go:4247
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4247
	// _ = "end of CoverTab[38667]"
//line /usr/local/go/src/net/http/h2_bundle.go:4247
	_go_fuzz_dep_.CoverTab[38668]++

							if opts.Settings != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4249
		_go_fuzz_dep_.CoverTab[38689]++
								fr := &http2SettingsFrame{
			http2FrameHeader:	http2FrameHeader{valid: true},
			p:			opts.Settings,
		}
		if err := fr.ForeachSetting(sc.processSetting); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4254
			_go_fuzz_dep_.CoverTab[38691]++
									sc.rejectConn(http2ErrCodeProtocol, "invalid settings")
									return
//line /usr/local/go/src/net/http/h2_bundle.go:4256
			// _ = "end of CoverTab[38691]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4257
			_go_fuzz_dep_.CoverTab[38692]++
//line /usr/local/go/src/net/http/h2_bundle.go:4257
			// _ = "end of CoverTab[38692]"
//line /usr/local/go/src/net/http/h2_bundle.go:4257
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4257
		// _ = "end of CoverTab[38689]"
//line /usr/local/go/src/net/http/h2_bundle.go:4257
		_go_fuzz_dep_.CoverTab[38690]++
								opts.Settings = nil
//line /usr/local/go/src/net/http/h2_bundle.go:4258
		// _ = "end of CoverTab[38690]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4259
		_go_fuzz_dep_.CoverTab[38693]++
//line /usr/local/go/src/net/http/h2_bundle.go:4259
		// _ = "end of CoverTab[38693]"
//line /usr/local/go/src/net/http/h2_bundle.go:4259
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4259
	// _ = "end of CoverTab[38668]"
//line /usr/local/go/src/net/http/h2_bundle.go:4259
	_go_fuzz_dep_.CoverTab[38669]++

							if hook := http2testHookGetServerConn; hook != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4261
		_go_fuzz_dep_.CoverTab[38694]++
								hook(sc)
//line /usr/local/go/src/net/http/h2_bundle.go:4262
		// _ = "end of CoverTab[38694]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4263
		_go_fuzz_dep_.CoverTab[38695]++
//line /usr/local/go/src/net/http/h2_bundle.go:4263
		// _ = "end of CoverTab[38695]"
//line /usr/local/go/src/net/http/h2_bundle.go:4263
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4263
	// _ = "end of CoverTab[38669]"
//line /usr/local/go/src/net/http/h2_bundle.go:4263
	_go_fuzz_dep_.CoverTab[38670]++

							if opts.UpgradeRequest != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4265
		_go_fuzz_dep_.CoverTab[38696]++
								sc.upgradeRequest(opts.UpgradeRequest)
								opts.UpgradeRequest = nil
//line /usr/local/go/src/net/http/h2_bundle.go:4267
		// _ = "end of CoverTab[38696]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4268
		_go_fuzz_dep_.CoverTab[38697]++
//line /usr/local/go/src/net/http/h2_bundle.go:4268
		// _ = "end of CoverTab[38697]"
//line /usr/local/go/src/net/http/h2_bundle.go:4268
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4268
	// _ = "end of CoverTab[38670]"
//line /usr/local/go/src/net/http/h2_bundle.go:4268
	_go_fuzz_dep_.CoverTab[38671]++

							sc.serve()
//line /usr/local/go/src/net/http/h2_bundle.go:4270
	// _ = "end of CoverTab[38671]"
}

func http2serverConnBaseContext(c net.Conn, opts *http2ServeConnOpts) (ctx context.Context, cancel func()) {
//line /usr/local/go/src/net/http/h2_bundle.go:4273
	_go_fuzz_dep_.CoverTab[38698]++
							ctx, cancel = context.WithCancel(opts.context())
							ctx = context.WithValue(ctx, LocalAddrContextKey, c.LocalAddr())
							if hs := opts.baseConfig(); hs != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4276
		_go_fuzz_dep_.CoverTab[38700]++
								ctx = context.WithValue(ctx, ServerContextKey, hs)
//line /usr/local/go/src/net/http/h2_bundle.go:4277
		// _ = "end of CoverTab[38700]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4278
		_go_fuzz_dep_.CoverTab[38701]++
//line /usr/local/go/src/net/http/h2_bundle.go:4278
		// _ = "end of CoverTab[38701]"
//line /usr/local/go/src/net/http/h2_bundle.go:4278
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4278
	// _ = "end of CoverTab[38698]"
//line /usr/local/go/src/net/http/h2_bundle.go:4278
	_go_fuzz_dep_.CoverTab[38699]++
							return
//line /usr/local/go/src/net/http/h2_bundle.go:4279
	// _ = "end of CoverTab[38699]"
}

func (sc *http2serverConn) rejectConn(err http2ErrCode, debug string) {
//line /usr/local/go/src/net/http/h2_bundle.go:4282
	_go_fuzz_dep_.CoverTab[38702]++
							sc.vlogf("http2: server rejecting conn: %v, %s", err, debug)

							sc.framer.WriteGoAway(0, err, []byte(debug))
							sc.bw.Flush()
							sc.conn.Close()
//line /usr/local/go/src/net/http/h2_bundle.go:4287
	// _ = "end of CoverTab[38702]"
}

type http2serverConn struct {
	// Immutable:
	srv			*http2Server
	hs			*Server
	conn			net.Conn
	bw			*http2bufferedWriter	// writing to conn
	handler			Handler
	baseCtx			context.Context
	framer			*http2Framer
	doneServing		chan struct{}			// closed when serverConn.serve ends
	readFrameCh		chan http2readFrameResult	// written by serverConn.readFrames
	wantWriteFrameCh	chan http2FrameWriteRequest	// from handlers -> serve
	wroteFrameCh		chan http2frameWriteResult	// from writeFrameAsync -> serve, tickles more frame writes
	bodyReadCh		chan http2bodyReadMsg		// from handlers -> serve
	serveMsgCh		chan interface{}		// misc messages & code to send to / run on the serve loop
	flow			http2flow			// conn-wide (not stream-specific) outbound flow control
	inflow			http2flow			// conn-wide inbound flow control
	tlsState		*tls.ConnectionState		// shared by all handlers, like net/http
	remoteAddrStr		string
	writeSched		http2WriteScheduler

	// Everything following is owned by the serve loop; use serveG.check():
	serveG				http2goroutineLock	// used to verify funcs are on serve()
	pushEnabled			bool
	sawClientPreface		bool	// preface has already been read, used in h2c upgrade
	sawFirstSettings		bool	// got the initial SETTINGS frame after the preface
	needToSendSettingsAck		bool
	unackedSettings			int	// how many SETTINGS have we sent without ACKs?
	queuedControlFrames		int	// control frames in the writeSched queue
	clientMaxStreams		uint32	// SETTINGS_MAX_CONCURRENT_STREAMS from client (our PUSH_PROMISE limit)
	advMaxStreams			uint32	// our SETTINGS_MAX_CONCURRENT_STREAMS advertised the client
	curClientStreams		uint32	// number of open streams initiated by the client
	curPushedStreams		uint32	// number of open streams initiated by server push
	maxClientStreamID		uint32	// max ever seen from client (odd), or 0 if there have been no client requests
	maxPushPromiseID		uint32	// ID of the last push promise (even), or 0 if there have been no pushes
	streams				map[uint32]*http2stream
	initialStreamSendWindowSize	int32
	maxFrameSize			int32
	peerMaxHeaderListSize		uint32			// zero means unknown (default)
	canonHeader			map[string]string	// http2-lower-case -> Go-Canonical-Case
	canonHeaderKeysSize		int			// canonHeader keys size in bytes
	writingFrame			bool			// started writing a frame (on serve goroutine or separate)
	writingFrameAsync		bool			// started a frame on its own goroutine but haven't heard back on wroteFrameCh
	needsFrameFlush			bool			// last frame write wasn't a flush
	inGoAway			bool			// we've started to or sent GOAWAY
	inFrameScheduleLoop		bool			// whether we're in the scheduleFrameWrite loop
	needToSendGoAway		bool			// we need to schedule a GOAWAY frame write
	goAwayCode			http2ErrCode
	shutdownTimer			*time.Timer	// nil until used
	idleTimer			*time.Timer	// nil if unused

	// Owned by the writeFrameAsync goroutine:
	headerWriteBuf	bytes.Buffer
	hpackEncoder	*hpack.Encoder

	// Used by startGracefulShutdown.
	shutdownOnce	sync.Once
}

func (sc *http2serverConn) maxHeaderListSize() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:4349
	_go_fuzz_dep_.CoverTab[38703]++
							n := sc.hs.MaxHeaderBytes
							if n <= 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:4351
		_go_fuzz_dep_.CoverTab[38705]++
								n = DefaultMaxHeaderBytes
//line /usr/local/go/src/net/http/h2_bundle.go:4352
		// _ = "end of CoverTab[38705]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4353
		_go_fuzz_dep_.CoverTab[38706]++
//line /usr/local/go/src/net/http/h2_bundle.go:4353
		// _ = "end of CoverTab[38706]"
//line /usr/local/go/src/net/http/h2_bundle.go:4353
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4353
	// _ = "end of CoverTab[38703]"
//line /usr/local/go/src/net/http/h2_bundle.go:4353
	_go_fuzz_dep_.CoverTab[38704]++
	// http2's count is in a slightly different unit and includes 32 bytes per pair.
							// So, take the net/http.Server value and pad it up a bit, assuming 10 headers.
							const perFieldOverhead = 32	// per http2 spec
							const typicalHeaders = 10	// conservative
							return uint32(n + typicalHeaders*perFieldOverhead)
//line /usr/local/go/src/net/http/h2_bundle.go:4358
	// _ = "end of CoverTab[38704]"
}

func (sc *http2serverConn) curOpenStreams() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:4361
	_go_fuzz_dep_.CoverTab[38707]++
							sc.serveG.check()
							return sc.curClientStreams + sc.curPushedStreams
//line /usr/local/go/src/net/http/h2_bundle.go:4363
	// _ = "end of CoverTab[38707]"
}

// stream represents a stream. This is the minimal metadata needed by
//line /usr/local/go/src/net/http/h2_bundle.go:4366
// the serve goroutine. Most of the actual stream state is owned by
//line /usr/local/go/src/net/http/h2_bundle.go:4366
// the http.Handler's goroutine in the responseWriter. Because the
//line /usr/local/go/src/net/http/h2_bundle.go:4366
// responseWriter's responseWriterState is recycled at the end of a
//line /usr/local/go/src/net/http/h2_bundle.go:4366
// handler, this struct intentionally has no pointer to the
//line /usr/local/go/src/net/http/h2_bundle.go:4366
// *responseWriter{,State} itself, as the Handler ending nils out the
//line /usr/local/go/src/net/http/h2_bundle.go:4366
// responseWriter's state field.
//line /usr/local/go/src/net/http/h2_bundle.go:4373
type http2stream struct {
	// immutable:
	sc		*http2serverConn
	id		uint32
	body		*http2pipe		// non-nil if expecting DATA frames
	cw		http2closeWaiter	// closed wait stream transitions to closed state
	ctx		context.Context
	cancelCtx	func()

	// owned by serverConn's serve loop:
	bodyBytes		int64		// body bytes seen so far
	declBodyBytes		int64		// or -1 if undeclared
	flow			http2flow	// limits writing from Handler to client
	inflow			http2flow	// what the client is allowed to POST/etc to us
	state			http2streamState
	resetQueued		bool		// RST_STREAM queued for write; set by sc.resetStream
	gotTrailerHeader	bool		// HEADER frame for trailers was seen
	wroteHeaders		bool		// whether we wrote headers (not status 100)
	readDeadline		*time.Timer	// nil if unused
	writeDeadline		*time.Timer	// nil if unused
	closeErr		error		// set before cw is closed

	trailer		Header	// accumulated trailers
	reqTrailer	Header	// handler's Request.Trailer
}

func (sc *http2serverConn) Framer() *http2Framer {
//line /usr/local/go/src/net/http/h2_bundle.go:4399
	_go_fuzz_dep_.CoverTab[38708]++
//line /usr/local/go/src/net/http/h2_bundle.go:4399
	return sc.framer
//line /usr/local/go/src/net/http/h2_bundle.go:4399
	// _ = "end of CoverTab[38708]"
//line /usr/local/go/src/net/http/h2_bundle.go:4399
}

func (sc *http2serverConn) CloseConn() error {
//line /usr/local/go/src/net/http/h2_bundle.go:4401
	_go_fuzz_dep_.CoverTab[38709]++
//line /usr/local/go/src/net/http/h2_bundle.go:4401
	return sc.conn.Close()
//line /usr/local/go/src/net/http/h2_bundle.go:4401
	// _ = "end of CoverTab[38709]"
//line /usr/local/go/src/net/http/h2_bundle.go:4401
}

func (sc *http2serverConn) Flush() error {
//line /usr/local/go/src/net/http/h2_bundle.go:4403
	_go_fuzz_dep_.CoverTab[38710]++
//line /usr/local/go/src/net/http/h2_bundle.go:4403
	return sc.bw.Flush()
//line /usr/local/go/src/net/http/h2_bundle.go:4403
	// _ = "end of CoverTab[38710]"
//line /usr/local/go/src/net/http/h2_bundle.go:4403
}

func (sc *http2serverConn) HeaderEncoder() (*hpack.Encoder, *bytes.Buffer) {
//line /usr/local/go/src/net/http/h2_bundle.go:4405
	_go_fuzz_dep_.CoverTab[38711]++
							return sc.hpackEncoder, &sc.headerWriteBuf
//line /usr/local/go/src/net/http/h2_bundle.go:4406
	// _ = "end of CoverTab[38711]"
}

func (sc *http2serverConn) state(streamID uint32) (http2streamState, *http2stream) {
//line /usr/local/go/src/net/http/h2_bundle.go:4409
	_go_fuzz_dep_.CoverTab[38712]++
							sc.serveG.check()

							if st, ok := sc.streams[streamID]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:4412
		_go_fuzz_dep_.CoverTab[38715]++
								return st.state, st
//line /usr/local/go/src/net/http/h2_bundle.go:4413
		// _ = "end of CoverTab[38715]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4414
		_go_fuzz_dep_.CoverTab[38716]++
//line /usr/local/go/src/net/http/h2_bundle.go:4414
		// _ = "end of CoverTab[38716]"
//line /usr/local/go/src/net/http/h2_bundle.go:4414
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4414
	// _ = "end of CoverTab[38712]"
//line /usr/local/go/src/net/http/h2_bundle.go:4414
	_go_fuzz_dep_.CoverTab[38713]++

//line /usr/local/go/src/net/http/h2_bundle.go:4421
	if streamID%2 == 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:4421
		_go_fuzz_dep_.CoverTab[38717]++
								if streamID <= sc.maxClientStreamID {
//line /usr/local/go/src/net/http/h2_bundle.go:4422
			_go_fuzz_dep_.CoverTab[38718]++
									return http2stateClosed, nil
//line /usr/local/go/src/net/http/h2_bundle.go:4423
			// _ = "end of CoverTab[38718]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4424
			_go_fuzz_dep_.CoverTab[38719]++
//line /usr/local/go/src/net/http/h2_bundle.go:4424
			// _ = "end of CoverTab[38719]"
//line /usr/local/go/src/net/http/h2_bundle.go:4424
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4424
		// _ = "end of CoverTab[38717]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4425
		_go_fuzz_dep_.CoverTab[38720]++
								if streamID <= sc.maxPushPromiseID {
//line /usr/local/go/src/net/http/h2_bundle.go:4426
			_go_fuzz_dep_.CoverTab[38721]++
									return http2stateClosed, nil
//line /usr/local/go/src/net/http/h2_bundle.go:4427
			// _ = "end of CoverTab[38721]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4428
			_go_fuzz_dep_.CoverTab[38722]++
//line /usr/local/go/src/net/http/h2_bundle.go:4428
			// _ = "end of CoverTab[38722]"
//line /usr/local/go/src/net/http/h2_bundle.go:4428
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4428
		// _ = "end of CoverTab[38720]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4429
	// _ = "end of CoverTab[38713]"
//line /usr/local/go/src/net/http/h2_bundle.go:4429
	_go_fuzz_dep_.CoverTab[38714]++
							return http2stateIdle, nil
//line /usr/local/go/src/net/http/h2_bundle.go:4430
	// _ = "end of CoverTab[38714]"
}

// setConnState calls the net/http ConnState hook for this connection, if configured.
//line /usr/local/go/src/net/http/h2_bundle.go:4433
// Note that the net/http package does StateNew and StateClosed for us.
//line /usr/local/go/src/net/http/h2_bundle.go:4433
// There is currently no plan for StateHijacked or hijacking HTTP/2 connections.
//line /usr/local/go/src/net/http/h2_bundle.go:4436
func (sc *http2serverConn) setConnState(state ConnState) {
//line /usr/local/go/src/net/http/h2_bundle.go:4436
	_go_fuzz_dep_.CoverTab[38723]++
							if sc.hs.ConnState != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4437
		_go_fuzz_dep_.CoverTab[38724]++
								sc.hs.ConnState(sc.conn, state)
//line /usr/local/go/src/net/http/h2_bundle.go:4438
		// _ = "end of CoverTab[38724]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4439
		_go_fuzz_dep_.CoverTab[38725]++
//line /usr/local/go/src/net/http/h2_bundle.go:4439
		// _ = "end of CoverTab[38725]"
//line /usr/local/go/src/net/http/h2_bundle.go:4439
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4439
	// _ = "end of CoverTab[38723]"
}

func (sc *http2serverConn) vlogf(format string, args ...interface{}) {
//line /usr/local/go/src/net/http/h2_bundle.go:4442
	_go_fuzz_dep_.CoverTab[38726]++
							if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:4443
		_go_fuzz_dep_.CoverTab[38727]++
								sc.logf(format, args...)
//line /usr/local/go/src/net/http/h2_bundle.go:4444
		// _ = "end of CoverTab[38727]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4445
		_go_fuzz_dep_.CoverTab[38728]++
//line /usr/local/go/src/net/http/h2_bundle.go:4445
		// _ = "end of CoverTab[38728]"
//line /usr/local/go/src/net/http/h2_bundle.go:4445
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4445
	// _ = "end of CoverTab[38726]"
}

func (sc *http2serverConn) logf(format string, args ...interface{}) {
//line /usr/local/go/src/net/http/h2_bundle.go:4448
	_go_fuzz_dep_.CoverTab[38729]++
							if lg := sc.hs.ErrorLog; lg != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4449
		_go_fuzz_dep_.CoverTab[38730]++
								lg.Printf(format, args...)
//line /usr/local/go/src/net/http/h2_bundle.go:4450
		// _ = "end of CoverTab[38730]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4451
		_go_fuzz_dep_.CoverTab[38731]++
								log.Printf(format, args...)
//line /usr/local/go/src/net/http/h2_bundle.go:4452
		// _ = "end of CoverTab[38731]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4453
	// _ = "end of CoverTab[38729]"
}

// errno returns v's underlying uintptr, else 0.
//line /usr/local/go/src/net/http/h2_bundle.go:4456
//
//line /usr/local/go/src/net/http/h2_bundle.go:4456
// TODO: remove this helper function once http2 can use build
//line /usr/local/go/src/net/http/h2_bundle.go:4456
// tags. See comment in isClosedConnError.
//line /usr/local/go/src/net/http/h2_bundle.go:4460
func http2errno(v error) uintptr {
//line /usr/local/go/src/net/http/h2_bundle.go:4460
	_go_fuzz_dep_.CoverTab[38732]++
							if rv := reflect.ValueOf(v); rv.Kind() == reflect.Uintptr {
//line /usr/local/go/src/net/http/h2_bundle.go:4461
		_go_fuzz_dep_.CoverTab[38734]++
								return uintptr(rv.Uint())
//line /usr/local/go/src/net/http/h2_bundle.go:4462
		// _ = "end of CoverTab[38734]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4463
		_go_fuzz_dep_.CoverTab[38735]++
//line /usr/local/go/src/net/http/h2_bundle.go:4463
		// _ = "end of CoverTab[38735]"
//line /usr/local/go/src/net/http/h2_bundle.go:4463
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4463
	// _ = "end of CoverTab[38732]"
//line /usr/local/go/src/net/http/h2_bundle.go:4463
	_go_fuzz_dep_.CoverTab[38733]++
							return 0
//line /usr/local/go/src/net/http/h2_bundle.go:4464
	// _ = "end of CoverTab[38733]"
}

// isClosedConnError reports whether err is an error from use of a closed
//line /usr/local/go/src/net/http/h2_bundle.go:4467
// network connection.
//line /usr/local/go/src/net/http/h2_bundle.go:4469
func http2isClosedConnError(err error) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4469
	_go_fuzz_dep_.CoverTab[38736]++
							if err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4470
		_go_fuzz_dep_.CoverTab[38740]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:4471
		// _ = "end of CoverTab[38740]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4472
		_go_fuzz_dep_.CoverTab[38741]++
//line /usr/local/go/src/net/http/h2_bundle.go:4472
		// _ = "end of CoverTab[38741]"
//line /usr/local/go/src/net/http/h2_bundle.go:4472
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4472
	// _ = "end of CoverTab[38736]"
//line /usr/local/go/src/net/http/h2_bundle.go:4472
	_go_fuzz_dep_.CoverTab[38737]++

//line /usr/local/go/src/net/http/h2_bundle.go:4477
	str := err.Error()
	if strings.Contains(str, "use of closed network connection") {
//line /usr/local/go/src/net/http/h2_bundle.go:4478
		_go_fuzz_dep_.CoverTab[38742]++
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:4479
		// _ = "end of CoverTab[38742]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4480
		_go_fuzz_dep_.CoverTab[38743]++
//line /usr/local/go/src/net/http/h2_bundle.go:4480
		// _ = "end of CoverTab[38743]"
//line /usr/local/go/src/net/http/h2_bundle.go:4480
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4480
	// _ = "end of CoverTab[38737]"
//line /usr/local/go/src/net/http/h2_bundle.go:4480
	_go_fuzz_dep_.CoverTab[38738]++

//line /usr/local/go/src/net/http/h2_bundle.go:4486
	if runtime.GOOS == "windows" {
//line /usr/local/go/src/net/http/h2_bundle.go:4486
		_go_fuzz_dep_.CoverTab[38744]++
								if oe, ok := err.(*net.OpError); ok && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4487
			_go_fuzz_dep_.CoverTab[38745]++
//line /usr/local/go/src/net/http/h2_bundle.go:4487
			return oe.Op == "read"
//line /usr/local/go/src/net/http/h2_bundle.go:4487
			// _ = "end of CoverTab[38745]"
//line /usr/local/go/src/net/http/h2_bundle.go:4487
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4487
			_go_fuzz_dep_.CoverTab[38746]++
									if se, ok := oe.Err.(*os.SyscallError); ok && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4488
				_go_fuzz_dep_.CoverTab[38747]++
//line /usr/local/go/src/net/http/h2_bundle.go:4488
				return se.Syscall == "wsarecv"
//line /usr/local/go/src/net/http/h2_bundle.go:4488
				// _ = "end of CoverTab[38747]"
//line /usr/local/go/src/net/http/h2_bundle.go:4488
			}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4488
				_go_fuzz_dep_.CoverTab[38748]++
										const WSAECONNABORTED = 10053
										const WSAECONNRESET = 10054
										if n := http2errno(se.Err); n == WSAECONNRESET || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4491
					_go_fuzz_dep_.CoverTab[38749]++
//line /usr/local/go/src/net/http/h2_bundle.go:4491
					return n == WSAECONNABORTED
//line /usr/local/go/src/net/http/h2_bundle.go:4491
					// _ = "end of CoverTab[38749]"
//line /usr/local/go/src/net/http/h2_bundle.go:4491
				}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4491
					_go_fuzz_dep_.CoverTab[38750]++
											return true
//line /usr/local/go/src/net/http/h2_bundle.go:4492
					// _ = "end of CoverTab[38750]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4493
					_go_fuzz_dep_.CoverTab[38751]++
//line /usr/local/go/src/net/http/h2_bundle.go:4493
					// _ = "end of CoverTab[38751]"
//line /usr/local/go/src/net/http/h2_bundle.go:4493
				}
//line /usr/local/go/src/net/http/h2_bundle.go:4493
				// _ = "end of CoverTab[38748]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4494
				_go_fuzz_dep_.CoverTab[38752]++
//line /usr/local/go/src/net/http/h2_bundle.go:4494
				// _ = "end of CoverTab[38752]"
//line /usr/local/go/src/net/http/h2_bundle.go:4494
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4494
			// _ = "end of CoverTab[38746]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4495
			_go_fuzz_dep_.CoverTab[38753]++
//line /usr/local/go/src/net/http/h2_bundle.go:4495
			// _ = "end of CoverTab[38753]"
//line /usr/local/go/src/net/http/h2_bundle.go:4495
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4495
		// _ = "end of CoverTab[38744]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4496
		_go_fuzz_dep_.CoverTab[38754]++
//line /usr/local/go/src/net/http/h2_bundle.go:4496
		// _ = "end of CoverTab[38754]"
//line /usr/local/go/src/net/http/h2_bundle.go:4496
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4496
	// _ = "end of CoverTab[38738]"
//line /usr/local/go/src/net/http/h2_bundle.go:4496
	_go_fuzz_dep_.CoverTab[38739]++
							return false
//line /usr/local/go/src/net/http/h2_bundle.go:4497
	// _ = "end of CoverTab[38739]"
}

func (sc *http2serverConn) condlogf(err error, format string, args ...interface{}) {
//line /usr/local/go/src/net/http/h2_bundle.go:4500
	_go_fuzz_dep_.CoverTab[38755]++
							if err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4501
		_go_fuzz_dep_.CoverTab[38757]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:4502
		// _ = "end of CoverTab[38757]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4503
		_go_fuzz_dep_.CoverTab[38758]++
//line /usr/local/go/src/net/http/h2_bundle.go:4503
		// _ = "end of CoverTab[38758]"
//line /usr/local/go/src/net/http/h2_bundle.go:4503
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4503
	// _ = "end of CoverTab[38755]"
//line /usr/local/go/src/net/http/h2_bundle.go:4503
	_go_fuzz_dep_.CoverTab[38756]++
							if err == io.EOF || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		_go_fuzz_dep_.CoverTab[38759]++
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		return err == io.ErrUnexpectedEOF
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		// _ = "end of CoverTab[38759]"
//line /usr/local/go/src/net/http/h2_bundle.go:4504
	}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		_go_fuzz_dep_.CoverTab[38760]++
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		return http2isClosedConnError(err)
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		// _ = "end of CoverTab[38760]"
//line /usr/local/go/src/net/http/h2_bundle.go:4504
	}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		_go_fuzz_dep_.CoverTab[38761]++
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		return err == http2errPrefaceTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		// _ = "end of CoverTab[38761]"
//line /usr/local/go/src/net/http/h2_bundle.go:4504
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4504
		_go_fuzz_dep_.CoverTab[38762]++

								sc.vlogf(format, args...)
//line /usr/local/go/src/net/http/h2_bundle.go:4506
		// _ = "end of CoverTab[38762]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4507
		_go_fuzz_dep_.CoverTab[38763]++
								sc.logf(format, args...)
//line /usr/local/go/src/net/http/h2_bundle.go:4508
		// _ = "end of CoverTab[38763]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4509
	// _ = "end of CoverTab[38756]"
}

// maxCachedCanonicalHeadersKeysSize is an arbitrarily-chosen limit on the size
//line /usr/local/go/src/net/http/h2_bundle.go:4512
// of the entries in the canonHeader cache.
//line /usr/local/go/src/net/http/h2_bundle.go:4512
// This should be larger than the size of unique, uncommon header keys likely to
//line /usr/local/go/src/net/http/h2_bundle.go:4512
// be sent by the peer, while not so high as to permit unreasonable memory usage
//line /usr/local/go/src/net/http/h2_bundle.go:4512
// if the peer sends an unbounded number of unique header keys.
//line /usr/local/go/src/net/http/h2_bundle.go:4517
const http2maxCachedCanonicalHeadersKeysSize = 2048

func (sc *http2serverConn) canonicalHeader(v string) string {
//line /usr/local/go/src/net/http/h2_bundle.go:4519
	_go_fuzz_dep_.CoverTab[38764]++
							sc.serveG.check()
							http2buildCommonHeaderMapsOnce()
							cv, ok := http2commonCanonHeader[v]
							if ok {
//line /usr/local/go/src/net/http/h2_bundle.go:4523
		_go_fuzz_dep_.CoverTab[38769]++
								return cv
//line /usr/local/go/src/net/http/h2_bundle.go:4524
		// _ = "end of CoverTab[38769]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4525
		_go_fuzz_dep_.CoverTab[38770]++
//line /usr/local/go/src/net/http/h2_bundle.go:4525
		// _ = "end of CoverTab[38770]"
//line /usr/local/go/src/net/http/h2_bundle.go:4525
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4525
	// _ = "end of CoverTab[38764]"
//line /usr/local/go/src/net/http/h2_bundle.go:4525
	_go_fuzz_dep_.CoverTab[38765]++
							cv, ok = sc.canonHeader[v]
							if ok {
//line /usr/local/go/src/net/http/h2_bundle.go:4527
		_go_fuzz_dep_.CoverTab[38771]++
								return cv
//line /usr/local/go/src/net/http/h2_bundle.go:4528
		// _ = "end of CoverTab[38771]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4529
		_go_fuzz_dep_.CoverTab[38772]++
//line /usr/local/go/src/net/http/h2_bundle.go:4529
		// _ = "end of CoverTab[38772]"
//line /usr/local/go/src/net/http/h2_bundle.go:4529
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4529
	// _ = "end of CoverTab[38765]"
//line /usr/local/go/src/net/http/h2_bundle.go:4529
	_go_fuzz_dep_.CoverTab[38766]++
							if sc.canonHeader == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4530
		_go_fuzz_dep_.CoverTab[38773]++
								sc.canonHeader = make(map[string]string)
//line /usr/local/go/src/net/http/h2_bundle.go:4531
		// _ = "end of CoverTab[38773]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4532
		_go_fuzz_dep_.CoverTab[38774]++
//line /usr/local/go/src/net/http/h2_bundle.go:4532
		// _ = "end of CoverTab[38774]"
//line /usr/local/go/src/net/http/h2_bundle.go:4532
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4532
	// _ = "end of CoverTab[38766]"
//line /usr/local/go/src/net/http/h2_bundle.go:4532
	_go_fuzz_dep_.CoverTab[38767]++
							cv = CanonicalHeaderKey(v)
							size := 100 + len(v)*2
							if sc.canonHeaderKeysSize+size <= http2maxCachedCanonicalHeadersKeysSize {
//line /usr/local/go/src/net/http/h2_bundle.go:4535
		_go_fuzz_dep_.CoverTab[38775]++
								sc.canonHeader[v] = cv
								sc.canonHeaderKeysSize += size
//line /usr/local/go/src/net/http/h2_bundle.go:4537
		// _ = "end of CoverTab[38775]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4538
		_go_fuzz_dep_.CoverTab[38776]++
//line /usr/local/go/src/net/http/h2_bundle.go:4538
		// _ = "end of CoverTab[38776]"
//line /usr/local/go/src/net/http/h2_bundle.go:4538
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4538
	// _ = "end of CoverTab[38767]"
//line /usr/local/go/src/net/http/h2_bundle.go:4538
	_go_fuzz_dep_.CoverTab[38768]++
							return cv
//line /usr/local/go/src/net/http/h2_bundle.go:4539
	// _ = "end of CoverTab[38768]"
}

type http2readFrameResult struct {
	f	http2Frame	// valid until readMore is called
	err	error

	// readMore should be called once the consumer no longer needs or
	// retains f. After readMore, f is invalid and more frames can be
	// read.
	readMore	func()
}

// readFrames is the loop that reads incoming frames.
//line /usr/local/go/src/net/http/h2_bundle.go:4552
// It takes care to only read one frame at a time, blocking until the
//line /usr/local/go/src/net/http/h2_bundle.go:4552
// consumer is done with the frame.
//line /usr/local/go/src/net/http/h2_bundle.go:4552
// It's run on its own goroutine.
//line /usr/local/go/src/net/http/h2_bundle.go:4556
func (sc *http2serverConn) readFrames() {
//line /usr/local/go/src/net/http/h2_bundle.go:4556
	_go_fuzz_dep_.CoverTab[38777]++
							gate := make(http2gate)
							gateDone := gate.Done
							for {
//line /usr/local/go/src/net/http/h2_bundle.go:4559
		_go_fuzz_dep_.CoverTab[38778]++
								f, err := sc.framer.ReadFrame()
								select {
		case sc.readFrameCh <- http2readFrameResult{f, err, gateDone}:
//line /usr/local/go/src/net/http/h2_bundle.go:4562
			_go_fuzz_dep_.CoverTab[38781]++
//line /usr/local/go/src/net/http/h2_bundle.go:4562
			// _ = "end of CoverTab[38781]"
		case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:4563
			_go_fuzz_dep_.CoverTab[38782]++
									return
//line /usr/local/go/src/net/http/h2_bundle.go:4564
			// _ = "end of CoverTab[38782]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4565
		// _ = "end of CoverTab[38778]"
//line /usr/local/go/src/net/http/h2_bundle.go:4565
		_go_fuzz_dep_.CoverTab[38779]++
								select {
		case <-gate:
//line /usr/local/go/src/net/http/h2_bundle.go:4567
			_go_fuzz_dep_.CoverTab[38783]++
//line /usr/local/go/src/net/http/h2_bundle.go:4567
			// _ = "end of CoverTab[38783]"
		case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:4568
			_go_fuzz_dep_.CoverTab[38784]++
									return
//line /usr/local/go/src/net/http/h2_bundle.go:4569
			// _ = "end of CoverTab[38784]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4570
		// _ = "end of CoverTab[38779]"
//line /usr/local/go/src/net/http/h2_bundle.go:4570
		_go_fuzz_dep_.CoverTab[38780]++
								if http2terminalReadFrameError(err) {
//line /usr/local/go/src/net/http/h2_bundle.go:4571
			_go_fuzz_dep_.CoverTab[38785]++
									return
//line /usr/local/go/src/net/http/h2_bundle.go:4572
			// _ = "end of CoverTab[38785]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4573
			_go_fuzz_dep_.CoverTab[38786]++
//line /usr/local/go/src/net/http/h2_bundle.go:4573
			// _ = "end of CoverTab[38786]"
//line /usr/local/go/src/net/http/h2_bundle.go:4573
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4573
		// _ = "end of CoverTab[38780]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4574
	// _ = "end of CoverTab[38777]"
}

// frameWriteResult is the message passed from writeFrameAsync to the serve goroutine.
type http2frameWriteResult struct {
	_	http2incomparable
	wr	http2FrameWriteRequest	// what was written (or attempted)
	err	error			// result of the writeFrame call
}

// writeFrameAsync runs in its own goroutine and writes a single frame
//line /usr/local/go/src/net/http/h2_bundle.go:4584
// and then reports when it's done.
//line /usr/local/go/src/net/http/h2_bundle.go:4584
// At most one goroutine can be running writeFrameAsync at a time per
//line /usr/local/go/src/net/http/h2_bundle.go:4584
// serverConn.
//line /usr/local/go/src/net/http/h2_bundle.go:4588
func (sc *http2serverConn) writeFrameAsync(wr http2FrameWriteRequest) {
//line /usr/local/go/src/net/http/h2_bundle.go:4588
	_go_fuzz_dep_.CoverTab[38787]++
							err := wr.write.writeFrame(sc)
							sc.wroteFrameCh <- http2frameWriteResult{wr: wr, err: err}
//line /usr/local/go/src/net/http/h2_bundle.go:4590
	// _ = "end of CoverTab[38787]"
}

func (sc *http2serverConn) closeAllStreamsOnConnClose() {
//line /usr/local/go/src/net/http/h2_bundle.go:4593
	_go_fuzz_dep_.CoverTab[38788]++
							sc.serveG.check()
							for _, st := range sc.streams {
//line /usr/local/go/src/net/http/h2_bundle.go:4595
		_go_fuzz_dep_.CoverTab[38789]++
								sc.closeStream(st, http2errClientDisconnected)
//line /usr/local/go/src/net/http/h2_bundle.go:4596
		// _ = "end of CoverTab[38789]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4597
	// _ = "end of CoverTab[38788]"
}

func (sc *http2serverConn) stopShutdownTimer() {
//line /usr/local/go/src/net/http/h2_bundle.go:4600
	_go_fuzz_dep_.CoverTab[38790]++
							sc.serveG.check()
							if t := sc.shutdownTimer; t != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4602
		_go_fuzz_dep_.CoverTab[38791]++
								t.Stop()
//line /usr/local/go/src/net/http/h2_bundle.go:4603
		// _ = "end of CoverTab[38791]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4604
		_go_fuzz_dep_.CoverTab[38792]++
//line /usr/local/go/src/net/http/h2_bundle.go:4604
		// _ = "end of CoverTab[38792]"
//line /usr/local/go/src/net/http/h2_bundle.go:4604
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4604
	// _ = "end of CoverTab[38790]"
}

func (sc *http2serverConn) notePanic() {
//line /usr/local/go/src/net/http/h2_bundle.go:4607
	_go_fuzz_dep_.CoverTab[38793]++

							if http2testHookOnPanicMu != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4609
		_go_fuzz_dep_.CoverTab[38795]++
								http2testHookOnPanicMu.Lock()
								defer http2testHookOnPanicMu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:4611
		// _ = "end of CoverTab[38795]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4612
		_go_fuzz_dep_.CoverTab[38796]++
//line /usr/local/go/src/net/http/h2_bundle.go:4612
		// _ = "end of CoverTab[38796]"
//line /usr/local/go/src/net/http/h2_bundle.go:4612
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4612
	// _ = "end of CoverTab[38793]"
//line /usr/local/go/src/net/http/h2_bundle.go:4612
	_go_fuzz_dep_.CoverTab[38794]++
							if http2testHookOnPanic != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4613
		_go_fuzz_dep_.CoverTab[38797]++
								if e := recover(); e != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4614
			_go_fuzz_dep_.CoverTab[38798]++
									if http2testHookOnPanic(sc, e) {
//line /usr/local/go/src/net/http/h2_bundle.go:4615
				_go_fuzz_dep_.CoverTab[38799]++
										panic(e)
//line /usr/local/go/src/net/http/h2_bundle.go:4616
				// _ = "end of CoverTab[38799]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4617
				_go_fuzz_dep_.CoverTab[38800]++
//line /usr/local/go/src/net/http/h2_bundle.go:4617
				// _ = "end of CoverTab[38800]"
//line /usr/local/go/src/net/http/h2_bundle.go:4617
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4617
			// _ = "end of CoverTab[38798]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4618
			_go_fuzz_dep_.CoverTab[38801]++
//line /usr/local/go/src/net/http/h2_bundle.go:4618
			// _ = "end of CoverTab[38801]"
//line /usr/local/go/src/net/http/h2_bundle.go:4618
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4618
		// _ = "end of CoverTab[38797]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4619
		_go_fuzz_dep_.CoverTab[38802]++
//line /usr/local/go/src/net/http/h2_bundle.go:4619
		// _ = "end of CoverTab[38802]"
//line /usr/local/go/src/net/http/h2_bundle.go:4619
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4619
	// _ = "end of CoverTab[38794]"
}

func (sc *http2serverConn) serve() {
//line /usr/local/go/src/net/http/h2_bundle.go:4622
	_go_fuzz_dep_.CoverTab[38803]++
							sc.serveG.check()
							defer sc.notePanic()
							defer sc.conn.Close()
							defer sc.closeAllStreamsOnConnClose()
							defer sc.stopShutdownTimer()
							defer close(sc.doneServing)

							if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:4630
		_go_fuzz_dep_.CoverTab[38808]++
								sc.vlogf("http2: server connection from %v on %p", sc.conn.RemoteAddr(), sc.hs)
//line /usr/local/go/src/net/http/h2_bundle.go:4631
		// _ = "end of CoverTab[38808]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4632
		_go_fuzz_dep_.CoverTab[38809]++
//line /usr/local/go/src/net/http/h2_bundle.go:4632
		// _ = "end of CoverTab[38809]"
//line /usr/local/go/src/net/http/h2_bundle.go:4632
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4632
	// _ = "end of CoverTab[38803]"
//line /usr/local/go/src/net/http/h2_bundle.go:4632
	_go_fuzz_dep_.CoverTab[38804]++

							sc.writeFrame(http2FrameWriteRequest{
		write: http2writeSettings{
			{http2SettingMaxFrameSize, sc.srv.maxReadFrameSize()},
			{http2SettingMaxConcurrentStreams, sc.advMaxStreams},
			{http2SettingMaxHeaderListSize, sc.maxHeaderListSize()},
			{http2SettingHeaderTableSize, sc.srv.maxDecoderHeaderTableSize()},
			{http2SettingInitialWindowSize, uint32(sc.srv.initialStreamRecvWindowSize())},
		},
	})
							sc.unackedSettings++

//line /usr/local/go/src/net/http/h2_bundle.go:4647
	if diff := sc.srv.initialConnRecvWindowSize() - http2initialWindowSize; diff > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:4647
		_go_fuzz_dep_.CoverTab[38810]++
								sc.sendWindowUpdate(nil, int(diff))
//line /usr/local/go/src/net/http/h2_bundle.go:4648
		// _ = "end of CoverTab[38810]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4649
		_go_fuzz_dep_.CoverTab[38811]++
//line /usr/local/go/src/net/http/h2_bundle.go:4649
		// _ = "end of CoverTab[38811]"
//line /usr/local/go/src/net/http/h2_bundle.go:4649
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4649
	// _ = "end of CoverTab[38804]"
//line /usr/local/go/src/net/http/h2_bundle.go:4649
	_go_fuzz_dep_.CoverTab[38805]++

							if err := sc.readPreface(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4651
		_go_fuzz_dep_.CoverTab[38812]++
								sc.condlogf(err, "http2: server: error reading preface from client %v: %v", sc.conn.RemoteAddr(), err)
								return
//line /usr/local/go/src/net/http/h2_bundle.go:4653
		// _ = "end of CoverTab[38812]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4654
		_go_fuzz_dep_.CoverTab[38813]++
//line /usr/local/go/src/net/http/h2_bundle.go:4654
		// _ = "end of CoverTab[38813]"
//line /usr/local/go/src/net/http/h2_bundle.go:4654
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4654
	// _ = "end of CoverTab[38805]"
//line /usr/local/go/src/net/http/h2_bundle.go:4654
	_go_fuzz_dep_.CoverTab[38806]++

//line /usr/local/go/src/net/http/h2_bundle.go:4659
	sc.setConnState(StateActive)
	sc.setConnState(StateIdle)

	if sc.srv.IdleTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:4662
		_go_fuzz_dep_.CoverTab[38814]++
								sc.idleTimer = time.AfterFunc(sc.srv.IdleTimeout, sc.onIdleTimer)
								defer sc.idleTimer.Stop()
//line /usr/local/go/src/net/http/h2_bundle.go:4664
		// _ = "end of CoverTab[38814]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4665
		_go_fuzz_dep_.CoverTab[38815]++
//line /usr/local/go/src/net/http/h2_bundle.go:4665
		// _ = "end of CoverTab[38815]"
//line /usr/local/go/src/net/http/h2_bundle.go:4665
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4665
	// _ = "end of CoverTab[38806]"
//line /usr/local/go/src/net/http/h2_bundle.go:4665
	_go_fuzz_dep_.CoverTab[38807]++
//line /usr/local/go/src/net/http/h2_bundle.go:4665
	_curRoutineNum17_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:4665
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum17_)

							go sc.readFrames()

							settingsTimer := time.AfterFunc(http2firstSettingsTimeout, sc.onSettingsTimer)
							defer settingsTimer.Stop()

							loopNum := 0
							for {
//line /usr/local/go/src/net/http/h2_bundle.go:4673
		_go_fuzz_dep_.CoverTab[38816]++
								loopNum++
								select {
		case wr := <-sc.wantWriteFrameCh:
//line /usr/local/go/src/net/http/h2_bundle.go:4676
			_go_fuzz_dep_.CoverTab[38819]++
									if se, ok := wr.write.(http2StreamError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:4677
				_go_fuzz_dep_.CoverTab[38827]++
										sc.resetStream(se)
										break
//line /usr/local/go/src/net/http/h2_bundle.go:4679
				// _ = "end of CoverTab[38827]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4680
				_go_fuzz_dep_.CoverTab[38828]++
//line /usr/local/go/src/net/http/h2_bundle.go:4680
				// _ = "end of CoverTab[38828]"
//line /usr/local/go/src/net/http/h2_bundle.go:4680
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4680
			// _ = "end of CoverTab[38819]"
//line /usr/local/go/src/net/http/h2_bundle.go:4680
			_go_fuzz_dep_.CoverTab[38820]++
									sc.writeFrame(wr)
//line /usr/local/go/src/net/http/h2_bundle.go:4681
			// _ = "end of CoverTab[38820]"
		case res := <-sc.wroteFrameCh:
//line /usr/local/go/src/net/http/h2_bundle.go:4682
			_go_fuzz_dep_.CoverTab[38821]++
									sc.wroteFrame(res)
//line /usr/local/go/src/net/http/h2_bundle.go:4683
			// _ = "end of CoverTab[38821]"
		case res := <-sc.readFrameCh:
//line /usr/local/go/src/net/http/h2_bundle.go:4684
			_go_fuzz_dep_.CoverTab[38822]++

//line /usr/local/go/src/net/http/h2_bundle.go:4687
			if sc.writingFrameAsync {
//line /usr/local/go/src/net/http/h2_bundle.go:4687
				_go_fuzz_dep_.CoverTab[38829]++
										select {
				case wroteRes := <-sc.wroteFrameCh:
//line /usr/local/go/src/net/http/h2_bundle.go:4689
					_go_fuzz_dep_.CoverTab[38830]++
											sc.wroteFrame(wroteRes)
//line /usr/local/go/src/net/http/h2_bundle.go:4690
					// _ = "end of CoverTab[38830]"
				default:
//line /usr/local/go/src/net/http/h2_bundle.go:4691
					_go_fuzz_dep_.CoverTab[38831]++
//line /usr/local/go/src/net/http/h2_bundle.go:4691
					// _ = "end of CoverTab[38831]"
				}
//line /usr/local/go/src/net/http/h2_bundle.go:4692
				// _ = "end of CoverTab[38829]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4693
				_go_fuzz_dep_.CoverTab[38832]++
//line /usr/local/go/src/net/http/h2_bundle.go:4693
				// _ = "end of CoverTab[38832]"
//line /usr/local/go/src/net/http/h2_bundle.go:4693
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4693
			// _ = "end of CoverTab[38822]"
//line /usr/local/go/src/net/http/h2_bundle.go:4693
			_go_fuzz_dep_.CoverTab[38823]++
									if !sc.processFrameFromReader(res) {
//line /usr/local/go/src/net/http/h2_bundle.go:4694
				_go_fuzz_dep_.CoverTab[38833]++
										return
//line /usr/local/go/src/net/http/h2_bundle.go:4695
				// _ = "end of CoverTab[38833]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4696
				_go_fuzz_dep_.CoverTab[38834]++
//line /usr/local/go/src/net/http/h2_bundle.go:4696
				// _ = "end of CoverTab[38834]"
//line /usr/local/go/src/net/http/h2_bundle.go:4696
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4696
			// _ = "end of CoverTab[38823]"
//line /usr/local/go/src/net/http/h2_bundle.go:4696
			_go_fuzz_dep_.CoverTab[38824]++
									res.readMore()
									if settingsTimer != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4698
				_go_fuzz_dep_.CoverTab[38835]++
										settingsTimer.Stop()
										settingsTimer = nil
//line /usr/local/go/src/net/http/h2_bundle.go:4700
				// _ = "end of CoverTab[38835]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4701
				_go_fuzz_dep_.CoverTab[38836]++
//line /usr/local/go/src/net/http/h2_bundle.go:4701
				// _ = "end of CoverTab[38836]"
//line /usr/local/go/src/net/http/h2_bundle.go:4701
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4701
			// _ = "end of CoverTab[38824]"
		case m := <-sc.bodyReadCh:
//line /usr/local/go/src/net/http/h2_bundle.go:4702
			_go_fuzz_dep_.CoverTab[38825]++
									sc.noteBodyRead(m.st, m.n)
//line /usr/local/go/src/net/http/h2_bundle.go:4703
			// _ = "end of CoverTab[38825]"
		case msg := <-sc.serveMsgCh:
//line /usr/local/go/src/net/http/h2_bundle.go:4704
			_go_fuzz_dep_.CoverTab[38826]++
									switch v := msg.(type) {
			case func(int):
//line /usr/local/go/src/net/http/h2_bundle.go:4706
				_go_fuzz_dep_.CoverTab[38837]++
										v(loopNum)
//line /usr/local/go/src/net/http/h2_bundle.go:4707
				// _ = "end of CoverTab[38837]"
			case *http2serverMessage:
//line /usr/local/go/src/net/http/h2_bundle.go:4708
				_go_fuzz_dep_.CoverTab[38838]++
										switch v {
				case http2settingsTimerMsg:
//line /usr/local/go/src/net/http/h2_bundle.go:4710
					_go_fuzz_dep_.CoverTab[38842]++
											sc.logf("timeout waiting for SETTINGS frames from %v", sc.conn.RemoteAddr())
											return
//line /usr/local/go/src/net/http/h2_bundle.go:4712
					// _ = "end of CoverTab[38842]"
				case http2idleTimerMsg:
//line /usr/local/go/src/net/http/h2_bundle.go:4713
					_go_fuzz_dep_.CoverTab[38843]++
											sc.vlogf("connection is idle")
											sc.goAway(http2ErrCodeNo)
//line /usr/local/go/src/net/http/h2_bundle.go:4715
					// _ = "end of CoverTab[38843]"
				case http2shutdownTimerMsg:
//line /usr/local/go/src/net/http/h2_bundle.go:4716
					_go_fuzz_dep_.CoverTab[38844]++
											sc.vlogf("GOAWAY close timer fired; closing conn from %v", sc.conn.RemoteAddr())
											return
//line /usr/local/go/src/net/http/h2_bundle.go:4718
					// _ = "end of CoverTab[38844]"
				case http2gracefulShutdownMsg:
//line /usr/local/go/src/net/http/h2_bundle.go:4719
					_go_fuzz_dep_.CoverTab[38845]++
											sc.startGracefulShutdownInternal()
//line /usr/local/go/src/net/http/h2_bundle.go:4720
					// _ = "end of CoverTab[38845]"
				default:
//line /usr/local/go/src/net/http/h2_bundle.go:4721
					_go_fuzz_dep_.CoverTab[38846]++
											panic("unknown timer")
//line /usr/local/go/src/net/http/h2_bundle.go:4722
					// _ = "end of CoverTab[38846]"
				}
//line /usr/local/go/src/net/http/h2_bundle.go:4723
				// _ = "end of CoverTab[38838]"
			case *http2startPushRequest:
//line /usr/local/go/src/net/http/h2_bundle.go:4724
				_go_fuzz_dep_.CoverTab[38839]++
										sc.startPush(v)
//line /usr/local/go/src/net/http/h2_bundle.go:4725
				// _ = "end of CoverTab[38839]"
			case func(*http2serverConn):
//line /usr/local/go/src/net/http/h2_bundle.go:4726
				_go_fuzz_dep_.CoverTab[38840]++
										v(sc)
//line /usr/local/go/src/net/http/h2_bundle.go:4727
				// _ = "end of CoverTab[38840]"
			default:
//line /usr/local/go/src/net/http/h2_bundle.go:4728
				_go_fuzz_dep_.CoverTab[38841]++
										panic(fmt.Sprintf("unexpected type %T", v))
//line /usr/local/go/src/net/http/h2_bundle.go:4729
				// _ = "end of CoverTab[38841]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4730
			// _ = "end of CoverTab[38826]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4731
		// _ = "end of CoverTab[38816]"
//line /usr/local/go/src/net/http/h2_bundle.go:4731
		_go_fuzz_dep_.CoverTab[38817]++

//line /usr/local/go/src/net/http/h2_bundle.go:4736
		if sc.queuedControlFrames > sc.srv.maxQueuedControlFrames() {
//line /usr/local/go/src/net/http/h2_bundle.go:4736
			_go_fuzz_dep_.CoverTab[38847]++
									sc.vlogf("http2: too many control frames in send queue, closing connection")
									return
//line /usr/local/go/src/net/http/h2_bundle.go:4738
			// _ = "end of CoverTab[38847]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4739
			_go_fuzz_dep_.CoverTab[38848]++
//line /usr/local/go/src/net/http/h2_bundle.go:4739
			// _ = "end of CoverTab[38848]"
//line /usr/local/go/src/net/http/h2_bundle.go:4739
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4739
		// _ = "end of CoverTab[38817]"
//line /usr/local/go/src/net/http/h2_bundle.go:4739
		_go_fuzz_dep_.CoverTab[38818]++

//line /usr/local/go/src/net/http/h2_bundle.go:4744
		sentGoAway := sc.inGoAway && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4744
			_go_fuzz_dep_.CoverTab[38849]++
//line /usr/local/go/src/net/http/h2_bundle.go:4744
			return !sc.needToSendGoAway
//line /usr/local/go/src/net/http/h2_bundle.go:4744
			// _ = "end of CoverTab[38849]"
//line /usr/local/go/src/net/http/h2_bundle.go:4744
		}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4744
			_go_fuzz_dep_.CoverTab[38850]++
//line /usr/local/go/src/net/http/h2_bundle.go:4744
			return !sc.writingFrame
//line /usr/local/go/src/net/http/h2_bundle.go:4744
			// _ = "end of CoverTab[38850]"
//line /usr/local/go/src/net/http/h2_bundle.go:4744
		}()
		gracefulShutdownComplete := sc.goAwayCode == http2ErrCodeNo && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4745
			_go_fuzz_dep_.CoverTab[38851]++
//line /usr/local/go/src/net/http/h2_bundle.go:4745
			return sc.curOpenStreams() == 0
//line /usr/local/go/src/net/http/h2_bundle.go:4745
			// _ = "end of CoverTab[38851]"
//line /usr/local/go/src/net/http/h2_bundle.go:4745
		}()
								if sentGoAway && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4746
			_go_fuzz_dep_.CoverTab[38852]++
//line /usr/local/go/src/net/http/h2_bundle.go:4746
			return sc.shutdownTimer == nil
//line /usr/local/go/src/net/http/h2_bundle.go:4746
			// _ = "end of CoverTab[38852]"
//line /usr/local/go/src/net/http/h2_bundle.go:4746
		}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4746
			_go_fuzz_dep_.CoverTab[38853]++
//line /usr/local/go/src/net/http/h2_bundle.go:4746
			return (sc.goAwayCode != http2ErrCodeNo || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4746
				_go_fuzz_dep_.CoverTab[38854]++
//line /usr/local/go/src/net/http/h2_bundle.go:4746
				return gracefulShutdownComplete
//line /usr/local/go/src/net/http/h2_bundle.go:4746
				// _ = "end of CoverTab[38854]"
//line /usr/local/go/src/net/http/h2_bundle.go:4746
			}())
//line /usr/local/go/src/net/http/h2_bundle.go:4746
			// _ = "end of CoverTab[38853]"
//line /usr/local/go/src/net/http/h2_bundle.go:4746
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4746
			_go_fuzz_dep_.CoverTab[38855]++
									sc.shutDownIn(http2goAwayTimeout)
//line /usr/local/go/src/net/http/h2_bundle.go:4747
			// _ = "end of CoverTab[38855]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4748
			_go_fuzz_dep_.CoverTab[38856]++
//line /usr/local/go/src/net/http/h2_bundle.go:4748
			// _ = "end of CoverTab[38856]"
//line /usr/local/go/src/net/http/h2_bundle.go:4748
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4748
		// _ = "end of CoverTab[38818]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4749
	// _ = "end of CoverTab[38807]"
}

func (sc *http2serverConn) awaitGracefulShutdown(sharedCh <-chan struct{}, privateCh chan struct{}) {
//line /usr/local/go/src/net/http/h2_bundle.go:4752
	_go_fuzz_dep_.CoverTab[38857]++
							select {
	case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:4754
		_go_fuzz_dep_.CoverTab[38858]++
//line /usr/local/go/src/net/http/h2_bundle.go:4754
		// _ = "end of CoverTab[38858]"
	case <-sharedCh:
//line /usr/local/go/src/net/http/h2_bundle.go:4755
		_go_fuzz_dep_.CoverTab[38859]++
								close(privateCh)
//line /usr/local/go/src/net/http/h2_bundle.go:4756
		// _ = "end of CoverTab[38859]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4757
	// _ = "end of CoverTab[38857]"
}

type http2serverMessage int

// Message values sent to serveMsgCh.
var (
	http2settingsTimerMsg		= new(http2serverMessage)
	http2idleTimerMsg		= new(http2serverMessage)
	http2shutdownTimerMsg		= new(http2serverMessage)
	http2gracefulShutdownMsg	= new(http2serverMessage)
)

func (sc *http2serverConn) onSettingsTimer() {
//line /usr/local/go/src/net/http/h2_bundle.go:4770
	_go_fuzz_dep_.CoverTab[38860]++
//line /usr/local/go/src/net/http/h2_bundle.go:4770
	sc.sendServeMsg(http2settingsTimerMsg)
//line /usr/local/go/src/net/http/h2_bundle.go:4770
	// _ = "end of CoverTab[38860]"
//line /usr/local/go/src/net/http/h2_bundle.go:4770
}

func (sc *http2serverConn) onIdleTimer() {
//line /usr/local/go/src/net/http/h2_bundle.go:4772
	_go_fuzz_dep_.CoverTab[38861]++
//line /usr/local/go/src/net/http/h2_bundle.go:4772
	sc.sendServeMsg(http2idleTimerMsg)
//line /usr/local/go/src/net/http/h2_bundle.go:4772
	// _ = "end of CoverTab[38861]"
//line /usr/local/go/src/net/http/h2_bundle.go:4772
}

func (sc *http2serverConn) onShutdownTimer() {
//line /usr/local/go/src/net/http/h2_bundle.go:4774
	_go_fuzz_dep_.CoverTab[38862]++
//line /usr/local/go/src/net/http/h2_bundle.go:4774
	sc.sendServeMsg(http2shutdownTimerMsg)
//line /usr/local/go/src/net/http/h2_bundle.go:4774
	// _ = "end of CoverTab[38862]"
//line /usr/local/go/src/net/http/h2_bundle.go:4774
}

func (sc *http2serverConn) sendServeMsg(msg interface{}) {
//line /usr/local/go/src/net/http/h2_bundle.go:4776
	_go_fuzz_dep_.CoverTab[38863]++
							sc.serveG.checkNotOn()
							select {
	case sc.serveMsgCh <- msg:
//line /usr/local/go/src/net/http/h2_bundle.go:4779
		_go_fuzz_dep_.CoverTab[38864]++
//line /usr/local/go/src/net/http/h2_bundle.go:4779
		// _ = "end of CoverTab[38864]"
	case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:4780
		_go_fuzz_dep_.CoverTab[38865]++
//line /usr/local/go/src/net/http/h2_bundle.go:4780
		// _ = "end of CoverTab[38865]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4781
	// _ = "end of CoverTab[38863]"
}

var http2errPrefaceTimeout = errors.New("timeout waiting for client preface")

// readPreface reads the ClientPreface greeting from the peer or
//line /usr/local/go/src/net/http/h2_bundle.go:4786
// returns errPrefaceTimeout on timeout, or an error if the greeting
//line /usr/local/go/src/net/http/h2_bundle.go:4786
// is invalid.
//line /usr/local/go/src/net/http/h2_bundle.go:4789
func (sc *http2serverConn) readPreface() error {
//line /usr/local/go/src/net/http/h2_bundle.go:4789
	_go_fuzz_dep_.CoverTab[38866]++
							if sc.sawClientPreface {
//line /usr/local/go/src/net/http/h2_bundle.go:4790
		_go_fuzz_dep_.CoverTab[38869]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:4791
		// _ = "end of CoverTab[38869]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4792
		_go_fuzz_dep_.CoverTab[38870]++
//line /usr/local/go/src/net/http/h2_bundle.go:4792
		// _ = "end of CoverTab[38870]"
//line /usr/local/go/src/net/http/h2_bundle.go:4792
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4792
	// _ = "end of CoverTab[38866]"
//line /usr/local/go/src/net/http/h2_bundle.go:4792
	_go_fuzz_dep_.CoverTab[38867]++
							errc := make(chan error, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:4793
	_curRoutineNum18_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:4793
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum18_)
							go func() {
//line /usr/local/go/src/net/http/h2_bundle.go:4794
		_go_fuzz_dep_.CoverTab[38871]++
//line /usr/local/go/src/net/http/h2_bundle.go:4794
		defer func() {
//line /usr/local/go/src/net/http/h2_bundle.go:4794
			_go_fuzz_dep_.CoverTab[38872]++
//line /usr/local/go/src/net/http/h2_bundle.go:4794
			_go_fuzz_dep_.RoutineInfo.AddTerminatedRoutineNum(_curRoutineNum18_)
//line /usr/local/go/src/net/http/h2_bundle.go:4794
			// _ = "end of CoverTab[38872]"
//line /usr/local/go/src/net/http/h2_bundle.go:4794
		}()

								buf := make([]byte, len(http2ClientPreface))
								if _, err := io.ReadFull(sc.conn, buf); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4797
			_go_fuzz_dep_.CoverTab[38873]++
									errc <- err
//line /usr/local/go/src/net/http/h2_bundle.go:4798
			// _ = "end of CoverTab[38873]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4799
			_go_fuzz_dep_.CoverTab[38874]++
//line /usr/local/go/src/net/http/h2_bundle.go:4799
			if !bytes.Equal(buf, http2clientPreface) {
//line /usr/local/go/src/net/http/h2_bundle.go:4799
				_go_fuzz_dep_.CoverTab[38875]++
										errc <- fmt.Errorf("bogus greeting %q", buf)
//line /usr/local/go/src/net/http/h2_bundle.go:4800
				// _ = "end of CoverTab[38875]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4801
				_go_fuzz_dep_.CoverTab[38876]++
										errc <- nil
//line /usr/local/go/src/net/http/h2_bundle.go:4802
				// _ = "end of CoverTab[38876]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4803
			// _ = "end of CoverTab[38874]"
//line /usr/local/go/src/net/http/h2_bundle.go:4803
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4803
		// _ = "end of CoverTab[38871]"
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:4804
	// _ = "end of CoverTab[38867]"
//line /usr/local/go/src/net/http/h2_bundle.go:4804
	_go_fuzz_dep_.CoverTab[38868]++
							timer := time.NewTimer(http2prefaceTimeout)
							defer timer.Stop()
							select {
	case <-timer.C:
//line /usr/local/go/src/net/http/h2_bundle.go:4808
		_go_fuzz_dep_.CoverTab[38877]++
								return http2errPrefaceTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:4809
		// _ = "end of CoverTab[38877]"
	case err := <-errc:
//line /usr/local/go/src/net/http/h2_bundle.go:4810
		_go_fuzz_dep_.CoverTab[38878]++
								if err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4811
			_go_fuzz_dep_.CoverTab[38880]++
									if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:4812
				_go_fuzz_dep_.CoverTab[38881]++
										sc.vlogf("http2: server: client %v said hello", sc.conn.RemoteAddr())
//line /usr/local/go/src/net/http/h2_bundle.go:4813
				// _ = "end of CoverTab[38881]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4814
				_go_fuzz_dep_.CoverTab[38882]++
//line /usr/local/go/src/net/http/h2_bundle.go:4814
				// _ = "end of CoverTab[38882]"
//line /usr/local/go/src/net/http/h2_bundle.go:4814
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4814
			// _ = "end of CoverTab[38880]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4815
			_go_fuzz_dep_.CoverTab[38883]++
//line /usr/local/go/src/net/http/h2_bundle.go:4815
			// _ = "end of CoverTab[38883]"
//line /usr/local/go/src/net/http/h2_bundle.go:4815
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4815
		// _ = "end of CoverTab[38878]"
//line /usr/local/go/src/net/http/h2_bundle.go:4815
		_go_fuzz_dep_.CoverTab[38879]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:4816
		// _ = "end of CoverTab[38879]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4817
	// _ = "end of CoverTab[38868]"
}

var http2errChanPool = sync.Pool{
	New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:4821
		_go_fuzz_dep_.CoverTab[38884]++
//line /usr/local/go/src/net/http/h2_bundle.go:4821
		return make(chan error, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:4821
		// _ = "end of CoverTab[38884]"
//line /usr/local/go/src/net/http/h2_bundle.go:4821
	},
}

var http2writeDataPool = sync.Pool{
	New: func() interface{} {
//line /usr/local/go/src/net/http/h2_bundle.go:4825
		_go_fuzz_dep_.CoverTab[38885]++
//line /usr/local/go/src/net/http/h2_bundle.go:4825
		return new(http2writeData)
//line /usr/local/go/src/net/http/h2_bundle.go:4825
		// _ = "end of CoverTab[38885]"
//line /usr/local/go/src/net/http/h2_bundle.go:4825
	},
}

// writeDataFromHandler writes DATA response frames from a handler on
//line /usr/local/go/src/net/http/h2_bundle.go:4828
// the given stream.
//line /usr/local/go/src/net/http/h2_bundle.go:4830
func (sc *http2serverConn) writeDataFromHandler(stream *http2stream, data []byte, endStream bool) error {
//line /usr/local/go/src/net/http/h2_bundle.go:4830
	_go_fuzz_dep_.CoverTab[38886]++
							ch := http2errChanPool.Get().(chan error)
							writeArg := http2writeDataPool.Get().(*http2writeData)
							*writeArg = http2writeData{stream.id, data, endStream}
							err := sc.writeFrameFromHandler(http2FrameWriteRequest{
		write:	writeArg,
		stream:	stream,
		done:	ch,
	})
	if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4839
		_go_fuzz_dep_.CoverTab[38890]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:4840
		// _ = "end of CoverTab[38890]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4841
		_go_fuzz_dep_.CoverTab[38891]++
//line /usr/local/go/src/net/http/h2_bundle.go:4841
		// _ = "end of CoverTab[38891]"
//line /usr/local/go/src/net/http/h2_bundle.go:4841
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4841
	// _ = "end of CoverTab[38886]"
//line /usr/local/go/src/net/http/h2_bundle.go:4841
	_go_fuzz_dep_.CoverTab[38887]++
							var frameWriteDone bool	// the frame write is done (successfully or not)
							select {
	case err = <-ch:
//line /usr/local/go/src/net/http/h2_bundle.go:4844
		_go_fuzz_dep_.CoverTab[38892]++
								frameWriteDone = true
//line /usr/local/go/src/net/http/h2_bundle.go:4845
		// _ = "end of CoverTab[38892]"
	case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:4846
		_go_fuzz_dep_.CoverTab[38893]++
								return http2errClientDisconnected
//line /usr/local/go/src/net/http/h2_bundle.go:4847
		// _ = "end of CoverTab[38893]"
	case <-stream.cw:
//line /usr/local/go/src/net/http/h2_bundle.go:4848
		_go_fuzz_dep_.CoverTab[38894]++

//line /usr/local/go/src/net/http/h2_bundle.go:4856
		select {
		case err = <-ch:
//line /usr/local/go/src/net/http/h2_bundle.go:4857
			_go_fuzz_dep_.CoverTab[38895]++
									frameWriteDone = true
//line /usr/local/go/src/net/http/h2_bundle.go:4858
			// _ = "end of CoverTab[38895]"
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:4859
			_go_fuzz_dep_.CoverTab[38896]++
									return http2errStreamClosed
//line /usr/local/go/src/net/http/h2_bundle.go:4860
			// _ = "end of CoverTab[38896]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4861
		// _ = "end of CoverTab[38894]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4862
	// _ = "end of CoverTab[38887]"
//line /usr/local/go/src/net/http/h2_bundle.go:4862
	_go_fuzz_dep_.CoverTab[38888]++
							http2errChanPool.Put(ch)
							if frameWriteDone {
//line /usr/local/go/src/net/http/h2_bundle.go:4864
		_go_fuzz_dep_.CoverTab[38897]++
								http2writeDataPool.Put(writeArg)
//line /usr/local/go/src/net/http/h2_bundle.go:4865
		// _ = "end of CoverTab[38897]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4866
		_go_fuzz_dep_.CoverTab[38898]++
//line /usr/local/go/src/net/http/h2_bundle.go:4866
		// _ = "end of CoverTab[38898]"
//line /usr/local/go/src/net/http/h2_bundle.go:4866
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4866
	// _ = "end of CoverTab[38888]"
//line /usr/local/go/src/net/http/h2_bundle.go:4866
	_go_fuzz_dep_.CoverTab[38889]++
							return err
//line /usr/local/go/src/net/http/h2_bundle.go:4867
	// _ = "end of CoverTab[38889]"
}

// writeFrameFromHandler sends wr to sc.wantWriteFrameCh, but aborts
//line /usr/local/go/src/net/http/h2_bundle.go:4870
// if the connection has gone away.
//line /usr/local/go/src/net/http/h2_bundle.go:4870
//
//line /usr/local/go/src/net/http/h2_bundle.go:4870
// This must not be run from the serve goroutine itself, else it might
//line /usr/local/go/src/net/http/h2_bundle.go:4870
// deadlock writing to sc.wantWriteFrameCh (which is only mildly
//line /usr/local/go/src/net/http/h2_bundle.go:4870
// buffered and is read by serve itself). If you're on the serve
//line /usr/local/go/src/net/http/h2_bundle.go:4870
// goroutine, call writeFrame instead.
//line /usr/local/go/src/net/http/h2_bundle.go:4877
func (sc *http2serverConn) writeFrameFromHandler(wr http2FrameWriteRequest) error {
//line /usr/local/go/src/net/http/h2_bundle.go:4877
	_go_fuzz_dep_.CoverTab[38899]++
							sc.serveG.checkNotOn()
							select {
	case sc.wantWriteFrameCh <- wr:
//line /usr/local/go/src/net/http/h2_bundle.go:4880
		_go_fuzz_dep_.CoverTab[38900]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:4881
		// _ = "end of CoverTab[38900]"
	case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:4882
		_go_fuzz_dep_.CoverTab[38901]++

//line /usr/local/go/src/net/http/h2_bundle.go:4885
		return http2errClientDisconnected
//line /usr/local/go/src/net/http/h2_bundle.go:4885
		// _ = "end of CoverTab[38901]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4886
	// _ = "end of CoverTab[38899]"
}

// writeFrame schedules a frame to write and sends it if there's nothing
//line /usr/local/go/src/net/http/h2_bundle.go:4889
// already being written.
//line /usr/local/go/src/net/http/h2_bundle.go:4889
//
//line /usr/local/go/src/net/http/h2_bundle.go:4889
// There is no pushback here (the serve goroutine never blocks). It's
//line /usr/local/go/src/net/http/h2_bundle.go:4889
// the http.Handlers that block, waiting for their previous frames to
//line /usr/local/go/src/net/http/h2_bundle.go:4889
// make it onto the wire
//line /usr/local/go/src/net/http/h2_bundle.go:4889
//
//line /usr/local/go/src/net/http/h2_bundle.go:4889
// If you're not on the serve goroutine, use writeFrameFromHandler instead.
//line /usr/local/go/src/net/http/h2_bundle.go:4897
func (sc *http2serverConn) writeFrame(wr http2FrameWriteRequest) {
//line /usr/local/go/src/net/http/h2_bundle.go:4897
	_go_fuzz_dep_.CoverTab[38902]++
							sc.serveG.check()

							// If true, wr will not be written and wr.done will not be signaled.
							var ignoreWrite bool

//line /usr/local/go/src/net/http/h2_bundle.go:4921
	if wr.StreamID() != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:4921
		_go_fuzz_dep_.CoverTab[38906]++
								_, isReset := wr.write.(http2StreamError)
								if state, _ := sc.state(wr.StreamID()); state == http2stateClosed && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:4923
			_go_fuzz_dep_.CoverTab[38907]++
//line /usr/local/go/src/net/http/h2_bundle.go:4923
			return !isReset
//line /usr/local/go/src/net/http/h2_bundle.go:4923
			// _ = "end of CoverTab[38907]"
//line /usr/local/go/src/net/http/h2_bundle.go:4923
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:4923
			_go_fuzz_dep_.CoverTab[38908]++
									ignoreWrite = true
//line /usr/local/go/src/net/http/h2_bundle.go:4924
			// _ = "end of CoverTab[38908]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4925
			_go_fuzz_dep_.CoverTab[38909]++
//line /usr/local/go/src/net/http/h2_bundle.go:4925
			// _ = "end of CoverTab[38909]"
//line /usr/local/go/src/net/http/h2_bundle.go:4925
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4925
		// _ = "end of CoverTab[38906]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4926
		_go_fuzz_dep_.CoverTab[38910]++
//line /usr/local/go/src/net/http/h2_bundle.go:4926
		// _ = "end of CoverTab[38910]"
//line /usr/local/go/src/net/http/h2_bundle.go:4926
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4926
	// _ = "end of CoverTab[38902]"
//line /usr/local/go/src/net/http/h2_bundle.go:4926
	_go_fuzz_dep_.CoverTab[38903]++

//line /usr/local/go/src/net/http/h2_bundle.go:4930
	switch wr.write.(type) {
	case *http2writeResHeaders:
//line /usr/local/go/src/net/http/h2_bundle.go:4931
		_go_fuzz_dep_.CoverTab[38911]++
								wr.stream.wroteHeaders = true
//line /usr/local/go/src/net/http/h2_bundle.go:4932
		// _ = "end of CoverTab[38911]"
	case http2write100ContinueHeadersFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:4933
		_go_fuzz_dep_.CoverTab[38912]++
								if wr.stream.wroteHeaders {
//line /usr/local/go/src/net/http/h2_bundle.go:4934
			_go_fuzz_dep_.CoverTab[38913]++

//line /usr/local/go/src/net/http/h2_bundle.go:4937
			if wr.done != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4937
				_go_fuzz_dep_.CoverTab[38915]++
										panic("wr.done != nil for write100ContinueHeadersFrame")
//line /usr/local/go/src/net/http/h2_bundle.go:4938
				// _ = "end of CoverTab[38915]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4939
				_go_fuzz_dep_.CoverTab[38916]++
//line /usr/local/go/src/net/http/h2_bundle.go:4939
				// _ = "end of CoverTab[38916]"
//line /usr/local/go/src/net/http/h2_bundle.go:4939
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4939
			// _ = "end of CoverTab[38913]"
//line /usr/local/go/src/net/http/h2_bundle.go:4939
			_go_fuzz_dep_.CoverTab[38914]++
									ignoreWrite = true
//line /usr/local/go/src/net/http/h2_bundle.go:4940
			// _ = "end of CoverTab[38914]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4941
			_go_fuzz_dep_.CoverTab[38917]++
//line /usr/local/go/src/net/http/h2_bundle.go:4941
			// _ = "end of CoverTab[38917]"
//line /usr/local/go/src/net/http/h2_bundle.go:4941
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4941
		// _ = "end of CoverTab[38912]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4942
	// _ = "end of CoverTab[38903]"
//line /usr/local/go/src/net/http/h2_bundle.go:4942
	_go_fuzz_dep_.CoverTab[38904]++

							if !ignoreWrite {
//line /usr/local/go/src/net/http/h2_bundle.go:4944
		_go_fuzz_dep_.CoverTab[38918]++
								if wr.isControl() {
//line /usr/local/go/src/net/http/h2_bundle.go:4945
			_go_fuzz_dep_.CoverTab[38920]++
									sc.queuedControlFrames++

//line /usr/local/go/src/net/http/h2_bundle.go:4949
			if sc.queuedControlFrames < 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:4949
				_go_fuzz_dep_.CoverTab[38921]++
										sc.conn.Close()
//line /usr/local/go/src/net/http/h2_bundle.go:4950
				// _ = "end of CoverTab[38921]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4951
				_go_fuzz_dep_.CoverTab[38922]++
//line /usr/local/go/src/net/http/h2_bundle.go:4951
				// _ = "end of CoverTab[38922]"
//line /usr/local/go/src/net/http/h2_bundle.go:4951
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4951
			// _ = "end of CoverTab[38920]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4952
			_go_fuzz_dep_.CoverTab[38923]++
//line /usr/local/go/src/net/http/h2_bundle.go:4952
			// _ = "end of CoverTab[38923]"
//line /usr/local/go/src/net/http/h2_bundle.go:4952
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4952
		// _ = "end of CoverTab[38918]"
//line /usr/local/go/src/net/http/h2_bundle.go:4952
		_go_fuzz_dep_.CoverTab[38919]++
								sc.writeSched.Push(wr)
//line /usr/local/go/src/net/http/h2_bundle.go:4953
		// _ = "end of CoverTab[38919]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4954
		_go_fuzz_dep_.CoverTab[38924]++
//line /usr/local/go/src/net/http/h2_bundle.go:4954
		// _ = "end of CoverTab[38924]"
//line /usr/local/go/src/net/http/h2_bundle.go:4954
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4954
	// _ = "end of CoverTab[38904]"
//line /usr/local/go/src/net/http/h2_bundle.go:4954
	_go_fuzz_dep_.CoverTab[38905]++
							sc.scheduleFrameWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:4955
	// _ = "end of CoverTab[38905]"
}

// startFrameWrite starts a goroutine to write wr (in a separate
//line /usr/local/go/src/net/http/h2_bundle.go:4958
// goroutine since that might block on the network), and updates the
//line /usr/local/go/src/net/http/h2_bundle.go:4958
// serve goroutine's state about the world, updated from info in wr.
//line /usr/local/go/src/net/http/h2_bundle.go:4961
func (sc *http2serverConn) startFrameWrite(wr http2FrameWriteRequest) {
//line /usr/local/go/src/net/http/h2_bundle.go:4961
	_go_fuzz_dep_.CoverTab[38925]++
							sc.serveG.check()
							if sc.writingFrame {
//line /usr/local/go/src/net/http/h2_bundle.go:4963
		_go_fuzz_dep_.CoverTab[38929]++
								panic("internal error: can only be writing one frame at a time")
//line /usr/local/go/src/net/http/h2_bundle.go:4964
		// _ = "end of CoverTab[38929]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4965
		_go_fuzz_dep_.CoverTab[38930]++
//line /usr/local/go/src/net/http/h2_bundle.go:4965
		// _ = "end of CoverTab[38930]"
//line /usr/local/go/src/net/http/h2_bundle.go:4965
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4965
	// _ = "end of CoverTab[38925]"
//line /usr/local/go/src/net/http/h2_bundle.go:4965
	_go_fuzz_dep_.CoverTab[38926]++

							st := wr.stream
							if st != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4968
		_go_fuzz_dep_.CoverTab[38931]++
								switch st.state {
		case http2stateHalfClosedLocal:
//line /usr/local/go/src/net/http/h2_bundle.go:4970
			_go_fuzz_dep_.CoverTab[38932]++
									switch wr.write.(type) {
			case http2StreamError, http2handlerPanicRST, http2writeWindowUpdate:
//line /usr/local/go/src/net/http/h2_bundle.go:4972
				_go_fuzz_dep_.CoverTab[38935]++
//line /usr/local/go/src/net/http/h2_bundle.go:4972
				// _ = "end of CoverTab[38935]"

//line /usr/local/go/src/net/http/h2_bundle.go:4975
			default:
//line /usr/local/go/src/net/http/h2_bundle.go:4975
				_go_fuzz_dep_.CoverTab[38936]++
										panic(fmt.Sprintf("internal error: attempt to send frame on a half-closed-local stream: %v", wr))
//line /usr/local/go/src/net/http/h2_bundle.go:4976
				// _ = "end of CoverTab[38936]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:4977
			// _ = "end of CoverTab[38932]"
		case http2stateClosed:
//line /usr/local/go/src/net/http/h2_bundle.go:4978
			_go_fuzz_dep_.CoverTab[38933]++
									panic(fmt.Sprintf("internal error: attempt to send frame on a closed stream: %v", wr))
//line /usr/local/go/src/net/http/h2_bundle.go:4979
			// _ = "end of CoverTab[38933]"
//line /usr/local/go/src/net/http/h2_bundle.go:4979
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:4979
			_go_fuzz_dep_.CoverTab[38934]++
//line /usr/local/go/src/net/http/h2_bundle.go:4979
			// _ = "end of CoverTab[38934]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4980
		// _ = "end of CoverTab[38931]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4981
		_go_fuzz_dep_.CoverTab[38937]++
//line /usr/local/go/src/net/http/h2_bundle.go:4981
		// _ = "end of CoverTab[38937]"
//line /usr/local/go/src/net/http/h2_bundle.go:4981
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4981
	// _ = "end of CoverTab[38926]"
//line /usr/local/go/src/net/http/h2_bundle.go:4981
	_go_fuzz_dep_.CoverTab[38927]++
							if wpp, ok := wr.write.(*http2writePushPromise); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:4982
		_go_fuzz_dep_.CoverTab[38938]++
								var err error
								wpp.promisedID, err = wpp.allocatePromisedID()
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:4985
			_go_fuzz_dep_.CoverTab[38939]++
									sc.writingFrameAsync = false
									wr.replyToWriter(err)
									return
//line /usr/local/go/src/net/http/h2_bundle.go:4988
			// _ = "end of CoverTab[38939]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4989
			_go_fuzz_dep_.CoverTab[38940]++
//line /usr/local/go/src/net/http/h2_bundle.go:4989
			// _ = "end of CoverTab[38940]"
//line /usr/local/go/src/net/http/h2_bundle.go:4989
		}
//line /usr/local/go/src/net/http/h2_bundle.go:4989
		// _ = "end of CoverTab[38938]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4990
		_go_fuzz_dep_.CoverTab[38941]++
//line /usr/local/go/src/net/http/h2_bundle.go:4990
		// _ = "end of CoverTab[38941]"
//line /usr/local/go/src/net/http/h2_bundle.go:4990
	}
//line /usr/local/go/src/net/http/h2_bundle.go:4990
	// _ = "end of CoverTab[38927]"
//line /usr/local/go/src/net/http/h2_bundle.go:4990
	_go_fuzz_dep_.CoverTab[38928]++

							sc.writingFrame = true
							sc.needsFrameFlush = true
							if wr.write.staysWithinBuffer(sc.bw.Available()) {
//line /usr/local/go/src/net/http/h2_bundle.go:4994
		_go_fuzz_dep_.CoverTab[38942]++
								sc.writingFrameAsync = false
								err := wr.write.writeFrame(sc)
								sc.wroteFrame(http2frameWriteResult{wr: wr, err: err})
//line /usr/local/go/src/net/http/h2_bundle.go:4997
		// _ = "end of CoverTab[38942]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:4998
		_go_fuzz_dep_.CoverTab[38943]++
								sc.writingFrameAsync = true
//line /usr/local/go/src/net/http/h2_bundle.go:4999
		_curRoutineNum19_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:4999
		_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum19_)
								go sc.writeFrameAsync(wr)
//line /usr/local/go/src/net/http/h2_bundle.go:5000
		// _ = "end of CoverTab[38943]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5001
	// _ = "end of CoverTab[38928]"
}

// errHandlerPanicked is the error given to any callers blocked in a read from
//line /usr/local/go/src/net/http/h2_bundle.go:5004
// Request.Body when the main goroutine panics. Since most handlers read in the
//line /usr/local/go/src/net/http/h2_bundle.go:5004
// main ServeHTTP goroutine, this will show up rarely.
//line /usr/local/go/src/net/http/h2_bundle.go:5007
var http2errHandlerPanicked = errors.New("http2: handler panicked")

// wroteFrame is called on the serve goroutine with the result of
//line /usr/local/go/src/net/http/h2_bundle.go:5009
// whatever happened on writeFrameAsync.
//line /usr/local/go/src/net/http/h2_bundle.go:5011
func (sc *http2serverConn) wroteFrame(res http2frameWriteResult) {
//line /usr/local/go/src/net/http/h2_bundle.go:5011
	_go_fuzz_dep_.CoverTab[38944]++
							sc.serveG.check()
							if !sc.writingFrame {
//line /usr/local/go/src/net/http/h2_bundle.go:5013
		_go_fuzz_dep_.CoverTab[38947]++
								panic("internal error: expected to be already writing a frame")
//line /usr/local/go/src/net/http/h2_bundle.go:5014
		// _ = "end of CoverTab[38947]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5015
		_go_fuzz_dep_.CoverTab[38948]++
//line /usr/local/go/src/net/http/h2_bundle.go:5015
		// _ = "end of CoverTab[38948]"
//line /usr/local/go/src/net/http/h2_bundle.go:5015
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5015
	// _ = "end of CoverTab[38944]"
//line /usr/local/go/src/net/http/h2_bundle.go:5015
	_go_fuzz_dep_.CoverTab[38945]++
							sc.writingFrame = false
							sc.writingFrameAsync = false

							wr := res.wr

							if http2writeEndsStream(wr.write) {
//line /usr/local/go/src/net/http/h2_bundle.go:5021
		_go_fuzz_dep_.CoverTab[38949]++
								st := wr.stream
								if st == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5023
			_go_fuzz_dep_.CoverTab[38951]++
									panic("internal error: expecting non-nil stream")
//line /usr/local/go/src/net/http/h2_bundle.go:5024
			// _ = "end of CoverTab[38951]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5025
			_go_fuzz_dep_.CoverTab[38952]++
//line /usr/local/go/src/net/http/h2_bundle.go:5025
			// _ = "end of CoverTab[38952]"
//line /usr/local/go/src/net/http/h2_bundle.go:5025
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5025
		// _ = "end of CoverTab[38949]"
//line /usr/local/go/src/net/http/h2_bundle.go:5025
		_go_fuzz_dep_.CoverTab[38950]++
								switch st.state {
		case http2stateOpen:
//line /usr/local/go/src/net/http/h2_bundle.go:5027
			_go_fuzz_dep_.CoverTab[38953]++

//line /usr/local/go/src/net/http/h2_bundle.go:5038
			st.state = http2stateHalfClosedLocal

//line /usr/local/go/src/net/http/h2_bundle.go:5043
			sc.resetStream(http2streamError(st.id, http2ErrCodeNo))
//line /usr/local/go/src/net/http/h2_bundle.go:5043
			// _ = "end of CoverTab[38953]"
		case http2stateHalfClosedRemote:
//line /usr/local/go/src/net/http/h2_bundle.go:5044
			_go_fuzz_dep_.CoverTab[38954]++
									sc.closeStream(st, http2errHandlerComplete)
//line /usr/local/go/src/net/http/h2_bundle.go:5045
			// _ = "end of CoverTab[38954]"
//line /usr/local/go/src/net/http/h2_bundle.go:5045
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:5045
			_go_fuzz_dep_.CoverTab[38955]++
//line /usr/local/go/src/net/http/h2_bundle.go:5045
			// _ = "end of CoverTab[38955]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5046
		// _ = "end of CoverTab[38950]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5047
		_go_fuzz_dep_.CoverTab[38956]++
								switch v := wr.write.(type) {
		case http2StreamError:
//line /usr/local/go/src/net/http/h2_bundle.go:5049
			_go_fuzz_dep_.CoverTab[38957]++

									if st, ok := sc.streams[v.StreamID]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:5051
				_go_fuzz_dep_.CoverTab[38959]++
										sc.closeStream(st, v)
//line /usr/local/go/src/net/http/h2_bundle.go:5052
				// _ = "end of CoverTab[38959]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5053
				_go_fuzz_dep_.CoverTab[38960]++
//line /usr/local/go/src/net/http/h2_bundle.go:5053
				// _ = "end of CoverTab[38960]"
//line /usr/local/go/src/net/http/h2_bundle.go:5053
			}
//line /usr/local/go/src/net/http/h2_bundle.go:5053
			// _ = "end of CoverTab[38957]"
		case http2handlerPanicRST:
//line /usr/local/go/src/net/http/h2_bundle.go:5054
			_go_fuzz_dep_.CoverTab[38958]++
									sc.closeStream(wr.stream, http2errHandlerPanicked)
//line /usr/local/go/src/net/http/h2_bundle.go:5055
			// _ = "end of CoverTab[38958]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5056
		// _ = "end of CoverTab[38956]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5057
	// _ = "end of CoverTab[38945]"
//line /usr/local/go/src/net/http/h2_bundle.go:5057
	_go_fuzz_dep_.CoverTab[38946]++

//line /usr/local/go/src/net/http/h2_bundle.go:5060
	wr.replyToWriter(res.err)

							sc.scheduleFrameWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:5062
	// _ = "end of CoverTab[38946]"
}

// scheduleFrameWrite tickles the frame writing scheduler.
//line /usr/local/go/src/net/http/h2_bundle.go:5065
//
//line /usr/local/go/src/net/http/h2_bundle.go:5065
// If a frame is already being written, nothing happens. This will be called again
//line /usr/local/go/src/net/http/h2_bundle.go:5065
// when the frame is done being written.
//line /usr/local/go/src/net/http/h2_bundle.go:5065
//
//line /usr/local/go/src/net/http/h2_bundle.go:5065
// If a frame isn't being written and we need to send one, the best frame
//line /usr/local/go/src/net/http/h2_bundle.go:5065
// to send is selected by writeSched.
//line /usr/local/go/src/net/http/h2_bundle.go:5065
//
//line /usr/local/go/src/net/http/h2_bundle.go:5065
// If a frame isn't being written and there's nothing else to send, we
//line /usr/local/go/src/net/http/h2_bundle.go:5065
// flush the write buffer.
//line /usr/local/go/src/net/http/h2_bundle.go:5075
func (sc *http2serverConn) scheduleFrameWrite() {
//line /usr/local/go/src/net/http/h2_bundle.go:5075
	_go_fuzz_dep_.CoverTab[38961]++
							sc.serveG.check()
							if sc.writingFrame || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5077
		_go_fuzz_dep_.CoverTab[38964]++
//line /usr/local/go/src/net/http/h2_bundle.go:5077
		return sc.inFrameScheduleLoop
//line /usr/local/go/src/net/http/h2_bundle.go:5077
		// _ = "end of CoverTab[38964]"
//line /usr/local/go/src/net/http/h2_bundle.go:5077
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5077
		_go_fuzz_dep_.CoverTab[38965]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:5078
		// _ = "end of CoverTab[38965]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5079
		_go_fuzz_dep_.CoverTab[38966]++
//line /usr/local/go/src/net/http/h2_bundle.go:5079
		// _ = "end of CoverTab[38966]"
//line /usr/local/go/src/net/http/h2_bundle.go:5079
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5079
	// _ = "end of CoverTab[38961]"
//line /usr/local/go/src/net/http/h2_bundle.go:5079
	_go_fuzz_dep_.CoverTab[38962]++
							sc.inFrameScheduleLoop = true
							for !sc.writingFrameAsync {
//line /usr/local/go/src/net/http/h2_bundle.go:5081
		_go_fuzz_dep_.CoverTab[38967]++
								if sc.needToSendGoAway {
//line /usr/local/go/src/net/http/h2_bundle.go:5082
			_go_fuzz_dep_.CoverTab[38972]++
									sc.needToSendGoAway = false
									sc.startFrameWrite(http2FrameWriteRequest{
				write: &http2writeGoAway{
					maxStreamID:	sc.maxClientStreamID,
					code:		sc.goAwayCode,
				},
			})
									continue
//line /usr/local/go/src/net/http/h2_bundle.go:5090
			// _ = "end of CoverTab[38972]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5091
			_go_fuzz_dep_.CoverTab[38973]++
//line /usr/local/go/src/net/http/h2_bundle.go:5091
			// _ = "end of CoverTab[38973]"
//line /usr/local/go/src/net/http/h2_bundle.go:5091
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5091
		// _ = "end of CoverTab[38967]"
//line /usr/local/go/src/net/http/h2_bundle.go:5091
		_go_fuzz_dep_.CoverTab[38968]++
								if sc.needToSendSettingsAck {
//line /usr/local/go/src/net/http/h2_bundle.go:5092
			_go_fuzz_dep_.CoverTab[38974]++
									sc.needToSendSettingsAck = false
									sc.startFrameWrite(http2FrameWriteRequest{write: http2writeSettingsAck{}})
									continue
//line /usr/local/go/src/net/http/h2_bundle.go:5095
			// _ = "end of CoverTab[38974]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5096
			_go_fuzz_dep_.CoverTab[38975]++
//line /usr/local/go/src/net/http/h2_bundle.go:5096
			// _ = "end of CoverTab[38975]"
//line /usr/local/go/src/net/http/h2_bundle.go:5096
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5096
		// _ = "end of CoverTab[38968]"
//line /usr/local/go/src/net/http/h2_bundle.go:5096
		_go_fuzz_dep_.CoverTab[38969]++
								if !sc.inGoAway || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5097
			_go_fuzz_dep_.CoverTab[38976]++
//line /usr/local/go/src/net/http/h2_bundle.go:5097
			return sc.goAwayCode == http2ErrCodeNo
//line /usr/local/go/src/net/http/h2_bundle.go:5097
			// _ = "end of CoverTab[38976]"
//line /usr/local/go/src/net/http/h2_bundle.go:5097
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5097
			_go_fuzz_dep_.CoverTab[38977]++
									if wr, ok := sc.writeSched.Pop(); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:5098
				_go_fuzz_dep_.CoverTab[38978]++
										if wr.isControl() {
//line /usr/local/go/src/net/http/h2_bundle.go:5099
					_go_fuzz_dep_.CoverTab[38980]++
											sc.queuedControlFrames--
//line /usr/local/go/src/net/http/h2_bundle.go:5100
					// _ = "end of CoverTab[38980]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5101
					_go_fuzz_dep_.CoverTab[38981]++
//line /usr/local/go/src/net/http/h2_bundle.go:5101
					// _ = "end of CoverTab[38981]"
//line /usr/local/go/src/net/http/h2_bundle.go:5101
				}
//line /usr/local/go/src/net/http/h2_bundle.go:5101
				// _ = "end of CoverTab[38978]"
//line /usr/local/go/src/net/http/h2_bundle.go:5101
				_go_fuzz_dep_.CoverTab[38979]++
										sc.startFrameWrite(wr)
										continue
//line /usr/local/go/src/net/http/h2_bundle.go:5103
				// _ = "end of CoverTab[38979]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5104
				_go_fuzz_dep_.CoverTab[38982]++
//line /usr/local/go/src/net/http/h2_bundle.go:5104
				// _ = "end of CoverTab[38982]"
//line /usr/local/go/src/net/http/h2_bundle.go:5104
			}
//line /usr/local/go/src/net/http/h2_bundle.go:5104
			// _ = "end of CoverTab[38977]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5105
			_go_fuzz_dep_.CoverTab[38983]++
//line /usr/local/go/src/net/http/h2_bundle.go:5105
			// _ = "end of CoverTab[38983]"
//line /usr/local/go/src/net/http/h2_bundle.go:5105
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5105
		// _ = "end of CoverTab[38969]"
//line /usr/local/go/src/net/http/h2_bundle.go:5105
		_go_fuzz_dep_.CoverTab[38970]++
								if sc.needsFrameFlush {
//line /usr/local/go/src/net/http/h2_bundle.go:5106
			_go_fuzz_dep_.CoverTab[38984]++
									sc.startFrameWrite(http2FrameWriteRequest{write: http2flushFrameWriter{}})
									sc.needsFrameFlush = false
									continue
//line /usr/local/go/src/net/http/h2_bundle.go:5109
			// _ = "end of CoverTab[38984]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5110
			_go_fuzz_dep_.CoverTab[38985]++
//line /usr/local/go/src/net/http/h2_bundle.go:5110
			// _ = "end of CoverTab[38985]"
//line /usr/local/go/src/net/http/h2_bundle.go:5110
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5110
		// _ = "end of CoverTab[38970]"
//line /usr/local/go/src/net/http/h2_bundle.go:5110
		_go_fuzz_dep_.CoverTab[38971]++
								break
//line /usr/local/go/src/net/http/h2_bundle.go:5111
		// _ = "end of CoverTab[38971]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5112
	// _ = "end of CoverTab[38962]"
//line /usr/local/go/src/net/http/h2_bundle.go:5112
	_go_fuzz_dep_.CoverTab[38963]++
							sc.inFrameScheduleLoop = false
//line /usr/local/go/src/net/http/h2_bundle.go:5113
	// _ = "end of CoverTab[38963]"
}

// startGracefulShutdown gracefully shuts down a connection. This
//line /usr/local/go/src/net/http/h2_bundle.go:5116
// sends GOAWAY with ErrCodeNo to tell the client we're gracefully
//line /usr/local/go/src/net/http/h2_bundle.go:5116
// shutting down. The connection isn't closed until all current
//line /usr/local/go/src/net/http/h2_bundle.go:5116
// streams are done.
//line /usr/local/go/src/net/http/h2_bundle.go:5116
//
//line /usr/local/go/src/net/http/h2_bundle.go:5116
// startGracefulShutdown returns immediately; it does not wait until
//line /usr/local/go/src/net/http/h2_bundle.go:5116
// the connection has shut down.
//line /usr/local/go/src/net/http/h2_bundle.go:5123
func (sc *http2serverConn) startGracefulShutdown() {
//line /usr/local/go/src/net/http/h2_bundle.go:5123
	_go_fuzz_dep_.CoverTab[38986]++
							sc.serveG.checkNotOn()
							sc.shutdownOnce.Do(func() {
//line /usr/local/go/src/net/http/h2_bundle.go:5125
		_go_fuzz_dep_.CoverTab[38987]++
//line /usr/local/go/src/net/http/h2_bundle.go:5125
		sc.sendServeMsg(http2gracefulShutdownMsg)
//line /usr/local/go/src/net/http/h2_bundle.go:5125
		// _ = "end of CoverTab[38987]"
//line /usr/local/go/src/net/http/h2_bundle.go:5125
	})
//line /usr/local/go/src/net/http/h2_bundle.go:5125
	// _ = "end of CoverTab[38986]"
}

// After sending GOAWAY with an error code (non-graceful shutdown), the
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// connection will close after goAwayTimeout.
//line /usr/local/go/src/net/http/h2_bundle.go:5128
//
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// If we close the connection immediately after sending GOAWAY, there may
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// be unsent data in our kernel receive buffer, which will cause the kernel
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// to send a TCP RST on close() instead of a FIN. This RST will abort the
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// connection immediately, whether or not the client had received the GOAWAY.
//line /usr/local/go/src/net/http/h2_bundle.go:5128
//
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// Ideally we should delay for at least 1 RTT + epsilon so the client has
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// a chance to read the GOAWAY and stop sending messages. Measuring RTT
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// is hard, so we approximate with 1 second. See golang.org/issue/18701.
//line /usr/local/go/src/net/http/h2_bundle.go:5128
//
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// This is a var so it can be shorter in tests, where all requests uses the
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// loopback interface making the expected RTT very small.
//line /usr/local/go/src/net/http/h2_bundle.go:5128
//
//line /usr/local/go/src/net/http/h2_bundle.go:5128
// TODO: configurable?
//line /usr/local/go/src/net/http/h2_bundle.go:5144
var http2goAwayTimeout = 1 * time.Second

func (sc *http2serverConn) startGracefulShutdownInternal() {
//line /usr/local/go/src/net/http/h2_bundle.go:5146
	_go_fuzz_dep_.CoverTab[38988]++
							sc.goAway(http2ErrCodeNo)
//line /usr/local/go/src/net/http/h2_bundle.go:5147
	// _ = "end of CoverTab[38988]"
}

func (sc *http2serverConn) goAway(code http2ErrCode) {
//line /usr/local/go/src/net/http/h2_bundle.go:5150
	_go_fuzz_dep_.CoverTab[38989]++
							sc.serveG.check()
							if sc.inGoAway {
//line /usr/local/go/src/net/http/h2_bundle.go:5152
		_go_fuzz_dep_.CoverTab[38991]++
								if sc.goAwayCode == http2ErrCodeNo {
//line /usr/local/go/src/net/http/h2_bundle.go:5153
			_go_fuzz_dep_.CoverTab[38993]++
									sc.goAwayCode = code
//line /usr/local/go/src/net/http/h2_bundle.go:5154
			// _ = "end of CoverTab[38993]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5155
			_go_fuzz_dep_.CoverTab[38994]++
//line /usr/local/go/src/net/http/h2_bundle.go:5155
			// _ = "end of CoverTab[38994]"
//line /usr/local/go/src/net/http/h2_bundle.go:5155
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5155
		// _ = "end of CoverTab[38991]"
//line /usr/local/go/src/net/http/h2_bundle.go:5155
		_go_fuzz_dep_.CoverTab[38992]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:5156
		// _ = "end of CoverTab[38992]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5157
		_go_fuzz_dep_.CoverTab[38995]++
//line /usr/local/go/src/net/http/h2_bundle.go:5157
		// _ = "end of CoverTab[38995]"
//line /usr/local/go/src/net/http/h2_bundle.go:5157
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5157
	// _ = "end of CoverTab[38989]"
//line /usr/local/go/src/net/http/h2_bundle.go:5157
	_go_fuzz_dep_.CoverTab[38990]++
							sc.inGoAway = true
							sc.needToSendGoAway = true
							sc.goAwayCode = code
							sc.scheduleFrameWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:5161
	// _ = "end of CoverTab[38990]"
}

func (sc *http2serverConn) shutDownIn(d time.Duration) {
//line /usr/local/go/src/net/http/h2_bundle.go:5164
	_go_fuzz_dep_.CoverTab[38996]++
							sc.serveG.check()
							sc.shutdownTimer = time.AfterFunc(d, sc.onShutdownTimer)
//line /usr/local/go/src/net/http/h2_bundle.go:5166
	// _ = "end of CoverTab[38996]"
}

func (sc *http2serverConn) resetStream(se http2StreamError) {
//line /usr/local/go/src/net/http/h2_bundle.go:5169
	_go_fuzz_dep_.CoverTab[38997]++
							sc.serveG.check()
							sc.writeFrame(http2FrameWriteRequest{write: se})
							if st, ok := sc.streams[se.StreamID]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:5172
		_go_fuzz_dep_.CoverTab[38998]++
								st.resetQueued = true
//line /usr/local/go/src/net/http/h2_bundle.go:5173
		// _ = "end of CoverTab[38998]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5174
		_go_fuzz_dep_.CoverTab[38999]++
//line /usr/local/go/src/net/http/h2_bundle.go:5174
		// _ = "end of CoverTab[38999]"
//line /usr/local/go/src/net/http/h2_bundle.go:5174
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5174
	// _ = "end of CoverTab[38997]"
}

// processFrameFromReader processes the serve loop's read from readFrameCh from the
//line /usr/local/go/src/net/http/h2_bundle.go:5177
// frame-reading goroutine.
//line /usr/local/go/src/net/http/h2_bundle.go:5177
// processFrameFromReader returns whether the connection should be kept open.
//line /usr/local/go/src/net/http/h2_bundle.go:5180
func (sc *http2serverConn) processFrameFromReader(res http2readFrameResult) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5180
	_go_fuzz_dep_.CoverTab[39000]++
							sc.serveG.check()
							err := res.err
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5183
		_go_fuzz_dep_.CoverTab[39002]++
								if err == http2ErrFrameTooLarge {
//line /usr/local/go/src/net/http/h2_bundle.go:5184
			_go_fuzz_dep_.CoverTab[39004]++
									sc.goAway(http2ErrCodeFrameSize)
									return true
//line /usr/local/go/src/net/http/h2_bundle.go:5186
			// _ = "end of CoverTab[39004]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5187
			_go_fuzz_dep_.CoverTab[39005]++
//line /usr/local/go/src/net/http/h2_bundle.go:5187
			// _ = "end of CoverTab[39005]"
//line /usr/local/go/src/net/http/h2_bundle.go:5187
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5187
		// _ = "end of CoverTab[39002]"
//line /usr/local/go/src/net/http/h2_bundle.go:5187
		_go_fuzz_dep_.CoverTab[39003]++
								clientGone := err == io.EOF || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5188
			_go_fuzz_dep_.CoverTab[39006]++
//line /usr/local/go/src/net/http/h2_bundle.go:5188
			return err == io.ErrUnexpectedEOF
//line /usr/local/go/src/net/http/h2_bundle.go:5188
			// _ = "end of CoverTab[39006]"
//line /usr/local/go/src/net/http/h2_bundle.go:5188
		}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5188
			_go_fuzz_dep_.CoverTab[39007]++
//line /usr/local/go/src/net/http/h2_bundle.go:5188
			return http2isClosedConnError(err)
//line /usr/local/go/src/net/http/h2_bundle.go:5188
			// _ = "end of CoverTab[39007]"
//line /usr/local/go/src/net/http/h2_bundle.go:5188
		}()
								if clientGone {
//line /usr/local/go/src/net/http/h2_bundle.go:5189
			_go_fuzz_dep_.CoverTab[39008]++

//line /usr/local/go/src/net/http/h2_bundle.go:5198
			return false
//line /usr/local/go/src/net/http/h2_bundle.go:5198
			// _ = "end of CoverTab[39008]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5199
			_go_fuzz_dep_.CoverTab[39009]++
//line /usr/local/go/src/net/http/h2_bundle.go:5199
			// _ = "end of CoverTab[39009]"
//line /usr/local/go/src/net/http/h2_bundle.go:5199
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5199
		// _ = "end of CoverTab[39003]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5200
		_go_fuzz_dep_.CoverTab[39010]++
								f := res.f
								if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:5202
			_go_fuzz_dep_.CoverTab[39012]++
									sc.vlogf("http2: server read frame %v", http2summarizeFrame(f))
//line /usr/local/go/src/net/http/h2_bundle.go:5203
			// _ = "end of CoverTab[39012]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5204
			_go_fuzz_dep_.CoverTab[39013]++
//line /usr/local/go/src/net/http/h2_bundle.go:5204
			// _ = "end of CoverTab[39013]"
//line /usr/local/go/src/net/http/h2_bundle.go:5204
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5204
		// _ = "end of CoverTab[39010]"
//line /usr/local/go/src/net/http/h2_bundle.go:5204
		_go_fuzz_dep_.CoverTab[39011]++
								err = sc.processFrame(f)
								if err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5206
			_go_fuzz_dep_.CoverTab[39014]++
									return true
//line /usr/local/go/src/net/http/h2_bundle.go:5207
			// _ = "end of CoverTab[39014]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5208
			_go_fuzz_dep_.CoverTab[39015]++
//line /usr/local/go/src/net/http/h2_bundle.go:5208
			// _ = "end of CoverTab[39015]"
//line /usr/local/go/src/net/http/h2_bundle.go:5208
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5208
		// _ = "end of CoverTab[39011]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5209
	// _ = "end of CoverTab[39000]"
//line /usr/local/go/src/net/http/h2_bundle.go:5209
	_go_fuzz_dep_.CoverTab[39001]++

							switch ev := err.(type) {
	case http2StreamError:
//line /usr/local/go/src/net/http/h2_bundle.go:5212
		_go_fuzz_dep_.CoverTab[39016]++
								sc.resetStream(ev)
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:5214
		// _ = "end of CoverTab[39016]"
	case http2goAwayFlowError:
//line /usr/local/go/src/net/http/h2_bundle.go:5215
		_go_fuzz_dep_.CoverTab[39017]++
								sc.goAway(http2ErrCodeFlowControl)
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:5217
		// _ = "end of CoverTab[39017]"
	case http2ConnectionError:
//line /usr/local/go/src/net/http/h2_bundle.go:5218
		_go_fuzz_dep_.CoverTab[39018]++
								sc.logf("http2: server connection error from %v: %v", sc.conn.RemoteAddr(), ev)
								sc.goAway(http2ErrCode(ev))
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:5221
		// _ = "end of CoverTab[39018]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:5222
		_go_fuzz_dep_.CoverTab[39019]++
								if res.err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5223
			_go_fuzz_dep_.CoverTab[39021]++
									sc.vlogf("http2: server closing client connection; error reading frame from client %s: %v", sc.conn.RemoteAddr(), err)
//line /usr/local/go/src/net/http/h2_bundle.go:5224
			// _ = "end of CoverTab[39021]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5225
			_go_fuzz_dep_.CoverTab[39022]++
									sc.logf("http2: server closing client connection: %v", err)
//line /usr/local/go/src/net/http/h2_bundle.go:5226
			// _ = "end of CoverTab[39022]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5227
		// _ = "end of CoverTab[39019]"
//line /usr/local/go/src/net/http/h2_bundle.go:5227
		_go_fuzz_dep_.CoverTab[39020]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:5228
		// _ = "end of CoverTab[39020]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5229
	// _ = "end of CoverTab[39001]"
}

func (sc *http2serverConn) processFrame(f http2Frame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5232
	_go_fuzz_dep_.CoverTab[39023]++
							sc.serveG.check()

//line /usr/local/go/src/net/http/h2_bundle.go:5236
	if !sc.sawFirstSettings {
//line /usr/local/go/src/net/http/h2_bundle.go:5236
		_go_fuzz_dep_.CoverTab[39026]++
								if _, ok := f.(*http2SettingsFrame); !ok {
//line /usr/local/go/src/net/http/h2_bundle.go:5237
			_go_fuzz_dep_.CoverTab[39028]++
									return sc.countError("first_settings", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5238
			// _ = "end of CoverTab[39028]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5239
			_go_fuzz_dep_.CoverTab[39029]++
//line /usr/local/go/src/net/http/h2_bundle.go:5239
			// _ = "end of CoverTab[39029]"
//line /usr/local/go/src/net/http/h2_bundle.go:5239
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5239
		// _ = "end of CoverTab[39026]"
//line /usr/local/go/src/net/http/h2_bundle.go:5239
		_go_fuzz_dep_.CoverTab[39027]++
								sc.sawFirstSettings = true
//line /usr/local/go/src/net/http/h2_bundle.go:5240
		// _ = "end of CoverTab[39027]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5241
		_go_fuzz_dep_.CoverTab[39030]++
//line /usr/local/go/src/net/http/h2_bundle.go:5241
		// _ = "end of CoverTab[39030]"
//line /usr/local/go/src/net/http/h2_bundle.go:5241
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5241
	// _ = "end of CoverTab[39023]"
//line /usr/local/go/src/net/http/h2_bundle.go:5241
	_go_fuzz_dep_.CoverTab[39024]++

//line /usr/local/go/src/net/http/h2_bundle.go:5247
	if sc.inGoAway && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5247
		_go_fuzz_dep_.CoverTab[39031]++
//line /usr/local/go/src/net/http/h2_bundle.go:5247
		return (sc.goAwayCode != http2ErrCodeNo || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5247
			_go_fuzz_dep_.CoverTab[39032]++
//line /usr/local/go/src/net/http/h2_bundle.go:5247
			return f.Header().StreamID > sc.maxClientStreamID
//line /usr/local/go/src/net/http/h2_bundle.go:5247
			// _ = "end of CoverTab[39032]"
//line /usr/local/go/src/net/http/h2_bundle.go:5247
		}())
//line /usr/local/go/src/net/http/h2_bundle.go:5247
		// _ = "end of CoverTab[39031]"
//line /usr/local/go/src/net/http/h2_bundle.go:5247
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5247
		_go_fuzz_dep_.CoverTab[39033]++

								if f, ok := f.(*http2DataFrame); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:5249
			_go_fuzz_dep_.CoverTab[39035]++
									if sc.inflow.available() < int32(f.Length) {
//line /usr/local/go/src/net/http/h2_bundle.go:5250
				_go_fuzz_dep_.CoverTab[39037]++
										return sc.countError("data_flow", http2streamError(f.Header().StreamID, http2ErrCodeFlowControl))
//line /usr/local/go/src/net/http/h2_bundle.go:5251
				// _ = "end of CoverTab[39037]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5252
				_go_fuzz_dep_.CoverTab[39038]++
//line /usr/local/go/src/net/http/h2_bundle.go:5252
				// _ = "end of CoverTab[39038]"
//line /usr/local/go/src/net/http/h2_bundle.go:5252
			}
//line /usr/local/go/src/net/http/h2_bundle.go:5252
			// _ = "end of CoverTab[39035]"
//line /usr/local/go/src/net/http/h2_bundle.go:5252
			_go_fuzz_dep_.CoverTab[39036]++
									sc.sendWindowUpdate(nil, int(f.Length))
//line /usr/local/go/src/net/http/h2_bundle.go:5253
			// _ = "end of CoverTab[39036]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5254
			_go_fuzz_dep_.CoverTab[39039]++
//line /usr/local/go/src/net/http/h2_bundle.go:5254
			// _ = "end of CoverTab[39039]"
//line /usr/local/go/src/net/http/h2_bundle.go:5254
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5254
		// _ = "end of CoverTab[39033]"
//line /usr/local/go/src/net/http/h2_bundle.go:5254
		_go_fuzz_dep_.CoverTab[39034]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5255
		// _ = "end of CoverTab[39034]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5256
		_go_fuzz_dep_.CoverTab[39040]++
//line /usr/local/go/src/net/http/h2_bundle.go:5256
		// _ = "end of CoverTab[39040]"
//line /usr/local/go/src/net/http/h2_bundle.go:5256
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5256
	// _ = "end of CoverTab[39024]"
//line /usr/local/go/src/net/http/h2_bundle.go:5256
	_go_fuzz_dep_.CoverTab[39025]++

							switch f := f.(type) {
	case *http2SettingsFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:5259
		_go_fuzz_dep_.CoverTab[39041]++
								return sc.processSettings(f)
//line /usr/local/go/src/net/http/h2_bundle.go:5260
		// _ = "end of CoverTab[39041]"
	case *http2MetaHeadersFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:5261
		_go_fuzz_dep_.CoverTab[39042]++
								return sc.processHeaders(f)
//line /usr/local/go/src/net/http/h2_bundle.go:5262
		// _ = "end of CoverTab[39042]"
	case *http2WindowUpdateFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:5263
		_go_fuzz_dep_.CoverTab[39043]++
								return sc.processWindowUpdate(f)
//line /usr/local/go/src/net/http/h2_bundle.go:5264
		// _ = "end of CoverTab[39043]"
	case *http2PingFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:5265
		_go_fuzz_dep_.CoverTab[39044]++
								return sc.processPing(f)
//line /usr/local/go/src/net/http/h2_bundle.go:5266
		// _ = "end of CoverTab[39044]"
	case *http2DataFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:5267
		_go_fuzz_dep_.CoverTab[39045]++
								return sc.processData(f)
//line /usr/local/go/src/net/http/h2_bundle.go:5268
		// _ = "end of CoverTab[39045]"
	case *http2RSTStreamFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:5269
		_go_fuzz_dep_.CoverTab[39046]++
								return sc.processResetStream(f)
//line /usr/local/go/src/net/http/h2_bundle.go:5270
		// _ = "end of CoverTab[39046]"
	case *http2PriorityFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:5271
		_go_fuzz_dep_.CoverTab[39047]++
								return sc.processPriority(f)
//line /usr/local/go/src/net/http/h2_bundle.go:5272
		// _ = "end of CoverTab[39047]"
	case *http2GoAwayFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:5273
		_go_fuzz_dep_.CoverTab[39048]++
								return sc.processGoAway(f)
//line /usr/local/go/src/net/http/h2_bundle.go:5274
		// _ = "end of CoverTab[39048]"
	case *http2PushPromiseFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:5275
		_go_fuzz_dep_.CoverTab[39049]++

//line /usr/local/go/src/net/http/h2_bundle.go:5278
		return sc.countError("push_promise", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5278
		// _ = "end of CoverTab[39049]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:5279
		_go_fuzz_dep_.CoverTab[39050]++
								sc.vlogf("http2: server ignoring frame: %v", f.Header())
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5281
		// _ = "end of CoverTab[39050]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5282
	// _ = "end of CoverTab[39025]"
}

func (sc *http2serverConn) processPing(f *http2PingFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5285
	_go_fuzz_dep_.CoverTab[39051]++
							sc.serveG.check()
							if f.IsAck() {
//line /usr/local/go/src/net/http/h2_bundle.go:5287
		_go_fuzz_dep_.CoverTab[39054]++

//line /usr/local/go/src/net/http/h2_bundle.go:5290
		return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5290
		// _ = "end of CoverTab[39054]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5291
		_go_fuzz_dep_.CoverTab[39055]++
//line /usr/local/go/src/net/http/h2_bundle.go:5291
		// _ = "end of CoverTab[39055]"
//line /usr/local/go/src/net/http/h2_bundle.go:5291
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5291
	// _ = "end of CoverTab[39051]"
//line /usr/local/go/src/net/http/h2_bundle.go:5291
	_go_fuzz_dep_.CoverTab[39052]++
							if f.StreamID != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5292
		_go_fuzz_dep_.CoverTab[39056]++

//line /usr/local/go/src/net/http/h2_bundle.go:5298
		return sc.countError("ping_on_stream", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5298
		// _ = "end of CoverTab[39056]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5299
		_go_fuzz_dep_.CoverTab[39057]++
//line /usr/local/go/src/net/http/h2_bundle.go:5299
		// _ = "end of CoverTab[39057]"
//line /usr/local/go/src/net/http/h2_bundle.go:5299
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5299
	// _ = "end of CoverTab[39052]"
//line /usr/local/go/src/net/http/h2_bundle.go:5299
	_go_fuzz_dep_.CoverTab[39053]++
							sc.writeFrame(http2FrameWriteRequest{write: http2writePingAck{f}})
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5301
	// _ = "end of CoverTab[39053]"
}

func (sc *http2serverConn) processWindowUpdate(f *http2WindowUpdateFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5304
	_go_fuzz_dep_.CoverTab[39058]++
							sc.serveG.check()
							switch {
	case f.StreamID != 0:
//line /usr/local/go/src/net/http/h2_bundle.go:5307
		_go_fuzz_dep_.CoverTab[39060]++
								state, st := sc.state(f.StreamID)
								if state == http2stateIdle {
//line /usr/local/go/src/net/http/h2_bundle.go:5309
			_go_fuzz_dep_.CoverTab[39064]++

//line /usr/local/go/src/net/http/h2_bundle.go:5314
			return sc.countError("stream_idle", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5314
			// _ = "end of CoverTab[39064]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5315
			_go_fuzz_dep_.CoverTab[39065]++
//line /usr/local/go/src/net/http/h2_bundle.go:5315
			// _ = "end of CoverTab[39065]"
//line /usr/local/go/src/net/http/h2_bundle.go:5315
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5315
		// _ = "end of CoverTab[39060]"
//line /usr/local/go/src/net/http/h2_bundle.go:5315
		_go_fuzz_dep_.CoverTab[39061]++
								if st == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5316
			_go_fuzz_dep_.CoverTab[39066]++

//line /usr/local/go/src/net/http/h2_bundle.go:5322
			return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5322
			// _ = "end of CoverTab[39066]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5323
			_go_fuzz_dep_.CoverTab[39067]++
//line /usr/local/go/src/net/http/h2_bundle.go:5323
			// _ = "end of CoverTab[39067]"
//line /usr/local/go/src/net/http/h2_bundle.go:5323
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5323
		// _ = "end of CoverTab[39061]"
//line /usr/local/go/src/net/http/h2_bundle.go:5323
		_go_fuzz_dep_.CoverTab[39062]++
								if !st.flow.add(int32(f.Increment)) {
//line /usr/local/go/src/net/http/h2_bundle.go:5324
			_go_fuzz_dep_.CoverTab[39068]++
									return sc.countError("bad_flow", http2streamError(f.StreamID, http2ErrCodeFlowControl))
//line /usr/local/go/src/net/http/h2_bundle.go:5325
			// _ = "end of CoverTab[39068]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5326
			_go_fuzz_dep_.CoverTab[39069]++
//line /usr/local/go/src/net/http/h2_bundle.go:5326
			// _ = "end of CoverTab[39069]"
//line /usr/local/go/src/net/http/h2_bundle.go:5326
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5326
		// _ = "end of CoverTab[39062]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:5327
		_go_fuzz_dep_.CoverTab[39063]++
								if !sc.flow.add(int32(f.Increment)) {
//line /usr/local/go/src/net/http/h2_bundle.go:5328
			_go_fuzz_dep_.CoverTab[39070]++
									return http2goAwayFlowError{}
//line /usr/local/go/src/net/http/h2_bundle.go:5329
			// _ = "end of CoverTab[39070]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5330
			_go_fuzz_dep_.CoverTab[39071]++
//line /usr/local/go/src/net/http/h2_bundle.go:5330
			// _ = "end of CoverTab[39071]"
//line /usr/local/go/src/net/http/h2_bundle.go:5330
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5330
		// _ = "end of CoverTab[39063]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5331
	// _ = "end of CoverTab[39058]"
//line /usr/local/go/src/net/http/h2_bundle.go:5331
	_go_fuzz_dep_.CoverTab[39059]++
							sc.scheduleFrameWrite()
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5333
	// _ = "end of CoverTab[39059]"
}

func (sc *http2serverConn) processResetStream(f *http2RSTStreamFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5336
	_go_fuzz_dep_.CoverTab[39072]++
							sc.serveG.check()

							state, st := sc.state(f.StreamID)
							if state == http2stateIdle {
//line /usr/local/go/src/net/http/h2_bundle.go:5340
		_go_fuzz_dep_.CoverTab[39075]++

//line /usr/local/go/src/net/http/h2_bundle.go:5346
		return sc.countError("reset_idle_stream", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5346
		// _ = "end of CoverTab[39075]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5347
		_go_fuzz_dep_.CoverTab[39076]++
//line /usr/local/go/src/net/http/h2_bundle.go:5347
		// _ = "end of CoverTab[39076]"
//line /usr/local/go/src/net/http/h2_bundle.go:5347
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5347
	// _ = "end of CoverTab[39072]"
//line /usr/local/go/src/net/http/h2_bundle.go:5347
	_go_fuzz_dep_.CoverTab[39073]++
							if st != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5348
		_go_fuzz_dep_.CoverTab[39077]++
								st.cancelCtx()
								sc.closeStream(st, http2streamError(f.StreamID, f.ErrCode))
//line /usr/local/go/src/net/http/h2_bundle.go:5350
		// _ = "end of CoverTab[39077]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5351
		_go_fuzz_dep_.CoverTab[39078]++
//line /usr/local/go/src/net/http/h2_bundle.go:5351
		// _ = "end of CoverTab[39078]"
//line /usr/local/go/src/net/http/h2_bundle.go:5351
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5351
	// _ = "end of CoverTab[39073]"
//line /usr/local/go/src/net/http/h2_bundle.go:5351
	_go_fuzz_dep_.CoverTab[39074]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5352
	// _ = "end of CoverTab[39074]"
}

func (sc *http2serverConn) closeStream(st *http2stream, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:5355
	_go_fuzz_dep_.CoverTab[39079]++
							sc.serveG.check()
							if st.state == http2stateIdle || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5357
		_go_fuzz_dep_.CoverTab[39087]++
//line /usr/local/go/src/net/http/h2_bundle.go:5357
		return st.state == http2stateClosed
//line /usr/local/go/src/net/http/h2_bundle.go:5357
		// _ = "end of CoverTab[39087]"
//line /usr/local/go/src/net/http/h2_bundle.go:5357
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5357
		_go_fuzz_dep_.CoverTab[39088]++
								panic(fmt.Sprintf("invariant; can't close stream in state %v", st.state))
//line /usr/local/go/src/net/http/h2_bundle.go:5358
		// _ = "end of CoverTab[39088]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5359
		_go_fuzz_dep_.CoverTab[39089]++
//line /usr/local/go/src/net/http/h2_bundle.go:5359
		// _ = "end of CoverTab[39089]"
//line /usr/local/go/src/net/http/h2_bundle.go:5359
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5359
	// _ = "end of CoverTab[39079]"
//line /usr/local/go/src/net/http/h2_bundle.go:5359
	_go_fuzz_dep_.CoverTab[39080]++
							st.state = http2stateClosed
							if st.readDeadline != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5361
		_go_fuzz_dep_.CoverTab[39090]++
								st.readDeadline.Stop()
//line /usr/local/go/src/net/http/h2_bundle.go:5362
		// _ = "end of CoverTab[39090]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5363
		_go_fuzz_dep_.CoverTab[39091]++
//line /usr/local/go/src/net/http/h2_bundle.go:5363
		// _ = "end of CoverTab[39091]"
//line /usr/local/go/src/net/http/h2_bundle.go:5363
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5363
	// _ = "end of CoverTab[39080]"
//line /usr/local/go/src/net/http/h2_bundle.go:5363
	_go_fuzz_dep_.CoverTab[39081]++
							if st.writeDeadline != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5364
		_go_fuzz_dep_.CoverTab[39092]++
								st.writeDeadline.Stop()
//line /usr/local/go/src/net/http/h2_bundle.go:5365
		// _ = "end of CoverTab[39092]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5366
		_go_fuzz_dep_.CoverTab[39093]++
//line /usr/local/go/src/net/http/h2_bundle.go:5366
		// _ = "end of CoverTab[39093]"
//line /usr/local/go/src/net/http/h2_bundle.go:5366
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5366
	// _ = "end of CoverTab[39081]"
//line /usr/local/go/src/net/http/h2_bundle.go:5366
	_go_fuzz_dep_.CoverTab[39082]++
							if st.isPushed() {
//line /usr/local/go/src/net/http/h2_bundle.go:5367
		_go_fuzz_dep_.CoverTab[39094]++
								sc.curPushedStreams--
//line /usr/local/go/src/net/http/h2_bundle.go:5368
		// _ = "end of CoverTab[39094]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5369
		_go_fuzz_dep_.CoverTab[39095]++
								sc.curClientStreams--
//line /usr/local/go/src/net/http/h2_bundle.go:5370
		// _ = "end of CoverTab[39095]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5371
	// _ = "end of CoverTab[39082]"
//line /usr/local/go/src/net/http/h2_bundle.go:5371
	_go_fuzz_dep_.CoverTab[39083]++
							delete(sc.streams, st.id)
							if len(sc.streams) == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5373
		_go_fuzz_dep_.CoverTab[39096]++
								sc.setConnState(StateIdle)
								if sc.srv.IdleTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5375
			_go_fuzz_dep_.CoverTab[39098]++
									sc.idleTimer.Reset(sc.srv.IdleTimeout)
//line /usr/local/go/src/net/http/h2_bundle.go:5376
			// _ = "end of CoverTab[39098]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5377
			_go_fuzz_dep_.CoverTab[39099]++
//line /usr/local/go/src/net/http/h2_bundle.go:5377
			// _ = "end of CoverTab[39099]"
//line /usr/local/go/src/net/http/h2_bundle.go:5377
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5377
		// _ = "end of CoverTab[39096]"
//line /usr/local/go/src/net/http/h2_bundle.go:5377
		_go_fuzz_dep_.CoverTab[39097]++
								if http2h1ServerKeepAlivesDisabled(sc.hs) {
//line /usr/local/go/src/net/http/h2_bundle.go:5378
			_go_fuzz_dep_.CoverTab[39100]++
									sc.startGracefulShutdownInternal()
//line /usr/local/go/src/net/http/h2_bundle.go:5379
			// _ = "end of CoverTab[39100]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5380
			_go_fuzz_dep_.CoverTab[39101]++
//line /usr/local/go/src/net/http/h2_bundle.go:5380
			// _ = "end of CoverTab[39101]"
//line /usr/local/go/src/net/http/h2_bundle.go:5380
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5380
		// _ = "end of CoverTab[39097]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5381
		_go_fuzz_dep_.CoverTab[39102]++
//line /usr/local/go/src/net/http/h2_bundle.go:5381
		// _ = "end of CoverTab[39102]"
//line /usr/local/go/src/net/http/h2_bundle.go:5381
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5381
	// _ = "end of CoverTab[39083]"
//line /usr/local/go/src/net/http/h2_bundle.go:5381
	_go_fuzz_dep_.CoverTab[39084]++
							if p := st.body; p != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5382
		_go_fuzz_dep_.CoverTab[39103]++

//line /usr/local/go/src/net/http/h2_bundle.go:5385
		sc.sendWindowUpdate(nil, p.Len())

								p.CloseWithError(err)
//line /usr/local/go/src/net/http/h2_bundle.go:5387
		// _ = "end of CoverTab[39103]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5388
		_go_fuzz_dep_.CoverTab[39104]++
//line /usr/local/go/src/net/http/h2_bundle.go:5388
		// _ = "end of CoverTab[39104]"
//line /usr/local/go/src/net/http/h2_bundle.go:5388
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5388
	// _ = "end of CoverTab[39084]"
//line /usr/local/go/src/net/http/h2_bundle.go:5388
	_go_fuzz_dep_.CoverTab[39085]++
							if e, ok := err.(http2StreamError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:5389
		_go_fuzz_dep_.CoverTab[39105]++
								if e.Cause != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5390
			_go_fuzz_dep_.CoverTab[39106]++
									err = e.Cause
//line /usr/local/go/src/net/http/h2_bundle.go:5391
			// _ = "end of CoverTab[39106]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5392
			_go_fuzz_dep_.CoverTab[39107]++
									err = http2errStreamClosed
//line /usr/local/go/src/net/http/h2_bundle.go:5393
			// _ = "end of CoverTab[39107]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5394
		// _ = "end of CoverTab[39105]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5395
		_go_fuzz_dep_.CoverTab[39108]++
//line /usr/local/go/src/net/http/h2_bundle.go:5395
		// _ = "end of CoverTab[39108]"
//line /usr/local/go/src/net/http/h2_bundle.go:5395
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5395
	// _ = "end of CoverTab[39085]"
//line /usr/local/go/src/net/http/h2_bundle.go:5395
	_go_fuzz_dep_.CoverTab[39086]++
							st.closeErr = err
							st.cw.Close()
							sc.writeSched.CloseStream(st.id)
//line /usr/local/go/src/net/http/h2_bundle.go:5398
	// _ = "end of CoverTab[39086]"
}

func (sc *http2serverConn) processSettings(f *http2SettingsFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5401
	_go_fuzz_dep_.CoverTab[39109]++
							sc.serveG.check()
							if f.IsAck() {
//line /usr/local/go/src/net/http/h2_bundle.go:5403
		_go_fuzz_dep_.CoverTab[39113]++
								sc.unackedSettings--
								if sc.unackedSettings < 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5405
			_go_fuzz_dep_.CoverTab[39115]++

//line /usr/local/go/src/net/http/h2_bundle.go:5409
			return sc.countError("ack_mystery", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5409
			// _ = "end of CoverTab[39115]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5410
			_go_fuzz_dep_.CoverTab[39116]++
//line /usr/local/go/src/net/http/h2_bundle.go:5410
			// _ = "end of CoverTab[39116]"
//line /usr/local/go/src/net/http/h2_bundle.go:5410
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5410
		// _ = "end of CoverTab[39113]"
//line /usr/local/go/src/net/http/h2_bundle.go:5410
		_go_fuzz_dep_.CoverTab[39114]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5411
		// _ = "end of CoverTab[39114]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5412
		_go_fuzz_dep_.CoverTab[39117]++
//line /usr/local/go/src/net/http/h2_bundle.go:5412
		// _ = "end of CoverTab[39117]"
//line /usr/local/go/src/net/http/h2_bundle.go:5412
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5412
	// _ = "end of CoverTab[39109]"
//line /usr/local/go/src/net/http/h2_bundle.go:5412
	_go_fuzz_dep_.CoverTab[39110]++
							if f.NumSettings() > 100 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5413
		_go_fuzz_dep_.CoverTab[39118]++
//line /usr/local/go/src/net/http/h2_bundle.go:5413
		return f.HasDuplicates()
//line /usr/local/go/src/net/http/h2_bundle.go:5413
		// _ = "end of CoverTab[39118]"
//line /usr/local/go/src/net/http/h2_bundle.go:5413
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5413
		_go_fuzz_dep_.CoverTab[39119]++

//line /usr/local/go/src/net/http/h2_bundle.go:5417
		return sc.countError("settings_big_or_dups", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5417
		// _ = "end of CoverTab[39119]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5418
		_go_fuzz_dep_.CoverTab[39120]++
//line /usr/local/go/src/net/http/h2_bundle.go:5418
		// _ = "end of CoverTab[39120]"
//line /usr/local/go/src/net/http/h2_bundle.go:5418
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5418
	// _ = "end of CoverTab[39110]"
//line /usr/local/go/src/net/http/h2_bundle.go:5418
	_go_fuzz_dep_.CoverTab[39111]++
							if err := f.ForeachSetting(sc.processSetting); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5419
		_go_fuzz_dep_.CoverTab[39121]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:5420
		// _ = "end of CoverTab[39121]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5421
		_go_fuzz_dep_.CoverTab[39122]++
//line /usr/local/go/src/net/http/h2_bundle.go:5421
		// _ = "end of CoverTab[39122]"
//line /usr/local/go/src/net/http/h2_bundle.go:5421
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5421
	// _ = "end of CoverTab[39111]"
//line /usr/local/go/src/net/http/h2_bundle.go:5421
	_go_fuzz_dep_.CoverTab[39112]++

//line /usr/local/go/src/net/http/h2_bundle.go:5424
	sc.needToSendSettingsAck = true
							sc.scheduleFrameWrite()
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5426
	// _ = "end of CoverTab[39112]"
}

func (sc *http2serverConn) processSetting(s http2Setting) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5429
	_go_fuzz_dep_.CoverTab[39123]++
							sc.serveG.check()
							if err := s.Valid(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5431
		_go_fuzz_dep_.CoverTab[39127]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:5432
		// _ = "end of CoverTab[39127]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5433
		_go_fuzz_dep_.CoverTab[39128]++
//line /usr/local/go/src/net/http/h2_bundle.go:5433
		// _ = "end of CoverTab[39128]"
//line /usr/local/go/src/net/http/h2_bundle.go:5433
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5433
	// _ = "end of CoverTab[39123]"
//line /usr/local/go/src/net/http/h2_bundle.go:5433
	_go_fuzz_dep_.CoverTab[39124]++
							if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:5434
		_go_fuzz_dep_.CoverTab[39129]++
								sc.vlogf("http2: server processing setting %v", s)
//line /usr/local/go/src/net/http/h2_bundle.go:5435
		// _ = "end of CoverTab[39129]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5436
		_go_fuzz_dep_.CoverTab[39130]++
//line /usr/local/go/src/net/http/h2_bundle.go:5436
		// _ = "end of CoverTab[39130]"
//line /usr/local/go/src/net/http/h2_bundle.go:5436
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5436
	// _ = "end of CoverTab[39124]"
//line /usr/local/go/src/net/http/h2_bundle.go:5436
	_go_fuzz_dep_.CoverTab[39125]++
							switch s.ID {
	case http2SettingHeaderTableSize:
//line /usr/local/go/src/net/http/h2_bundle.go:5438
		_go_fuzz_dep_.CoverTab[39131]++
								sc.hpackEncoder.SetMaxDynamicTableSize(s.Val)
//line /usr/local/go/src/net/http/h2_bundle.go:5439
		// _ = "end of CoverTab[39131]"
	case http2SettingEnablePush:
//line /usr/local/go/src/net/http/h2_bundle.go:5440
		_go_fuzz_dep_.CoverTab[39132]++
								sc.pushEnabled = s.Val != 0
//line /usr/local/go/src/net/http/h2_bundle.go:5441
		// _ = "end of CoverTab[39132]"
	case http2SettingMaxConcurrentStreams:
//line /usr/local/go/src/net/http/h2_bundle.go:5442
		_go_fuzz_dep_.CoverTab[39133]++
								sc.clientMaxStreams = s.Val
//line /usr/local/go/src/net/http/h2_bundle.go:5443
		// _ = "end of CoverTab[39133]"
	case http2SettingInitialWindowSize:
//line /usr/local/go/src/net/http/h2_bundle.go:5444
		_go_fuzz_dep_.CoverTab[39134]++
								return sc.processSettingInitialWindowSize(s.Val)
//line /usr/local/go/src/net/http/h2_bundle.go:5445
		// _ = "end of CoverTab[39134]"
	case http2SettingMaxFrameSize:
//line /usr/local/go/src/net/http/h2_bundle.go:5446
		_go_fuzz_dep_.CoverTab[39135]++
								sc.maxFrameSize = int32(s.Val)
//line /usr/local/go/src/net/http/h2_bundle.go:5447
		// _ = "end of CoverTab[39135]"
	case http2SettingMaxHeaderListSize:
//line /usr/local/go/src/net/http/h2_bundle.go:5448
		_go_fuzz_dep_.CoverTab[39136]++
								sc.peerMaxHeaderListSize = s.Val
//line /usr/local/go/src/net/http/h2_bundle.go:5449
		// _ = "end of CoverTab[39136]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:5450
		_go_fuzz_dep_.CoverTab[39137]++

//line /usr/local/go/src/net/http/h2_bundle.go:5454
		if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:5454
			_go_fuzz_dep_.CoverTab[39138]++
									sc.vlogf("http2: server ignoring unknown setting %v", s)
//line /usr/local/go/src/net/http/h2_bundle.go:5455
			// _ = "end of CoverTab[39138]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5456
			_go_fuzz_dep_.CoverTab[39139]++
//line /usr/local/go/src/net/http/h2_bundle.go:5456
			// _ = "end of CoverTab[39139]"
//line /usr/local/go/src/net/http/h2_bundle.go:5456
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5456
		// _ = "end of CoverTab[39137]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5457
	// _ = "end of CoverTab[39125]"
//line /usr/local/go/src/net/http/h2_bundle.go:5457
	_go_fuzz_dep_.CoverTab[39126]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5458
	// _ = "end of CoverTab[39126]"
}

func (sc *http2serverConn) processSettingInitialWindowSize(val uint32) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5461
	_go_fuzz_dep_.CoverTab[39140]++
							sc.serveG.check()

//line /usr/local/go/src/net/http/h2_bundle.go:5472
	old := sc.initialStreamSendWindowSize
	sc.initialStreamSendWindowSize = int32(val)
	growth := int32(val) - old
	for _, st := range sc.streams {
//line /usr/local/go/src/net/http/h2_bundle.go:5475
		_go_fuzz_dep_.CoverTab[39142]++
								if !st.flow.add(growth) {
//line /usr/local/go/src/net/http/h2_bundle.go:5476
			_go_fuzz_dep_.CoverTab[39143]++

//line /usr/local/go/src/net/http/h2_bundle.go:5483
			return sc.countError("setting_win_size", http2ConnectionError(http2ErrCodeFlowControl))
//line /usr/local/go/src/net/http/h2_bundle.go:5483
			// _ = "end of CoverTab[39143]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5484
			_go_fuzz_dep_.CoverTab[39144]++
//line /usr/local/go/src/net/http/h2_bundle.go:5484
			// _ = "end of CoverTab[39144]"
//line /usr/local/go/src/net/http/h2_bundle.go:5484
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5484
		// _ = "end of CoverTab[39142]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5485
	// _ = "end of CoverTab[39140]"
//line /usr/local/go/src/net/http/h2_bundle.go:5485
	_go_fuzz_dep_.CoverTab[39141]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5486
	// _ = "end of CoverTab[39141]"
}

func (sc *http2serverConn) processData(f *http2DataFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5489
	_go_fuzz_dep_.CoverTab[39145]++
							sc.serveG.check()
							id := f.Header().StreamID

							data := f.Data()
							state, st := sc.state(id)
							if id == 0 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5495
		_go_fuzz_dep_.CoverTab[39152]++
//line /usr/local/go/src/net/http/h2_bundle.go:5495
		return state == http2stateIdle
//line /usr/local/go/src/net/http/h2_bundle.go:5495
		// _ = "end of CoverTab[39152]"
//line /usr/local/go/src/net/http/h2_bundle.go:5495
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5495
		_go_fuzz_dep_.CoverTab[39153]++

//line /usr/local/go/src/net/http/h2_bundle.go:5506
		return sc.countError("data_on_idle", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5506
		// _ = "end of CoverTab[39153]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5507
		_go_fuzz_dep_.CoverTab[39154]++
//line /usr/local/go/src/net/http/h2_bundle.go:5507
		// _ = "end of CoverTab[39154]"
//line /usr/local/go/src/net/http/h2_bundle.go:5507
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5507
	// _ = "end of CoverTab[39145]"
//line /usr/local/go/src/net/http/h2_bundle.go:5507
	_go_fuzz_dep_.CoverTab[39146]++

//line /usr/local/go/src/net/http/h2_bundle.go:5512
	if st == nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		_go_fuzz_dep_.CoverTab[39155]++
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		return state != http2stateOpen
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		// _ = "end of CoverTab[39155]"
//line /usr/local/go/src/net/http/h2_bundle.go:5512
	}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		_go_fuzz_dep_.CoverTab[39156]++
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		return st.gotTrailerHeader
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		// _ = "end of CoverTab[39156]"
//line /usr/local/go/src/net/http/h2_bundle.go:5512
	}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		_go_fuzz_dep_.CoverTab[39157]++
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		return st.resetQueued
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		// _ = "end of CoverTab[39157]"
//line /usr/local/go/src/net/http/h2_bundle.go:5512
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5512
		_go_fuzz_dep_.CoverTab[39158]++

//line /usr/local/go/src/net/http/h2_bundle.go:5522
		if sc.inflow.available() < int32(f.Length) {
//line /usr/local/go/src/net/http/h2_bundle.go:5522
			_go_fuzz_dep_.CoverTab[39161]++
									return sc.countError("data_flow", http2streamError(id, http2ErrCodeFlowControl))
//line /usr/local/go/src/net/http/h2_bundle.go:5523
			// _ = "end of CoverTab[39161]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5524
			_go_fuzz_dep_.CoverTab[39162]++
//line /usr/local/go/src/net/http/h2_bundle.go:5524
			// _ = "end of CoverTab[39162]"
//line /usr/local/go/src/net/http/h2_bundle.go:5524
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5524
		// _ = "end of CoverTab[39158]"
//line /usr/local/go/src/net/http/h2_bundle.go:5524
		_go_fuzz_dep_.CoverTab[39159]++

//line /usr/local/go/src/net/http/h2_bundle.go:5529
		sc.inflow.take(int32(f.Length))
		sc.sendWindowUpdate(nil, int(f.Length))

		if st != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5532
			_go_fuzz_dep_.CoverTab[39163]++
//line /usr/local/go/src/net/http/h2_bundle.go:5532
			return st.resetQueued
//line /usr/local/go/src/net/http/h2_bundle.go:5532
			// _ = "end of CoverTab[39163]"
//line /usr/local/go/src/net/http/h2_bundle.go:5532
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5532
			_go_fuzz_dep_.CoverTab[39164]++

									return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5534
			// _ = "end of CoverTab[39164]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5535
			_go_fuzz_dep_.CoverTab[39165]++
//line /usr/local/go/src/net/http/h2_bundle.go:5535
			// _ = "end of CoverTab[39165]"
//line /usr/local/go/src/net/http/h2_bundle.go:5535
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5535
		// _ = "end of CoverTab[39159]"
//line /usr/local/go/src/net/http/h2_bundle.go:5535
		_go_fuzz_dep_.CoverTab[39160]++
								return sc.countError("closed", http2streamError(id, http2ErrCodeStreamClosed))
//line /usr/local/go/src/net/http/h2_bundle.go:5536
		// _ = "end of CoverTab[39160]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5537
		_go_fuzz_dep_.CoverTab[39166]++
//line /usr/local/go/src/net/http/h2_bundle.go:5537
		// _ = "end of CoverTab[39166]"
//line /usr/local/go/src/net/http/h2_bundle.go:5537
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5537
	// _ = "end of CoverTab[39146]"
//line /usr/local/go/src/net/http/h2_bundle.go:5537
	_go_fuzz_dep_.CoverTab[39147]++
							if st.body == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5538
		_go_fuzz_dep_.CoverTab[39167]++
								panic("internal error: should have a body in this state")
//line /usr/local/go/src/net/http/h2_bundle.go:5539
		// _ = "end of CoverTab[39167]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5540
		_go_fuzz_dep_.CoverTab[39168]++
//line /usr/local/go/src/net/http/h2_bundle.go:5540
		// _ = "end of CoverTab[39168]"
//line /usr/local/go/src/net/http/h2_bundle.go:5540
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5540
	// _ = "end of CoverTab[39147]"
//line /usr/local/go/src/net/http/h2_bundle.go:5540
	_go_fuzz_dep_.CoverTab[39148]++

//line /usr/local/go/src/net/http/h2_bundle.go:5543
	if st.declBodyBytes != -1 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5543
		_go_fuzz_dep_.CoverTab[39169]++
//line /usr/local/go/src/net/http/h2_bundle.go:5543
		return st.bodyBytes+int64(len(data)) > st.declBodyBytes
//line /usr/local/go/src/net/http/h2_bundle.go:5543
		// _ = "end of CoverTab[39169]"
//line /usr/local/go/src/net/http/h2_bundle.go:5543
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5543
		_go_fuzz_dep_.CoverTab[39170]++
								if sc.inflow.available() < int32(f.Length) {
//line /usr/local/go/src/net/http/h2_bundle.go:5544
			_go_fuzz_dep_.CoverTab[39172]++
									return sc.countError("data_flow", http2streamError(id, http2ErrCodeFlowControl))
//line /usr/local/go/src/net/http/h2_bundle.go:5545
			// _ = "end of CoverTab[39172]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5546
			_go_fuzz_dep_.CoverTab[39173]++
//line /usr/local/go/src/net/http/h2_bundle.go:5546
			// _ = "end of CoverTab[39173]"
//line /usr/local/go/src/net/http/h2_bundle.go:5546
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5546
		// _ = "end of CoverTab[39170]"
//line /usr/local/go/src/net/http/h2_bundle.go:5546
		_go_fuzz_dep_.CoverTab[39171]++
								sc.inflow.take(int32(f.Length))
								sc.sendWindowUpdate(nil, int(f.Length))

								st.body.CloseWithError(fmt.Errorf("sender tried to send more than declared Content-Length of %d bytes", st.declBodyBytes))

//line /usr/local/go/src/net/http/h2_bundle.go:5554
		return sc.countError("send_too_much", http2streamError(id, http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5554
		// _ = "end of CoverTab[39171]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5555
		_go_fuzz_dep_.CoverTab[39174]++
//line /usr/local/go/src/net/http/h2_bundle.go:5555
		// _ = "end of CoverTab[39174]"
//line /usr/local/go/src/net/http/h2_bundle.go:5555
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5555
	// _ = "end of CoverTab[39148]"
//line /usr/local/go/src/net/http/h2_bundle.go:5555
	_go_fuzz_dep_.CoverTab[39149]++
							if f.Length > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5556
		_go_fuzz_dep_.CoverTab[39175]++

								if st.inflow.available() < int32(f.Length) {
//line /usr/local/go/src/net/http/h2_bundle.go:5558
			_go_fuzz_dep_.CoverTab[39178]++
									return sc.countError("flow_on_data_length", http2streamError(id, http2ErrCodeFlowControl))
//line /usr/local/go/src/net/http/h2_bundle.go:5559
			// _ = "end of CoverTab[39178]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5560
			_go_fuzz_dep_.CoverTab[39179]++
//line /usr/local/go/src/net/http/h2_bundle.go:5560
			// _ = "end of CoverTab[39179]"
//line /usr/local/go/src/net/http/h2_bundle.go:5560
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5560
		// _ = "end of CoverTab[39175]"
//line /usr/local/go/src/net/http/h2_bundle.go:5560
		_go_fuzz_dep_.CoverTab[39176]++
								st.inflow.take(int32(f.Length))

								if len(data) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5563
			_go_fuzz_dep_.CoverTab[39180]++
									wrote, err := st.body.Write(data)
									if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5565
				_go_fuzz_dep_.CoverTab[39183]++
										sc.sendWindowUpdate(nil, int(f.Length)-wrote)
										return sc.countError("body_write_err", http2streamError(id, http2ErrCodeStreamClosed))
//line /usr/local/go/src/net/http/h2_bundle.go:5567
				// _ = "end of CoverTab[39183]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5568
				_go_fuzz_dep_.CoverTab[39184]++
//line /usr/local/go/src/net/http/h2_bundle.go:5568
				// _ = "end of CoverTab[39184]"
//line /usr/local/go/src/net/http/h2_bundle.go:5568
			}
//line /usr/local/go/src/net/http/h2_bundle.go:5568
			// _ = "end of CoverTab[39180]"
//line /usr/local/go/src/net/http/h2_bundle.go:5568
			_go_fuzz_dep_.CoverTab[39181]++
									if wrote != len(data) {
//line /usr/local/go/src/net/http/h2_bundle.go:5569
				_go_fuzz_dep_.CoverTab[39185]++
										panic("internal error: bad Writer")
//line /usr/local/go/src/net/http/h2_bundle.go:5570
				// _ = "end of CoverTab[39185]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5571
				_go_fuzz_dep_.CoverTab[39186]++
//line /usr/local/go/src/net/http/h2_bundle.go:5571
				// _ = "end of CoverTab[39186]"
//line /usr/local/go/src/net/http/h2_bundle.go:5571
			}
//line /usr/local/go/src/net/http/h2_bundle.go:5571
			// _ = "end of CoverTab[39181]"
//line /usr/local/go/src/net/http/h2_bundle.go:5571
			_go_fuzz_dep_.CoverTab[39182]++
									st.bodyBytes += int64(len(data))
//line /usr/local/go/src/net/http/h2_bundle.go:5572
			// _ = "end of CoverTab[39182]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5573
			_go_fuzz_dep_.CoverTab[39187]++
//line /usr/local/go/src/net/http/h2_bundle.go:5573
			// _ = "end of CoverTab[39187]"
//line /usr/local/go/src/net/http/h2_bundle.go:5573
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5573
		// _ = "end of CoverTab[39176]"
//line /usr/local/go/src/net/http/h2_bundle.go:5573
		_go_fuzz_dep_.CoverTab[39177]++

//line /usr/local/go/src/net/http/h2_bundle.go:5577
		if pad := int32(f.Length) - int32(len(data)); pad > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5577
			_go_fuzz_dep_.CoverTab[39188]++
									sc.sendWindowUpdate32(nil, pad)
									sc.sendWindowUpdate32(st, pad)
//line /usr/local/go/src/net/http/h2_bundle.go:5579
			// _ = "end of CoverTab[39188]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5580
			_go_fuzz_dep_.CoverTab[39189]++
//line /usr/local/go/src/net/http/h2_bundle.go:5580
			// _ = "end of CoverTab[39189]"
//line /usr/local/go/src/net/http/h2_bundle.go:5580
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5580
		// _ = "end of CoverTab[39177]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5581
		_go_fuzz_dep_.CoverTab[39190]++
//line /usr/local/go/src/net/http/h2_bundle.go:5581
		// _ = "end of CoverTab[39190]"
//line /usr/local/go/src/net/http/h2_bundle.go:5581
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5581
	// _ = "end of CoverTab[39149]"
//line /usr/local/go/src/net/http/h2_bundle.go:5581
	_go_fuzz_dep_.CoverTab[39150]++
							if f.StreamEnded() {
//line /usr/local/go/src/net/http/h2_bundle.go:5582
		_go_fuzz_dep_.CoverTab[39191]++
								st.endStream()
//line /usr/local/go/src/net/http/h2_bundle.go:5583
		// _ = "end of CoverTab[39191]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5584
		_go_fuzz_dep_.CoverTab[39192]++
//line /usr/local/go/src/net/http/h2_bundle.go:5584
		// _ = "end of CoverTab[39192]"
//line /usr/local/go/src/net/http/h2_bundle.go:5584
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5584
	// _ = "end of CoverTab[39150]"
//line /usr/local/go/src/net/http/h2_bundle.go:5584
	_go_fuzz_dep_.CoverTab[39151]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5585
	// _ = "end of CoverTab[39151]"
}

func (sc *http2serverConn) processGoAway(f *http2GoAwayFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5588
	_go_fuzz_dep_.CoverTab[39193]++
							sc.serveG.check()
							if f.ErrCode != http2ErrCodeNo {
//line /usr/local/go/src/net/http/h2_bundle.go:5590
		_go_fuzz_dep_.CoverTab[39195]++
								sc.logf("http2: received GOAWAY %+v, starting graceful shutdown", f)
//line /usr/local/go/src/net/http/h2_bundle.go:5591
		// _ = "end of CoverTab[39195]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5592
		_go_fuzz_dep_.CoverTab[39196]++
								sc.vlogf("http2: received GOAWAY %+v, starting graceful shutdown", f)
//line /usr/local/go/src/net/http/h2_bundle.go:5593
		// _ = "end of CoverTab[39196]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5594
	// _ = "end of CoverTab[39193]"
//line /usr/local/go/src/net/http/h2_bundle.go:5594
	_go_fuzz_dep_.CoverTab[39194]++
							sc.startGracefulShutdownInternal()

//line /usr/local/go/src/net/http/h2_bundle.go:5598
	sc.pushEnabled = false
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5599
	// _ = "end of CoverTab[39194]"
}

// isPushed reports whether the stream is server-initiated.
func (st *http2stream) isPushed() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5603
	_go_fuzz_dep_.CoverTab[39197]++
							return st.id%2 == 0
//line /usr/local/go/src/net/http/h2_bundle.go:5604
	// _ = "end of CoverTab[39197]"
}

// endStream closes a Request.Body's pipe. It is called when a DATA
//line /usr/local/go/src/net/http/h2_bundle.go:5607
// frame says a request body is over (or after trailers).
//line /usr/local/go/src/net/http/h2_bundle.go:5609
func (st *http2stream) endStream() {
//line /usr/local/go/src/net/http/h2_bundle.go:5609
	_go_fuzz_dep_.CoverTab[39198]++
							sc := st.sc
							sc.serveG.check()

							if st.declBodyBytes != -1 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5613
		_go_fuzz_dep_.CoverTab[39200]++
//line /usr/local/go/src/net/http/h2_bundle.go:5613
		return st.declBodyBytes != st.bodyBytes
//line /usr/local/go/src/net/http/h2_bundle.go:5613
		// _ = "end of CoverTab[39200]"
//line /usr/local/go/src/net/http/h2_bundle.go:5613
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5613
		_go_fuzz_dep_.CoverTab[39201]++
								st.body.CloseWithError(fmt.Errorf("request declared a Content-Length of %d but only wrote %d bytes",
			st.declBodyBytes, st.bodyBytes))
//line /usr/local/go/src/net/http/h2_bundle.go:5615
		// _ = "end of CoverTab[39201]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5616
		_go_fuzz_dep_.CoverTab[39202]++
								st.body.closeWithErrorAndCode(io.EOF, st.copyTrailersToHandlerRequest)
								st.body.CloseWithError(io.EOF)
//line /usr/local/go/src/net/http/h2_bundle.go:5618
		// _ = "end of CoverTab[39202]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5619
	// _ = "end of CoverTab[39198]"
//line /usr/local/go/src/net/http/h2_bundle.go:5619
	_go_fuzz_dep_.CoverTab[39199]++
							st.state = http2stateHalfClosedRemote
//line /usr/local/go/src/net/http/h2_bundle.go:5620
	// _ = "end of CoverTab[39199]"
}

// copyTrailersToHandlerRequest is run in the Handler's goroutine in
//line /usr/local/go/src/net/http/h2_bundle.go:5623
// its Request.Body.Read just before it gets io.EOF.
//line /usr/local/go/src/net/http/h2_bundle.go:5625
func (st *http2stream) copyTrailersToHandlerRequest() {
//line /usr/local/go/src/net/http/h2_bundle.go:5625
	_go_fuzz_dep_.CoverTab[39203]++
							for k, vv := range st.trailer {
//line /usr/local/go/src/net/http/h2_bundle.go:5626
		_go_fuzz_dep_.CoverTab[39204]++
								if _, ok := st.reqTrailer[k]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:5627
			_go_fuzz_dep_.CoverTab[39205]++

									st.reqTrailer[k] = vv
//line /usr/local/go/src/net/http/h2_bundle.go:5629
			// _ = "end of CoverTab[39205]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5630
			_go_fuzz_dep_.CoverTab[39206]++
//line /usr/local/go/src/net/http/h2_bundle.go:5630
			// _ = "end of CoverTab[39206]"
//line /usr/local/go/src/net/http/h2_bundle.go:5630
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5630
		// _ = "end of CoverTab[39204]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5631
	// _ = "end of CoverTab[39203]"
}

// onReadTimeout is run on its own goroutine (from time.AfterFunc)
//line /usr/local/go/src/net/http/h2_bundle.go:5634
// when the stream's ReadTimeout has fired.
//line /usr/local/go/src/net/http/h2_bundle.go:5636
func (st *http2stream) onReadTimeout() {
//line /usr/local/go/src/net/http/h2_bundle.go:5636
	_go_fuzz_dep_.CoverTab[39207]++

//line /usr/local/go/src/net/http/h2_bundle.go:5639
	st.body.CloseWithError(fmt.Errorf("%w", os.ErrDeadlineExceeded))
//line /usr/local/go/src/net/http/h2_bundle.go:5639
	// _ = "end of CoverTab[39207]"
}

// onWriteTimeout is run on its own goroutine (from time.AfterFunc)
//line /usr/local/go/src/net/http/h2_bundle.go:5642
// when the stream's WriteTimeout has fired.
//line /usr/local/go/src/net/http/h2_bundle.go:5644
func (st *http2stream) onWriteTimeout() {
//line /usr/local/go/src/net/http/h2_bundle.go:5644
	_go_fuzz_dep_.CoverTab[39208]++
							st.sc.writeFrameFromHandler(http2FrameWriteRequest{write: http2StreamError{
		StreamID:	st.id,
		Code:		http2ErrCodeInternal,
		Cause:		os.ErrDeadlineExceeded,
	}})
//line /usr/local/go/src/net/http/h2_bundle.go:5649
	// _ = "end of CoverTab[39208]"
}

func (sc *http2serverConn) processHeaders(f *http2MetaHeadersFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5652
	_go_fuzz_dep_.CoverTab[39209]++
							sc.serveG.check()
							id := f.StreamID

//line /usr/local/go/src/net/http/h2_bundle.go:5660
	if id%2 != 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:5660
		_go_fuzz_dep_.CoverTab[39221]++
								return sc.countError("headers_even", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5661
		// _ = "end of CoverTab[39221]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5662
		_go_fuzz_dep_.CoverTab[39222]++
//line /usr/local/go/src/net/http/h2_bundle.go:5662
		// _ = "end of CoverTab[39222]"
//line /usr/local/go/src/net/http/h2_bundle.go:5662
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5662
	// _ = "end of CoverTab[39209]"
//line /usr/local/go/src/net/http/h2_bundle.go:5662
	_go_fuzz_dep_.CoverTab[39210]++

//line /usr/local/go/src/net/http/h2_bundle.go:5667
	if st := sc.streams[f.StreamID]; st != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5667
		_go_fuzz_dep_.CoverTab[39223]++
								if st.resetQueued {
//line /usr/local/go/src/net/http/h2_bundle.go:5668
			_go_fuzz_dep_.CoverTab[39226]++

//line /usr/local/go/src/net/http/h2_bundle.go:5671
			return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5671
			// _ = "end of CoverTab[39226]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5672
			_go_fuzz_dep_.CoverTab[39227]++
//line /usr/local/go/src/net/http/h2_bundle.go:5672
			// _ = "end of CoverTab[39227]"
//line /usr/local/go/src/net/http/h2_bundle.go:5672
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5672
		// _ = "end of CoverTab[39223]"
//line /usr/local/go/src/net/http/h2_bundle.go:5672
		_go_fuzz_dep_.CoverTab[39224]++

//line /usr/local/go/src/net/http/h2_bundle.go:5677
		if st.state == http2stateHalfClosedRemote {
//line /usr/local/go/src/net/http/h2_bundle.go:5677
			_go_fuzz_dep_.CoverTab[39228]++
									return sc.countError("headers_half_closed", http2streamError(id, http2ErrCodeStreamClosed))
//line /usr/local/go/src/net/http/h2_bundle.go:5678
			// _ = "end of CoverTab[39228]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5679
			_go_fuzz_dep_.CoverTab[39229]++
//line /usr/local/go/src/net/http/h2_bundle.go:5679
			// _ = "end of CoverTab[39229]"
//line /usr/local/go/src/net/http/h2_bundle.go:5679
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5679
		// _ = "end of CoverTab[39224]"
//line /usr/local/go/src/net/http/h2_bundle.go:5679
		_go_fuzz_dep_.CoverTab[39225]++
								return st.processTrailerHeaders(f)
//line /usr/local/go/src/net/http/h2_bundle.go:5680
		// _ = "end of CoverTab[39225]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5681
		_go_fuzz_dep_.CoverTab[39230]++
//line /usr/local/go/src/net/http/h2_bundle.go:5681
		// _ = "end of CoverTab[39230]"
//line /usr/local/go/src/net/http/h2_bundle.go:5681
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5681
	// _ = "end of CoverTab[39210]"
//line /usr/local/go/src/net/http/h2_bundle.go:5681
	_go_fuzz_dep_.CoverTab[39211]++

//line /usr/local/go/src/net/http/h2_bundle.go:5688
	if id <= sc.maxClientStreamID {
//line /usr/local/go/src/net/http/h2_bundle.go:5688
		_go_fuzz_dep_.CoverTab[39231]++
								return sc.countError("stream_went_down", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5689
		// _ = "end of CoverTab[39231]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5690
		_go_fuzz_dep_.CoverTab[39232]++
//line /usr/local/go/src/net/http/h2_bundle.go:5690
		// _ = "end of CoverTab[39232]"
//line /usr/local/go/src/net/http/h2_bundle.go:5690
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5690
	// _ = "end of CoverTab[39211]"
//line /usr/local/go/src/net/http/h2_bundle.go:5690
	_go_fuzz_dep_.CoverTab[39212]++
							sc.maxClientStreamID = id

							if sc.idleTimer != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5693
		_go_fuzz_dep_.CoverTab[39233]++
								sc.idleTimer.Stop()
//line /usr/local/go/src/net/http/h2_bundle.go:5694
		// _ = "end of CoverTab[39233]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5695
		_go_fuzz_dep_.CoverTab[39234]++
//line /usr/local/go/src/net/http/h2_bundle.go:5695
		// _ = "end of CoverTab[39234]"
//line /usr/local/go/src/net/http/h2_bundle.go:5695
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5695
	// _ = "end of CoverTab[39212]"
//line /usr/local/go/src/net/http/h2_bundle.go:5695
	_go_fuzz_dep_.CoverTab[39213]++

//line /usr/local/go/src/net/http/h2_bundle.go:5703
	if sc.curClientStreams+1 > sc.advMaxStreams {
//line /usr/local/go/src/net/http/h2_bundle.go:5703
		_go_fuzz_dep_.CoverTab[39235]++
								if sc.unackedSettings == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5704
			_go_fuzz_dep_.CoverTab[39237]++

									return sc.countError("over_max_streams", http2streamError(id, http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5706
			// _ = "end of CoverTab[39237]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5707
			_go_fuzz_dep_.CoverTab[39238]++
//line /usr/local/go/src/net/http/h2_bundle.go:5707
			// _ = "end of CoverTab[39238]"
//line /usr/local/go/src/net/http/h2_bundle.go:5707
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5707
		// _ = "end of CoverTab[39235]"
//line /usr/local/go/src/net/http/h2_bundle.go:5707
		_go_fuzz_dep_.CoverTab[39236]++

//line /usr/local/go/src/net/http/h2_bundle.go:5713
		return sc.countError("over_max_streams_race", http2streamError(id, http2ErrCodeRefusedStream))
//line /usr/local/go/src/net/http/h2_bundle.go:5713
		// _ = "end of CoverTab[39236]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5714
		_go_fuzz_dep_.CoverTab[39239]++
//line /usr/local/go/src/net/http/h2_bundle.go:5714
		// _ = "end of CoverTab[39239]"
//line /usr/local/go/src/net/http/h2_bundle.go:5714
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5714
	// _ = "end of CoverTab[39213]"
//line /usr/local/go/src/net/http/h2_bundle.go:5714
	_go_fuzz_dep_.CoverTab[39214]++

							initialState := http2stateOpen
							if f.StreamEnded() {
//line /usr/local/go/src/net/http/h2_bundle.go:5717
		_go_fuzz_dep_.CoverTab[39240]++
								initialState = http2stateHalfClosedRemote
//line /usr/local/go/src/net/http/h2_bundle.go:5718
		// _ = "end of CoverTab[39240]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5719
		_go_fuzz_dep_.CoverTab[39241]++
//line /usr/local/go/src/net/http/h2_bundle.go:5719
		// _ = "end of CoverTab[39241]"
//line /usr/local/go/src/net/http/h2_bundle.go:5719
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5719
	// _ = "end of CoverTab[39214]"
//line /usr/local/go/src/net/http/h2_bundle.go:5719
	_go_fuzz_dep_.CoverTab[39215]++
							st := sc.newStream(id, 0, initialState)

							if f.HasPriority() {
//line /usr/local/go/src/net/http/h2_bundle.go:5722
		_go_fuzz_dep_.CoverTab[39242]++
								if err := sc.checkPriority(f.StreamID, f.Priority); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5723
			_go_fuzz_dep_.CoverTab[39244]++
									return err
//line /usr/local/go/src/net/http/h2_bundle.go:5724
			// _ = "end of CoverTab[39244]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5725
			_go_fuzz_dep_.CoverTab[39245]++
//line /usr/local/go/src/net/http/h2_bundle.go:5725
			// _ = "end of CoverTab[39245]"
//line /usr/local/go/src/net/http/h2_bundle.go:5725
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5725
		// _ = "end of CoverTab[39242]"
//line /usr/local/go/src/net/http/h2_bundle.go:5725
		_go_fuzz_dep_.CoverTab[39243]++
								sc.writeSched.AdjustStream(st.id, f.Priority)
//line /usr/local/go/src/net/http/h2_bundle.go:5726
		// _ = "end of CoverTab[39243]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5727
		_go_fuzz_dep_.CoverTab[39246]++
//line /usr/local/go/src/net/http/h2_bundle.go:5727
		// _ = "end of CoverTab[39246]"
//line /usr/local/go/src/net/http/h2_bundle.go:5727
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5727
	// _ = "end of CoverTab[39215]"
//line /usr/local/go/src/net/http/h2_bundle.go:5727
	_go_fuzz_dep_.CoverTab[39216]++

							rw, req, err := sc.newWriterAndRequest(st, f)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5730
		_go_fuzz_dep_.CoverTab[39247]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:5731
		// _ = "end of CoverTab[39247]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5732
		_go_fuzz_dep_.CoverTab[39248]++
//line /usr/local/go/src/net/http/h2_bundle.go:5732
		// _ = "end of CoverTab[39248]"
//line /usr/local/go/src/net/http/h2_bundle.go:5732
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5732
	// _ = "end of CoverTab[39216]"
//line /usr/local/go/src/net/http/h2_bundle.go:5732
	_go_fuzz_dep_.CoverTab[39217]++
							st.reqTrailer = req.Trailer
							if st.reqTrailer != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5734
		_go_fuzz_dep_.CoverTab[39249]++
								st.trailer = make(Header)
//line /usr/local/go/src/net/http/h2_bundle.go:5735
		// _ = "end of CoverTab[39249]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5736
		_go_fuzz_dep_.CoverTab[39250]++
//line /usr/local/go/src/net/http/h2_bundle.go:5736
		// _ = "end of CoverTab[39250]"
//line /usr/local/go/src/net/http/h2_bundle.go:5736
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5736
	// _ = "end of CoverTab[39217]"
//line /usr/local/go/src/net/http/h2_bundle.go:5736
	_go_fuzz_dep_.CoverTab[39218]++
							st.body = req.Body.(*http2requestBody).pipe
							st.declBodyBytes = req.ContentLength

							handler := sc.handler.ServeHTTP
							if f.Truncated {
//line /usr/local/go/src/net/http/h2_bundle.go:5741
		_go_fuzz_dep_.CoverTab[39251]++

								handler = http2handleHeaderListTooLong
//line /usr/local/go/src/net/http/h2_bundle.go:5743
		// _ = "end of CoverTab[39251]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5744
		_go_fuzz_dep_.CoverTab[39252]++
//line /usr/local/go/src/net/http/h2_bundle.go:5744
		if err := http2checkValidHTTP2RequestHeaders(req.Header); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5744
			_go_fuzz_dep_.CoverTab[39253]++
									handler = http2new400Handler(err)
//line /usr/local/go/src/net/http/h2_bundle.go:5745
			// _ = "end of CoverTab[39253]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5746
			_go_fuzz_dep_.CoverTab[39254]++
//line /usr/local/go/src/net/http/h2_bundle.go:5746
			// _ = "end of CoverTab[39254]"
//line /usr/local/go/src/net/http/h2_bundle.go:5746
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5746
		// _ = "end of CoverTab[39252]"
//line /usr/local/go/src/net/http/h2_bundle.go:5746
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5746
	// _ = "end of CoverTab[39218]"
//line /usr/local/go/src/net/http/h2_bundle.go:5746
	_go_fuzz_dep_.CoverTab[39219]++

//line /usr/local/go/src/net/http/h2_bundle.go:5755
	if sc.hs.ReadTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5755
		_go_fuzz_dep_.CoverTab[39255]++
								sc.conn.SetReadDeadline(time.Time{})
								if st.body != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5757
			_go_fuzz_dep_.CoverTab[39256]++
									st.readDeadline = time.AfterFunc(sc.hs.ReadTimeout, st.onReadTimeout)
//line /usr/local/go/src/net/http/h2_bundle.go:5758
			// _ = "end of CoverTab[39256]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5759
			_go_fuzz_dep_.CoverTab[39257]++
//line /usr/local/go/src/net/http/h2_bundle.go:5759
			// _ = "end of CoverTab[39257]"
//line /usr/local/go/src/net/http/h2_bundle.go:5759
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5759
		// _ = "end of CoverTab[39255]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5760
		_go_fuzz_dep_.CoverTab[39258]++
//line /usr/local/go/src/net/http/h2_bundle.go:5760
		// _ = "end of CoverTab[39258]"
//line /usr/local/go/src/net/http/h2_bundle.go:5760
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5760
	// _ = "end of CoverTab[39219]"
//line /usr/local/go/src/net/http/h2_bundle.go:5760
	_go_fuzz_dep_.CoverTab[39220]++
//line /usr/local/go/src/net/http/h2_bundle.go:5760
	_curRoutineNum20_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:5760
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum20_)

							go sc.runHandler(rw, req, handler)
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5763
	// _ = "end of CoverTab[39220]"
}

func (sc *http2serverConn) upgradeRequest(req *Request) {
//line /usr/local/go/src/net/http/h2_bundle.go:5766
	_go_fuzz_dep_.CoverTab[39259]++
							sc.serveG.check()
							id := uint32(1)
							sc.maxClientStreamID = id
							st := sc.newStream(id, 0, http2stateHalfClosedRemote)
							st.reqTrailer = req.Trailer
							if st.reqTrailer != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5772
		_go_fuzz_dep_.CoverTab[39262]++
								st.trailer = make(Header)
//line /usr/local/go/src/net/http/h2_bundle.go:5773
		// _ = "end of CoverTab[39262]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5774
		_go_fuzz_dep_.CoverTab[39263]++
//line /usr/local/go/src/net/http/h2_bundle.go:5774
		// _ = "end of CoverTab[39263]"
//line /usr/local/go/src/net/http/h2_bundle.go:5774
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5774
	// _ = "end of CoverTab[39259]"
//line /usr/local/go/src/net/http/h2_bundle.go:5774
	_go_fuzz_dep_.CoverTab[39260]++
							rw := sc.newResponseWriter(st, req)

//line /usr/local/go/src/net/http/h2_bundle.go:5779
	if sc.hs.ReadTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5779
		_go_fuzz_dep_.CoverTab[39264]++
								sc.conn.SetReadDeadline(time.Time{})
//line /usr/local/go/src/net/http/h2_bundle.go:5780
		// _ = "end of CoverTab[39264]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5781
		_go_fuzz_dep_.CoverTab[39265]++
//line /usr/local/go/src/net/http/h2_bundle.go:5781
		// _ = "end of CoverTab[39265]"
//line /usr/local/go/src/net/http/h2_bundle.go:5781
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5781
	// _ = "end of CoverTab[39260]"
//line /usr/local/go/src/net/http/h2_bundle.go:5781
	_go_fuzz_dep_.CoverTab[39261]++
//line /usr/local/go/src/net/http/h2_bundle.go:5781
	_curRoutineNum21_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:5781
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum21_)

							go sc.runHandler(rw, req, sc.handler.ServeHTTP)
//line /usr/local/go/src/net/http/h2_bundle.go:5783
	// _ = "end of CoverTab[39261]"
}

func (st *http2stream) processTrailerHeaders(f *http2MetaHeadersFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5786
	_go_fuzz_dep_.CoverTab[39266]++
							sc := st.sc
							sc.serveG.check()
							if st.gotTrailerHeader {
//line /usr/local/go/src/net/http/h2_bundle.go:5789
		_go_fuzz_dep_.CoverTab[39271]++
								return sc.countError("dup_trailers", http2ConnectionError(http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5790
		// _ = "end of CoverTab[39271]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5791
		_go_fuzz_dep_.CoverTab[39272]++
//line /usr/local/go/src/net/http/h2_bundle.go:5791
		// _ = "end of CoverTab[39272]"
//line /usr/local/go/src/net/http/h2_bundle.go:5791
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5791
	// _ = "end of CoverTab[39266]"
//line /usr/local/go/src/net/http/h2_bundle.go:5791
	_go_fuzz_dep_.CoverTab[39267]++
							st.gotTrailerHeader = true
							if !f.StreamEnded() {
//line /usr/local/go/src/net/http/h2_bundle.go:5793
		_go_fuzz_dep_.CoverTab[39273]++
								return sc.countError("trailers_not_ended", http2streamError(st.id, http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5794
		// _ = "end of CoverTab[39273]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5795
		_go_fuzz_dep_.CoverTab[39274]++
//line /usr/local/go/src/net/http/h2_bundle.go:5795
		// _ = "end of CoverTab[39274]"
//line /usr/local/go/src/net/http/h2_bundle.go:5795
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5795
	// _ = "end of CoverTab[39267]"
//line /usr/local/go/src/net/http/h2_bundle.go:5795
	_go_fuzz_dep_.CoverTab[39268]++

							if len(f.PseudoFields()) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5797
		_go_fuzz_dep_.CoverTab[39275]++
								return sc.countError("trailers_pseudo", http2streamError(st.id, http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5798
		// _ = "end of CoverTab[39275]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5799
		_go_fuzz_dep_.CoverTab[39276]++
//line /usr/local/go/src/net/http/h2_bundle.go:5799
		// _ = "end of CoverTab[39276]"
//line /usr/local/go/src/net/http/h2_bundle.go:5799
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5799
	// _ = "end of CoverTab[39268]"
//line /usr/local/go/src/net/http/h2_bundle.go:5799
	_go_fuzz_dep_.CoverTab[39269]++
							if st.trailer != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5800
		_go_fuzz_dep_.CoverTab[39277]++
								for _, hf := range f.RegularFields() {
//line /usr/local/go/src/net/http/h2_bundle.go:5801
			_go_fuzz_dep_.CoverTab[39278]++
									key := sc.canonicalHeader(hf.Name)
									if !httpguts.ValidTrailerHeader(key) {
//line /usr/local/go/src/net/http/h2_bundle.go:5803
				_go_fuzz_dep_.CoverTab[39280]++

//line /usr/local/go/src/net/http/h2_bundle.go:5807
				return sc.countError("trailers_bogus", http2streamError(st.id, http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5807
				// _ = "end of CoverTab[39280]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5808
				_go_fuzz_dep_.CoverTab[39281]++
//line /usr/local/go/src/net/http/h2_bundle.go:5808
				// _ = "end of CoverTab[39281]"
//line /usr/local/go/src/net/http/h2_bundle.go:5808
			}
//line /usr/local/go/src/net/http/h2_bundle.go:5808
			// _ = "end of CoverTab[39278]"
//line /usr/local/go/src/net/http/h2_bundle.go:5808
			_go_fuzz_dep_.CoverTab[39279]++
									st.trailer[key] = append(st.trailer[key], hf.Value)
//line /usr/local/go/src/net/http/h2_bundle.go:5809
			// _ = "end of CoverTab[39279]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5810
		// _ = "end of CoverTab[39277]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5811
		_go_fuzz_dep_.CoverTab[39282]++
//line /usr/local/go/src/net/http/h2_bundle.go:5811
		// _ = "end of CoverTab[39282]"
//line /usr/local/go/src/net/http/h2_bundle.go:5811
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5811
	// _ = "end of CoverTab[39269]"
//line /usr/local/go/src/net/http/h2_bundle.go:5811
	_go_fuzz_dep_.CoverTab[39270]++
							st.endStream()
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5813
	// _ = "end of CoverTab[39270]"
}

func (sc *http2serverConn) checkPriority(streamID uint32, p http2PriorityParam) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5816
	_go_fuzz_dep_.CoverTab[39283]++
							if streamID == p.StreamDep {
//line /usr/local/go/src/net/http/h2_bundle.go:5817
		_go_fuzz_dep_.CoverTab[39285]++

//line /usr/local/go/src/net/http/h2_bundle.go:5822
		return sc.countError("priority", http2streamError(streamID, http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5822
		// _ = "end of CoverTab[39285]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5823
		_go_fuzz_dep_.CoverTab[39286]++
//line /usr/local/go/src/net/http/h2_bundle.go:5823
		// _ = "end of CoverTab[39286]"
//line /usr/local/go/src/net/http/h2_bundle.go:5823
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5823
	// _ = "end of CoverTab[39283]"
//line /usr/local/go/src/net/http/h2_bundle.go:5823
	_go_fuzz_dep_.CoverTab[39284]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5824
	// _ = "end of CoverTab[39284]"
}

func (sc *http2serverConn) processPriority(f *http2PriorityFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:5827
	_go_fuzz_dep_.CoverTab[39287]++
							if err := sc.checkPriority(f.StreamID, f.http2PriorityParam); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5828
		_go_fuzz_dep_.CoverTab[39289]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:5829
		// _ = "end of CoverTab[39289]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5830
		_go_fuzz_dep_.CoverTab[39290]++
//line /usr/local/go/src/net/http/h2_bundle.go:5830
		// _ = "end of CoverTab[39290]"
//line /usr/local/go/src/net/http/h2_bundle.go:5830
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5830
	// _ = "end of CoverTab[39287]"
//line /usr/local/go/src/net/http/h2_bundle.go:5830
	_go_fuzz_dep_.CoverTab[39288]++
							sc.writeSched.AdjustStream(f.StreamID, f.http2PriorityParam)
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:5832
	// _ = "end of CoverTab[39288]"
}

func (sc *http2serverConn) newStream(id, pusherID uint32, state http2streamState) *http2stream {
//line /usr/local/go/src/net/http/h2_bundle.go:5835
	_go_fuzz_dep_.CoverTab[39291]++
							sc.serveG.check()
							if id == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5837
		_go_fuzz_dep_.CoverTab[39296]++
								panic("internal error: cannot create stream with id 0")
//line /usr/local/go/src/net/http/h2_bundle.go:5838
		// _ = "end of CoverTab[39296]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5839
		_go_fuzz_dep_.CoverTab[39297]++
//line /usr/local/go/src/net/http/h2_bundle.go:5839
		// _ = "end of CoverTab[39297]"
//line /usr/local/go/src/net/http/h2_bundle.go:5839
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5839
	// _ = "end of CoverTab[39291]"
//line /usr/local/go/src/net/http/h2_bundle.go:5839
	_go_fuzz_dep_.CoverTab[39292]++

							ctx, cancelCtx := context.WithCancel(sc.baseCtx)
							st := &http2stream{
		sc:		sc,
		id:		id,
		state:		state,
		ctx:		ctx,
		cancelCtx:	cancelCtx,
	}
	st.cw.Init()
	st.flow.conn = &sc.flow
	st.flow.add(sc.initialStreamSendWindowSize)
	st.inflow.conn = &sc.inflow
	st.inflow.add(sc.srv.initialStreamRecvWindowSize())
	if sc.hs.WriteTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:5854
		_go_fuzz_dep_.CoverTab[39298]++
								st.writeDeadline = time.AfterFunc(sc.hs.WriteTimeout, st.onWriteTimeout)
//line /usr/local/go/src/net/http/h2_bundle.go:5855
		// _ = "end of CoverTab[39298]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5856
		_go_fuzz_dep_.CoverTab[39299]++
//line /usr/local/go/src/net/http/h2_bundle.go:5856
		// _ = "end of CoverTab[39299]"
//line /usr/local/go/src/net/http/h2_bundle.go:5856
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5856
	// _ = "end of CoverTab[39292]"
//line /usr/local/go/src/net/http/h2_bundle.go:5856
	_go_fuzz_dep_.CoverTab[39293]++

							sc.streams[id] = st
							sc.writeSched.OpenStream(st.id, http2OpenStreamOptions{PusherID: pusherID})
							if st.isPushed() {
//line /usr/local/go/src/net/http/h2_bundle.go:5860
		_go_fuzz_dep_.CoverTab[39300]++
								sc.curPushedStreams++
//line /usr/local/go/src/net/http/h2_bundle.go:5861
		// _ = "end of CoverTab[39300]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5862
		_go_fuzz_dep_.CoverTab[39301]++
								sc.curClientStreams++
//line /usr/local/go/src/net/http/h2_bundle.go:5863
		// _ = "end of CoverTab[39301]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5864
	// _ = "end of CoverTab[39293]"
//line /usr/local/go/src/net/http/h2_bundle.go:5864
	_go_fuzz_dep_.CoverTab[39294]++
							if sc.curOpenStreams() == 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:5865
		_go_fuzz_dep_.CoverTab[39302]++
								sc.setConnState(StateActive)
//line /usr/local/go/src/net/http/h2_bundle.go:5866
		// _ = "end of CoverTab[39302]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5867
		_go_fuzz_dep_.CoverTab[39303]++
//line /usr/local/go/src/net/http/h2_bundle.go:5867
		// _ = "end of CoverTab[39303]"
//line /usr/local/go/src/net/http/h2_bundle.go:5867
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5867
	// _ = "end of CoverTab[39294]"
//line /usr/local/go/src/net/http/h2_bundle.go:5867
	_go_fuzz_dep_.CoverTab[39295]++

							return st
//line /usr/local/go/src/net/http/h2_bundle.go:5869
	// _ = "end of CoverTab[39295]"
}

func (sc *http2serverConn) newWriterAndRequest(st *http2stream, f *http2MetaHeadersFrame) (*http2responseWriter, *Request, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:5872
	_go_fuzz_dep_.CoverTab[39304]++
							sc.serveG.check()

							rp := http2requestParam{
		method:		f.PseudoValue("method"),
		scheme:		f.PseudoValue("scheme"),
		authority:	f.PseudoValue("authority"),
		path:		f.PseudoValue("path"),
	}

	isConnect := rp.method == "CONNECT"
	if isConnect {
//line /usr/local/go/src/net/http/h2_bundle.go:5883
		_go_fuzz_dep_.CoverTab[39310]++
								if rp.path != "" || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5884
			_go_fuzz_dep_.CoverTab[39311]++
//line /usr/local/go/src/net/http/h2_bundle.go:5884
			return rp.scheme != ""
//line /usr/local/go/src/net/http/h2_bundle.go:5884
			// _ = "end of CoverTab[39311]"
//line /usr/local/go/src/net/http/h2_bundle.go:5884
		}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5884
			_go_fuzz_dep_.CoverTab[39312]++
//line /usr/local/go/src/net/http/h2_bundle.go:5884
			return rp.authority == ""
//line /usr/local/go/src/net/http/h2_bundle.go:5884
			// _ = "end of CoverTab[39312]"
//line /usr/local/go/src/net/http/h2_bundle.go:5884
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5884
			_go_fuzz_dep_.CoverTab[39313]++
									return nil, nil, sc.countError("bad_connect", http2streamError(f.StreamID, http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5885
			// _ = "end of CoverTab[39313]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5886
			_go_fuzz_dep_.CoverTab[39314]++
//line /usr/local/go/src/net/http/h2_bundle.go:5886
			// _ = "end of CoverTab[39314]"
//line /usr/local/go/src/net/http/h2_bundle.go:5886
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5886
		// _ = "end of CoverTab[39310]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5887
		_go_fuzz_dep_.CoverTab[39315]++
//line /usr/local/go/src/net/http/h2_bundle.go:5887
		if rp.method == "" || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5887
			_go_fuzz_dep_.CoverTab[39316]++
//line /usr/local/go/src/net/http/h2_bundle.go:5887
			return rp.path == ""
//line /usr/local/go/src/net/http/h2_bundle.go:5887
			// _ = "end of CoverTab[39316]"
//line /usr/local/go/src/net/http/h2_bundle.go:5887
		}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5887
			_go_fuzz_dep_.CoverTab[39317]++
//line /usr/local/go/src/net/http/h2_bundle.go:5887
			return (rp.scheme != "https" && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:5887
				_go_fuzz_dep_.CoverTab[39318]++
//line /usr/local/go/src/net/http/h2_bundle.go:5887
				return rp.scheme != "http"
//line /usr/local/go/src/net/http/h2_bundle.go:5887
				// _ = "end of CoverTab[39318]"
//line /usr/local/go/src/net/http/h2_bundle.go:5887
			}())
//line /usr/local/go/src/net/http/h2_bundle.go:5887
			// _ = "end of CoverTab[39317]"
//line /usr/local/go/src/net/http/h2_bundle.go:5887
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:5887
			_go_fuzz_dep_.CoverTab[39319]++

//line /usr/local/go/src/net/http/h2_bundle.go:5898
			return nil, nil, sc.countError("bad_path_method", http2streamError(f.StreamID, http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5898
			// _ = "end of CoverTab[39319]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5899
			_go_fuzz_dep_.CoverTab[39320]++
//line /usr/local/go/src/net/http/h2_bundle.go:5899
			// _ = "end of CoverTab[39320]"
//line /usr/local/go/src/net/http/h2_bundle.go:5899
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5899
		// _ = "end of CoverTab[39315]"
//line /usr/local/go/src/net/http/h2_bundle.go:5899
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5899
	// _ = "end of CoverTab[39304]"
//line /usr/local/go/src/net/http/h2_bundle.go:5899
	_go_fuzz_dep_.CoverTab[39305]++

							rp.header = make(Header)
							for _, hf := range f.RegularFields() {
//line /usr/local/go/src/net/http/h2_bundle.go:5902
		_go_fuzz_dep_.CoverTab[39321]++
								rp.header.Add(sc.canonicalHeader(hf.Name), hf.Value)
//line /usr/local/go/src/net/http/h2_bundle.go:5903
		// _ = "end of CoverTab[39321]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5904
	// _ = "end of CoverTab[39305]"
//line /usr/local/go/src/net/http/h2_bundle.go:5904
	_go_fuzz_dep_.CoverTab[39306]++
							if rp.authority == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:5905
		_go_fuzz_dep_.CoverTab[39322]++
								rp.authority = rp.header.Get("Host")
//line /usr/local/go/src/net/http/h2_bundle.go:5906
		// _ = "end of CoverTab[39322]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5907
		_go_fuzz_dep_.CoverTab[39323]++
//line /usr/local/go/src/net/http/h2_bundle.go:5907
		// _ = "end of CoverTab[39323]"
//line /usr/local/go/src/net/http/h2_bundle.go:5907
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5907
	// _ = "end of CoverTab[39306]"
//line /usr/local/go/src/net/http/h2_bundle.go:5907
	_go_fuzz_dep_.CoverTab[39307]++

							rw, req, err := sc.newWriterAndRequestNoBody(st, rp)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5910
		_go_fuzz_dep_.CoverTab[39324]++
								return nil, nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:5911
		// _ = "end of CoverTab[39324]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5912
		_go_fuzz_dep_.CoverTab[39325]++
//line /usr/local/go/src/net/http/h2_bundle.go:5912
		// _ = "end of CoverTab[39325]"
//line /usr/local/go/src/net/http/h2_bundle.go:5912
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5912
	// _ = "end of CoverTab[39307]"
//line /usr/local/go/src/net/http/h2_bundle.go:5912
	_go_fuzz_dep_.CoverTab[39308]++
							bodyOpen := !f.StreamEnded()
							if bodyOpen {
//line /usr/local/go/src/net/http/h2_bundle.go:5914
		_go_fuzz_dep_.CoverTab[39326]++
								if vv, ok := rp.header["Content-Length"]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:5915
			_go_fuzz_dep_.CoverTab[39328]++
									if cl, err := strconv.ParseUint(vv[0], 10, 63); err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5916
				_go_fuzz_dep_.CoverTab[39329]++
										req.ContentLength = int64(cl)
//line /usr/local/go/src/net/http/h2_bundle.go:5917
				// _ = "end of CoverTab[39329]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5918
				_go_fuzz_dep_.CoverTab[39330]++
										req.ContentLength = 0
//line /usr/local/go/src/net/http/h2_bundle.go:5919
				// _ = "end of CoverTab[39330]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:5920
			// _ = "end of CoverTab[39328]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5921
			_go_fuzz_dep_.CoverTab[39331]++
									req.ContentLength = -1
//line /usr/local/go/src/net/http/h2_bundle.go:5922
			// _ = "end of CoverTab[39331]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5923
		// _ = "end of CoverTab[39326]"
//line /usr/local/go/src/net/http/h2_bundle.go:5923
		_go_fuzz_dep_.CoverTab[39327]++
								req.Body.(*http2requestBody).pipe = &http2pipe{
			b: &http2dataBuffer{expected: req.ContentLength},
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5926
		// _ = "end of CoverTab[39327]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5927
		_go_fuzz_dep_.CoverTab[39332]++
//line /usr/local/go/src/net/http/h2_bundle.go:5927
		// _ = "end of CoverTab[39332]"
//line /usr/local/go/src/net/http/h2_bundle.go:5927
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5927
	// _ = "end of CoverTab[39308]"
//line /usr/local/go/src/net/http/h2_bundle.go:5927
	_go_fuzz_dep_.CoverTab[39309]++
							return rw, req, nil
//line /usr/local/go/src/net/http/h2_bundle.go:5928
	// _ = "end of CoverTab[39309]"
}

type http2requestParam struct {
	method			string
	scheme, authority, path	string
	header			Header
}

func (sc *http2serverConn) newWriterAndRequestNoBody(st *http2stream, rp http2requestParam) (*http2responseWriter, *Request, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:5937
	_go_fuzz_dep_.CoverTab[39333]++
							sc.serveG.check()

							var tlsState *tls.ConnectionState	// nil if not scheme https
							if rp.scheme == "https" {
//line /usr/local/go/src/net/http/h2_bundle.go:5941
		_go_fuzz_dep_.CoverTab[39339]++
								tlsState = sc.tlsState
//line /usr/local/go/src/net/http/h2_bundle.go:5942
		// _ = "end of CoverTab[39339]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5943
		_go_fuzz_dep_.CoverTab[39340]++
//line /usr/local/go/src/net/http/h2_bundle.go:5943
		// _ = "end of CoverTab[39340]"
//line /usr/local/go/src/net/http/h2_bundle.go:5943
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5943
	// _ = "end of CoverTab[39333]"
//line /usr/local/go/src/net/http/h2_bundle.go:5943
	_go_fuzz_dep_.CoverTab[39334]++

							needsContinue := rp.header.Get("Expect") == "100-continue"
							if needsContinue {
//line /usr/local/go/src/net/http/h2_bundle.go:5946
		_go_fuzz_dep_.CoverTab[39341]++
								rp.header.Del("Expect")
//line /usr/local/go/src/net/http/h2_bundle.go:5947
		// _ = "end of CoverTab[39341]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5948
		_go_fuzz_dep_.CoverTab[39342]++
//line /usr/local/go/src/net/http/h2_bundle.go:5948
		// _ = "end of CoverTab[39342]"
//line /usr/local/go/src/net/http/h2_bundle.go:5948
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5948
	// _ = "end of CoverTab[39334]"
//line /usr/local/go/src/net/http/h2_bundle.go:5948
	_go_fuzz_dep_.CoverTab[39335]++

							if cookies := rp.header["Cookie"]; len(cookies) > 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:5950
		_go_fuzz_dep_.CoverTab[39343]++
								rp.header.Set("Cookie", strings.Join(cookies, "; "))
//line /usr/local/go/src/net/http/h2_bundle.go:5951
		// _ = "end of CoverTab[39343]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5952
		_go_fuzz_dep_.CoverTab[39344]++
//line /usr/local/go/src/net/http/h2_bundle.go:5952
		// _ = "end of CoverTab[39344]"
//line /usr/local/go/src/net/http/h2_bundle.go:5952
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5952
	// _ = "end of CoverTab[39335]"
//line /usr/local/go/src/net/http/h2_bundle.go:5952
	_go_fuzz_dep_.CoverTab[39336]++

	// Setup Trailers
	var trailer Header
	for _, v := range rp.header["Trailer"] {
//line /usr/local/go/src/net/http/h2_bundle.go:5956
		_go_fuzz_dep_.CoverTab[39345]++
								for _, key := range strings.Split(v, ",") {
//line /usr/local/go/src/net/http/h2_bundle.go:5957
			_go_fuzz_dep_.CoverTab[39346]++
									key = CanonicalHeaderKey(textproto.TrimString(key))
									switch key {
			case "Transfer-Encoding", "Trailer", "Content-Length":
//line /usr/local/go/src/net/http/h2_bundle.go:5960
				_go_fuzz_dep_.CoverTab[39347]++
//line /usr/local/go/src/net/http/h2_bundle.go:5960
				// _ = "end of CoverTab[39347]"

//line /usr/local/go/src/net/http/h2_bundle.go:5963
			default:
//line /usr/local/go/src/net/http/h2_bundle.go:5963
				_go_fuzz_dep_.CoverTab[39348]++
										if trailer == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5964
					_go_fuzz_dep_.CoverTab[39350]++
											trailer = make(Header)
//line /usr/local/go/src/net/http/h2_bundle.go:5965
					// _ = "end of CoverTab[39350]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5966
					_go_fuzz_dep_.CoverTab[39351]++
//line /usr/local/go/src/net/http/h2_bundle.go:5966
					// _ = "end of CoverTab[39351]"
//line /usr/local/go/src/net/http/h2_bundle.go:5966
				}
//line /usr/local/go/src/net/http/h2_bundle.go:5966
				// _ = "end of CoverTab[39348]"
//line /usr/local/go/src/net/http/h2_bundle.go:5966
				_go_fuzz_dep_.CoverTab[39349]++
										trailer[key] = nil
//line /usr/local/go/src/net/http/h2_bundle.go:5967
				// _ = "end of CoverTab[39349]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:5968
			// _ = "end of CoverTab[39346]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5969
		// _ = "end of CoverTab[39345]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5970
	// _ = "end of CoverTab[39336]"
//line /usr/local/go/src/net/http/h2_bundle.go:5970
	_go_fuzz_dep_.CoverTab[39337]++
							delete(rp.header, "Trailer")

							var url_ *url.URL
							var requestURI string
							if rp.method == "CONNECT" {
//line /usr/local/go/src/net/http/h2_bundle.go:5975
		_go_fuzz_dep_.CoverTab[39352]++
								url_ = &url.URL{Host: rp.authority}
								requestURI = rp.authority
//line /usr/local/go/src/net/http/h2_bundle.go:5977
		// _ = "end of CoverTab[39352]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5978
		_go_fuzz_dep_.CoverTab[39353]++
								var err error
								url_, err = url.ParseRequestURI(rp.path)
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:5981
			_go_fuzz_dep_.CoverTab[39355]++
									return nil, nil, sc.countError("bad_path", http2streamError(st.id, http2ErrCodeProtocol))
//line /usr/local/go/src/net/http/h2_bundle.go:5982
			// _ = "end of CoverTab[39355]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:5983
			_go_fuzz_dep_.CoverTab[39356]++
//line /usr/local/go/src/net/http/h2_bundle.go:5983
			// _ = "end of CoverTab[39356]"
//line /usr/local/go/src/net/http/h2_bundle.go:5983
		}
//line /usr/local/go/src/net/http/h2_bundle.go:5983
		// _ = "end of CoverTab[39353]"
//line /usr/local/go/src/net/http/h2_bundle.go:5983
		_go_fuzz_dep_.CoverTab[39354]++
								requestURI = rp.path
//line /usr/local/go/src/net/http/h2_bundle.go:5984
		// _ = "end of CoverTab[39354]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:5985
	// _ = "end of CoverTab[39337]"
//line /usr/local/go/src/net/http/h2_bundle.go:5985
	_go_fuzz_dep_.CoverTab[39338]++

							body := &http2requestBody{
		conn:		sc,
		stream:		st,
		needsContinue:	needsContinue,
	}
	req := &Request{
		Method:		rp.method,
		URL:		url_,
		RemoteAddr:	sc.remoteAddrStr,
		Header:		rp.header,
		RequestURI:	requestURI,
		Proto:		"HTTP/2.0",
		ProtoMajor:	2,
		ProtoMinor:	0,
		TLS:		tlsState,
		Host:		rp.authority,
		Body:		body,
		Trailer:	trailer,
	}
							req = req.WithContext(st.ctx)

							rw := sc.newResponseWriter(st, req)
							return rw, req, nil
//line /usr/local/go/src/net/http/h2_bundle.go:6009
	// _ = "end of CoverTab[39338]"
}

func (sc *http2serverConn) newResponseWriter(st *http2stream, req *Request) *http2responseWriter {
//line /usr/local/go/src/net/http/h2_bundle.go:6012
	_go_fuzz_dep_.CoverTab[39357]++
							rws := http2responseWriterStatePool.Get().(*http2responseWriterState)
							bwSave := rws.bw
							*rws = http2responseWriterState{}
							rws.conn = sc
							rws.bw = bwSave
							rws.bw.Reset(http2chunkWriter{rws})
							rws.stream = st
							rws.req = req
							return &http2responseWriter{rws: rws}
//line /usr/local/go/src/net/http/h2_bundle.go:6021
	// _ = "end of CoverTab[39357]"
}

// Run on its own goroutine.
func (sc *http2serverConn) runHandler(rw *http2responseWriter, req *Request, handler func(ResponseWriter, *Request)) {
//line /usr/local/go/src/net/http/h2_bundle.go:6025
	_go_fuzz_dep_.CoverTab[39358]++
							didPanic := true
							defer func() {
//line /usr/local/go/src/net/http/h2_bundle.go:6027
		_go_fuzz_dep_.CoverTab[39360]++
								rw.rws.stream.cancelCtx()
								if req.MultipartForm != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6029
			_go_fuzz_dep_.CoverTab[39363]++
									req.MultipartForm.RemoveAll()
//line /usr/local/go/src/net/http/h2_bundle.go:6030
			// _ = "end of CoverTab[39363]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6031
			_go_fuzz_dep_.CoverTab[39364]++
//line /usr/local/go/src/net/http/h2_bundle.go:6031
			// _ = "end of CoverTab[39364]"
//line /usr/local/go/src/net/http/h2_bundle.go:6031
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6031
		// _ = "end of CoverTab[39360]"
//line /usr/local/go/src/net/http/h2_bundle.go:6031
		_go_fuzz_dep_.CoverTab[39361]++
								if didPanic {
//line /usr/local/go/src/net/http/h2_bundle.go:6032
			_go_fuzz_dep_.CoverTab[39365]++
									e := recover()
									sc.writeFrameFromHandler(http2FrameWriteRequest{
				write:	http2handlerPanicRST{rw.rws.stream.id},
				stream:	rw.rws.stream,
			})

			if e != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6039
				_go_fuzz_dep_.CoverTab[39367]++
//line /usr/local/go/src/net/http/h2_bundle.go:6039
				return e != ErrAbortHandler
//line /usr/local/go/src/net/http/h2_bundle.go:6039
				// _ = "end of CoverTab[39367]"
//line /usr/local/go/src/net/http/h2_bundle.go:6039
			}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6039
				_go_fuzz_dep_.CoverTab[39368]++
										const size = 64 << 10
										buf := make([]byte, size)
										buf = buf[:runtime.Stack(buf, false)]
										sc.logf("http2: panic serving %v: %v\n%s", sc.conn.RemoteAddr(), e, buf)
//line /usr/local/go/src/net/http/h2_bundle.go:6043
				// _ = "end of CoverTab[39368]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6044
				_go_fuzz_dep_.CoverTab[39369]++
//line /usr/local/go/src/net/http/h2_bundle.go:6044
				// _ = "end of CoverTab[39369]"
//line /usr/local/go/src/net/http/h2_bundle.go:6044
			}
//line /usr/local/go/src/net/http/h2_bundle.go:6044
			// _ = "end of CoverTab[39365]"
//line /usr/local/go/src/net/http/h2_bundle.go:6044
			_go_fuzz_dep_.CoverTab[39366]++
									return
//line /usr/local/go/src/net/http/h2_bundle.go:6045
			// _ = "end of CoverTab[39366]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6046
			_go_fuzz_dep_.CoverTab[39370]++
//line /usr/local/go/src/net/http/h2_bundle.go:6046
			// _ = "end of CoverTab[39370]"
//line /usr/local/go/src/net/http/h2_bundle.go:6046
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6046
		// _ = "end of CoverTab[39361]"
//line /usr/local/go/src/net/http/h2_bundle.go:6046
		_go_fuzz_dep_.CoverTab[39362]++
								rw.handlerDone()
//line /usr/local/go/src/net/http/h2_bundle.go:6047
		// _ = "end of CoverTab[39362]"
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:6048
	// _ = "end of CoverTab[39358]"
//line /usr/local/go/src/net/http/h2_bundle.go:6048
	_go_fuzz_dep_.CoverTab[39359]++
							handler(rw, req)
							didPanic = false
//line /usr/local/go/src/net/http/h2_bundle.go:6050
	// _ = "end of CoverTab[39359]"
}

func http2handleHeaderListTooLong(w ResponseWriter, r *Request) {
//line /usr/local/go/src/net/http/h2_bundle.go:6053
	_go_fuzz_dep_.CoverTab[39371]++
	// 10.5.1 Limits on Header Block Size:
	// .. "A server that receives a larger header block than it is
	// willing to handle can send an HTTP 431 (Request Header Fields Too
							// Large) status code"
							const statusRequestHeaderFieldsTooLarge = 431	// only in Go 1.6+
							w.WriteHeader(statusRequestHeaderFieldsTooLarge)
							io.WriteString(w, "<h1>HTTP Error 431</h1><p>Request Header Field(s) Too Large</p>")
//line /usr/local/go/src/net/http/h2_bundle.go:6060
	// _ = "end of CoverTab[39371]"
}

// called from handler goroutines.
//line /usr/local/go/src/net/http/h2_bundle.go:6063
// h may be nil.
//line /usr/local/go/src/net/http/h2_bundle.go:6065
func (sc *http2serverConn) writeHeaders(st *http2stream, headerData *http2writeResHeaders) error {
//line /usr/local/go/src/net/http/h2_bundle.go:6065
	_go_fuzz_dep_.CoverTab[39372]++
							sc.serveG.checkNotOn()
							var errc chan error
							if headerData.h != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6068
		_go_fuzz_dep_.CoverTab[39376]++

//line /usr/local/go/src/net/http/h2_bundle.go:6073
		errc = http2errChanPool.Get().(chan error)
//line /usr/local/go/src/net/http/h2_bundle.go:6073
		// _ = "end of CoverTab[39376]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6074
		_go_fuzz_dep_.CoverTab[39377]++
//line /usr/local/go/src/net/http/h2_bundle.go:6074
		// _ = "end of CoverTab[39377]"
//line /usr/local/go/src/net/http/h2_bundle.go:6074
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6074
	// _ = "end of CoverTab[39372]"
//line /usr/local/go/src/net/http/h2_bundle.go:6074
	_go_fuzz_dep_.CoverTab[39373]++
							if err := sc.writeFrameFromHandler(http2FrameWriteRequest{
		write:	headerData,
		stream:	st,
		done:	errc,
	}); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6079
		_go_fuzz_dep_.CoverTab[39378]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:6080
		// _ = "end of CoverTab[39378]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6081
		_go_fuzz_dep_.CoverTab[39379]++
//line /usr/local/go/src/net/http/h2_bundle.go:6081
		// _ = "end of CoverTab[39379]"
//line /usr/local/go/src/net/http/h2_bundle.go:6081
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6081
	// _ = "end of CoverTab[39373]"
//line /usr/local/go/src/net/http/h2_bundle.go:6081
	_go_fuzz_dep_.CoverTab[39374]++
							if errc != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6082
		_go_fuzz_dep_.CoverTab[39380]++
								select {
		case err := <-errc:
//line /usr/local/go/src/net/http/h2_bundle.go:6084
			_go_fuzz_dep_.CoverTab[39381]++
									http2errChanPool.Put(errc)
									return err
//line /usr/local/go/src/net/http/h2_bundle.go:6086
			// _ = "end of CoverTab[39381]"
		case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:6087
			_go_fuzz_dep_.CoverTab[39382]++
									return http2errClientDisconnected
//line /usr/local/go/src/net/http/h2_bundle.go:6088
			// _ = "end of CoverTab[39382]"
		case <-st.cw:
//line /usr/local/go/src/net/http/h2_bundle.go:6089
			_go_fuzz_dep_.CoverTab[39383]++
									return http2errStreamClosed
//line /usr/local/go/src/net/http/h2_bundle.go:6090
			// _ = "end of CoverTab[39383]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6091
		// _ = "end of CoverTab[39380]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6092
		_go_fuzz_dep_.CoverTab[39384]++
//line /usr/local/go/src/net/http/h2_bundle.go:6092
		// _ = "end of CoverTab[39384]"
//line /usr/local/go/src/net/http/h2_bundle.go:6092
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6092
	// _ = "end of CoverTab[39374]"
//line /usr/local/go/src/net/http/h2_bundle.go:6092
	_go_fuzz_dep_.CoverTab[39375]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:6093
	// _ = "end of CoverTab[39375]"
}

// called from handler goroutines.
func (sc *http2serverConn) write100ContinueHeaders(st *http2stream) {
//line /usr/local/go/src/net/http/h2_bundle.go:6097
	_go_fuzz_dep_.CoverTab[39385]++
							sc.writeFrameFromHandler(http2FrameWriteRequest{
		write:	http2write100ContinueHeadersFrame{st.id},
		stream:	st,
	})
//line /usr/local/go/src/net/http/h2_bundle.go:6101
	// _ = "end of CoverTab[39385]"
}

// A bodyReadMsg tells the server loop that the http.Handler read n
//line /usr/local/go/src/net/http/h2_bundle.go:6104
// bytes of the DATA from the client on the given stream.
//line /usr/local/go/src/net/http/h2_bundle.go:6106
type http2bodyReadMsg struct {
	st	*http2stream
	n	int
}

// called from handler goroutines.
//line /usr/local/go/src/net/http/h2_bundle.go:6111
// Notes that the handler for the given stream ID read n bytes of its body
//line /usr/local/go/src/net/http/h2_bundle.go:6111
// and schedules flow control tokens to be sent.
//line /usr/local/go/src/net/http/h2_bundle.go:6114
func (sc *http2serverConn) noteBodyReadFromHandler(st *http2stream, n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:6114
	_go_fuzz_dep_.CoverTab[39386]++
							sc.serveG.checkNotOn()
							if n > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:6116
		_go_fuzz_dep_.CoverTab[39387]++
								select {
		case sc.bodyReadCh <- http2bodyReadMsg{st, n}:
//line /usr/local/go/src/net/http/h2_bundle.go:6118
			_go_fuzz_dep_.CoverTab[39388]++
//line /usr/local/go/src/net/http/h2_bundle.go:6118
			// _ = "end of CoverTab[39388]"
		case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:6119
			_go_fuzz_dep_.CoverTab[39389]++
//line /usr/local/go/src/net/http/h2_bundle.go:6119
			// _ = "end of CoverTab[39389]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6120
		// _ = "end of CoverTab[39387]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6121
		_go_fuzz_dep_.CoverTab[39390]++
//line /usr/local/go/src/net/http/h2_bundle.go:6121
		// _ = "end of CoverTab[39390]"
//line /usr/local/go/src/net/http/h2_bundle.go:6121
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6121
	// _ = "end of CoverTab[39386]"
}

func (sc *http2serverConn) noteBodyRead(st *http2stream, n int) {
//line /usr/local/go/src/net/http/h2_bundle.go:6124
	_go_fuzz_dep_.CoverTab[39391]++
							sc.serveG.check()
							sc.sendWindowUpdate(nil, n)
							if st.state != http2stateHalfClosedRemote && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6127
		_go_fuzz_dep_.CoverTab[39392]++
//line /usr/local/go/src/net/http/h2_bundle.go:6127
		return st.state != http2stateClosed
//line /usr/local/go/src/net/http/h2_bundle.go:6127
		// _ = "end of CoverTab[39392]"
//line /usr/local/go/src/net/http/h2_bundle.go:6127
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6127
		_go_fuzz_dep_.CoverTab[39393]++

//line /usr/local/go/src/net/http/h2_bundle.go:6130
		sc.sendWindowUpdate(st, n)
//line /usr/local/go/src/net/http/h2_bundle.go:6130
		// _ = "end of CoverTab[39393]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6131
		_go_fuzz_dep_.CoverTab[39394]++
//line /usr/local/go/src/net/http/h2_bundle.go:6131
		// _ = "end of CoverTab[39394]"
//line /usr/local/go/src/net/http/h2_bundle.go:6131
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6131
	// _ = "end of CoverTab[39391]"
}

// st may be nil for conn-level
func (sc *http2serverConn) sendWindowUpdate(st *http2stream, n int) {
//line /usr/local/go/src/net/http/h2_bundle.go:6135
	_go_fuzz_dep_.CoverTab[39395]++
							sc.serveG.check()
	// "The legal range for the increment to the flow control
	// window is 1 to 2^31-1 (2,147,483,647) octets."
	// A Go Read call on 64-bit machines could in theory read
	// a larger Read than this. Very unlikely, but we handle it here
	// rather than elsewhere for now.
	const maxUint31 = 1<<31 - 1
	for n > maxUint31 {
//line /usr/local/go/src/net/http/h2_bundle.go:6143
		_go_fuzz_dep_.CoverTab[39397]++
								sc.sendWindowUpdate32(st, maxUint31)
								n -= maxUint31
//line /usr/local/go/src/net/http/h2_bundle.go:6145
		// _ = "end of CoverTab[39397]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6146
	// _ = "end of CoverTab[39395]"
//line /usr/local/go/src/net/http/h2_bundle.go:6146
	_go_fuzz_dep_.CoverTab[39396]++
							sc.sendWindowUpdate32(st, int32(n))
//line /usr/local/go/src/net/http/h2_bundle.go:6147
	// _ = "end of CoverTab[39396]"
}

// st may be nil for conn-level
func (sc *http2serverConn) sendWindowUpdate32(st *http2stream, n int32) {
//line /usr/local/go/src/net/http/h2_bundle.go:6151
	_go_fuzz_dep_.CoverTab[39398]++
							sc.serveG.check()
							if n == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:6153
		_go_fuzz_dep_.CoverTab[39403]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:6154
		// _ = "end of CoverTab[39403]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6155
		_go_fuzz_dep_.CoverTab[39404]++
//line /usr/local/go/src/net/http/h2_bundle.go:6155
		// _ = "end of CoverTab[39404]"
//line /usr/local/go/src/net/http/h2_bundle.go:6155
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6155
	// _ = "end of CoverTab[39398]"
//line /usr/local/go/src/net/http/h2_bundle.go:6155
	_go_fuzz_dep_.CoverTab[39399]++
							if n < 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:6156
		_go_fuzz_dep_.CoverTab[39405]++
								panic("negative update")
//line /usr/local/go/src/net/http/h2_bundle.go:6157
		// _ = "end of CoverTab[39405]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6158
		_go_fuzz_dep_.CoverTab[39406]++
//line /usr/local/go/src/net/http/h2_bundle.go:6158
		// _ = "end of CoverTab[39406]"
//line /usr/local/go/src/net/http/h2_bundle.go:6158
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6158
	// _ = "end of CoverTab[39399]"
//line /usr/local/go/src/net/http/h2_bundle.go:6158
	_go_fuzz_dep_.CoverTab[39400]++
							var streamID uint32
							if st != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6160
		_go_fuzz_dep_.CoverTab[39407]++
								streamID = st.id
//line /usr/local/go/src/net/http/h2_bundle.go:6161
		// _ = "end of CoverTab[39407]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6162
		_go_fuzz_dep_.CoverTab[39408]++
//line /usr/local/go/src/net/http/h2_bundle.go:6162
		// _ = "end of CoverTab[39408]"
//line /usr/local/go/src/net/http/h2_bundle.go:6162
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6162
	// _ = "end of CoverTab[39400]"
//line /usr/local/go/src/net/http/h2_bundle.go:6162
	_go_fuzz_dep_.CoverTab[39401]++
							sc.writeFrame(http2FrameWriteRequest{
		write:	http2writeWindowUpdate{streamID: streamID, n: uint32(n)},
		stream:	st,
	})
	var ok bool
	if st == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6168
		_go_fuzz_dep_.CoverTab[39409]++
								ok = sc.inflow.add(n)
//line /usr/local/go/src/net/http/h2_bundle.go:6169
		// _ = "end of CoverTab[39409]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6170
		_go_fuzz_dep_.CoverTab[39410]++
								ok = st.inflow.add(n)
//line /usr/local/go/src/net/http/h2_bundle.go:6171
		// _ = "end of CoverTab[39410]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6172
	// _ = "end of CoverTab[39401]"
//line /usr/local/go/src/net/http/h2_bundle.go:6172
	_go_fuzz_dep_.CoverTab[39402]++
							if !ok {
//line /usr/local/go/src/net/http/h2_bundle.go:6173
		_go_fuzz_dep_.CoverTab[39411]++
								panic("internal error; sent too many window updates without decrements?")
//line /usr/local/go/src/net/http/h2_bundle.go:6174
		// _ = "end of CoverTab[39411]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6175
		_go_fuzz_dep_.CoverTab[39412]++
//line /usr/local/go/src/net/http/h2_bundle.go:6175
		// _ = "end of CoverTab[39412]"
//line /usr/local/go/src/net/http/h2_bundle.go:6175
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6175
	// _ = "end of CoverTab[39402]"
}

// requestBody is the Handler's Request.Body type.
//line /usr/local/go/src/net/http/h2_bundle.go:6178
// Read and Close may be called concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:6180
type http2requestBody struct {
	_		http2incomparable
	stream		*http2stream
	conn		*http2serverConn
	closeOnce	sync.Once	// for use by Close only
	sawEOF		bool		// for use by Read only
	pipe		*http2pipe	// non-nil if we have a HTTP entity message body
	needsContinue	bool		// need to send a 100-continue
}

func (b *http2requestBody) Close() error {
//line /usr/local/go/src/net/http/h2_bundle.go:6190
	_go_fuzz_dep_.CoverTab[39413]++
							b.closeOnce.Do(func() {
//line /usr/local/go/src/net/http/h2_bundle.go:6191
		_go_fuzz_dep_.CoverTab[39415]++
								if b.pipe != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6192
			_go_fuzz_dep_.CoverTab[39416]++
									b.pipe.BreakWithError(http2errClosedBody)
//line /usr/local/go/src/net/http/h2_bundle.go:6193
			// _ = "end of CoverTab[39416]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6194
			_go_fuzz_dep_.CoverTab[39417]++
//line /usr/local/go/src/net/http/h2_bundle.go:6194
			// _ = "end of CoverTab[39417]"
//line /usr/local/go/src/net/http/h2_bundle.go:6194
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6194
		// _ = "end of CoverTab[39415]"
	})
//line /usr/local/go/src/net/http/h2_bundle.go:6195
	// _ = "end of CoverTab[39413]"
//line /usr/local/go/src/net/http/h2_bundle.go:6195
	_go_fuzz_dep_.CoverTab[39414]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:6196
	// _ = "end of CoverTab[39414]"
}

func (b *http2requestBody) Read(p []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:6199
	_go_fuzz_dep_.CoverTab[39418]++
							if b.needsContinue {
//line /usr/local/go/src/net/http/h2_bundle.go:6200
		_go_fuzz_dep_.CoverTab[39423]++
								b.needsContinue = false
								b.conn.write100ContinueHeaders(b.stream)
//line /usr/local/go/src/net/http/h2_bundle.go:6202
		// _ = "end of CoverTab[39423]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6203
		_go_fuzz_dep_.CoverTab[39424]++
//line /usr/local/go/src/net/http/h2_bundle.go:6203
		// _ = "end of CoverTab[39424]"
//line /usr/local/go/src/net/http/h2_bundle.go:6203
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6203
	// _ = "end of CoverTab[39418]"
//line /usr/local/go/src/net/http/h2_bundle.go:6203
	_go_fuzz_dep_.CoverTab[39419]++
							if b.pipe == nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6204
		_go_fuzz_dep_.CoverTab[39425]++
//line /usr/local/go/src/net/http/h2_bundle.go:6204
		return b.sawEOF
//line /usr/local/go/src/net/http/h2_bundle.go:6204
		// _ = "end of CoverTab[39425]"
//line /usr/local/go/src/net/http/h2_bundle.go:6204
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6204
		_go_fuzz_dep_.CoverTab[39426]++
								return 0, io.EOF
//line /usr/local/go/src/net/http/h2_bundle.go:6205
		// _ = "end of CoverTab[39426]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6206
		_go_fuzz_dep_.CoverTab[39427]++
//line /usr/local/go/src/net/http/h2_bundle.go:6206
		// _ = "end of CoverTab[39427]"
//line /usr/local/go/src/net/http/h2_bundle.go:6206
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6206
	// _ = "end of CoverTab[39419]"
//line /usr/local/go/src/net/http/h2_bundle.go:6206
	_go_fuzz_dep_.CoverTab[39420]++
							n, err = b.pipe.Read(p)
							if err == io.EOF {
//line /usr/local/go/src/net/http/h2_bundle.go:6208
		_go_fuzz_dep_.CoverTab[39428]++
								b.sawEOF = true
//line /usr/local/go/src/net/http/h2_bundle.go:6209
		// _ = "end of CoverTab[39428]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6210
		_go_fuzz_dep_.CoverTab[39429]++
//line /usr/local/go/src/net/http/h2_bundle.go:6210
		// _ = "end of CoverTab[39429]"
//line /usr/local/go/src/net/http/h2_bundle.go:6210
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6210
	// _ = "end of CoverTab[39420]"
//line /usr/local/go/src/net/http/h2_bundle.go:6210
	_go_fuzz_dep_.CoverTab[39421]++
							if b.conn == nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6211
		_go_fuzz_dep_.CoverTab[39430]++
//line /usr/local/go/src/net/http/h2_bundle.go:6211
		return http2inTests
//line /usr/local/go/src/net/http/h2_bundle.go:6211
		// _ = "end of CoverTab[39430]"
//line /usr/local/go/src/net/http/h2_bundle.go:6211
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6211
		_go_fuzz_dep_.CoverTab[39431]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:6212
		// _ = "end of CoverTab[39431]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6213
		_go_fuzz_dep_.CoverTab[39432]++
//line /usr/local/go/src/net/http/h2_bundle.go:6213
		// _ = "end of CoverTab[39432]"
//line /usr/local/go/src/net/http/h2_bundle.go:6213
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6213
	// _ = "end of CoverTab[39421]"
//line /usr/local/go/src/net/http/h2_bundle.go:6213
	_go_fuzz_dep_.CoverTab[39422]++
							b.conn.noteBodyReadFromHandler(b.stream, n, err)
							return
//line /usr/local/go/src/net/http/h2_bundle.go:6215
	// _ = "end of CoverTab[39422]"
}

// responseWriter is the http.ResponseWriter implementation. It's
//line /usr/local/go/src/net/http/h2_bundle.go:6218
// intentionally small (1 pointer wide) to minimize garbage. The
//line /usr/local/go/src/net/http/h2_bundle.go:6218
// responseWriterState pointer inside is zeroed at the end of a
//line /usr/local/go/src/net/http/h2_bundle.go:6218
// request (in handlerDone) and calls on the responseWriter thereafter
//line /usr/local/go/src/net/http/h2_bundle.go:6218
// simply crash (caller's mistake), but the much larger responseWriterState
//line /usr/local/go/src/net/http/h2_bundle.go:6218
// and buffers are reused between multiple requests.
//line /usr/local/go/src/net/http/h2_bundle.go:6224
type http2responseWriter struct {
	rws *http2responseWriterState
}

// Optional http.ResponseWriter interfaces implemented.
var (
	_	CloseNotifier		= (*http2responseWriter)(nil)
	_	Flusher			= (*http2responseWriter)(nil)
	_	http2stringWriter	= (*http2responseWriter)(nil)
)

type http2responseWriterState struct {
	// immutable within a request:
	stream	*http2stream
	req	*Request
	conn	*http2serverConn

	// TODO: adjust buffer writing sizes based on server config, frame size updates from peer, etc
	bw	*bufio.Writer	// writing to a chunkWriter{this *responseWriterState}

	// mutated by http.Handler goroutine:
	handlerHeader	Header		// nil until called
	snapHeader	Header		// snapshot of handlerHeader at WriteHeader time
	trailers	[]string	// set in writeChunk
	status		int		// status code passed to WriteHeader
	wroteHeader	bool		// WriteHeader called (explicitly or implicitly). Not necessarily sent to user yet.
	sentHeader	bool		// have we sent the header frame?
	handlerDone	bool		// handler has finished
	dirty		bool		// a Write failed; don't reuse this responseWriterState

	sentContentLen	int64	// non-zero if handler set a Content-Length header
	wroteBytes	int64

	closeNotifierMu	sync.Mutex	// guards closeNotifierCh
	closeNotifierCh	chan bool	// nil until first used
}

type http2chunkWriter struct{ rws *http2responseWriterState }

func (cw http2chunkWriter) Write(p []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:6263
	_go_fuzz_dep_.CoverTab[39433]++
							n, err = cw.rws.writeChunk(p)
							if err == http2errStreamClosed {
//line /usr/local/go/src/net/http/h2_bundle.go:6265
		_go_fuzz_dep_.CoverTab[39435]++

//line /usr/local/go/src/net/http/h2_bundle.go:6268
		err = cw.rws.stream.closeErr
//line /usr/local/go/src/net/http/h2_bundle.go:6268
		// _ = "end of CoverTab[39435]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6269
		_go_fuzz_dep_.CoverTab[39436]++
//line /usr/local/go/src/net/http/h2_bundle.go:6269
		// _ = "end of CoverTab[39436]"
//line /usr/local/go/src/net/http/h2_bundle.go:6269
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6269
	// _ = "end of CoverTab[39433]"
//line /usr/local/go/src/net/http/h2_bundle.go:6269
	_go_fuzz_dep_.CoverTab[39434]++
							return n, err
//line /usr/local/go/src/net/http/h2_bundle.go:6270
	// _ = "end of CoverTab[39434]"
}

func (rws *http2responseWriterState) hasTrailers() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6273
	_go_fuzz_dep_.CoverTab[39437]++
//line /usr/local/go/src/net/http/h2_bundle.go:6273
	return len(rws.trailers) > 0
//line /usr/local/go/src/net/http/h2_bundle.go:6273
	// _ = "end of CoverTab[39437]"
//line /usr/local/go/src/net/http/h2_bundle.go:6273
}

func (rws *http2responseWriterState) hasNonemptyTrailers() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6275
	_go_fuzz_dep_.CoverTab[39438]++
							for _, trailer := range rws.trailers {
//line /usr/local/go/src/net/http/h2_bundle.go:6276
		_go_fuzz_dep_.CoverTab[39440]++
								if _, ok := rws.handlerHeader[trailer]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:6277
			_go_fuzz_dep_.CoverTab[39441]++
									return true
//line /usr/local/go/src/net/http/h2_bundle.go:6278
			// _ = "end of CoverTab[39441]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6279
			_go_fuzz_dep_.CoverTab[39442]++
//line /usr/local/go/src/net/http/h2_bundle.go:6279
			// _ = "end of CoverTab[39442]"
//line /usr/local/go/src/net/http/h2_bundle.go:6279
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6279
		// _ = "end of CoverTab[39440]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6280
	// _ = "end of CoverTab[39438]"
//line /usr/local/go/src/net/http/h2_bundle.go:6280
	_go_fuzz_dep_.CoverTab[39439]++
							return false
//line /usr/local/go/src/net/http/h2_bundle.go:6281
	// _ = "end of CoverTab[39439]"
}

// declareTrailer is called for each Trailer header when the
//line /usr/local/go/src/net/http/h2_bundle.go:6284
// response header is written. It notes that a header will need to be
//line /usr/local/go/src/net/http/h2_bundle.go:6284
// written in the trailers at the end of the response.
//line /usr/local/go/src/net/http/h2_bundle.go:6287
func (rws *http2responseWriterState) declareTrailer(k string) {
//line /usr/local/go/src/net/http/h2_bundle.go:6287
	_go_fuzz_dep_.CoverTab[39443]++
							k = CanonicalHeaderKey(k)
							if !httpguts.ValidTrailerHeader(k) {
//line /usr/local/go/src/net/http/h2_bundle.go:6289
		_go_fuzz_dep_.CoverTab[39445]++

								rws.conn.logf("ignoring invalid trailer %q", k)
								return
//line /usr/local/go/src/net/http/h2_bundle.go:6292
		// _ = "end of CoverTab[39445]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6293
		_go_fuzz_dep_.CoverTab[39446]++
//line /usr/local/go/src/net/http/h2_bundle.go:6293
		// _ = "end of CoverTab[39446]"
//line /usr/local/go/src/net/http/h2_bundle.go:6293
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6293
	// _ = "end of CoverTab[39443]"
//line /usr/local/go/src/net/http/h2_bundle.go:6293
	_go_fuzz_dep_.CoverTab[39444]++
							if !http2strSliceContains(rws.trailers, k) {
//line /usr/local/go/src/net/http/h2_bundle.go:6294
		_go_fuzz_dep_.CoverTab[39447]++
								rws.trailers = append(rws.trailers, k)
//line /usr/local/go/src/net/http/h2_bundle.go:6295
		// _ = "end of CoverTab[39447]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6296
		_go_fuzz_dep_.CoverTab[39448]++
//line /usr/local/go/src/net/http/h2_bundle.go:6296
		// _ = "end of CoverTab[39448]"
//line /usr/local/go/src/net/http/h2_bundle.go:6296
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6296
	// _ = "end of CoverTab[39444]"
}

// writeChunk writes chunks from the bufio.Writer. But because
//line /usr/local/go/src/net/http/h2_bundle.go:6299
// bufio.Writer may bypass its chunking, sometimes p may be
//line /usr/local/go/src/net/http/h2_bundle.go:6299
// arbitrarily large.
//line /usr/local/go/src/net/http/h2_bundle.go:6299
//
//line /usr/local/go/src/net/http/h2_bundle.go:6299
// writeChunk is also responsible (on the first chunk) for sending the
//line /usr/local/go/src/net/http/h2_bundle.go:6299
// HEADER response.
//line /usr/local/go/src/net/http/h2_bundle.go:6305
func (rws *http2responseWriterState) writeChunk(p []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:6305
	_go_fuzz_dep_.CoverTab[39449]++
							if !rws.wroteHeader {
//line /usr/local/go/src/net/http/h2_bundle.go:6306
		_go_fuzz_dep_.CoverTab[39457]++
								rws.writeHeader(200)
//line /usr/local/go/src/net/http/h2_bundle.go:6307
		// _ = "end of CoverTab[39457]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6308
		_go_fuzz_dep_.CoverTab[39458]++
//line /usr/local/go/src/net/http/h2_bundle.go:6308
		// _ = "end of CoverTab[39458]"
//line /usr/local/go/src/net/http/h2_bundle.go:6308
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6308
	// _ = "end of CoverTab[39449]"
//line /usr/local/go/src/net/http/h2_bundle.go:6308
	_go_fuzz_dep_.CoverTab[39450]++

							if rws.handlerDone {
//line /usr/local/go/src/net/http/h2_bundle.go:6310
		_go_fuzz_dep_.CoverTab[39459]++
								rws.promoteUndeclaredTrailers()
//line /usr/local/go/src/net/http/h2_bundle.go:6311
		// _ = "end of CoverTab[39459]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6312
		_go_fuzz_dep_.CoverTab[39460]++
//line /usr/local/go/src/net/http/h2_bundle.go:6312
		// _ = "end of CoverTab[39460]"
//line /usr/local/go/src/net/http/h2_bundle.go:6312
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6312
	// _ = "end of CoverTab[39450]"
//line /usr/local/go/src/net/http/h2_bundle.go:6312
	_go_fuzz_dep_.CoverTab[39451]++

							isHeadResp := rws.req.Method == "HEAD"
							if !rws.sentHeader {
//line /usr/local/go/src/net/http/h2_bundle.go:6315
		_go_fuzz_dep_.CoverTab[39461]++
								rws.sentHeader = true
								var ctype, clen string
								if clen = rws.snapHeader.Get("Content-Length"); clen != "" {
//line /usr/local/go/src/net/http/h2_bundle.go:6318
			_go_fuzz_dep_.CoverTab[39469]++
									rws.snapHeader.Del("Content-Length")
									if cl, err := strconv.ParseUint(clen, 10, 63); err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6320
				_go_fuzz_dep_.CoverTab[39470]++
										rws.sentContentLen = int64(cl)
//line /usr/local/go/src/net/http/h2_bundle.go:6321
				// _ = "end of CoverTab[39470]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6322
				_go_fuzz_dep_.CoverTab[39471]++
										clen = ""
//line /usr/local/go/src/net/http/h2_bundle.go:6323
				// _ = "end of CoverTab[39471]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:6324
			// _ = "end of CoverTab[39469]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6325
			_go_fuzz_dep_.CoverTab[39472]++
//line /usr/local/go/src/net/http/h2_bundle.go:6325
			// _ = "end of CoverTab[39472]"
//line /usr/local/go/src/net/http/h2_bundle.go:6325
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6325
		// _ = "end of CoverTab[39461]"
//line /usr/local/go/src/net/http/h2_bundle.go:6325
		_go_fuzz_dep_.CoverTab[39462]++
								if clen == "" && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			_go_fuzz_dep_.CoverTab[39473]++
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			return rws.handlerDone
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			// _ = "end of CoverTab[39473]"
//line /usr/local/go/src/net/http/h2_bundle.go:6326
		}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			_go_fuzz_dep_.CoverTab[39474]++
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			return http2bodyAllowedForStatus(rws.status)
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			// _ = "end of CoverTab[39474]"
//line /usr/local/go/src/net/http/h2_bundle.go:6326
		}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			_go_fuzz_dep_.CoverTab[39475]++
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			return (len(p) > 0 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6326
				_go_fuzz_dep_.CoverTab[39476]++
//line /usr/local/go/src/net/http/h2_bundle.go:6326
				return !isHeadResp
//line /usr/local/go/src/net/http/h2_bundle.go:6326
				// _ = "end of CoverTab[39476]"
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			}())
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			// _ = "end of CoverTab[39475]"
//line /usr/local/go/src/net/http/h2_bundle.go:6326
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6326
			_go_fuzz_dep_.CoverTab[39477]++
									clen = strconv.Itoa(len(p))
//line /usr/local/go/src/net/http/h2_bundle.go:6327
			// _ = "end of CoverTab[39477]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6328
			_go_fuzz_dep_.CoverTab[39478]++
//line /usr/local/go/src/net/http/h2_bundle.go:6328
			// _ = "end of CoverTab[39478]"
//line /usr/local/go/src/net/http/h2_bundle.go:6328
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6328
		// _ = "end of CoverTab[39462]"
//line /usr/local/go/src/net/http/h2_bundle.go:6328
		_go_fuzz_dep_.CoverTab[39463]++
								_, hasContentType := rws.snapHeader["Content-Type"]

//line /usr/local/go/src/net/http/h2_bundle.go:6332
		ce := rws.snapHeader.Get("Content-Encoding")
		hasCE := len(ce) > 0
		if !hasCE && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			_go_fuzz_dep_.CoverTab[39479]++
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			return !hasContentType
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			// _ = "end of CoverTab[39479]"
//line /usr/local/go/src/net/http/h2_bundle.go:6334
		}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			_go_fuzz_dep_.CoverTab[39480]++
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			return http2bodyAllowedForStatus(rws.status)
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			// _ = "end of CoverTab[39480]"
//line /usr/local/go/src/net/http/h2_bundle.go:6334
		}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			_go_fuzz_dep_.CoverTab[39481]++
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			return len(p) > 0
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			// _ = "end of CoverTab[39481]"
//line /usr/local/go/src/net/http/h2_bundle.go:6334
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6334
			_go_fuzz_dep_.CoverTab[39482]++
									ctype = DetectContentType(p)
//line /usr/local/go/src/net/http/h2_bundle.go:6335
			// _ = "end of CoverTab[39482]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6336
			_go_fuzz_dep_.CoverTab[39483]++
//line /usr/local/go/src/net/http/h2_bundle.go:6336
			// _ = "end of CoverTab[39483]"
//line /usr/local/go/src/net/http/h2_bundle.go:6336
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6336
		// _ = "end of CoverTab[39463]"
//line /usr/local/go/src/net/http/h2_bundle.go:6336
		_go_fuzz_dep_.CoverTab[39464]++
								var date string
								if _, ok := rws.snapHeader["Date"]; !ok {
//line /usr/local/go/src/net/http/h2_bundle.go:6338
			_go_fuzz_dep_.CoverTab[39484]++

									date = time.Now().UTC().Format(TimeFormat)
//line /usr/local/go/src/net/http/h2_bundle.go:6340
			// _ = "end of CoverTab[39484]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6341
			_go_fuzz_dep_.CoverTab[39485]++
//line /usr/local/go/src/net/http/h2_bundle.go:6341
			// _ = "end of CoverTab[39485]"
//line /usr/local/go/src/net/http/h2_bundle.go:6341
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6341
		// _ = "end of CoverTab[39464]"
//line /usr/local/go/src/net/http/h2_bundle.go:6341
		_go_fuzz_dep_.CoverTab[39465]++

								for _, v := range rws.snapHeader["Trailer"] {
//line /usr/local/go/src/net/http/h2_bundle.go:6343
			_go_fuzz_dep_.CoverTab[39486]++
									http2foreachHeaderElement(v, rws.declareTrailer)
//line /usr/local/go/src/net/http/h2_bundle.go:6344
			// _ = "end of CoverTab[39486]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6345
		// _ = "end of CoverTab[39465]"
//line /usr/local/go/src/net/http/h2_bundle.go:6345
		_go_fuzz_dep_.CoverTab[39466]++

//line /usr/local/go/src/net/http/h2_bundle.go:6352
		if _, ok := rws.snapHeader["Connection"]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:6352
			_go_fuzz_dep_.CoverTab[39487]++
									v := rws.snapHeader.Get("Connection")
									delete(rws.snapHeader, "Connection")
									if v == "close" {
//line /usr/local/go/src/net/http/h2_bundle.go:6355
				_go_fuzz_dep_.CoverTab[39488]++
										rws.conn.startGracefulShutdown()
//line /usr/local/go/src/net/http/h2_bundle.go:6356
				// _ = "end of CoverTab[39488]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6357
				_go_fuzz_dep_.CoverTab[39489]++
//line /usr/local/go/src/net/http/h2_bundle.go:6357
				// _ = "end of CoverTab[39489]"
//line /usr/local/go/src/net/http/h2_bundle.go:6357
			}
//line /usr/local/go/src/net/http/h2_bundle.go:6357
			// _ = "end of CoverTab[39487]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6358
			_go_fuzz_dep_.CoverTab[39490]++
//line /usr/local/go/src/net/http/h2_bundle.go:6358
			// _ = "end of CoverTab[39490]"
//line /usr/local/go/src/net/http/h2_bundle.go:6358
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6358
		// _ = "end of CoverTab[39466]"
//line /usr/local/go/src/net/http/h2_bundle.go:6358
		_go_fuzz_dep_.CoverTab[39467]++

								endStream := (rws.handlerDone && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6360
			_go_fuzz_dep_.CoverTab[39491]++
//line /usr/local/go/src/net/http/h2_bundle.go:6360
			return !rws.hasTrailers()
//line /usr/local/go/src/net/http/h2_bundle.go:6360
			// _ = "end of CoverTab[39491]"
//line /usr/local/go/src/net/http/h2_bundle.go:6360
		}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6360
			_go_fuzz_dep_.CoverTab[39492]++
//line /usr/local/go/src/net/http/h2_bundle.go:6360
			return len(p) == 0
//line /usr/local/go/src/net/http/h2_bundle.go:6360
			// _ = "end of CoverTab[39492]"
//line /usr/local/go/src/net/http/h2_bundle.go:6360
		}()) || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6360
			_go_fuzz_dep_.CoverTab[39493]++
//line /usr/local/go/src/net/http/h2_bundle.go:6360
			return isHeadResp
//line /usr/local/go/src/net/http/h2_bundle.go:6360
			// _ = "end of CoverTab[39493]"
//line /usr/local/go/src/net/http/h2_bundle.go:6360
		}()
								err = rws.conn.writeHeaders(rws.stream, &http2writeResHeaders{
			streamID:	rws.stream.id,
			httpResCode:	rws.status,
			h:		rws.snapHeader,
			endStream:	endStream,
			contentType:	ctype,
			contentLength:	clen,
			date:		date,
		})
		if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6370
			_go_fuzz_dep_.CoverTab[39494]++
									rws.dirty = true
									return 0, err
//line /usr/local/go/src/net/http/h2_bundle.go:6372
			// _ = "end of CoverTab[39494]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6373
			_go_fuzz_dep_.CoverTab[39495]++
//line /usr/local/go/src/net/http/h2_bundle.go:6373
			// _ = "end of CoverTab[39495]"
//line /usr/local/go/src/net/http/h2_bundle.go:6373
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6373
		// _ = "end of CoverTab[39467]"
//line /usr/local/go/src/net/http/h2_bundle.go:6373
		_go_fuzz_dep_.CoverTab[39468]++
								if endStream {
//line /usr/local/go/src/net/http/h2_bundle.go:6374
			_go_fuzz_dep_.CoverTab[39496]++
									return 0, nil
//line /usr/local/go/src/net/http/h2_bundle.go:6375
			// _ = "end of CoverTab[39496]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6376
			_go_fuzz_dep_.CoverTab[39497]++
//line /usr/local/go/src/net/http/h2_bundle.go:6376
			// _ = "end of CoverTab[39497]"
//line /usr/local/go/src/net/http/h2_bundle.go:6376
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6376
		// _ = "end of CoverTab[39468]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6377
		_go_fuzz_dep_.CoverTab[39498]++
//line /usr/local/go/src/net/http/h2_bundle.go:6377
		// _ = "end of CoverTab[39498]"
//line /usr/local/go/src/net/http/h2_bundle.go:6377
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6377
	// _ = "end of CoverTab[39451]"
//line /usr/local/go/src/net/http/h2_bundle.go:6377
	_go_fuzz_dep_.CoverTab[39452]++
							if isHeadResp {
//line /usr/local/go/src/net/http/h2_bundle.go:6378
		_go_fuzz_dep_.CoverTab[39499]++
								return len(p), nil
//line /usr/local/go/src/net/http/h2_bundle.go:6379
		// _ = "end of CoverTab[39499]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6380
		_go_fuzz_dep_.CoverTab[39500]++
//line /usr/local/go/src/net/http/h2_bundle.go:6380
		// _ = "end of CoverTab[39500]"
//line /usr/local/go/src/net/http/h2_bundle.go:6380
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6380
	// _ = "end of CoverTab[39452]"
//line /usr/local/go/src/net/http/h2_bundle.go:6380
	_go_fuzz_dep_.CoverTab[39453]++
							if len(p) == 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6381
		_go_fuzz_dep_.CoverTab[39501]++
//line /usr/local/go/src/net/http/h2_bundle.go:6381
		return !rws.handlerDone
//line /usr/local/go/src/net/http/h2_bundle.go:6381
		// _ = "end of CoverTab[39501]"
//line /usr/local/go/src/net/http/h2_bundle.go:6381
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6381
		_go_fuzz_dep_.CoverTab[39502]++
								return 0, nil
//line /usr/local/go/src/net/http/h2_bundle.go:6382
		// _ = "end of CoverTab[39502]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6383
		_go_fuzz_dep_.CoverTab[39503]++
//line /usr/local/go/src/net/http/h2_bundle.go:6383
		// _ = "end of CoverTab[39503]"
//line /usr/local/go/src/net/http/h2_bundle.go:6383
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6383
	// _ = "end of CoverTab[39453]"
//line /usr/local/go/src/net/http/h2_bundle.go:6383
	_go_fuzz_dep_.CoverTab[39454]++

//line /usr/local/go/src/net/http/h2_bundle.go:6387
	hasNonemptyTrailers := rws.hasNonemptyTrailers()
	endStream := rws.handlerDone && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6388
		_go_fuzz_dep_.CoverTab[39504]++
//line /usr/local/go/src/net/http/h2_bundle.go:6388
		return !hasNonemptyTrailers
//line /usr/local/go/src/net/http/h2_bundle.go:6388
		// _ = "end of CoverTab[39504]"
//line /usr/local/go/src/net/http/h2_bundle.go:6388
	}()
							if len(p) > 0 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6389
		_go_fuzz_dep_.CoverTab[39505]++
//line /usr/local/go/src/net/http/h2_bundle.go:6389
		return endStream
//line /usr/local/go/src/net/http/h2_bundle.go:6389
		// _ = "end of CoverTab[39505]"
//line /usr/local/go/src/net/http/h2_bundle.go:6389
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6389
		_go_fuzz_dep_.CoverTab[39506]++

								if err := rws.conn.writeDataFromHandler(rws.stream, p, endStream); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6391
			_go_fuzz_dep_.CoverTab[39507]++
									rws.dirty = true
									return 0, err
//line /usr/local/go/src/net/http/h2_bundle.go:6393
			// _ = "end of CoverTab[39507]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6394
			_go_fuzz_dep_.CoverTab[39508]++
//line /usr/local/go/src/net/http/h2_bundle.go:6394
			// _ = "end of CoverTab[39508]"
//line /usr/local/go/src/net/http/h2_bundle.go:6394
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6394
		// _ = "end of CoverTab[39506]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6395
		_go_fuzz_dep_.CoverTab[39509]++
//line /usr/local/go/src/net/http/h2_bundle.go:6395
		// _ = "end of CoverTab[39509]"
//line /usr/local/go/src/net/http/h2_bundle.go:6395
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6395
	// _ = "end of CoverTab[39454]"
//line /usr/local/go/src/net/http/h2_bundle.go:6395
	_go_fuzz_dep_.CoverTab[39455]++

							if rws.handlerDone && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6397
		_go_fuzz_dep_.CoverTab[39510]++
//line /usr/local/go/src/net/http/h2_bundle.go:6397
		return hasNonemptyTrailers
//line /usr/local/go/src/net/http/h2_bundle.go:6397
		// _ = "end of CoverTab[39510]"
//line /usr/local/go/src/net/http/h2_bundle.go:6397
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6397
		_go_fuzz_dep_.CoverTab[39511]++
								err = rws.conn.writeHeaders(rws.stream, &http2writeResHeaders{
			streamID:	rws.stream.id,
			h:		rws.handlerHeader,
			trailers:	rws.trailers,
			endStream:	true,
		})
		if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6404
			_go_fuzz_dep_.CoverTab[39513]++
									rws.dirty = true
//line /usr/local/go/src/net/http/h2_bundle.go:6405
			// _ = "end of CoverTab[39513]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6406
			_go_fuzz_dep_.CoverTab[39514]++
//line /usr/local/go/src/net/http/h2_bundle.go:6406
			// _ = "end of CoverTab[39514]"
//line /usr/local/go/src/net/http/h2_bundle.go:6406
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6406
		// _ = "end of CoverTab[39511]"
//line /usr/local/go/src/net/http/h2_bundle.go:6406
		_go_fuzz_dep_.CoverTab[39512]++
								return len(p), err
//line /usr/local/go/src/net/http/h2_bundle.go:6407
		// _ = "end of CoverTab[39512]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6408
		_go_fuzz_dep_.CoverTab[39515]++
//line /usr/local/go/src/net/http/h2_bundle.go:6408
		// _ = "end of CoverTab[39515]"
//line /usr/local/go/src/net/http/h2_bundle.go:6408
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6408
	// _ = "end of CoverTab[39455]"
//line /usr/local/go/src/net/http/h2_bundle.go:6408
	_go_fuzz_dep_.CoverTab[39456]++
							return len(p), nil
//line /usr/local/go/src/net/http/h2_bundle.go:6409
	// _ = "end of CoverTab[39456]"
}

// TrailerPrefix is a magic prefix for ResponseWriter.Header map keys
//line /usr/local/go/src/net/http/h2_bundle.go:6412
// that, if present, signals that the map entry is actually for
//line /usr/local/go/src/net/http/h2_bundle.go:6412
// the response trailers, and not the response headers. The prefix
//line /usr/local/go/src/net/http/h2_bundle.go:6412
// is stripped after the ServeHTTP call finishes and the values are
//line /usr/local/go/src/net/http/h2_bundle.go:6412
// sent in the trailers.
//line /usr/local/go/src/net/http/h2_bundle.go:6412
//
//line /usr/local/go/src/net/http/h2_bundle.go:6412
// This mechanism is intended only for trailers that are not known
//line /usr/local/go/src/net/http/h2_bundle.go:6412
// prior to the headers being written. If the set of trailers is fixed
//line /usr/local/go/src/net/http/h2_bundle.go:6412
// or known before the header is written, the normal Go trailers mechanism
//line /usr/local/go/src/net/http/h2_bundle.go:6412
// is preferred:
//line /usr/local/go/src/net/http/h2_bundle.go:6412
//
//line /usr/local/go/src/net/http/h2_bundle.go:6412
//	https://golang.org/pkg/net/http/#ResponseWriter
//line /usr/local/go/src/net/http/h2_bundle.go:6412
//	https://golang.org/pkg/net/http/#example_ResponseWriter_trailers
//line /usr/local/go/src/net/http/h2_bundle.go:6425
const http2TrailerPrefix = "Trailer:"

// promoteUndeclaredTrailers permits http.Handlers to set trailers
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// after the header has already been flushed. Because the Go
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// ResponseWriter interface has no way to set Trailers (only the
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// Header), and because we didn't want to expand the ResponseWriter
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// interface, and because nobody used trailers, and because RFC 7230
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// says you SHOULD (but not must) predeclare any trailers in the
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// header, the official ResponseWriter rules said trailers in Go must
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// be predeclared, and then we reuse the same ResponseWriter.Header()
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// map to mean both Headers and Trailers. When it's time to write the
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// Trailers, we pick out the fields of Headers that were declared as
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// trailers. That worked for a while, until we found the first major
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// user of Trailers in the wild: gRPC (using them only over http2),
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// and gRPC libraries permit setting trailers mid-stream without
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// predeclaring them. So: change of plans. We still permit the old
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// way, but we also permit this hack: if a Header() key begins with
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// "Trailer:", the suffix of that key is a Trailer. Because ':' is an
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// invalid token byte anyway, there is no ambiguity. (And it's already
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// filtered out) It's mildly hacky, but not terrible.
//line /usr/local/go/src/net/http/h2_bundle.go:6427
//
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// This method runs after the Handler is done and promotes any Header
//line /usr/local/go/src/net/http/h2_bundle.go:6427
// fields to be trailers.
//line /usr/local/go/src/net/http/h2_bundle.go:6448
func (rws *http2responseWriterState) promoteUndeclaredTrailers() {
//line /usr/local/go/src/net/http/h2_bundle.go:6448
	_go_fuzz_dep_.CoverTab[39516]++
							for k, vv := range rws.handlerHeader {
//line /usr/local/go/src/net/http/h2_bundle.go:6449
		_go_fuzz_dep_.CoverTab[39518]++
								if !strings.HasPrefix(k, http2TrailerPrefix) {
//line /usr/local/go/src/net/http/h2_bundle.go:6450
			_go_fuzz_dep_.CoverTab[39520]++
									continue
//line /usr/local/go/src/net/http/h2_bundle.go:6451
			// _ = "end of CoverTab[39520]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6452
			_go_fuzz_dep_.CoverTab[39521]++
//line /usr/local/go/src/net/http/h2_bundle.go:6452
			// _ = "end of CoverTab[39521]"
//line /usr/local/go/src/net/http/h2_bundle.go:6452
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6452
		// _ = "end of CoverTab[39518]"
//line /usr/local/go/src/net/http/h2_bundle.go:6452
		_go_fuzz_dep_.CoverTab[39519]++
								trailerKey := strings.TrimPrefix(k, http2TrailerPrefix)
								rws.declareTrailer(trailerKey)
								rws.handlerHeader[CanonicalHeaderKey(trailerKey)] = vv
//line /usr/local/go/src/net/http/h2_bundle.go:6455
		// _ = "end of CoverTab[39519]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6456
	// _ = "end of CoverTab[39516]"
//line /usr/local/go/src/net/http/h2_bundle.go:6456
	_go_fuzz_dep_.CoverTab[39517]++

							if len(rws.trailers) > 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:6458
		_go_fuzz_dep_.CoverTab[39522]++
								sorter := http2sorterPool.Get().(*http2sorter)
								sorter.SortStrings(rws.trailers)
								http2sorterPool.Put(sorter)
//line /usr/local/go/src/net/http/h2_bundle.go:6461
		// _ = "end of CoverTab[39522]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6462
		_go_fuzz_dep_.CoverTab[39523]++
//line /usr/local/go/src/net/http/h2_bundle.go:6462
		// _ = "end of CoverTab[39523]"
//line /usr/local/go/src/net/http/h2_bundle.go:6462
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6462
	// _ = "end of CoverTab[39517]"
}

func (w *http2responseWriter) SetReadDeadline(deadline time.Time) error {
//line /usr/local/go/src/net/http/h2_bundle.go:6465
	_go_fuzz_dep_.CoverTab[39524]++
							st := w.rws.stream
							if !deadline.IsZero() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6467
		_go_fuzz_dep_.CoverTab[39527]++
//line /usr/local/go/src/net/http/h2_bundle.go:6467
		return deadline.Before(time.Now())
//line /usr/local/go/src/net/http/h2_bundle.go:6467
		// _ = "end of CoverTab[39527]"
//line /usr/local/go/src/net/http/h2_bundle.go:6467
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6467
		_go_fuzz_dep_.CoverTab[39528]++

//line /usr/local/go/src/net/http/h2_bundle.go:6470
		st.onReadTimeout()
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:6471
		// _ = "end of CoverTab[39528]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6472
		_go_fuzz_dep_.CoverTab[39529]++
//line /usr/local/go/src/net/http/h2_bundle.go:6472
		// _ = "end of CoverTab[39529]"
//line /usr/local/go/src/net/http/h2_bundle.go:6472
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6472
	// _ = "end of CoverTab[39524]"
//line /usr/local/go/src/net/http/h2_bundle.go:6472
	_go_fuzz_dep_.CoverTab[39525]++
							w.rws.conn.sendServeMsg(func(sc *http2serverConn) {
//line /usr/local/go/src/net/http/h2_bundle.go:6473
		_go_fuzz_dep_.CoverTab[39530]++
								if st.readDeadline != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6474
			_go_fuzz_dep_.CoverTab[39532]++
									if !st.readDeadline.Stop() {
//line /usr/local/go/src/net/http/h2_bundle.go:6475
				_go_fuzz_dep_.CoverTab[39533]++

										return
//line /usr/local/go/src/net/http/h2_bundle.go:6477
				// _ = "end of CoverTab[39533]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6478
				_go_fuzz_dep_.CoverTab[39534]++
//line /usr/local/go/src/net/http/h2_bundle.go:6478
				// _ = "end of CoverTab[39534]"
//line /usr/local/go/src/net/http/h2_bundle.go:6478
			}
//line /usr/local/go/src/net/http/h2_bundle.go:6478
			// _ = "end of CoverTab[39532]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6479
			_go_fuzz_dep_.CoverTab[39535]++
//line /usr/local/go/src/net/http/h2_bundle.go:6479
			// _ = "end of CoverTab[39535]"
//line /usr/local/go/src/net/http/h2_bundle.go:6479
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6479
		// _ = "end of CoverTab[39530]"
//line /usr/local/go/src/net/http/h2_bundle.go:6479
		_go_fuzz_dep_.CoverTab[39531]++
								if deadline.IsZero() {
//line /usr/local/go/src/net/http/h2_bundle.go:6480
			_go_fuzz_dep_.CoverTab[39536]++
									st.readDeadline = nil
//line /usr/local/go/src/net/http/h2_bundle.go:6481
			// _ = "end of CoverTab[39536]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6482
			_go_fuzz_dep_.CoverTab[39537]++
//line /usr/local/go/src/net/http/h2_bundle.go:6482
			if st.readDeadline == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6482
				_go_fuzz_dep_.CoverTab[39538]++
										st.readDeadline = time.AfterFunc(deadline.Sub(time.Now()), st.onReadTimeout)
//line /usr/local/go/src/net/http/h2_bundle.go:6483
				// _ = "end of CoverTab[39538]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6484
				_go_fuzz_dep_.CoverTab[39539]++
										st.readDeadline.Reset(deadline.Sub(time.Now()))
//line /usr/local/go/src/net/http/h2_bundle.go:6485
				// _ = "end of CoverTab[39539]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:6486
			// _ = "end of CoverTab[39537]"
//line /usr/local/go/src/net/http/h2_bundle.go:6486
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6486
		// _ = "end of CoverTab[39531]"
	})
//line /usr/local/go/src/net/http/h2_bundle.go:6487
	// _ = "end of CoverTab[39525]"
//line /usr/local/go/src/net/http/h2_bundle.go:6487
	_go_fuzz_dep_.CoverTab[39526]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:6488
	// _ = "end of CoverTab[39526]"
}

func (w *http2responseWriter) SetWriteDeadline(deadline time.Time) error {
//line /usr/local/go/src/net/http/h2_bundle.go:6491
	_go_fuzz_dep_.CoverTab[39540]++
							st := w.rws.stream
							if !deadline.IsZero() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6493
		_go_fuzz_dep_.CoverTab[39543]++
//line /usr/local/go/src/net/http/h2_bundle.go:6493
		return deadline.Before(time.Now())
//line /usr/local/go/src/net/http/h2_bundle.go:6493
		// _ = "end of CoverTab[39543]"
//line /usr/local/go/src/net/http/h2_bundle.go:6493
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6493
		_go_fuzz_dep_.CoverTab[39544]++

//line /usr/local/go/src/net/http/h2_bundle.go:6496
		st.onWriteTimeout()
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:6497
		// _ = "end of CoverTab[39544]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6498
		_go_fuzz_dep_.CoverTab[39545]++
//line /usr/local/go/src/net/http/h2_bundle.go:6498
		// _ = "end of CoverTab[39545]"
//line /usr/local/go/src/net/http/h2_bundle.go:6498
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6498
	// _ = "end of CoverTab[39540]"
//line /usr/local/go/src/net/http/h2_bundle.go:6498
	_go_fuzz_dep_.CoverTab[39541]++
							w.rws.conn.sendServeMsg(func(sc *http2serverConn) {
//line /usr/local/go/src/net/http/h2_bundle.go:6499
		_go_fuzz_dep_.CoverTab[39546]++
								if st.writeDeadline != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6500
			_go_fuzz_dep_.CoverTab[39548]++
									if !st.writeDeadline.Stop() {
//line /usr/local/go/src/net/http/h2_bundle.go:6501
				_go_fuzz_dep_.CoverTab[39549]++

										return
//line /usr/local/go/src/net/http/h2_bundle.go:6503
				// _ = "end of CoverTab[39549]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6504
				_go_fuzz_dep_.CoverTab[39550]++
//line /usr/local/go/src/net/http/h2_bundle.go:6504
				// _ = "end of CoverTab[39550]"
//line /usr/local/go/src/net/http/h2_bundle.go:6504
			}
//line /usr/local/go/src/net/http/h2_bundle.go:6504
			// _ = "end of CoverTab[39548]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6505
			_go_fuzz_dep_.CoverTab[39551]++
//line /usr/local/go/src/net/http/h2_bundle.go:6505
			// _ = "end of CoverTab[39551]"
//line /usr/local/go/src/net/http/h2_bundle.go:6505
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6505
		// _ = "end of CoverTab[39546]"
//line /usr/local/go/src/net/http/h2_bundle.go:6505
		_go_fuzz_dep_.CoverTab[39547]++
								if deadline.IsZero() {
//line /usr/local/go/src/net/http/h2_bundle.go:6506
			_go_fuzz_dep_.CoverTab[39552]++
									st.writeDeadline = nil
//line /usr/local/go/src/net/http/h2_bundle.go:6507
			// _ = "end of CoverTab[39552]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6508
			_go_fuzz_dep_.CoverTab[39553]++
//line /usr/local/go/src/net/http/h2_bundle.go:6508
			if st.writeDeadline == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6508
				_go_fuzz_dep_.CoverTab[39554]++
										st.writeDeadline = time.AfterFunc(deadline.Sub(time.Now()), st.onWriteTimeout)
//line /usr/local/go/src/net/http/h2_bundle.go:6509
				// _ = "end of CoverTab[39554]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6510
				_go_fuzz_dep_.CoverTab[39555]++
										st.writeDeadline.Reset(deadline.Sub(time.Now()))
//line /usr/local/go/src/net/http/h2_bundle.go:6511
				// _ = "end of CoverTab[39555]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:6512
			// _ = "end of CoverTab[39553]"
//line /usr/local/go/src/net/http/h2_bundle.go:6512
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6512
		// _ = "end of CoverTab[39547]"
	})
//line /usr/local/go/src/net/http/h2_bundle.go:6513
	// _ = "end of CoverTab[39541]"
//line /usr/local/go/src/net/http/h2_bundle.go:6513
	_go_fuzz_dep_.CoverTab[39542]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:6514
	// _ = "end of CoverTab[39542]"
}

func (w *http2responseWriter) Flush() {
//line /usr/local/go/src/net/http/h2_bundle.go:6517
	_go_fuzz_dep_.CoverTab[39556]++
							w.FlushError()
//line /usr/local/go/src/net/http/h2_bundle.go:6518
	// _ = "end of CoverTab[39556]"
}

func (w *http2responseWriter) FlushError() error {
//line /usr/local/go/src/net/http/h2_bundle.go:6521
	_go_fuzz_dep_.CoverTab[39557]++
							rws := w.rws
							if rws == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6523
		_go_fuzz_dep_.CoverTab[39560]++
								panic("Header called after Handler finished")
//line /usr/local/go/src/net/http/h2_bundle.go:6524
		// _ = "end of CoverTab[39560]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6525
		_go_fuzz_dep_.CoverTab[39561]++
//line /usr/local/go/src/net/http/h2_bundle.go:6525
		// _ = "end of CoverTab[39561]"
//line /usr/local/go/src/net/http/h2_bundle.go:6525
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6525
	// _ = "end of CoverTab[39557]"
//line /usr/local/go/src/net/http/h2_bundle.go:6525
	_go_fuzz_dep_.CoverTab[39558]++
							var err error
							if rws.bw.Buffered() > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:6527
		_go_fuzz_dep_.CoverTab[39562]++
								err = rws.bw.Flush()
//line /usr/local/go/src/net/http/h2_bundle.go:6528
		// _ = "end of CoverTab[39562]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6529
		_go_fuzz_dep_.CoverTab[39563]++

//line /usr/local/go/src/net/http/h2_bundle.go:6534
		_, err = http2chunkWriter{rws}.Write(nil)
		if err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6535
			_go_fuzz_dep_.CoverTab[39564]++
									select {
			case <-rws.stream.cw:
//line /usr/local/go/src/net/http/h2_bundle.go:6537
				_go_fuzz_dep_.CoverTab[39565]++
										err = rws.stream.closeErr
//line /usr/local/go/src/net/http/h2_bundle.go:6538
				// _ = "end of CoverTab[39565]"
			default:
//line /usr/local/go/src/net/http/h2_bundle.go:6539
				_go_fuzz_dep_.CoverTab[39566]++
//line /usr/local/go/src/net/http/h2_bundle.go:6539
				// _ = "end of CoverTab[39566]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:6540
			// _ = "end of CoverTab[39564]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6541
			_go_fuzz_dep_.CoverTab[39567]++
//line /usr/local/go/src/net/http/h2_bundle.go:6541
			// _ = "end of CoverTab[39567]"
//line /usr/local/go/src/net/http/h2_bundle.go:6541
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6541
		// _ = "end of CoverTab[39563]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6542
	// _ = "end of CoverTab[39558]"
//line /usr/local/go/src/net/http/h2_bundle.go:6542
	_go_fuzz_dep_.CoverTab[39559]++
							return err
//line /usr/local/go/src/net/http/h2_bundle.go:6543
	// _ = "end of CoverTab[39559]"
}

func (w *http2responseWriter) CloseNotify() <-chan bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6546
	_go_fuzz_dep_.CoverTab[39568]++
							rws := w.rws
							if rws == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6548
		_go_fuzz_dep_.CoverTab[39571]++
								panic("CloseNotify called after Handler finished")
//line /usr/local/go/src/net/http/h2_bundle.go:6549
		// _ = "end of CoverTab[39571]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6550
		_go_fuzz_dep_.CoverTab[39572]++
//line /usr/local/go/src/net/http/h2_bundle.go:6550
		// _ = "end of CoverTab[39572]"
//line /usr/local/go/src/net/http/h2_bundle.go:6550
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6550
	// _ = "end of CoverTab[39568]"
//line /usr/local/go/src/net/http/h2_bundle.go:6550
	_go_fuzz_dep_.CoverTab[39569]++
							rws.closeNotifierMu.Lock()
							ch := rws.closeNotifierCh
							if ch == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6553
		_go_fuzz_dep_.CoverTab[39573]++
								ch = make(chan bool, 1)
								rws.closeNotifierCh = ch
								cw := rws.stream.cw
//line /usr/local/go/src/net/http/h2_bundle.go:6556
		_curRoutineNum22_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:6556
		_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum22_)
								go func() {
//line /usr/local/go/src/net/http/h2_bundle.go:6557
			_go_fuzz_dep_.CoverTab[39574]++
//line /usr/local/go/src/net/http/h2_bundle.go:6557
			defer func() {
//line /usr/local/go/src/net/http/h2_bundle.go:6557
				_go_fuzz_dep_.CoverTab[39575]++
//line /usr/local/go/src/net/http/h2_bundle.go:6557
				_go_fuzz_dep_.RoutineInfo.AddTerminatedRoutineNum(_curRoutineNum22_)
//line /usr/local/go/src/net/http/h2_bundle.go:6557
				// _ = "end of CoverTab[39575]"
//line /usr/local/go/src/net/http/h2_bundle.go:6557
			}()
									cw.Wait()
									ch <- true
//line /usr/local/go/src/net/http/h2_bundle.go:6559
			// _ = "end of CoverTab[39574]"
		}()
//line /usr/local/go/src/net/http/h2_bundle.go:6560
		// _ = "end of CoverTab[39573]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6561
		_go_fuzz_dep_.CoverTab[39576]++
//line /usr/local/go/src/net/http/h2_bundle.go:6561
		// _ = "end of CoverTab[39576]"
//line /usr/local/go/src/net/http/h2_bundle.go:6561
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6561
	// _ = "end of CoverTab[39569]"
//line /usr/local/go/src/net/http/h2_bundle.go:6561
	_go_fuzz_dep_.CoverTab[39570]++
							rws.closeNotifierMu.Unlock()
							return ch
//line /usr/local/go/src/net/http/h2_bundle.go:6563
	// _ = "end of CoverTab[39570]"
}

func (w *http2responseWriter) Header() Header {
//line /usr/local/go/src/net/http/h2_bundle.go:6566
	_go_fuzz_dep_.CoverTab[39577]++
							rws := w.rws
							if rws == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6568
		_go_fuzz_dep_.CoverTab[39580]++
								panic("Header called after Handler finished")
//line /usr/local/go/src/net/http/h2_bundle.go:6569
		// _ = "end of CoverTab[39580]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6570
		_go_fuzz_dep_.CoverTab[39581]++
//line /usr/local/go/src/net/http/h2_bundle.go:6570
		// _ = "end of CoverTab[39581]"
//line /usr/local/go/src/net/http/h2_bundle.go:6570
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6570
	// _ = "end of CoverTab[39577]"
//line /usr/local/go/src/net/http/h2_bundle.go:6570
	_go_fuzz_dep_.CoverTab[39578]++
							if rws.handlerHeader == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6571
		_go_fuzz_dep_.CoverTab[39582]++
								rws.handlerHeader = make(Header)
//line /usr/local/go/src/net/http/h2_bundle.go:6572
		// _ = "end of CoverTab[39582]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6573
		_go_fuzz_dep_.CoverTab[39583]++
//line /usr/local/go/src/net/http/h2_bundle.go:6573
		// _ = "end of CoverTab[39583]"
//line /usr/local/go/src/net/http/h2_bundle.go:6573
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6573
	// _ = "end of CoverTab[39578]"
//line /usr/local/go/src/net/http/h2_bundle.go:6573
	_go_fuzz_dep_.CoverTab[39579]++
							return rws.handlerHeader
//line /usr/local/go/src/net/http/h2_bundle.go:6574
	// _ = "end of CoverTab[39579]"
}

// checkWriteHeaderCode is a copy of net/http's checkWriteHeaderCode.
func http2checkWriteHeaderCode(code int) {
//line /usr/local/go/src/net/http/h2_bundle.go:6578
	_go_fuzz_dep_.CoverTab[39584]++

//line /usr/local/go/src/net/http/h2_bundle.go:6589
	if code < 100 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6589
		_go_fuzz_dep_.CoverTab[39585]++
//line /usr/local/go/src/net/http/h2_bundle.go:6589
		return code > 999
//line /usr/local/go/src/net/http/h2_bundle.go:6589
		// _ = "end of CoverTab[39585]"
//line /usr/local/go/src/net/http/h2_bundle.go:6589
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6589
		_go_fuzz_dep_.CoverTab[39586]++
								panic(fmt.Sprintf("invalid WriteHeader code %v", code))
//line /usr/local/go/src/net/http/h2_bundle.go:6590
		// _ = "end of CoverTab[39586]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6591
		_go_fuzz_dep_.CoverTab[39587]++
//line /usr/local/go/src/net/http/h2_bundle.go:6591
		// _ = "end of CoverTab[39587]"
//line /usr/local/go/src/net/http/h2_bundle.go:6591
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6591
	// _ = "end of CoverTab[39584]"
}

func (w *http2responseWriter) WriteHeader(code int) {
//line /usr/local/go/src/net/http/h2_bundle.go:6594
	_go_fuzz_dep_.CoverTab[39588]++
							rws := w.rws
							if rws == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6596
		_go_fuzz_dep_.CoverTab[39590]++
								panic("WriteHeader called after Handler finished")
//line /usr/local/go/src/net/http/h2_bundle.go:6597
		// _ = "end of CoverTab[39590]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6598
		_go_fuzz_dep_.CoverTab[39591]++
//line /usr/local/go/src/net/http/h2_bundle.go:6598
		// _ = "end of CoverTab[39591]"
//line /usr/local/go/src/net/http/h2_bundle.go:6598
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6598
	// _ = "end of CoverTab[39588]"
//line /usr/local/go/src/net/http/h2_bundle.go:6598
	_go_fuzz_dep_.CoverTab[39589]++
							rws.writeHeader(code)
//line /usr/local/go/src/net/http/h2_bundle.go:6599
	// _ = "end of CoverTab[39589]"
}

func (rws *http2responseWriterState) writeHeader(code int) {
//line /usr/local/go/src/net/http/h2_bundle.go:6602
	_go_fuzz_dep_.CoverTab[39592]++
							if rws.wroteHeader {
//line /usr/local/go/src/net/http/h2_bundle.go:6603
		_go_fuzz_dep_.CoverTab[39595]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:6604
		// _ = "end of CoverTab[39595]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6605
		_go_fuzz_dep_.CoverTab[39596]++
//line /usr/local/go/src/net/http/h2_bundle.go:6605
		// _ = "end of CoverTab[39596]"
//line /usr/local/go/src/net/http/h2_bundle.go:6605
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6605
	// _ = "end of CoverTab[39592]"
//line /usr/local/go/src/net/http/h2_bundle.go:6605
	_go_fuzz_dep_.CoverTab[39593]++

							http2checkWriteHeaderCode(code)

//line /usr/local/go/src/net/http/h2_bundle.go:6610
	if code >= 100 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6610
		_go_fuzz_dep_.CoverTab[39597]++
//line /usr/local/go/src/net/http/h2_bundle.go:6610
		return code <= 199
//line /usr/local/go/src/net/http/h2_bundle.go:6610
		// _ = "end of CoverTab[39597]"
//line /usr/local/go/src/net/http/h2_bundle.go:6610
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6610
		_go_fuzz_dep_.CoverTab[39598]++

								h := rws.handlerHeader

								_, cl := h["Content-Length"]
								_, te := h["Transfer-Encoding"]
								if cl || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6616
			_go_fuzz_dep_.CoverTab[39601]++
//line /usr/local/go/src/net/http/h2_bundle.go:6616
			return te
//line /usr/local/go/src/net/http/h2_bundle.go:6616
			// _ = "end of CoverTab[39601]"
//line /usr/local/go/src/net/http/h2_bundle.go:6616
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6616
			_go_fuzz_dep_.CoverTab[39602]++
									h = h.Clone()
									h.Del("Content-Length")
									h.Del("Transfer-Encoding")
//line /usr/local/go/src/net/http/h2_bundle.go:6619
			// _ = "end of CoverTab[39602]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6620
			_go_fuzz_dep_.CoverTab[39603]++
//line /usr/local/go/src/net/http/h2_bundle.go:6620
			// _ = "end of CoverTab[39603]"
//line /usr/local/go/src/net/http/h2_bundle.go:6620
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6620
		// _ = "end of CoverTab[39598]"
//line /usr/local/go/src/net/http/h2_bundle.go:6620
		_go_fuzz_dep_.CoverTab[39599]++

								if rws.conn.writeHeaders(rws.stream, &http2writeResHeaders{
			streamID:	rws.stream.id,
			httpResCode:	code,
			h:		h,
			endStream: rws.handlerDone && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6626
				_go_fuzz_dep_.CoverTab[39604]++
//line /usr/local/go/src/net/http/h2_bundle.go:6626
				return !rws.hasTrailers()
//line /usr/local/go/src/net/http/h2_bundle.go:6626
				// _ = "end of CoverTab[39604]"
//line /usr/local/go/src/net/http/h2_bundle.go:6626
			}(),
		}) != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6627
			_go_fuzz_dep_.CoverTab[39605]++
									rws.dirty = true
//line /usr/local/go/src/net/http/h2_bundle.go:6628
			// _ = "end of CoverTab[39605]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6629
			_go_fuzz_dep_.CoverTab[39606]++
//line /usr/local/go/src/net/http/h2_bundle.go:6629
			// _ = "end of CoverTab[39606]"
//line /usr/local/go/src/net/http/h2_bundle.go:6629
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6629
		// _ = "end of CoverTab[39599]"
//line /usr/local/go/src/net/http/h2_bundle.go:6629
		_go_fuzz_dep_.CoverTab[39600]++

								return
//line /usr/local/go/src/net/http/h2_bundle.go:6631
		// _ = "end of CoverTab[39600]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6632
		_go_fuzz_dep_.CoverTab[39607]++
//line /usr/local/go/src/net/http/h2_bundle.go:6632
		// _ = "end of CoverTab[39607]"
//line /usr/local/go/src/net/http/h2_bundle.go:6632
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6632
	// _ = "end of CoverTab[39593]"
//line /usr/local/go/src/net/http/h2_bundle.go:6632
	_go_fuzz_dep_.CoverTab[39594]++

							rws.wroteHeader = true
							rws.status = code
							if len(rws.handlerHeader) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:6636
		_go_fuzz_dep_.CoverTab[39608]++
								rws.snapHeader = http2cloneHeader(rws.handlerHeader)
//line /usr/local/go/src/net/http/h2_bundle.go:6637
		// _ = "end of CoverTab[39608]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6638
		_go_fuzz_dep_.CoverTab[39609]++
//line /usr/local/go/src/net/http/h2_bundle.go:6638
		// _ = "end of CoverTab[39609]"
//line /usr/local/go/src/net/http/h2_bundle.go:6638
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6638
	// _ = "end of CoverTab[39594]"
}

func http2cloneHeader(h Header) Header {
//line /usr/local/go/src/net/http/h2_bundle.go:6641
	_go_fuzz_dep_.CoverTab[39610]++
							h2 := make(Header, len(h))
							for k, vv := range h {
//line /usr/local/go/src/net/http/h2_bundle.go:6643
		_go_fuzz_dep_.CoverTab[39612]++
								vv2 := make([]string, len(vv))
								copy(vv2, vv)
								h2[k] = vv2
//line /usr/local/go/src/net/http/h2_bundle.go:6646
		// _ = "end of CoverTab[39612]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6647
	// _ = "end of CoverTab[39610]"
//line /usr/local/go/src/net/http/h2_bundle.go:6647
	_go_fuzz_dep_.CoverTab[39611]++
							return h2
//line /usr/local/go/src/net/http/h2_bundle.go:6648
	// _ = "end of CoverTab[39611]"
}

// The Life Of A Write is like this:
//line /usr/local/go/src/net/http/h2_bundle.go:6651
//
//line /usr/local/go/src/net/http/h2_bundle.go:6651
// * Handler calls w.Write or w.WriteString ->
//line /usr/local/go/src/net/http/h2_bundle.go:6651
// * -> rws.bw (*bufio.Writer) ->
//line /usr/local/go/src/net/http/h2_bundle.go:6651
// * (Handler might call Flush)
//line /usr/local/go/src/net/http/h2_bundle.go:6651
// * -> chunkWriter{rws}
//line /usr/local/go/src/net/http/h2_bundle.go:6651
// * -> responseWriterState.writeChunk(p []byte)
//line /usr/local/go/src/net/http/h2_bundle.go:6651
// * -> responseWriterState.writeChunk (most of the magic; see comment there)
//line /usr/local/go/src/net/http/h2_bundle.go:6659
func (w *http2responseWriter) Write(p []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:6659
	_go_fuzz_dep_.CoverTab[39613]++
							return w.write(len(p), p, "")
//line /usr/local/go/src/net/http/h2_bundle.go:6660
	// _ = "end of CoverTab[39613]"
}

func (w *http2responseWriter) WriteString(s string) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:6663
	_go_fuzz_dep_.CoverTab[39614]++
							return w.write(len(s), nil, s)
//line /usr/local/go/src/net/http/h2_bundle.go:6664
	// _ = "end of CoverTab[39614]"
}

// either dataB or dataS is non-zero.
func (w *http2responseWriter) write(lenData int, dataB []byte, dataS string) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:6668
	_go_fuzz_dep_.CoverTab[39615]++
							rws := w.rws
							if rws == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6670
		_go_fuzz_dep_.CoverTab[39620]++
								panic("Write called after Handler finished")
//line /usr/local/go/src/net/http/h2_bundle.go:6671
		// _ = "end of CoverTab[39620]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6672
		_go_fuzz_dep_.CoverTab[39621]++
//line /usr/local/go/src/net/http/h2_bundle.go:6672
		// _ = "end of CoverTab[39621]"
//line /usr/local/go/src/net/http/h2_bundle.go:6672
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6672
	// _ = "end of CoverTab[39615]"
//line /usr/local/go/src/net/http/h2_bundle.go:6672
	_go_fuzz_dep_.CoverTab[39616]++
							if !rws.wroteHeader {
//line /usr/local/go/src/net/http/h2_bundle.go:6673
		_go_fuzz_dep_.CoverTab[39622]++
								w.WriteHeader(200)
//line /usr/local/go/src/net/http/h2_bundle.go:6674
		// _ = "end of CoverTab[39622]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6675
		_go_fuzz_dep_.CoverTab[39623]++
//line /usr/local/go/src/net/http/h2_bundle.go:6675
		// _ = "end of CoverTab[39623]"
//line /usr/local/go/src/net/http/h2_bundle.go:6675
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6675
	// _ = "end of CoverTab[39616]"
//line /usr/local/go/src/net/http/h2_bundle.go:6675
	_go_fuzz_dep_.CoverTab[39617]++
							if !http2bodyAllowedForStatus(rws.status) {
//line /usr/local/go/src/net/http/h2_bundle.go:6676
		_go_fuzz_dep_.CoverTab[39624]++
								return 0, ErrBodyNotAllowed
//line /usr/local/go/src/net/http/h2_bundle.go:6677
		// _ = "end of CoverTab[39624]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6678
		_go_fuzz_dep_.CoverTab[39625]++
//line /usr/local/go/src/net/http/h2_bundle.go:6678
		// _ = "end of CoverTab[39625]"
//line /usr/local/go/src/net/http/h2_bundle.go:6678
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6678
	// _ = "end of CoverTab[39617]"
//line /usr/local/go/src/net/http/h2_bundle.go:6678
	_go_fuzz_dep_.CoverTab[39618]++
							rws.wroteBytes += int64(len(dataB)) + int64(len(dataS))
							if rws.sentContentLen != 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6680
		_go_fuzz_dep_.CoverTab[39626]++
//line /usr/local/go/src/net/http/h2_bundle.go:6680
		return rws.wroteBytes > rws.sentContentLen
//line /usr/local/go/src/net/http/h2_bundle.go:6680
		// _ = "end of CoverTab[39626]"
//line /usr/local/go/src/net/http/h2_bundle.go:6680
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6680
		_go_fuzz_dep_.CoverTab[39627]++

								return 0, errors.New("http2: handler wrote more than declared Content-Length")
//line /usr/local/go/src/net/http/h2_bundle.go:6682
		// _ = "end of CoverTab[39627]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6683
		_go_fuzz_dep_.CoverTab[39628]++
//line /usr/local/go/src/net/http/h2_bundle.go:6683
		// _ = "end of CoverTab[39628]"
//line /usr/local/go/src/net/http/h2_bundle.go:6683
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6683
	// _ = "end of CoverTab[39618]"
//line /usr/local/go/src/net/http/h2_bundle.go:6683
	_go_fuzz_dep_.CoverTab[39619]++

							if dataB != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6685
		_go_fuzz_dep_.CoverTab[39629]++
								return rws.bw.Write(dataB)
//line /usr/local/go/src/net/http/h2_bundle.go:6686
		// _ = "end of CoverTab[39629]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6687
		_go_fuzz_dep_.CoverTab[39630]++
								return rws.bw.WriteString(dataS)
//line /usr/local/go/src/net/http/h2_bundle.go:6688
		// _ = "end of CoverTab[39630]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6689
	// _ = "end of CoverTab[39619]"
}

func (w *http2responseWriter) handlerDone() {
//line /usr/local/go/src/net/http/h2_bundle.go:6692
	_go_fuzz_dep_.CoverTab[39631]++
							rws := w.rws
							dirty := rws.dirty
							rws.handlerDone = true
							w.Flush()
							w.rws = nil
							if !dirty {
//line /usr/local/go/src/net/http/h2_bundle.go:6698
		_go_fuzz_dep_.CoverTab[39632]++

//line /usr/local/go/src/net/http/h2_bundle.go:6705
		http2responseWriterStatePool.Put(rws)
//line /usr/local/go/src/net/http/h2_bundle.go:6705
		// _ = "end of CoverTab[39632]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6706
		_go_fuzz_dep_.CoverTab[39633]++
//line /usr/local/go/src/net/http/h2_bundle.go:6706
		// _ = "end of CoverTab[39633]"
//line /usr/local/go/src/net/http/h2_bundle.go:6706
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6706
	// _ = "end of CoverTab[39631]"
}

// Push errors.
var (
	http2ErrRecursivePush		= errors.New("http2: recursive push not allowed")
	http2ErrPushLimitReached	= errors.New("http2: push would exceed peer's SETTINGS_MAX_CONCURRENT_STREAMS")
)

var _ Pusher = (*http2responseWriter)(nil)

func (w *http2responseWriter) Push(target string, opts *PushOptions) error {
//line /usr/local/go/src/net/http/h2_bundle.go:6717
	_go_fuzz_dep_.CoverTab[39634]++
							st := w.rws.stream
							sc := st.sc
							sc.serveG.checkNotOn()

//line /usr/local/go/src/net/http/h2_bundle.go:6724
	if st.isPushed() {
//line /usr/local/go/src/net/http/h2_bundle.go:6724
		_go_fuzz_dep_.CoverTab[39646]++
								return http2ErrRecursivePush
//line /usr/local/go/src/net/http/h2_bundle.go:6725
		// _ = "end of CoverTab[39646]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6726
		_go_fuzz_dep_.CoverTab[39647]++
//line /usr/local/go/src/net/http/h2_bundle.go:6726
		// _ = "end of CoverTab[39647]"
//line /usr/local/go/src/net/http/h2_bundle.go:6726
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6726
	// _ = "end of CoverTab[39634]"
//line /usr/local/go/src/net/http/h2_bundle.go:6726
	_go_fuzz_dep_.CoverTab[39635]++

							if opts == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6728
		_go_fuzz_dep_.CoverTab[39648]++
								opts = new(PushOptions)
//line /usr/local/go/src/net/http/h2_bundle.go:6729
		// _ = "end of CoverTab[39648]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6730
		_go_fuzz_dep_.CoverTab[39649]++
//line /usr/local/go/src/net/http/h2_bundle.go:6730
		// _ = "end of CoverTab[39649]"
//line /usr/local/go/src/net/http/h2_bundle.go:6730
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6730
	// _ = "end of CoverTab[39635]"
//line /usr/local/go/src/net/http/h2_bundle.go:6730
	_go_fuzz_dep_.CoverTab[39636]++

//line /usr/local/go/src/net/http/h2_bundle.go:6733
	if opts.Method == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:6733
		_go_fuzz_dep_.CoverTab[39650]++
								opts.Method = "GET"
//line /usr/local/go/src/net/http/h2_bundle.go:6734
		// _ = "end of CoverTab[39650]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6735
		_go_fuzz_dep_.CoverTab[39651]++
//line /usr/local/go/src/net/http/h2_bundle.go:6735
		// _ = "end of CoverTab[39651]"
//line /usr/local/go/src/net/http/h2_bundle.go:6735
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6735
	// _ = "end of CoverTab[39636]"
//line /usr/local/go/src/net/http/h2_bundle.go:6735
	_go_fuzz_dep_.CoverTab[39637]++
							if opts.Header == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6736
		_go_fuzz_dep_.CoverTab[39652]++
								opts.Header = Header{}
//line /usr/local/go/src/net/http/h2_bundle.go:6737
		// _ = "end of CoverTab[39652]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6738
		_go_fuzz_dep_.CoverTab[39653]++
//line /usr/local/go/src/net/http/h2_bundle.go:6738
		// _ = "end of CoverTab[39653]"
//line /usr/local/go/src/net/http/h2_bundle.go:6738
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6738
	// _ = "end of CoverTab[39637]"
//line /usr/local/go/src/net/http/h2_bundle.go:6738
	_go_fuzz_dep_.CoverTab[39638]++
							wantScheme := "http"
							if w.rws.req.TLS != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6740
		_go_fuzz_dep_.CoverTab[39654]++
								wantScheme = "https"
//line /usr/local/go/src/net/http/h2_bundle.go:6741
		// _ = "end of CoverTab[39654]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6742
		_go_fuzz_dep_.CoverTab[39655]++
//line /usr/local/go/src/net/http/h2_bundle.go:6742
		// _ = "end of CoverTab[39655]"
//line /usr/local/go/src/net/http/h2_bundle.go:6742
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6742
	// _ = "end of CoverTab[39638]"
//line /usr/local/go/src/net/http/h2_bundle.go:6742
	_go_fuzz_dep_.CoverTab[39639]++

//line /usr/local/go/src/net/http/h2_bundle.go:6745
	u, err := url.Parse(target)
	if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6746
		_go_fuzz_dep_.CoverTab[39656]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:6747
		// _ = "end of CoverTab[39656]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6748
		_go_fuzz_dep_.CoverTab[39657]++
//line /usr/local/go/src/net/http/h2_bundle.go:6748
		// _ = "end of CoverTab[39657]"
//line /usr/local/go/src/net/http/h2_bundle.go:6748
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6748
	// _ = "end of CoverTab[39639]"
//line /usr/local/go/src/net/http/h2_bundle.go:6748
	_go_fuzz_dep_.CoverTab[39640]++
							if u.Scheme == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:6749
		_go_fuzz_dep_.CoverTab[39658]++
								if !strings.HasPrefix(target, "/") {
//line /usr/local/go/src/net/http/h2_bundle.go:6750
			_go_fuzz_dep_.CoverTab[39660]++
									return fmt.Errorf("target must be an absolute URL or an absolute path: %q", target)
//line /usr/local/go/src/net/http/h2_bundle.go:6751
			// _ = "end of CoverTab[39660]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6752
			_go_fuzz_dep_.CoverTab[39661]++
//line /usr/local/go/src/net/http/h2_bundle.go:6752
			// _ = "end of CoverTab[39661]"
//line /usr/local/go/src/net/http/h2_bundle.go:6752
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6752
		// _ = "end of CoverTab[39658]"
//line /usr/local/go/src/net/http/h2_bundle.go:6752
		_go_fuzz_dep_.CoverTab[39659]++
								u.Scheme = wantScheme
								u.Host = w.rws.req.Host
//line /usr/local/go/src/net/http/h2_bundle.go:6754
		// _ = "end of CoverTab[39659]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6755
		_go_fuzz_dep_.CoverTab[39662]++
								if u.Scheme != wantScheme {
//line /usr/local/go/src/net/http/h2_bundle.go:6756
			_go_fuzz_dep_.CoverTab[39664]++
									return fmt.Errorf("cannot push URL with scheme %q from request with scheme %q", u.Scheme, wantScheme)
//line /usr/local/go/src/net/http/h2_bundle.go:6757
			// _ = "end of CoverTab[39664]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6758
			_go_fuzz_dep_.CoverTab[39665]++
//line /usr/local/go/src/net/http/h2_bundle.go:6758
			// _ = "end of CoverTab[39665]"
//line /usr/local/go/src/net/http/h2_bundle.go:6758
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6758
		// _ = "end of CoverTab[39662]"
//line /usr/local/go/src/net/http/h2_bundle.go:6758
		_go_fuzz_dep_.CoverTab[39663]++
								if u.Host == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:6759
			_go_fuzz_dep_.CoverTab[39666]++
									return errors.New("URL must have a host")
//line /usr/local/go/src/net/http/h2_bundle.go:6760
			// _ = "end of CoverTab[39666]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6761
			_go_fuzz_dep_.CoverTab[39667]++
//line /usr/local/go/src/net/http/h2_bundle.go:6761
			// _ = "end of CoverTab[39667]"
//line /usr/local/go/src/net/http/h2_bundle.go:6761
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6761
		// _ = "end of CoverTab[39663]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6762
	// _ = "end of CoverTab[39640]"
//line /usr/local/go/src/net/http/h2_bundle.go:6762
	_go_fuzz_dep_.CoverTab[39641]++
							for k := range opts.Header {
//line /usr/local/go/src/net/http/h2_bundle.go:6763
		_go_fuzz_dep_.CoverTab[39668]++
								if strings.HasPrefix(k, ":") {
//line /usr/local/go/src/net/http/h2_bundle.go:6764
			_go_fuzz_dep_.CoverTab[39670]++
									return fmt.Errorf("promised request headers cannot include pseudo header %q", k)
//line /usr/local/go/src/net/http/h2_bundle.go:6765
			// _ = "end of CoverTab[39670]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6766
			_go_fuzz_dep_.CoverTab[39671]++
//line /usr/local/go/src/net/http/h2_bundle.go:6766
			// _ = "end of CoverTab[39671]"
//line /usr/local/go/src/net/http/h2_bundle.go:6766
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6766
		// _ = "end of CoverTab[39668]"
//line /usr/local/go/src/net/http/h2_bundle.go:6766
		_go_fuzz_dep_.CoverTab[39669]++

//line /usr/local/go/src/net/http/h2_bundle.go:6771
		if http2asciiEqualFold(k, "content-length") || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6771
			_go_fuzz_dep_.CoverTab[39672]++
//line /usr/local/go/src/net/http/h2_bundle.go:6771
			return http2asciiEqualFold(k, "content-encoding")
									// _ = "end of CoverTab[39672]"
//line /usr/local/go/src/net/http/h2_bundle.go:6772
		}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6772
			_go_fuzz_dep_.CoverTab[39673]++
//line /usr/local/go/src/net/http/h2_bundle.go:6772
			return http2asciiEqualFold(k, "trailer")
									// _ = "end of CoverTab[39673]"
//line /usr/local/go/src/net/http/h2_bundle.go:6773
		}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6773
			_go_fuzz_dep_.CoverTab[39674]++
//line /usr/local/go/src/net/http/h2_bundle.go:6773
			return http2asciiEqualFold(k, "te")
									// _ = "end of CoverTab[39674]"
//line /usr/local/go/src/net/http/h2_bundle.go:6774
		}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6774
			_go_fuzz_dep_.CoverTab[39675]++
//line /usr/local/go/src/net/http/h2_bundle.go:6774
			return http2asciiEqualFold(k, "expect")
									// _ = "end of CoverTab[39675]"
//line /usr/local/go/src/net/http/h2_bundle.go:6775
		}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6775
			_go_fuzz_dep_.CoverTab[39676]++
//line /usr/local/go/src/net/http/h2_bundle.go:6775
			return http2asciiEqualFold(k, "host")
									// _ = "end of CoverTab[39676]"
//line /usr/local/go/src/net/http/h2_bundle.go:6776
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6776
			_go_fuzz_dep_.CoverTab[39677]++
									return fmt.Errorf("promised request headers cannot include %q", k)
//line /usr/local/go/src/net/http/h2_bundle.go:6777
			// _ = "end of CoverTab[39677]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6778
			_go_fuzz_dep_.CoverTab[39678]++
//line /usr/local/go/src/net/http/h2_bundle.go:6778
			// _ = "end of CoverTab[39678]"
//line /usr/local/go/src/net/http/h2_bundle.go:6778
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6778
		// _ = "end of CoverTab[39669]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6779
	// _ = "end of CoverTab[39641]"
//line /usr/local/go/src/net/http/h2_bundle.go:6779
	_go_fuzz_dep_.CoverTab[39642]++
							if err := http2checkValidHTTP2RequestHeaders(opts.Header); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6780
		_go_fuzz_dep_.CoverTab[39679]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:6781
		// _ = "end of CoverTab[39679]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6782
		_go_fuzz_dep_.CoverTab[39680]++
//line /usr/local/go/src/net/http/h2_bundle.go:6782
		// _ = "end of CoverTab[39680]"
//line /usr/local/go/src/net/http/h2_bundle.go:6782
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6782
	// _ = "end of CoverTab[39642]"
//line /usr/local/go/src/net/http/h2_bundle.go:6782
	_go_fuzz_dep_.CoverTab[39643]++

//line /usr/local/go/src/net/http/h2_bundle.go:6787
	if opts.Method != "GET" && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6787
		_go_fuzz_dep_.CoverTab[39681]++
//line /usr/local/go/src/net/http/h2_bundle.go:6787
		return opts.Method != "HEAD"
//line /usr/local/go/src/net/http/h2_bundle.go:6787
		// _ = "end of CoverTab[39681]"
//line /usr/local/go/src/net/http/h2_bundle.go:6787
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6787
		_go_fuzz_dep_.CoverTab[39682]++
								return fmt.Errorf("method %q must be GET or HEAD", opts.Method)
//line /usr/local/go/src/net/http/h2_bundle.go:6788
		// _ = "end of CoverTab[39682]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6789
		_go_fuzz_dep_.CoverTab[39683]++
//line /usr/local/go/src/net/http/h2_bundle.go:6789
		// _ = "end of CoverTab[39683]"
//line /usr/local/go/src/net/http/h2_bundle.go:6789
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6789
	// _ = "end of CoverTab[39643]"
//line /usr/local/go/src/net/http/h2_bundle.go:6789
	_go_fuzz_dep_.CoverTab[39644]++

							msg := &http2startPushRequest{
		parent:	st,
		method:	opts.Method,
		url:	u,
		header:	http2cloneHeader(opts.Header),
		done:	http2errChanPool.Get().(chan error),
	}

	select {
	case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:6800
		_go_fuzz_dep_.CoverTab[39684]++
								return http2errClientDisconnected
//line /usr/local/go/src/net/http/h2_bundle.go:6801
		// _ = "end of CoverTab[39684]"
	case <-st.cw:
//line /usr/local/go/src/net/http/h2_bundle.go:6802
		_go_fuzz_dep_.CoverTab[39685]++
								return http2errStreamClosed
//line /usr/local/go/src/net/http/h2_bundle.go:6803
		// _ = "end of CoverTab[39685]"
	case sc.serveMsgCh <- msg:
//line /usr/local/go/src/net/http/h2_bundle.go:6804
		_go_fuzz_dep_.CoverTab[39686]++
//line /usr/local/go/src/net/http/h2_bundle.go:6804
		// _ = "end of CoverTab[39686]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6805
	// _ = "end of CoverTab[39644]"
//line /usr/local/go/src/net/http/h2_bundle.go:6805
	_go_fuzz_dep_.CoverTab[39645]++

							select {
	case <-sc.doneServing:
//line /usr/local/go/src/net/http/h2_bundle.go:6808
		_go_fuzz_dep_.CoverTab[39687]++
								return http2errClientDisconnected
//line /usr/local/go/src/net/http/h2_bundle.go:6809
		// _ = "end of CoverTab[39687]"
	case <-st.cw:
//line /usr/local/go/src/net/http/h2_bundle.go:6810
		_go_fuzz_dep_.CoverTab[39688]++
								return http2errStreamClosed
//line /usr/local/go/src/net/http/h2_bundle.go:6811
		// _ = "end of CoverTab[39688]"
	case err := <-msg.done:
//line /usr/local/go/src/net/http/h2_bundle.go:6812
		_go_fuzz_dep_.CoverTab[39689]++
								http2errChanPool.Put(msg.done)
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:6814
		// _ = "end of CoverTab[39689]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6815
	// _ = "end of CoverTab[39645]"
}

type http2startPushRequest struct {
	parent	*http2stream
	method	string
	url	*url.URL
	header	Header
	done	chan error
}

func (sc *http2serverConn) startPush(msg *http2startPushRequest) {
//line /usr/local/go/src/net/http/h2_bundle.go:6826
	_go_fuzz_dep_.CoverTab[39690]++
							sc.serveG.check()

//line /usr/local/go/src/net/http/h2_bundle.go:6832
	if msg.parent.state != http2stateOpen && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6832
		_go_fuzz_dep_.CoverTab[39694]++
//line /usr/local/go/src/net/http/h2_bundle.go:6832
		return msg.parent.state != http2stateHalfClosedRemote
//line /usr/local/go/src/net/http/h2_bundle.go:6832
		// _ = "end of CoverTab[39694]"
//line /usr/local/go/src/net/http/h2_bundle.go:6832
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6832
		_go_fuzz_dep_.CoverTab[39695]++

								msg.done <- http2errStreamClosed
								return
//line /usr/local/go/src/net/http/h2_bundle.go:6835
		// _ = "end of CoverTab[39695]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6836
		_go_fuzz_dep_.CoverTab[39696]++
//line /usr/local/go/src/net/http/h2_bundle.go:6836
		// _ = "end of CoverTab[39696]"
//line /usr/local/go/src/net/http/h2_bundle.go:6836
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6836
	// _ = "end of CoverTab[39690]"
//line /usr/local/go/src/net/http/h2_bundle.go:6836
	_go_fuzz_dep_.CoverTab[39691]++

//line /usr/local/go/src/net/http/h2_bundle.go:6839
	if !sc.pushEnabled {
//line /usr/local/go/src/net/http/h2_bundle.go:6839
		_go_fuzz_dep_.CoverTab[39697]++
								msg.done <- ErrNotSupported
								return
//line /usr/local/go/src/net/http/h2_bundle.go:6841
		// _ = "end of CoverTab[39697]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6842
		_go_fuzz_dep_.CoverTab[39698]++
//line /usr/local/go/src/net/http/h2_bundle.go:6842
		// _ = "end of CoverTab[39698]"
//line /usr/local/go/src/net/http/h2_bundle.go:6842
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6842
	// _ = "end of CoverTab[39691]"
//line /usr/local/go/src/net/http/h2_bundle.go:6842
	_go_fuzz_dep_.CoverTab[39692]++

//line /usr/local/go/src/net/http/h2_bundle.go:6847
	allocatePromisedID := func() (uint32, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:6847
		_go_fuzz_dep_.CoverTab[39699]++
								sc.serveG.check()

//line /usr/local/go/src/net/http/h2_bundle.go:6852
		if !sc.pushEnabled {
//line /usr/local/go/src/net/http/h2_bundle.go:6852
			_go_fuzz_dep_.CoverTab[39704]++
									return 0, ErrNotSupported
//line /usr/local/go/src/net/http/h2_bundle.go:6853
			// _ = "end of CoverTab[39704]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6854
			_go_fuzz_dep_.CoverTab[39705]++
//line /usr/local/go/src/net/http/h2_bundle.go:6854
			// _ = "end of CoverTab[39705]"
//line /usr/local/go/src/net/http/h2_bundle.go:6854
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6854
		// _ = "end of CoverTab[39699]"
//line /usr/local/go/src/net/http/h2_bundle.go:6854
		_go_fuzz_dep_.CoverTab[39700]++

								if sc.curPushedStreams+1 > sc.clientMaxStreams {
//line /usr/local/go/src/net/http/h2_bundle.go:6856
			_go_fuzz_dep_.CoverTab[39706]++
									return 0, http2ErrPushLimitReached
//line /usr/local/go/src/net/http/h2_bundle.go:6857
			// _ = "end of CoverTab[39706]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6858
			_go_fuzz_dep_.CoverTab[39707]++
//line /usr/local/go/src/net/http/h2_bundle.go:6858
			// _ = "end of CoverTab[39707]"
//line /usr/local/go/src/net/http/h2_bundle.go:6858
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6858
		// _ = "end of CoverTab[39700]"
//line /usr/local/go/src/net/http/h2_bundle.go:6858
		_go_fuzz_dep_.CoverTab[39701]++

//line /usr/local/go/src/net/http/h2_bundle.go:6864
		if sc.maxPushPromiseID+2 >= 1<<31 {
//line /usr/local/go/src/net/http/h2_bundle.go:6864
			_go_fuzz_dep_.CoverTab[39708]++
									sc.startGracefulShutdownInternal()
									return 0, http2ErrPushLimitReached
//line /usr/local/go/src/net/http/h2_bundle.go:6866
			// _ = "end of CoverTab[39708]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6867
			_go_fuzz_dep_.CoverTab[39709]++
//line /usr/local/go/src/net/http/h2_bundle.go:6867
			// _ = "end of CoverTab[39709]"
//line /usr/local/go/src/net/http/h2_bundle.go:6867
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6867
		// _ = "end of CoverTab[39701]"
//line /usr/local/go/src/net/http/h2_bundle.go:6867
		_go_fuzz_dep_.CoverTab[39702]++
								sc.maxPushPromiseID += 2
								promisedID := sc.maxPushPromiseID

//line /usr/local/go/src/net/http/h2_bundle.go:6876
		promised := sc.newStream(promisedID, msg.parent.id, http2stateHalfClosedRemote)
		rw, req, err := sc.newWriterAndRequestNoBody(promised, http2requestParam{
			method:		msg.method,
			scheme:		msg.url.Scheme,
			authority:	msg.url.Host,
			path:		msg.url.RequestURI(),
			header:		http2cloneHeader(msg.header),
		})
		if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6884
			_go_fuzz_dep_.CoverTab[39710]++

									panic(fmt.Sprintf("newWriterAndRequestNoBody(%+v): %v", msg.url, err))
//line /usr/local/go/src/net/http/h2_bundle.go:6886
			// _ = "end of CoverTab[39710]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6887
			_go_fuzz_dep_.CoverTab[39711]++
//line /usr/local/go/src/net/http/h2_bundle.go:6887
			// _ = "end of CoverTab[39711]"
//line /usr/local/go/src/net/http/h2_bundle.go:6887
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6887
		// _ = "end of CoverTab[39702]"
//line /usr/local/go/src/net/http/h2_bundle.go:6887
		_go_fuzz_dep_.CoverTab[39703]++
//line /usr/local/go/src/net/http/h2_bundle.go:6887
		_curRoutineNum23_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:6887
		_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum23_)

								go sc.runHandler(rw, req, sc.handler.ServeHTTP)
								return promisedID, nil
//line /usr/local/go/src/net/http/h2_bundle.go:6890
		// _ = "end of CoverTab[39703]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6891
	// _ = "end of CoverTab[39692]"
//line /usr/local/go/src/net/http/h2_bundle.go:6891
	_go_fuzz_dep_.CoverTab[39693]++

							sc.writeFrame(http2FrameWriteRequest{
		write: &http2writePushPromise{
			streamID:		msg.parent.id,
			method:			msg.method,
			url:			msg.url,
			h:			msg.header,
			allocatePromisedID:	allocatePromisedID,
		},
		stream:	msg.parent,
		done:	msg.done,
	})
//line /usr/local/go/src/net/http/h2_bundle.go:6903
	// _ = "end of CoverTab[39693]"
}

// foreachHeaderElement splits v according to the "#rule" construction
//line /usr/local/go/src/net/http/h2_bundle.go:6906
// in RFC 7230 section 7 and calls fn for each non-empty element.
//line /usr/local/go/src/net/http/h2_bundle.go:6908
func http2foreachHeaderElement(v string, fn func(string)) {
//line /usr/local/go/src/net/http/h2_bundle.go:6908
	_go_fuzz_dep_.CoverTab[39712]++
							v = textproto.TrimString(v)
							if v == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:6910
		_go_fuzz_dep_.CoverTab[39715]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:6911
		// _ = "end of CoverTab[39715]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6912
		_go_fuzz_dep_.CoverTab[39716]++
//line /usr/local/go/src/net/http/h2_bundle.go:6912
		// _ = "end of CoverTab[39716]"
//line /usr/local/go/src/net/http/h2_bundle.go:6912
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6912
	// _ = "end of CoverTab[39712]"
//line /usr/local/go/src/net/http/h2_bundle.go:6912
	_go_fuzz_dep_.CoverTab[39713]++
							if !strings.Contains(v, ",") {
//line /usr/local/go/src/net/http/h2_bundle.go:6913
		_go_fuzz_dep_.CoverTab[39717]++
								fn(v)
								return
//line /usr/local/go/src/net/http/h2_bundle.go:6915
		// _ = "end of CoverTab[39717]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6916
		_go_fuzz_dep_.CoverTab[39718]++
//line /usr/local/go/src/net/http/h2_bundle.go:6916
		// _ = "end of CoverTab[39718]"
//line /usr/local/go/src/net/http/h2_bundle.go:6916
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6916
	// _ = "end of CoverTab[39713]"
//line /usr/local/go/src/net/http/h2_bundle.go:6916
	_go_fuzz_dep_.CoverTab[39714]++
							for _, f := range strings.Split(v, ",") {
//line /usr/local/go/src/net/http/h2_bundle.go:6917
		_go_fuzz_dep_.CoverTab[39719]++
								if f = textproto.TrimString(f); f != "" {
//line /usr/local/go/src/net/http/h2_bundle.go:6918
			_go_fuzz_dep_.CoverTab[39720]++
									fn(f)
//line /usr/local/go/src/net/http/h2_bundle.go:6919
			// _ = "end of CoverTab[39720]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6920
			_go_fuzz_dep_.CoverTab[39721]++
//line /usr/local/go/src/net/http/h2_bundle.go:6920
			// _ = "end of CoverTab[39721]"
//line /usr/local/go/src/net/http/h2_bundle.go:6920
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6920
		// _ = "end of CoverTab[39719]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6921
	// _ = "end of CoverTab[39714]"
}

// From http://httpwg.org/specs/rfc7540.html#rfc.section.8.1.2.2
var http2connHeaders = []string{
	"Connection",
	"Keep-Alive",
	"Proxy-Connection",
	"Transfer-Encoding",
	"Upgrade",
}

// checkValidHTTP2RequestHeaders checks whether h is a valid HTTP/2 request,
//line /usr/local/go/src/net/http/h2_bundle.go:6933
// per RFC 7540 Section 8.1.2.2.
//line /usr/local/go/src/net/http/h2_bundle.go:6933
// The returned error is reported to users.
//line /usr/local/go/src/net/http/h2_bundle.go:6936
func http2checkValidHTTP2RequestHeaders(h Header) error {
//line /usr/local/go/src/net/http/h2_bundle.go:6936
	_go_fuzz_dep_.CoverTab[39722]++
							for _, k := range http2connHeaders {
//line /usr/local/go/src/net/http/h2_bundle.go:6937
		_go_fuzz_dep_.CoverTab[39725]++
								if _, ok := h[k]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:6938
			_go_fuzz_dep_.CoverTab[39726]++
									return fmt.Errorf("request header %q is not valid in HTTP/2", k)
//line /usr/local/go/src/net/http/h2_bundle.go:6939
			// _ = "end of CoverTab[39726]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6940
			_go_fuzz_dep_.CoverTab[39727]++
//line /usr/local/go/src/net/http/h2_bundle.go:6940
			// _ = "end of CoverTab[39727]"
//line /usr/local/go/src/net/http/h2_bundle.go:6940
		}
//line /usr/local/go/src/net/http/h2_bundle.go:6940
		// _ = "end of CoverTab[39725]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6941
	// _ = "end of CoverTab[39722]"
//line /usr/local/go/src/net/http/h2_bundle.go:6941
	_go_fuzz_dep_.CoverTab[39723]++
							te := h["Te"]
							if len(te) > 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6943
		_go_fuzz_dep_.CoverTab[39728]++
//line /usr/local/go/src/net/http/h2_bundle.go:6943
		return (len(te) > 1 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6943
			_go_fuzz_dep_.CoverTab[39729]++
//line /usr/local/go/src/net/http/h2_bundle.go:6943
			return (te[0] != "trailers" && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6943
				_go_fuzz_dep_.CoverTab[39730]++
//line /usr/local/go/src/net/http/h2_bundle.go:6943
				return te[0] != ""
//line /usr/local/go/src/net/http/h2_bundle.go:6943
				// _ = "end of CoverTab[39730]"
//line /usr/local/go/src/net/http/h2_bundle.go:6943
			}())
//line /usr/local/go/src/net/http/h2_bundle.go:6943
			// _ = "end of CoverTab[39729]"
//line /usr/local/go/src/net/http/h2_bundle.go:6943
		}())
//line /usr/local/go/src/net/http/h2_bundle.go:6943
		// _ = "end of CoverTab[39728]"
//line /usr/local/go/src/net/http/h2_bundle.go:6943
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6943
		_go_fuzz_dep_.CoverTab[39731]++
								return errors.New(`request header "TE" may only be "trailers" in HTTP/2`)
//line /usr/local/go/src/net/http/h2_bundle.go:6944
		// _ = "end of CoverTab[39731]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6945
		_go_fuzz_dep_.CoverTab[39732]++
//line /usr/local/go/src/net/http/h2_bundle.go:6945
		// _ = "end of CoverTab[39732]"
//line /usr/local/go/src/net/http/h2_bundle.go:6945
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6945
	// _ = "end of CoverTab[39723]"
//line /usr/local/go/src/net/http/h2_bundle.go:6945
	_go_fuzz_dep_.CoverTab[39724]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:6946
	// _ = "end of CoverTab[39724]"
}

func http2new400Handler(err error) HandlerFunc {
//line /usr/local/go/src/net/http/h2_bundle.go:6949
	_go_fuzz_dep_.CoverTab[39733]++
							return func(w ResponseWriter, r *Request) {
//line /usr/local/go/src/net/http/h2_bundle.go:6950
		_go_fuzz_dep_.CoverTab[39734]++
								Error(w, err.Error(), StatusBadRequest)
//line /usr/local/go/src/net/http/h2_bundle.go:6951
		// _ = "end of CoverTab[39734]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6952
	// _ = "end of CoverTab[39733]"
}

// h1ServerKeepAlivesDisabled reports whether hs has its keep-alives
//line /usr/local/go/src/net/http/h2_bundle.go:6955
// disabled. See comments on h1ServerShutdownChan above for why
//line /usr/local/go/src/net/http/h2_bundle.go:6955
// the code is written this way.
//line /usr/local/go/src/net/http/h2_bundle.go:6958
func http2h1ServerKeepAlivesDisabled(hs *Server) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6958
	_go_fuzz_dep_.CoverTab[39735]++
							var x interface{} = hs
							type I interface {
		doKeepAlives() bool
	}
	if hs, ok := x.(I); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:6963
		_go_fuzz_dep_.CoverTab[39737]++
								return !hs.doKeepAlives()
//line /usr/local/go/src/net/http/h2_bundle.go:6964
		// _ = "end of CoverTab[39737]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6965
		_go_fuzz_dep_.CoverTab[39738]++
//line /usr/local/go/src/net/http/h2_bundle.go:6965
		// _ = "end of CoverTab[39738]"
//line /usr/local/go/src/net/http/h2_bundle.go:6965
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6965
	// _ = "end of CoverTab[39735]"
//line /usr/local/go/src/net/http/h2_bundle.go:6965
	_go_fuzz_dep_.CoverTab[39736]++
							return false
//line /usr/local/go/src/net/http/h2_bundle.go:6966
	// _ = "end of CoverTab[39736]"
}

func (sc *http2serverConn) countError(name string, err error) error {
//line /usr/local/go/src/net/http/h2_bundle.go:6969
	_go_fuzz_dep_.CoverTab[39739]++
							if sc == nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:6970
		_go_fuzz_dep_.CoverTab[39744]++
//line /usr/local/go/src/net/http/h2_bundle.go:6970
		return sc.srv == nil
//line /usr/local/go/src/net/http/h2_bundle.go:6970
		// _ = "end of CoverTab[39744]"
//line /usr/local/go/src/net/http/h2_bundle.go:6970
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:6970
		_go_fuzz_dep_.CoverTab[39745]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:6971
		// _ = "end of CoverTab[39745]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6972
		_go_fuzz_dep_.CoverTab[39746]++
//line /usr/local/go/src/net/http/h2_bundle.go:6972
		// _ = "end of CoverTab[39746]"
//line /usr/local/go/src/net/http/h2_bundle.go:6972
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6972
	// _ = "end of CoverTab[39739]"
//line /usr/local/go/src/net/http/h2_bundle.go:6972
	_go_fuzz_dep_.CoverTab[39740]++
							f := sc.srv.CountError
							if f == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:6974
		_go_fuzz_dep_.CoverTab[39747]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:6975
		// _ = "end of CoverTab[39747]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6976
		_go_fuzz_dep_.CoverTab[39748]++
//line /usr/local/go/src/net/http/h2_bundle.go:6976
		// _ = "end of CoverTab[39748]"
//line /usr/local/go/src/net/http/h2_bundle.go:6976
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6976
	// _ = "end of CoverTab[39740]"
//line /usr/local/go/src/net/http/h2_bundle.go:6976
	_go_fuzz_dep_.CoverTab[39741]++
							var typ string
							var code http2ErrCode
							switch e := err.(type) {
	case http2ConnectionError:
//line /usr/local/go/src/net/http/h2_bundle.go:6980
		_go_fuzz_dep_.CoverTab[39749]++
								typ = "conn"
								code = http2ErrCode(e)
//line /usr/local/go/src/net/http/h2_bundle.go:6982
		// _ = "end of CoverTab[39749]"
	case http2StreamError:
//line /usr/local/go/src/net/http/h2_bundle.go:6983
		_go_fuzz_dep_.CoverTab[39750]++
								typ = "stream"
								code = http2ErrCode(e.Code)
//line /usr/local/go/src/net/http/h2_bundle.go:6985
		// _ = "end of CoverTab[39750]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:6986
		_go_fuzz_dep_.CoverTab[39751]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:6987
		// _ = "end of CoverTab[39751]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6988
	// _ = "end of CoverTab[39741]"
//line /usr/local/go/src/net/http/h2_bundle.go:6988
	_go_fuzz_dep_.CoverTab[39742]++
							codeStr := http2errCodeName[code]
							if codeStr == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:6990
		_go_fuzz_dep_.CoverTab[39752]++
								codeStr = strconv.Itoa(int(code))
//line /usr/local/go/src/net/http/h2_bundle.go:6991
		// _ = "end of CoverTab[39752]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:6992
		_go_fuzz_dep_.CoverTab[39753]++
//line /usr/local/go/src/net/http/h2_bundle.go:6992
		// _ = "end of CoverTab[39753]"
//line /usr/local/go/src/net/http/h2_bundle.go:6992
	}
//line /usr/local/go/src/net/http/h2_bundle.go:6992
	// _ = "end of CoverTab[39742]"
//line /usr/local/go/src/net/http/h2_bundle.go:6992
	_go_fuzz_dep_.CoverTab[39743]++
							f(fmt.Sprintf("%s_%s_%s", typ, codeStr, name))
							return err
//line /usr/local/go/src/net/http/h2_bundle.go:6994
	// _ = "end of CoverTab[39743]"
}

const (
	// transportDefaultConnFlow is how many connection-level flow control
	// tokens we give the server at start-up, past the default 64k.
	http2transportDefaultConnFlow	= 1 << 30

	// transportDefaultStreamFlow is how many stream-level flow
	// control tokens we announce to the peer, and how many bytes
	// we buffer per stream.
	http2transportDefaultStreamFlow	= 4 << 20

	// transportDefaultStreamMinRefresh is the minimum number of bytes we'll send
	// a stream-level WINDOW_UPDATE for at a time.
	http2transportDefaultStreamMinRefresh	= 4 << 10

	http2defaultUserAgent	= "Go-http-client/2.0"

	// initialMaxConcurrentStreams is a connections maxConcurrentStreams until
	// it's received servers initial SETTINGS frame, which corresponds with the
	// spec's minimum recommended value.
	http2initialMaxConcurrentStreams	= 100

	// defaultMaxConcurrentStreams is a connections default maxConcurrentStreams
	// if the server doesn't include one in its initial SETTINGS frame.
	http2defaultMaxConcurrentStreams	= 1000
)

// Transport is an HTTP/2 Transport.
//line /usr/local/go/src/net/http/h2_bundle.go:7023
//
//line /usr/local/go/src/net/http/h2_bundle.go:7023
// A Transport internally caches connections to servers. It is safe
//line /usr/local/go/src/net/http/h2_bundle.go:7023
// for concurrent use by multiple goroutines.
//line /usr/local/go/src/net/http/h2_bundle.go:7027
type http2Transport struct {
	// DialTLSContext specifies an optional dial function with context for
	// creating TLS connections for requests.
	//
	// If DialTLSContext and DialTLS is nil, tls.Dial is used.
	//
	// If the returned net.Conn has a ConnectionState method like tls.Conn,
	// it will be used to set http.Response.TLS.
	DialTLSContext	func(ctx context.Context, network, addr string, cfg *tls.Config) (net.Conn, error)

	// DialTLS specifies an optional dial function for creating
	// TLS connections for requests.
	//
	// If DialTLSContext and DialTLS is nil, tls.Dial is used.
	//
	// Deprecated: Use DialTLSContext instead, which allows the transport
	// to cancel dials as soon as they are no longer needed.
	// If both are set, DialTLSContext takes priority.
	DialTLS	func(network, addr string, cfg *tls.Config) (net.Conn, error)

	// TLSClientConfig specifies the TLS configuration to use with
	// tls.Client. If nil, the default configuration is used.
	TLSClientConfig	*tls.Config

	// ConnPool optionally specifies an alternate connection pool to use.
	// If nil, the default is used.
	ConnPool	http2ClientConnPool

	// DisableCompression, if true, prevents the Transport from
	// requesting compression with an "Accept-Encoding: gzip"
	// request header when the Request contains no existing
	// Accept-Encoding value. If the Transport requests gzip on
	// its own and gets a gzipped response, it's transparently
	// decoded in the Response.Body. However, if the user
	// explicitly requested gzip it is not automatically
	// uncompressed.
	DisableCompression	bool

	// AllowHTTP, if true, permits HTTP/2 requests using the insecure,
	// plain-text "http" scheme. Note that this does not enable h2c support.
	AllowHTTP	bool

	// MaxHeaderListSize is the http2 SETTINGS_MAX_HEADER_LIST_SIZE to
	// send in the initial settings frame. It is how many bytes
	// of response headers are allowed. Unlike the http2 spec, zero here
	// means to use a default limit (currently 10MB). If you actually
	// want to advertise an unlimited value to the peer, Transport
	// interprets the highest possible value here (0xffffffff or 1<<32-1)
	// to mean no limit.
	MaxHeaderListSize	uint32

	// MaxReadFrameSize is the http2 SETTINGS_MAX_FRAME_SIZE to send in the
	// initial settings frame. It is the size in bytes of the largest frame
	// payload that the sender is willing to receive. If 0, no setting is
	// sent, and the value is provided by the peer, which should be 16384
	// according to the spec:
	// https://datatracker.ietf.org/doc/html/rfc7540#section-6.5.2.
	// Values are bounded in the range 16k to 16M.
	MaxReadFrameSize	uint32

	// MaxDecoderHeaderTableSize optionally specifies the http2
	// SETTINGS_HEADER_TABLE_SIZE to send in the initial settings frame. It
	// informs the remote endpoint of the maximum size of the header compression
	// table used to decode header blocks, in octets. If zero, the default value
	// of 4096 is used.
	MaxDecoderHeaderTableSize	uint32

	// MaxEncoderHeaderTableSize optionally specifies an upper limit for the
	// header compression table used for encoding request headers. Received
	// SETTINGS_HEADER_TABLE_SIZE settings are capped at this limit. If zero,
	// the default value of 4096 is used.
	MaxEncoderHeaderTableSize	uint32

	// StrictMaxConcurrentStreams controls whether the server's
	// SETTINGS_MAX_CONCURRENT_STREAMS should be respected
	// globally. If false, new TCP connections are created to the
	// server as needed to keep each under the per-connection
	// SETTINGS_MAX_CONCURRENT_STREAMS limit. If true, the
	// server's SETTINGS_MAX_CONCURRENT_STREAMS is interpreted as
	// a global limit and callers of RoundTrip block when needed,
	// waiting for their turn.
	StrictMaxConcurrentStreams	bool

	// ReadIdleTimeout is the timeout after which a health check using ping
	// frame will be carried out if no frame is received on the connection.
	// Note that a ping response will is considered a received frame, so if
	// there is no other traffic on the connection, the health check will
	// be performed every ReadIdleTimeout interval.
	// If zero, no health check is performed.
	ReadIdleTimeout	time.Duration

	// PingTimeout is the timeout after which the connection will be closed
	// if a response to Ping is not received.
	// Defaults to 15s.
	PingTimeout	time.Duration

	// WriteByteTimeout is the timeout after which the connection will be
	// closed no data can be written to it. The timeout begins when data is
	// available to write, and is extended whenever any bytes are written.
	WriteByteTimeout	time.Duration

	// CountError, if non-nil, is called on HTTP/2 transport errors.
	// It's intended to increment a metric for monitoring, such
	// as an expvar or Prometheus metric.
	// The errType consists of only ASCII word characters.
	CountError	func(errType string)

	// t1, if non-nil, is the standard library Transport using
	// this transport. Its settings are used (but not its
	// RoundTrip method, etc).
	t1	*Transport

	connPoolOnce	sync.Once
	connPoolOrDef	http2ClientConnPool	// non-nil version of ConnPool
}

func (t *http2Transport) maxHeaderListSize() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:7143
	_go_fuzz_dep_.CoverTab[39754]++
							if t.MaxHeaderListSize == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7144
		_go_fuzz_dep_.CoverTab[39757]++
								return 10 << 20
//line /usr/local/go/src/net/http/h2_bundle.go:7145
		// _ = "end of CoverTab[39757]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7146
		_go_fuzz_dep_.CoverTab[39758]++
//line /usr/local/go/src/net/http/h2_bundle.go:7146
		// _ = "end of CoverTab[39758]"
//line /usr/local/go/src/net/http/h2_bundle.go:7146
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7146
	// _ = "end of CoverTab[39754]"
//line /usr/local/go/src/net/http/h2_bundle.go:7146
	_go_fuzz_dep_.CoverTab[39755]++
							if t.MaxHeaderListSize == 0xffffffff {
//line /usr/local/go/src/net/http/h2_bundle.go:7147
		_go_fuzz_dep_.CoverTab[39759]++
								return 0
//line /usr/local/go/src/net/http/h2_bundle.go:7148
		// _ = "end of CoverTab[39759]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7149
		_go_fuzz_dep_.CoverTab[39760]++
//line /usr/local/go/src/net/http/h2_bundle.go:7149
		// _ = "end of CoverTab[39760]"
//line /usr/local/go/src/net/http/h2_bundle.go:7149
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7149
	// _ = "end of CoverTab[39755]"
//line /usr/local/go/src/net/http/h2_bundle.go:7149
	_go_fuzz_dep_.CoverTab[39756]++
							return t.MaxHeaderListSize
//line /usr/local/go/src/net/http/h2_bundle.go:7150
	// _ = "end of CoverTab[39756]"
}

func (t *http2Transport) maxFrameReadSize() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:7153
	_go_fuzz_dep_.CoverTab[39761]++
							if t.MaxReadFrameSize == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7154
		_go_fuzz_dep_.CoverTab[39765]++
								return 0
//line /usr/local/go/src/net/http/h2_bundle.go:7155
		// _ = "end of CoverTab[39765]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7156
		_go_fuzz_dep_.CoverTab[39766]++
//line /usr/local/go/src/net/http/h2_bundle.go:7156
		// _ = "end of CoverTab[39766]"
//line /usr/local/go/src/net/http/h2_bundle.go:7156
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7156
	// _ = "end of CoverTab[39761]"
//line /usr/local/go/src/net/http/h2_bundle.go:7156
	_go_fuzz_dep_.CoverTab[39762]++
							if t.MaxReadFrameSize < http2minMaxFrameSize {
//line /usr/local/go/src/net/http/h2_bundle.go:7157
		_go_fuzz_dep_.CoverTab[39767]++
								return http2minMaxFrameSize
//line /usr/local/go/src/net/http/h2_bundle.go:7158
		// _ = "end of CoverTab[39767]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7159
		_go_fuzz_dep_.CoverTab[39768]++
//line /usr/local/go/src/net/http/h2_bundle.go:7159
		// _ = "end of CoverTab[39768]"
//line /usr/local/go/src/net/http/h2_bundle.go:7159
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7159
	// _ = "end of CoverTab[39762]"
//line /usr/local/go/src/net/http/h2_bundle.go:7159
	_go_fuzz_dep_.CoverTab[39763]++
							if t.MaxReadFrameSize > http2maxFrameSize {
//line /usr/local/go/src/net/http/h2_bundle.go:7160
		_go_fuzz_dep_.CoverTab[39769]++
								return http2maxFrameSize
//line /usr/local/go/src/net/http/h2_bundle.go:7161
		// _ = "end of CoverTab[39769]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7162
		_go_fuzz_dep_.CoverTab[39770]++
//line /usr/local/go/src/net/http/h2_bundle.go:7162
		// _ = "end of CoverTab[39770]"
//line /usr/local/go/src/net/http/h2_bundle.go:7162
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7162
	// _ = "end of CoverTab[39763]"
//line /usr/local/go/src/net/http/h2_bundle.go:7162
	_go_fuzz_dep_.CoverTab[39764]++
							return t.MaxReadFrameSize
//line /usr/local/go/src/net/http/h2_bundle.go:7163
	// _ = "end of CoverTab[39764]"
}

func (t *http2Transport) disableCompression() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7166
	_go_fuzz_dep_.CoverTab[39771]++
							return t.DisableCompression || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7167
		_go_fuzz_dep_.CoverTab[39772]++
//line /usr/local/go/src/net/http/h2_bundle.go:7167
		return (t.t1 != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7167
			_go_fuzz_dep_.CoverTab[39773]++
//line /usr/local/go/src/net/http/h2_bundle.go:7167
			return t.t1.DisableCompression
//line /usr/local/go/src/net/http/h2_bundle.go:7167
			// _ = "end of CoverTab[39773]"
//line /usr/local/go/src/net/http/h2_bundle.go:7167
		}())
//line /usr/local/go/src/net/http/h2_bundle.go:7167
		// _ = "end of CoverTab[39772]"
//line /usr/local/go/src/net/http/h2_bundle.go:7167
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:7167
	// _ = "end of CoverTab[39771]"
}

func (t *http2Transport) pingTimeout() time.Duration {
//line /usr/local/go/src/net/http/h2_bundle.go:7170
	_go_fuzz_dep_.CoverTab[39774]++
							if t.PingTimeout == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7171
		_go_fuzz_dep_.CoverTab[39776]++
								return 15 * time.Second
//line /usr/local/go/src/net/http/h2_bundle.go:7172
		// _ = "end of CoverTab[39776]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7173
		_go_fuzz_dep_.CoverTab[39777]++
//line /usr/local/go/src/net/http/h2_bundle.go:7173
		// _ = "end of CoverTab[39777]"
//line /usr/local/go/src/net/http/h2_bundle.go:7173
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7173
	// _ = "end of CoverTab[39774]"
//line /usr/local/go/src/net/http/h2_bundle.go:7173
	_go_fuzz_dep_.CoverTab[39775]++
							return t.PingTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:7174
	// _ = "end of CoverTab[39775]"

}

// ConfigureTransport configures a net/http HTTP/1 Transport to use HTTP/2.
//line /usr/local/go/src/net/http/h2_bundle.go:7178
// It returns an error if t1 has already been HTTP/2-enabled.
//line /usr/local/go/src/net/http/h2_bundle.go:7178
//
//line /usr/local/go/src/net/http/h2_bundle.go:7178
// Use ConfigureTransports instead to configure the HTTP/2 Transport.
//line /usr/local/go/src/net/http/h2_bundle.go:7182
func http2ConfigureTransport(t1 *Transport) error {
//line /usr/local/go/src/net/http/h2_bundle.go:7182
	_go_fuzz_dep_.CoverTab[39778]++
							_, err := http2ConfigureTransports(t1)
							return err
//line /usr/local/go/src/net/http/h2_bundle.go:7184
	// _ = "end of CoverTab[39778]"
}

// ConfigureTransports configures a net/http HTTP/1 Transport to use HTTP/2.
//line /usr/local/go/src/net/http/h2_bundle.go:7187
// It returns a new HTTP/2 Transport for further configuration.
//line /usr/local/go/src/net/http/h2_bundle.go:7187
// It returns an error if t1 has already been HTTP/2-enabled.
//line /usr/local/go/src/net/http/h2_bundle.go:7190
func http2ConfigureTransports(t1 *Transport) (*http2Transport, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7190
	_go_fuzz_dep_.CoverTab[39779]++
							return http2configureTransports(t1)
//line /usr/local/go/src/net/http/h2_bundle.go:7191
	// _ = "end of CoverTab[39779]"
}

func http2configureTransports(t1 *Transport) (*http2Transport, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7194
	_go_fuzz_dep_.CoverTab[39780]++
							connPool := new(http2clientConnPool)
							t2 := &http2Transport{
		ConnPool:	http2noDialClientConnPool{connPool},
		t1:		t1,
	}
	connPool.t = t2
	if err := http2registerHTTPSProtocol(t1, http2noDialH2RoundTripper{t2}); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7201
		_go_fuzz_dep_.CoverTab[39787]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:7202
		// _ = "end of CoverTab[39787]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7203
		_go_fuzz_dep_.CoverTab[39788]++
//line /usr/local/go/src/net/http/h2_bundle.go:7203
		// _ = "end of CoverTab[39788]"
//line /usr/local/go/src/net/http/h2_bundle.go:7203
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7203
	// _ = "end of CoverTab[39780]"
//line /usr/local/go/src/net/http/h2_bundle.go:7203
	_go_fuzz_dep_.CoverTab[39781]++
							if t1.TLSClientConfig == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7204
		_go_fuzz_dep_.CoverTab[39789]++
								t1.TLSClientConfig = new(tls.Config)
//line /usr/local/go/src/net/http/h2_bundle.go:7205
		// _ = "end of CoverTab[39789]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7206
		_go_fuzz_dep_.CoverTab[39790]++
//line /usr/local/go/src/net/http/h2_bundle.go:7206
		// _ = "end of CoverTab[39790]"
//line /usr/local/go/src/net/http/h2_bundle.go:7206
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7206
	// _ = "end of CoverTab[39781]"
//line /usr/local/go/src/net/http/h2_bundle.go:7206
	_go_fuzz_dep_.CoverTab[39782]++
							if !http2strSliceContains(t1.TLSClientConfig.NextProtos, "h2") {
//line /usr/local/go/src/net/http/h2_bundle.go:7207
		_go_fuzz_dep_.CoverTab[39791]++
								t1.TLSClientConfig.NextProtos = append([]string{"h2"}, t1.TLSClientConfig.NextProtos...)
//line /usr/local/go/src/net/http/h2_bundle.go:7208
		// _ = "end of CoverTab[39791]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7209
		_go_fuzz_dep_.CoverTab[39792]++
//line /usr/local/go/src/net/http/h2_bundle.go:7209
		// _ = "end of CoverTab[39792]"
//line /usr/local/go/src/net/http/h2_bundle.go:7209
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7209
	// _ = "end of CoverTab[39782]"
//line /usr/local/go/src/net/http/h2_bundle.go:7209
	_go_fuzz_dep_.CoverTab[39783]++
							if !http2strSliceContains(t1.TLSClientConfig.NextProtos, "http/1.1") {
//line /usr/local/go/src/net/http/h2_bundle.go:7210
		_go_fuzz_dep_.CoverTab[39793]++
								t1.TLSClientConfig.NextProtos = append(t1.TLSClientConfig.NextProtos, "http/1.1")
//line /usr/local/go/src/net/http/h2_bundle.go:7211
		// _ = "end of CoverTab[39793]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7212
		_go_fuzz_dep_.CoverTab[39794]++
//line /usr/local/go/src/net/http/h2_bundle.go:7212
		// _ = "end of CoverTab[39794]"
//line /usr/local/go/src/net/http/h2_bundle.go:7212
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7212
	// _ = "end of CoverTab[39783]"
//line /usr/local/go/src/net/http/h2_bundle.go:7212
	_go_fuzz_dep_.CoverTab[39784]++
							upgradeFn := func(authority string, c *tls.Conn) RoundTripper {
//line /usr/local/go/src/net/http/h2_bundle.go:7213
		_go_fuzz_dep_.CoverTab[39795]++
								addr := http2authorityAddr("https", authority)
								if used, err := connPool.addConnIfNeeded(addr, t2, c); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7215
			_go_fuzz_dep_.CoverTab[39797]++
//line /usr/local/go/src/net/http/h2_bundle.go:7215
			_curRoutineNum24_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:7215
			_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum24_)
									go c.Close()
									return http2erringRoundTripper{err}
//line /usr/local/go/src/net/http/h2_bundle.go:7217
			// _ = "end of CoverTab[39797]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7218
			_go_fuzz_dep_.CoverTab[39798]++
//line /usr/local/go/src/net/http/h2_bundle.go:7218
			if !used {
//line /usr/local/go/src/net/http/h2_bundle.go:7218
				_go_fuzz_dep_.CoverTab[39799]++
//line /usr/local/go/src/net/http/h2_bundle.go:7218
				_curRoutineNum25_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:7218
				_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum25_)

//line /usr/local/go/src/net/http/h2_bundle.go:7223
				go c.Close()
//line /usr/local/go/src/net/http/h2_bundle.go:7223
				// _ = "end of CoverTab[39799]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7224
				_go_fuzz_dep_.CoverTab[39800]++
//line /usr/local/go/src/net/http/h2_bundle.go:7224
				// _ = "end of CoverTab[39800]"
//line /usr/local/go/src/net/http/h2_bundle.go:7224
			}
//line /usr/local/go/src/net/http/h2_bundle.go:7224
			// _ = "end of CoverTab[39798]"
//line /usr/local/go/src/net/http/h2_bundle.go:7224
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7224
		// _ = "end of CoverTab[39795]"
//line /usr/local/go/src/net/http/h2_bundle.go:7224
		_go_fuzz_dep_.CoverTab[39796]++
								return t2
//line /usr/local/go/src/net/http/h2_bundle.go:7225
		// _ = "end of CoverTab[39796]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7226
	// _ = "end of CoverTab[39784]"
//line /usr/local/go/src/net/http/h2_bundle.go:7226
	_go_fuzz_dep_.CoverTab[39785]++
							if m := t1.TLSNextProto; len(m) == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7227
		_go_fuzz_dep_.CoverTab[39801]++
								t1.TLSNextProto = map[string]func(string, *tls.Conn) RoundTripper{
			"h2": upgradeFn,
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7230
		// _ = "end of CoverTab[39801]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7231
		_go_fuzz_dep_.CoverTab[39802]++
								m["h2"] = upgradeFn
//line /usr/local/go/src/net/http/h2_bundle.go:7232
		// _ = "end of CoverTab[39802]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7233
	// _ = "end of CoverTab[39785]"
//line /usr/local/go/src/net/http/h2_bundle.go:7233
	_go_fuzz_dep_.CoverTab[39786]++
							return t2, nil
//line /usr/local/go/src/net/http/h2_bundle.go:7234
	// _ = "end of CoverTab[39786]"
}

func (t *http2Transport) connPool() http2ClientConnPool {
//line /usr/local/go/src/net/http/h2_bundle.go:7237
	_go_fuzz_dep_.CoverTab[39803]++
							t.connPoolOnce.Do(t.initConnPool)
							return t.connPoolOrDef
//line /usr/local/go/src/net/http/h2_bundle.go:7239
	// _ = "end of CoverTab[39803]"
}

func (t *http2Transport) initConnPool() {
//line /usr/local/go/src/net/http/h2_bundle.go:7242
	_go_fuzz_dep_.CoverTab[39804]++
							if t.ConnPool != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7243
		_go_fuzz_dep_.CoverTab[39805]++
								t.connPoolOrDef = t.ConnPool
//line /usr/local/go/src/net/http/h2_bundle.go:7244
		// _ = "end of CoverTab[39805]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7245
		_go_fuzz_dep_.CoverTab[39806]++
								t.connPoolOrDef = &http2clientConnPool{t: t}
//line /usr/local/go/src/net/http/h2_bundle.go:7246
		// _ = "end of CoverTab[39806]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7247
	// _ = "end of CoverTab[39804]"
}

// ClientConn is the state of a single HTTP/2 client connection to an
//line /usr/local/go/src/net/http/h2_bundle.go:7250
// HTTP/2 server.
//line /usr/local/go/src/net/http/h2_bundle.go:7252
type http2ClientConn struct {
	t		*http2Transport
	tconn		net.Conn	// usually *tls.Conn, except specialized impls
	tconnClosed	bool
	tlsState	*tls.ConnectionState	// nil only for specialized impls
	reused		uint32			// whether conn is being reused; atomic
	singleUse	bool			// whether being used for a single http.Request
	getConnCalled	bool			// used by clientConnPool

	// readLoop goroutine fields:
	readerDone	chan struct{}	// closed on error
	readerErr	error		// set before readerDone is closed

	idleTimeout	time.Duration	// or 0 for never
	idleTimer	*time.Timer

	mu		sync.Mutex	// guards following
	cond		*sync.Cond	// hold mu; broadcast on flow/closed changes
	flow		http2flow	// our conn-level flow control quota (cs.flow is per stream)
	inflow		http2flow	// peer's conn-level flow control
	doNotReuse	bool		// whether conn is marked to not be reused for any future requests
	closing		bool
	closed		bool
	seenSettings	bool				// true if we've seen a settings frame, false otherwise
	wantSettingsAck	bool				// we sent a SETTINGS frame and haven't heard back
	goAway		*http2GoAwayFrame		// if non-nil, the GoAwayFrame we received
	goAwayDebug	string				// goAway frame's debug data, retained as a string
	streams		map[uint32]*http2clientStream	// client-initiated
	streamsReserved	int				// incr by ReserveNewRequest; decr on RoundTrip
	nextStreamID	uint32
	pendingRequests	int				// requests blocked and waiting to be sent because len(streams) == maxConcurrentStreams
	pings		map[[8]byte]chan struct{}	// in flight ping data to notification channel
	br		*bufio.Reader
	lastActive	time.Time
	lastIdle	time.Time	// time last idle
	// Settings from peer: (also guarded by wmu)
	maxFrameSize		uint32
	maxConcurrentStreams	uint32
	peerMaxHeaderListSize	uint64
	peerMaxHeaderTableSize	uint32
	initialWindowSize	uint32

	// reqHeaderMu is a 1-element semaphore channel controlling access to sending new requests.
	// Write to reqHeaderMu to lock it, read from it to unlock.
	// Lock reqmu BEFORE mu or wmu.
	reqHeaderMu	chan struct{}

	// wmu is held while writing.
	// Acquire BEFORE mu when holding both, to avoid blocking mu on network writes.
	// Only acquire both at the same time when changing peer settings.
	wmu	sync.Mutex
	bw	*bufio.Writer
	fr	*http2Framer
	werr	error		// first write error that has occurred
	hbuf	bytes.Buffer	// HPACK encoder writes into this
	henc	*hpack.Encoder
}

// clientStream is the state for a single HTTP/2 stream. One of these
//line /usr/local/go/src/net/http/h2_bundle.go:7310
// is created for each Transport.RoundTrip call.
//line /usr/local/go/src/net/http/h2_bundle.go:7312
type http2clientStream struct {
	cc	*http2ClientConn

	// Fields of Request that we may access even after the response body is closed.
	ctx		context.Context
	reqCancel	<-chan struct{}

	trace		*httptrace.ClientTrace	// or nil
	ID		uint32
	bufPipe		http2pipe	// buffered pipe with the flow-controlled response payload
	requestedGzip	bool
	isHead		bool

	abortOnce	sync.Once
	abort		chan struct{}	// closed to signal stream should end immediately
	abortErr	error		// set if abort is closed

	peerClosed	chan struct{}	// closed when the peer sends an END_STREAM flag
	donec		chan struct{}	// closed after the stream is in the closed state
	on100		chan struct{}	// buffered; written to if a 100 is received

	respHeaderRecv	chan struct{}	// closed when headers are received
	res		*Response	// set if respHeaderRecv is closed

	flow		http2flow	// guarded by cc.mu
	inflow		http2flow	// guarded by cc.mu
	bytesRemain	int64		// -1 means unknown; owned by transportResponseBody.Read
	readErr		error		// sticky read error; owned by transportResponseBody.Read

	reqBody			io.ReadCloser
	reqBodyContentLength	int64		// -1 means unknown
	reqBodyClosed		chan struct{}	// guarded by cc.mu; non-nil on Close, closed when done

	// owned by writeRequest:
	sentEndStream	bool	// sent an END_STREAM flag to the peer
	sentHeaders	bool

	// owned by clientConnReadLoop:
	firstByte	bool	// got the first response byte
	pastHeaders	bool	// got first MetaHeadersFrame (actual headers)
	pastTrailers	bool	// got optional second MetaHeadersFrame (trailers)
	num1xx		uint8	// number of 1xx responses seen
	readClosed	bool	// peer sent an END_STREAM flag
	readAborted	bool	// read loop reset the stream

	trailer		Header	// accumulated trailers
	resTrailer	*Header	// client's Response.Trailer
}

var http2got1xxFuncForTests func(int, textproto.MIMEHeader) error

// get1xxTraceFunc returns the value of request's httptrace.ClientTrace.Got1xxResponse func,
//line /usr/local/go/src/net/http/h2_bundle.go:7363
// if any. It returns nil if not set or if the Go version is too old.
//line /usr/local/go/src/net/http/h2_bundle.go:7365
func (cs *http2clientStream) get1xxTraceFunc() func(int, textproto.MIMEHeader) error {
//line /usr/local/go/src/net/http/h2_bundle.go:7365
	_go_fuzz_dep_.CoverTab[39807]++
							if fn := http2got1xxFuncForTests; fn != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7366
		_go_fuzz_dep_.CoverTab[39809]++
								return fn
//line /usr/local/go/src/net/http/h2_bundle.go:7367
		// _ = "end of CoverTab[39809]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7368
		_go_fuzz_dep_.CoverTab[39810]++
//line /usr/local/go/src/net/http/h2_bundle.go:7368
		// _ = "end of CoverTab[39810]"
//line /usr/local/go/src/net/http/h2_bundle.go:7368
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7368
	// _ = "end of CoverTab[39807]"
//line /usr/local/go/src/net/http/h2_bundle.go:7368
	_go_fuzz_dep_.CoverTab[39808]++
							return http2traceGot1xxResponseFunc(cs.trace)
//line /usr/local/go/src/net/http/h2_bundle.go:7369
	// _ = "end of CoverTab[39808]"
}

func (cs *http2clientStream) abortStream(err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7372
	_go_fuzz_dep_.CoverTab[39811]++
							cs.cc.mu.Lock()
							defer cs.cc.mu.Unlock()
							cs.abortStreamLocked(err)
//line /usr/local/go/src/net/http/h2_bundle.go:7375
	// _ = "end of CoverTab[39811]"
}

func (cs *http2clientStream) abortStreamLocked(err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7378
	_go_fuzz_dep_.CoverTab[39812]++
							cs.abortOnce.Do(func() {
//line /usr/local/go/src/net/http/h2_bundle.go:7379
		_go_fuzz_dep_.CoverTab[39815]++
								cs.abortErr = err
								close(cs.abort)
//line /usr/local/go/src/net/http/h2_bundle.go:7381
		// _ = "end of CoverTab[39815]"
	})
//line /usr/local/go/src/net/http/h2_bundle.go:7382
	// _ = "end of CoverTab[39812]"
//line /usr/local/go/src/net/http/h2_bundle.go:7382
	_go_fuzz_dep_.CoverTab[39813]++
							if cs.reqBody != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7383
		_go_fuzz_dep_.CoverTab[39816]++
								cs.closeReqBodyLocked()
//line /usr/local/go/src/net/http/h2_bundle.go:7384
		// _ = "end of CoverTab[39816]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7385
		_go_fuzz_dep_.CoverTab[39817]++
//line /usr/local/go/src/net/http/h2_bundle.go:7385
		// _ = "end of CoverTab[39817]"
//line /usr/local/go/src/net/http/h2_bundle.go:7385
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7385
	// _ = "end of CoverTab[39813]"
//line /usr/local/go/src/net/http/h2_bundle.go:7385
	_go_fuzz_dep_.CoverTab[39814]++

							if cs.cc.cond != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7387
		_go_fuzz_dep_.CoverTab[39818]++

								cs.cc.cond.Broadcast()
//line /usr/local/go/src/net/http/h2_bundle.go:7389
		// _ = "end of CoverTab[39818]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7390
		_go_fuzz_dep_.CoverTab[39819]++
//line /usr/local/go/src/net/http/h2_bundle.go:7390
		// _ = "end of CoverTab[39819]"
//line /usr/local/go/src/net/http/h2_bundle.go:7390
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7390
	// _ = "end of CoverTab[39814]"
}

func (cs *http2clientStream) abortRequestBodyWrite() {
//line /usr/local/go/src/net/http/h2_bundle.go:7393
	_go_fuzz_dep_.CoverTab[39820]++
							cc := cs.cc
							cc.mu.Lock()
							defer cc.mu.Unlock()
							if cs.reqBody != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7397
		_go_fuzz_dep_.CoverTab[39821]++
//line /usr/local/go/src/net/http/h2_bundle.go:7397
		return cs.reqBodyClosed == nil
//line /usr/local/go/src/net/http/h2_bundle.go:7397
		// _ = "end of CoverTab[39821]"
//line /usr/local/go/src/net/http/h2_bundle.go:7397
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7397
		_go_fuzz_dep_.CoverTab[39822]++
								cs.closeReqBodyLocked()
								cc.cond.Broadcast()
//line /usr/local/go/src/net/http/h2_bundle.go:7399
		// _ = "end of CoverTab[39822]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7400
		_go_fuzz_dep_.CoverTab[39823]++
//line /usr/local/go/src/net/http/h2_bundle.go:7400
		// _ = "end of CoverTab[39823]"
//line /usr/local/go/src/net/http/h2_bundle.go:7400
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7400
	// _ = "end of CoverTab[39820]"
}

func (cs *http2clientStream) closeReqBodyLocked() {
//line /usr/local/go/src/net/http/h2_bundle.go:7403
	_go_fuzz_dep_.CoverTab[39824]++
							if cs.reqBodyClosed != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7404
		_go_fuzz_dep_.CoverTab[39826]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:7405
		// _ = "end of CoverTab[39826]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7406
		_go_fuzz_dep_.CoverTab[39827]++
//line /usr/local/go/src/net/http/h2_bundle.go:7406
		// _ = "end of CoverTab[39827]"
//line /usr/local/go/src/net/http/h2_bundle.go:7406
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7406
	// _ = "end of CoverTab[39824]"
//line /usr/local/go/src/net/http/h2_bundle.go:7406
	_go_fuzz_dep_.CoverTab[39825]++
							cs.reqBodyClosed = make(chan struct{})
							reqBodyClosed := cs.reqBodyClosed
//line /usr/local/go/src/net/http/h2_bundle.go:7408
	_curRoutineNum26_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:7408
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum26_)
							go func() {
//line /usr/local/go/src/net/http/h2_bundle.go:7409
		_go_fuzz_dep_.CoverTab[39828]++
//line /usr/local/go/src/net/http/h2_bundle.go:7409
		defer func() {
//line /usr/local/go/src/net/http/h2_bundle.go:7409
			_go_fuzz_dep_.CoverTab[39829]++
//line /usr/local/go/src/net/http/h2_bundle.go:7409
			_go_fuzz_dep_.RoutineInfo.AddTerminatedRoutineNum(_curRoutineNum26_)
//line /usr/local/go/src/net/http/h2_bundle.go:7409
			// _ = "end of CoverTab[39829]"
//line /usr/local/go/src/net/http/h2_bundle.go:7409
		}()
								cs.reqBody.Close()
								close(reqBodyClosed)
//line /usr/local/go/src/net/http/h2_bundle.go:7411
		// _ = "end of CoverTab[39828]"
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:7412
	// _ = "end of CoverTab[39825]"
}

type http2stickyErrWriter struct {
	conn	net.Conn
	timeout	time.Duration
	err	*error
}

func (sew http2stickyErrWriter) Write(p []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7421
	_go_fuzz_dep_.CoverTab[39830]++
							if *sew.err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7422
		_go_fuzz_dep_.CoverTab[39832]++
								return 0, *sew.err
//line /usr/local/go/src/net/http/h2_bundle.go:7423
		// _ = "end of CoverTab[39832]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7424
		_go_fuzz_dep_.CoverTab[39833]++
//line /usr/local/go/src/net/http/h2_bundle.go:7424
		// _ = "end of CoverTab[39833]"
//line /usr/local/go/src/net/http/h2_bundle.go:7424
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7424
	// _ = "end of CoverTab[39830]"
//line /usr/local/go/src/net/http/h2_bundle.go:7424
	_go_fuzz_dep_.CoverTab[39831]++
							for {
//line /usr/local/go/src/net/http/h2_bundle.go:7425
		_go_fuzz_dep_.CoverTab[39834]++
								if sew.timeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7426
			_go_fuzz_dep_.CoverTab[39838]++
									sew.conn.SetWriteDeadline(time.Now().Add(sew.timeout))
//line /usr/local/go/src/net/http/h2_bundle.go:7427
			// _ = "end of CoverTab[39838]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7428
			_go_fuzz_dep_.CoverTab[39839]++
//line /usr/local/go/src/net/http/h2_bundle.go:7428
			// _ = "end of CoverTab[39839]"
//line /usr/local/go/src/net/http/h2_bundle.go:7428
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7428
		// _ = "end of CoverTab[39834]"
//line /usr/local/go/src/net/http/h2_bundle.go:7428
		_go_fuzz_dep_.CoverTab[39835]++
								nn, err := sew.conn.Write(p[n:])
								n += nn
								if n < len(p) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7431
			_go_fuzz_dep_.CoverTab[39840]++
//line /usr/local/go/src/net/http/h2_bundle.go:7431
			return nn > 0
//line /usr/local/go/src/net/http/h2_bundle.go:7431
			// _ = "end of CoverTab[39840]"
//line /usr/local/go/src/net/http/h2_bundle.go:7431
		}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7431
			_go_fuzz_dep_.CoverTab[39841]++
//line /usr/local/go/src/net/http/h2_bundle.go:7431
			return errors.Is(err, os.ErrDeadlineExceeded)
//line /usr/local/go/src/net/http/h2_bundle.go:7431
			// _ = "end of CoverTab[39841]"
//line /usr/local/go/src/net/http/h2_bundle.go:7431
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7431
			_go_fuzz_dep_.CoverTab[39842]++

									continue
//line /usr/local/go/src/net/http/h2_bundle.go:7433
			// _ = "end of CoverTab[39842]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7434
			_go_fuzz_dep_.CoverTab[39843]++
//line /usr/local/go/src/net/http/h2_bundle.go:7434
			// _ = "end of CoverTab[39843]"
//line /usr/local/go/src/net/http/h2_bundle.go:7434
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7434
		// _ = "end of CoverTab[39835]"
//line /usr/local/go/src/net/http/h2_bundle.go:7434
		_go_fuzz_dep_.CoverTab[39836]++
								if sew.timeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7435
			_go_fuzz_dep_.CoverTab[39844]++
									sew.conn.SetWriteDeadline(time.Time{})
//line /usr/local/go/src/net/http/h2_bundle.go:7436
			// _ = "end of CoverTab[39844]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7437
			_go_fuzz_dep_.CoverTab[39845]++
//line /usr/local/go/src/net/http/h2_bundle.go:7437
			// _ = "end of CoverTab[39845]"
//line /usr/local/go/src/net/http/h2_bundle.go:7437
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7437
		// _ = "end of CoverTab[39836]"
//line /usr/local/go/src/net/http/h2_bundle.go:7437
		_go_fuzz_dep_.CoverTab[39837]++
								*sew.err = err
								return n, err
//line /usr/local/go/src/net/http/h2_bundle.go:7439
		// _ = "end of CoverTab[39837]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7440
	// _ = "end of CoverTab[39831]"
}

// noCachedConnError is the concrete type of ErrNoCachedConn, which
//line /usr/local/go/src/net/http/h2_bundle.go:7443
// needs to be detected by net/http regardless of whether it's its
//line /usr/local/go/src/net/http/h2_bundle.go:7443
// bundled version (in h2_bundle.go with a rewritten type name) or
//line /usr/local/go/src/net/http/h2_bundle.go:7443
// from a user's x/net/http2. As such, as it has a unique method name
//line /usr/local/go/src/net/http/h2_bundle.go:7443
// (IsHTTP2NoCachedConnError) that net/http sniffs for via func
//line /usr/local/go/src/net/http/h2_bundle.go:7443
// isNoCachedConnError.
//line /usr/local/go/src/net/http/h2_bundle.go:7449
type http2noCachedConnError struct{}

func (http2noCachedConnError) IsHTTP2NoCachedConnError() {
//line /usr/local/go/src/net/http/h2_bundle.go:7451
	_go_fuzz_dep_.CoverTab[39846]++
//line /usr/local/go/src/net/http/h2_bundle.go:7451
	// _ = "end of CoverTab[39846]"
//line /usr/local/go/src/net/http/h2_bundle.go:7451
}

func (http2noCachedConnError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:7453
	_go_fuzz_dep_.CoverTab[39847]++
//line /usr/local/go/src/net/http/h2_bundle.go:7453
	return "http2: no cached connection was available"
//line /usr/local/go/src/net/http/h2_bundle.go:7453
	// _ = "end of CoverTab[39847]"
//line /usr/local/go/src/net/http/h2_bundle.go:7453
}

// isNoCachedConnError reports whether err is of type noCachedConnError
//line /usr/local/go/src/net/http/h2_bundle.go:7455
// or its equivalent renamed type in net/http2's h2_bundle.go. Both types
//line /usr/local/go/src/net/http/h2_bundle.go:7455
// may coexist in the same running program.
//line /usr/local/go/src/net/http/h2_bundle.go:7458
func http2isNoCachedConnError(err error) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7458
	_go_fuzz_dep_.CoverTab[39848]++
							_, ok := err.(interface{ IsHTTP2NoCachedConnError() })
							return ok
//line /usr/local/go/src/net/http/h2_bundle.go:7460
	// _ = "end of CoverTab[39848]"
}

var http2ErrNoCachedConn error = http2noCachedConnError{}

// RoundTripOpt are options for the Transport.RoundTripOpt method.
type http2RoundTripOpt struct {
	// OnlyCachedConn controls whether RoundTripOpt may
	// create a new TCP connection. If set true and
	// no cached connection is available, RoundTripOpt
	// will return ErrNoCachedConn.
	OnlyCachedConn bool
}

func (t *http2Transport) RoundTrip(req *Request) (*Response, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7474
	_go_fuzz_dep_.CoverTab[39849]++
							return t.RoundTripOpt(req, http2RoundTripOpt{})
//line /usr/local/go/src/net/http/h2_bundle.go:7475
	// _ = "end of CoverTab[39849]"
}

// authorityAddr returns a given authority (a host/IP, or host:port / ip:port)
//line /usr/local/go/src/net/http/h2_bundle.go:7478
// and returns a host:port. The port 443 is added if needed.
//line /usr/local/go/src/net/http/h2_bundle.go:7480
func http2authorityAddr(scheme string, authority string) (addr string) {
//line /usr/local/go/src/net/http/h2_bundle.go:7480
	_go_fuzz_dep_.CoverTab[39850]++
							host, port, err := net.SplitHostPort(authority)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7482
		_go_fuzz_dep_.CoverTab[39854]++
								port = "443"
								if scheme == "http" {
//line /usr/local/go/src/net/http/h2_bundle.go:7484
			_go_fuzz_dep_.CoverTab[39856]++
									port = "80"
//line /usr/local/go/src/net/http/h2_bundle.go:7485
			// _ = "end of CoverTab[39856]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7486
			_go_fuzz_dep_.CoverTab[39857]++
//line /usr/local/go/src/net/http/h2_bundle.go:7486
			// _ = "end of CoverTab[39857]"
//line /usr/local/go/src/net/http/h2_bundle.go:7486
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7486
		// _ = "end of CoverTab[39854]"
//line /usr/local/go/src/net/http/h2_bundle.go:7486
		_go_fuzz_dep_.CoverTab[39855]++
								host = authority
//line /usr/local/go/src/net/http/h2_bundle.go:7487
		// _ = "end of CoverTab[39855]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7488
		_go_fuzz_dep_.CoverTab[39858]++
//line /usr/local/go/src/net/http/h2_bundle.go:7488
		// _ = "end of CoverTab[39858]"
//line /usr/local/go/src/net/http/h2_bundle.go:7488
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7488
	// _ = "end of CoverTab[39850]"
//line /usr/local/go/src/net/http/h2_bundle.go:7488
	_go_fuzz_dep_.CoverTab[39851]++
							if a, err := idna.ToASCII(host); err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7489
		_go_fuzz_dep_.CoverTab[39859]++
								host = a
//line /usr/local/go/src/net/http/h2_bundle.go:7490
		// _ = "end of CoverTab[39859]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7491
		_go_fuzz_dep_.CoverTab[39860]++
//line /usr/local/go/src/net/http/h2_bundle.go:7491
		// _ = "end of CoverTab[39860]"
//line /usr/local/go/src/net/http/h2_bundle.go:7491
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7491
	// _ = "end of CoverTab[39851]"
//line /usr/local/go/src/net/http/h2_bundle.go:7491
	_go_fuzz_dep_.CoverTab[39852]++

							if strings.HasPrefix(host, "[") && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7493
		_go_fuzz_dep_.CoverTab[39861]++
//line /usr/local/go/src/net/http/h2_bundle.go:7493
		return strings.HasSuffix(host, "]")
//line /usr/local/go/src/net/http/h2_bundle.go:7493
		// _ = "end of CoverTab[39861]"
//line /usr/local/go/src/net/http/h2_bundle.go:7493
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7493
		_go_fuzz_dep_.CoverTab[39862]++
								return host + ":" + port
//line /usr/local/go/src/net/http/h2_bundle.go:7494
		// _ = "end of CoverTab[39862]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7495
		_go_fuzz_dep_.CoverTab[39863]++
//line /usr/local/go/src/net/http/h2_bundle.go:7495
		// _ = "end of CoverTab[39863]"
//line /usr/local/go/src/net/http/h2_bundle.go:7495
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7495
	// _ = "end of CoverTab[39852]"
//line /usr/local/go/src/net/http/h2_bundle.go:7495
	_go_fuzz_dep_.CoverTab[39853]++
							return net.JoinHostPort(host, port)
//line /usr/local/go/src/net/http/h2_bundle.go:7496
	// _ = "end of CoverTab[39853]"
}

var http2retryBackoffHook func(time.Duration) *time.Timer

func http2backoffNewTimer(d time.Duration) *time.Timer {
//line /usr/local/go/src/net/http/h2_bundle.go:7501
	_go_fuzz_dep_.CoverTab[39864]++
							if http2retryBackoffHook != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7502
		_go_fuzz_dep_.CoverTab[39866]++
								return http2retryBackoffHook(d)
//line /usr/local/go/src/net/http/h2_bundle.go:7503
		// _ = "end of CoverTab[39866]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7504
		_go_fuzz_dep_.CoverTab[39867]++
//line /usr/local/go/src/net/http/h2_bundle.go:7504
		// _ = "end of CoverTab[39867]"
//line /usr/local/go/src/net/http/h2_bundle.go:7504
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7504
	// _ = "end of CoverTab[39864]"
//line /usr/local/go/src/net/http/h2_bundle.go:7504
	_go_fuzz_dep_.CoverTab[39865]++
							return time.NewTimer(d)
//line /usr/local/go/src/net/http/h2_bundle.go:7505
	// _ = "end of CoverTab[39865]"
}

// RoundTripOpt is like RoundTrip, but takes options.
func (t *http2Transport) RoundTripOpt(req *Request, opt http2RoundTripOpt) (*Response, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7509
	_go_fuzz_dep_.CoverTab[39868]++
							if !(req.URL.Scheme == "https" || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7510
		_go_fuzz_dep_.CoverTab[39870]++
//line /usr/local/go/src/net/http/h2_bundle.go:7510
		return (req.URL.Scheme == "http" && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7510
			_go_fuzz_dep_.CoverTab[39871]++
//line /usr/local/go/src/net/http/h2_bundle.go:7510
			return t.AllowHTTP
//line /usr/local/go/src/net/http/h2_bundle.go:7510
			// _ = "end of CoverTab[39871]"
//line /usr/local/go/src/net/http/h2_bundle.go:7510
		}())
//line /usr/local/go/src/net/http/h2_bundle.go:7510
		// _ = "end of CoverTab[39870]"
//line /usr/local/go/src/net/http/h2_bundle.go:7510
	}()) {
//line /usr/local/go/src/net/http/h2_bundle.go:7510
		_go_fuzz_dep_.CoverTab[39872]++
								return nil, errors.New("http2: unsupported scheme")
//line /usr/local/go/src/net/http/h2_bundle.go:7511
		// _ = "end of CoverTab[39872]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7512
		_go_fuzz_dep_.CoverTab[39873]++
//line /usr/local/go/src/net/http/h2_bundle.go:7512
		// _ = "end of CoverTab[39873]"
//line /usr/local/go/src/net/http/h2_bundle.go:7512
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7512
	// _ = "end of CoverTab[39868]"
//line /usr/local/go/src/net/http/h2_bundle.go:7512
	_go_fuzz_dep_.CoverTab[39869]++

							addr := http2authorityAddr(req.URL.Scheme, req.URL.Host)
							for retry := 0; ; retry++ {
//line /usr/local/go/src/net/http/h2_bundle.go:7515
		_go_fuzz_dep_.CoverTab[39874]++
								cc, err := t.connPool().GetClientConn(req, addr)
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7517
			_go_fuzz_dep_.CoverTab[39878]++
									t.vlogf("http2: Transport failed to get client conn for %s: %v", addr, err)
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:7519
			// _ = "end of CoverTab[39878]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7520
			_go_fuzz_dep_.CoverTab[39879]++
//line /usr/local/go/src/net/http/h2_bundle.go:7520
			// _ = "end of CoverTab[39879]"
//line /usr/local/go/src/net/http/h2_bundle.go:7520
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7520
		// _ = "end of CoverTab[39874]"
//line /usr/local/go/src/net/http/h2_bundle.go:7520
		_go_fuzz_dep_.CoverTab[39875]++
								reused := !atomic.CompareAndSwapUint32(&cc.reused, 0, 1)
								http2traceGotConn(req, cc, reused)
								res, err := cc.RoundTrip(req)
								if err != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7524
			_go_fuzz_dep_.CoverTab[39880]++
//line /usr/local/go/src/net/http/h2_bundle.go:7524
			return retry <= 6
//line /usr/local/go/src/net/http/h2_bundle.go:7524
			// _ = "end of CoverTab[39880]"
//line /usr/local/go/src/net/http/h2_bundle.go:7524
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7524
			_go_fuzz_dep_.CoverTab[39881]++
									if req, err = http2shouldRetryRequest(req, err); err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7525
				_go_fuzz_dep_.CoverTab[39882]++

										if retry == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7527
					_go_fuzz_dep_.CoverTab[39884]++
											t.vlogf("RoundTrip retrying after failure: %v", err)
											continue
//line /usr/local/go/src/net/http/h2_bundle.go:7529
					// _ = "end of CoverTab[39884]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7530
					_go_fuzz_dep_.CoverTab[39885]++
//line /usr/local/go/src/net/http/h2_bundle.go:7530
					// _ = "end of CoverTab[39885]"
//line /usr/local/go/src/net/http/h2_bundle.go:7530
				}
//line /usr/local/go/src/net/http/h2_bundle.go:7530
				// _ = "end of CoverTab[39882]"
//line /usr/local/go/src/net/http/h2_bundle.go:7530
				_go_fuzz_dep_.CoverTab[39883]++
										backoff := float64(uint(1) << (uint(retry) - 1))
										backoff += backoff * (0.1 * mathrand.Float64())
										d := time.Second * time.Duration(backoff)
										timer := http2backoffNewTimer(d)
										select {
				case <-timer.C:
//line /usr/local/go/src/net/http/h2_bundle.go:7536
					_go_fuzz_dep_.CoverTab[39886]++
											t.vlogf("RoundTrip retrying after failure: %v", err)
											continue
//line /usr/local/go/src/net/http/h2_bundle.go:7538
					// _ = "end of CoverTab[39886]"
				case <-req.Context().Done():
//line /usr/local/go/src/net/http/h2_bundle.go:7539
					_go_fuzz_dep_.CoverTab[39887]++
											timer.Stop()
											err = req.Context().Err()
//line /usr/local/go/src/net/http/h2_bundle.go:7541
					// _ = "end of CoverTab[39887]"
				}
//line /usr/local/go/src/net/http/h2_bundle.go:7542
				// _ = "end of CoverTab[39883]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7543
				_go_fuzz_dep_.CoverTab[39888]++
//line /usr/local/go/src/net/http/h2_bundle.go:7543
				// _ = "end of CoverTab[39888]"
//line /usr/local/go/src/net/http/h2_bundle.go:7543
			}
//line /usr/local/go/src/net/http/h2_bundle.go:7543
			// _ = "end of CoverTab[39881]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7544
			_go_fuzz_dep_.CoverTab[39889]++
//line /usr/local/go/src/net/http/h2_bundle.go:7544
			// _ = "end of CoverTab[39889]"
//line /usr/local/go/src/net/http/h2_bundle.go:7544
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7544
		// _ = "end of CoverTab[39875]"
//line /usr/local/go/src/net/http/h2_bundle.go:7544
		_go_fuzz_dep_.CoverTab[39876]++
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7545
			_go_fuzz_dep_.CoverTab[39890]++
									t.vlogf("RoundTrip failure: %v", err)
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:7547
			// _ = "end of CoverTab[39890]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7548
			_go_fuzz_dep_.CoverTab[39891]++
//line /usr/local/go/src/net/http/h2_bundle.go:7548
			// _ = "end of CoverTab[39891]"
//line /usr/local/go/src/net/http/h2_bundle.go:7548
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7548
		// _ = "end of CoverTab[39876]"
//line /usr/local/go/src/net/http/h2_bundle.go:7548
		_go_fuzz_dep_.CoverTab[39877]++
								return res, nil
//line /usr/local/go/src/net/http/h2_bundle.go:7549
		// _ = "end of CoverTab[39877]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7550
	// _ = "end of CoverTab[39869]"
}

// CloseIdleConnections closes any connections which were previously
//line /usr/local/go/src/net/http/h2_bundle.go:7553
// connected from previous requests but are now sitting idle.
//line /usr/local/go/src/net/http/h2_bundle.go:7553
// It does not interrupt any connections currently in use.
//line /usr/local/go/src/net/http/h2_bundle.go:7556
func (t *http2Transport) CloseIdleConnections() {
//line /usr/local/go/src/net/http/h2_bundle.go:7556
	_go_fuzz_dep_.CoverTab[39892]++
							if cp, ok := t.connPool().(http2clientConnPoolIdleCloser); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:7557
		_go_fuzz_dep_.CoverTab[39893]++
								cp.closeIdleConnections()
//line /usr/local/go/src/net/http/h2_bundle.go:7558
		// _ = "end of CoverTab[39893]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7559
		_go_fuzz_dep_.CoverTab[39894]++
//line /usr/local/go/src/net/http/h2_bundle.go:7559
		// _ = "end of CoverTab[39894]"
//line /usr/local/go/src/net/http/h2_bundle.go:7559
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7559
	// _ = "end of CoverTab[39892]"
}

var (
	http2errClientConnClosed	= errors.New("http2: client conn is closed")
	http2errClientConnUnusable	= errors.New("http2: client conn not usable")
	http2errClientConnGotGoAway	= errors.New("http2: Transport received Server's graceful shutdown GOAWAY")
)

// shouldRetryRequest is called by RoundTrip when a request fails to get
//line /usr/local/go/src/net/http/h2_bundle.go:7568
// response headers. It is always called with a non-nil error.
//line /usr/local/go/src/net/http/h2_bundle.go:7568
// It returns either a request to retry (either the same request, or a
//line /usr/local/go/src/net/http/h2_bundle.go:7568
// modified clone), or an error if the request can't be replayed.
//line /usr/local/go/src/net/http/h2_bundle.go:7572
func http2shouldRetryRequest(req *Request, err error) (*Request, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7572
	_go_fuzz_dep_.CoverTab[39895]++
							if !http2canRetryError(err) {
//line /usr/local/go/src/net/http/h2_bundle.go:7573
		_go_fuzz_dep_.CoverTab[39900]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:7574
		// _ = "end of CoverTab[39900]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7575
		_go_fuzz_dep_.CoverTab[39901]++
//line /usr/local/go/src/net/http/h2_bundle.go:7575
		// _ = "end of CoverTab[39901]"
//line /usr/local/go/src/net/http/h2_bundle.go:7575
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7575
	// _ = "end of CoverTab[39895]"
//line /usr/local/go/src/net/http/h2_bundle.go:7575
	_go_fuzz_dep_.CoverTab[39896]++

//line /usr/local/go/src/net/http/h2_bundle.go:7578
	if req.Body == nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7578
		_go_fuzz_dep_.CoverTab[39902]++
//line /usr/local/go/src/net/http/h2_bundle.go:7578
		return req.Body == NoBody
//line /usr/local/go/src/net/http/h2_bundle.go:7578
		// _ = "end of CoverTab[39902]"
//line /usr/local/go/src/net/http/h2_bundle.go:7578
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7578
		_go_fuzz_dep_.CoverTab[39903]++
								return req, nil
//line /usr/local/go/src/net/http/h2_bundle.go:7579
		// _ = "end of CoverTab[39903]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7580
		_go_fuzz_dep_.CoverTab[39904]++
//line /usr/local/go/src/net/http/h2_bundle.go:7580
		// _ = "end of CoverTab[39904]"
//line /usr/local/go/src/net/http/h2_bundle.go:7580
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7580
	// _ = "end of CoverTab[39896]"
//line /usr/local/go/src/net/http/h2_bundle.go:7580
	_go_fuzz_dep_.CoverTab[39897]++

//line /usr/local/go/src/net/http/h2_bundle.go:7584
	if req.GetBody != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7584
		_go_fuzz_dep_.CoverTab[39905]++
								body, err := req.GetBody()
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7586
			_go_fuzz_dep_.CoverTab[39907]++
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:7587
			// _ = "end of CoverTab[39907]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7588
			_go_fuzz_dep_.CoverTab[39908]++
//line /usr/local/go/src/net/http/h2_bundle.go:7588
			// _ = "end of CoverTab[39908]"
//line /usr/local/go/src/net/http/h2_bundle.go:7588
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7588
		// _ = "end of CoverTab[39905]"
//line /usr/local/go/src/net/http/h2_bundle.go:7588
		_go_fuzz_dep_.CoverTab[39906]++
								newReq := *req
								newReq.Body = body
								return &newReq, nil
//line /usr/local/go/src/net/http/h2_bundle.go:7591
		// _ = "end of CoverTab[39906]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7592
		_go_fuzz_dep_.CoverTab[39909]++
//line /usr/local/go/src/net/http/h2_bundle.go:7592
		// _ = "end of CoverTab[39909]"
//line /usr/local/go/src/net/http/h2_bundle.go:7592
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7592
	// _ = "end of CoverTab[39897]"
//line /usr/local/go/src/net/http/h2_bundle.go:7592
	_go_fuzz_dep_.CoverTab[39898]++

//line /usr/local/go/src/net/http/h2_bundle.go:7597
	if err == http2errClientConnUnusable {
//line /usr/local/go/src/net/http/h2_bundle.go:7597
		_go_fuzz_dep_.CoverTab[39910]++
								return req, nil
//line /usr/local/go/src/net/http/h2_bundle.go:7598
		// _ = "end of CoverTab[39910]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7599
		_go_fuzz_dep_.CoverTab[39911]++
//line /usr/local/go/src/net/http/h2_bundle.go:7599
		// _ = "end of CoverTab[39911]"
//line /usr/local/go/src/net/http/h2_bundle.go:7599
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7599
	// _ = "end of CoverTab[39898]"
//line /usr/local/go/src/net/http/h2_bundle.go:7599
	_go_fuzz_dep_.CoverTab[39899]++

							return nil, fmt.Errorf("http2: Transport: cannot retry err [%v] after Request.Body was written; define Request.GetBody to avoid this error", err)
//line /usr/local/go/src/net/http/h2_bundle.go:7601
	// _ = "end of CoverTab[39899]"
}

func http2canRetryError(err error) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7604
	_go_fuzz_dep_.CoverTab[39912]++
							if err == http2errClientConnUnusable || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7605
		_go_fuzz_dep_.CoverTab[39915]++
//line /usr/local/go/src/net/http/h2_bundle.go:7605
		return err == http2errClientConnGotGoAway
//line /usr/local/go/src/net/http/h2_bundle.go:7605
		// _ = "end of CoverTab[39915]"
//line /usr/local/go/src/net/http/h2_bundle.go:7605
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7605
		_go_fuzz_dep_.CoverTab[39916]++
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:7606
		// _ = "end of CoverTab[39916]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7607
		_go_fuzz_dep_.CoverTab[39917]++
//line /usr/local/go/src/net/http/h2_bundle.go:7607
		// _ = "end of CoverTab[39917]"
//line /usr/local/go/src/net/http/h2_bundle.go:7607
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7607
	// _ = "end of CoverTab[39912]"
//line /usr/local/go/src/net/http/h2_bundle.go:7607
	_go_fuzz_dep_.CoverTab[39913]++
							if se, ok := err.(http2StreamError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:7608
		_go_fuzz_dep_.CoverTab[39918]++
								if se.Code == http2ErrCodeProtocol && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7609
			_go_fuzz_dep_.CoverTab[39920]++
//line /usr/local/go/src/net/http/h2_bundle.go:7609
			return se.Cause == http2errFromPeer
//line /usr/local/go/src/net/http/h2_bundle.go:7609
			// _ = "end of CoverTab[39920]"
//line /usr/local/go/src/net/http/h2_bundle.go:7609
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7609
			_go_fuzz_dep_.CoverTab[39921]++

									return true
//line /usr/local/go/src/net/http/h2_bundle.go:7611
			// _ = "end of CoverTab[39921]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7612
			_go_fuzz_dep_.CoverTab[39922]++
//line /usr/local/go/src/net/http/h2_bundle.go:7612
			// _ = "end of CoverTab[39922]"
//line /usr/local/go/src/net/http/h2_bundle.go:7612
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7612
		// _ = "end of CoverTab[39918]"
//line /usr/local/go/src/net/http/h2_bundle.go:7612
		_go_fuzz_dep_.CoverTab[39919]++
								return se.Code == http2ErrCodeRefusedStream
//line /usr/local/go/src/net/http/h2_bundle.go:7613
		// _ = "end of CoverTab[39919]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7614
		_go_fuzz_dep_.CoverTab[39923]++
//line /usr/local/go/src/net/http/h2_bundle.go:7614
		// _ = "end of CoverTab[39923]"
//line /usr/local/go/src/net/http/h2_bundle.go:7614
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7614
	// _ = "end of CoverTab[39913]"
//line /usr/local/go/src/net/http/h2_bundle.go:7614
	_go_fuzz_dep_.CoverTab[39914]++
							return false
//line /usr/local/go/src/net/http/h2_bundle.go:7615
	// _ = "end of CoverTab[39914]"
}

func (t *http2Transport) dialClientConn(ctx context.Context, addr string, singleUse bool) (*http2ClientConn, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7618
	_go_fuzz_dep_.CoverTab[39924]++
							host, _, err := net.SplitHostPort(addr)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7620
		_go_fuzz_dep_.CoverTab[39927]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:7621
		// _ = "end of CoverTab[39927]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7622
		_go_fuzz_dep_.CoverTab[39928]++
//line /usr/local/go/src/net/http/h2_bundle.go:7622
		// _ = "end of CoverTab[39928]"
//line /usr/local/go/src/net/http/h2_bundle.go:7622
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7622
	// _ = "end of CoverTab[39924]"
//line /usr/local/go/src/net/http/h2_bundle.go:7622
	_go_fuzz_dep_.CoverTab[39925]++
							tconn, err := t.dialTLS(ctx, "tcp", addr, t.newTLSConfig(host))
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7624
		_go_fuzz_dep_.CoverTab[39929]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:7625
		// _ = "end of CoverTab[39929]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7626
		_go_fuzz_dep_.CoverTab[39930]++
//line /usr/local/go/src/net/http/h2_bundle.go:7626
		// _ = "end of CoverTab[39930]"
//line /usr/local/go/src/net/http/h2_bundle.go:7626
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7626
	// _ = "end of CoverTab[39925]"
//line /usr/local/go/src/net/http/h2_bundle.go:7626
	_go_fuzz_dep_.CoverTab[39926]++
							return t.newClientConn(tconn, singleUse)
//line /usr/local/go/src/net/http/h2_bundle.go:7627
	// _ = "end of CoverTab[39926]"
}

func (t *http2Transport) newTLSConfig(host string) *tls.Config {
//line /usr/local/go/src/net/http/h2_bundle.go:7630
	_go_fuzz_dep_.CoverTab[39931]++
							cfg := new(tls.Config)
							if t.TLSClientConfig != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7632
		_go_fuzz_dep_.CoverTab[39935]++
								*cfg = *t.TLSClientConfig.Clone()
//line /usr/local/go/src/net/http/h2_bundle.go:7633
		// _ = "end of CoverTab[39935]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7634
		_go_fuzz_dep_.CoverTab[39936]++
//line /usr/local/go/src/net/http/h2_bundle.go:7634
		// _ = "end of CoverTab[39936]"
//line /usr/local/go/src/net/http/h2_bundle.go:7634
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7634
	// _ = "end of CoverTab[39931]"
//line /usr/local/go/src/net/http/h2_bundle.go:7634
	_go_fuzz_dep_.CoverTab[39932]++
							if !http2strSliceContains(cfg.NextProtos, http2NextProtoTLS) {
//line /usr/local/go/src/net/http/h2_bundle.go:7635
		_go_fuzz_dep_.CoverTab[39937]++
								cfg.NextProtos = append([]string{http2NextProtoTLS}, cfg.NextProtos...)
//line /usr/local/go/src/net/http/h2_bundle.go:7636
		// _ = "end of CoverTab[39937]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7637
		_go_fuzz_dep_.CoverTab[39938]++
//line /usr/local/go/src/net/http/h2_bundle.go:7637
		// _ = "end of CoverTab[39938]"
//line /usr/local/go/src/net/http/h2_bundle.go:7637
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7637
	// _ = "end of CoverTab[39932]"
//line /usr/local/go/src/net/http/h2_bundle.go:7637
	_go_fuzz_dep_.CoverTab[39933]++
							if cfg.ServerName == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:7638
		_go_fuzz_dep_.CoverTab[39939]++
								cfg.ServerName = host
//line /usr/local/go/src/net/http/h2_bundle.go:7639
		// _ = "end of CoverTab[39939]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7640
		_go_fuzz_dep_.CoverTab[39940]++
//line /usr/local/go/src/net/http/h2_bundle.go:7640
		// _ = "end of CoverTab[39940]"
//line /usr/local/go/src/net/http/h2_bundle.go:7640
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7640
	// _ = "end of CoverTab[39933]"
//line /usr/local/go/src/net/http/h2_bundle.go:7640
	_go_fuzz_dep_.CoverTab[39934]++
							return cfg
//line /usr/local/go/src/net/http/h2_bundle.go:7641
	// _ = "end of CoverTab[39934]"
}

func (t *http2Transport) dialTLS(ctx context.Context, network, addr string, tlsCfg *tls.Config) (net.Conn, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7644
	_go_fuzz_dep_.CoverTab[39941]++
							if t.DialTLSContext != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7645
		_go_fuzz_dep_.CoverTab[39946]++
								return t.DialTLSContext(ctx, network, addr, tlsCfg)
//line /usr/local/go/src/net/http/h2_bundle.go:7646
		// _ = "end of CoverTab[39946]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7647
		_go_fuzz_dep_.CoverTab[39947]++
//line /usr/local/go/src/net/http/h2_bundle.go:7647
		if t.DialTLS != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7647
			_go_fuzz_dep_.CoverTab[39948]++
									return t.DialTLS(network, addr, tlsCfg)
//line /usr/local/go/src/net/http/h2_bundle.go:7648
			// _ = "end of CoverTab[39948]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7649
			_go_fuzz_dep_.CoverTab[39949]++
//line /usr/local/go/src/net/http/h2_bundle.go:7649
			// _ = "end of CoverTab[39949]"
//line /usr/local/go/src/net/http/h2_bundle.go:7649
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7649
		// _ = "end of CoverTab[39947]"
//line /usr/local/go/src/net/http/h2_bundle.go:7649
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7649
	// _ = "end of CoverTab[39941]"
//line /usr/local/go/src/net/http/h2_bundle.go:7649
	_go_fuzz_dep_.CoverTab[39942]++

							tlsCn, err := t.dialTLSWithContext(ctx, network, addr, tlsCfg)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7652
		_go_fuzz_dep_.CoverTab[39950]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:7653
		// _ = "end of CoverTab[39950]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7654
		_go_fuzz_dep_.CoverTab[39951]++
//line /usr/local/go/src/net/http/h2_bundle.go:7654
		// _ = "end of CoverTab[39951]"
//line /usr/local/go/src/net/http/h2_bundle.go:7654
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7654
	// _ = "end of CoverTab[39942]"
//line /usr/local/go/src/net/http/h2_bundle.go:7654
	_go_fuzz_dep_.CoverTab[39943]++
							state := tlsCn.ConnectionState()
							if p := state.NegotiatedProtocol; p != http2NextProtoTLS {
//line /usr/local/go/src/net/http/h2_bundle.go:7656
		_go_fuzz_dep_.CoverTab[39952]++
								return nil, fmt.Errorf("http2: unexpected ALPN protocol %q; want %q", p, http2NextProtoTLS)
//line /usr/local/go/src/net/http/h2_bundle.go:7657
		// _ = "end of CoverTab[39952]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7658
		_go_fuzz_dep_.CoverTab[39953]++
//line /usr/local/go/src/net/http/h2_bundle.go:7658
		// _ = "end of CoverTab[39953]"
//line /usr/local/go/src/net/http/h2_bundle.go:7658
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7658
	// _ = "end of CoverTab[39943]"
//line /usr/local/go/src/net/http/h2_bundle.go:7658
	_go_fuzz_dep_.CoverTab[39944]++
							if !state.NegotiatedProtocolIsMutual {
//line /usr/local/go/src/net/http/h2_bundle.go:7659
		_go_fuzz_dep_.CoverTab[39954]++
								return nil, errors.New("http2: could not negotiate protocol mutually")
//line /usr/local/go/src/net/http/h2_bundle.go:7660
		// _ = "end of CoverTab[39954]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7661
		_go_fuzz_dep_.CoverTab[39955]++
//line /usr/local/go/src/net/http/h2_bundle.go:7661
		// _ = "end of CoverTab[39955]"
//line /usr/local/go/src/net/http/h2_bundle.go:7661
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7661
	// _ = "end of CoverTab[39944]"
//line /usr/local/go/src/net/http/h2_bundle.go:7661
	_go_fuzz_dep_.CoverTab[39945]++
							return tlsCn, nil
//line /usr/local/go/src/net/http/h2_bundle.go:7662
	// _ = "end of CoverTab[39945]"
}

// disableKeepAlives reports whether connections should be closed as
//line /usr/local/go/src/net/http/h2_bundle.go:7665
// soon as possible after handling the first request.
//line /usr/local/go/src/net/http/h2_bundle.go:7667
func (t *http2Transport) disableKeepAlives() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7667
	_go_fuzz_dep_.CoverTab[39956]++
							return t.t1 != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7668
		_go_fuzz_dep_.CoverTab[39957]++
//line /usr/local/go/src/net/http/h2_bundle.go:7668
		return t.t1.DisableKeepAlives
//line /usr/local/go/src/net/http/h2_bundle.go:7668
		// _ = "end of CoverTab[39957]"
//line /usr/local/go/src/net/http/h2_bundle.go:7668
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:7668
	// _ = "end of CoverTab[39956]"
}

func (t *http2Transport) expectContinueTimeout() time.Duration {
//line /usr/local/go/src/net/http/h2_bundle.go:7671
	_go_fuzz_dep_.CoverTab[39958]++
							if t.t1 == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7672
		_go_fuzz_dep_.CoverTab[39960]++
								return 0
//line /usr/local/go/src/net/http/h2_bundle.go:7673
		// _ = "end of CoverTab[39960]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7674
		_go_fuzz_dep_.CoverTab[39961]++
//line /usr/local/go/src/net/http/h2_bundle.go:7674
		// _ = "end of CoverTab[39961]"
//line /usr/local/go/src/net/http/h2_bundle.go:7674
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7674
	// _ = "end of CoverTab[39958]"
//line /usr/local/go/src/net/http/h2_bundle.go:7674
	_go_fuzz_dep_.CoverTab[39959]++
							return t.t1.ExpectContinueTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:7675
	// _ = "end of CoverTab[39959]"
}

func (t *http2Transport) maxDecoderHeaderTableSize() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:7678
	_go_fuzz_dep_.CoverTab[39962]++
							if v := t.MaxDecoderHeaderTableSize; v > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7679
		_go_fuzz_dep_.CoverTab[39964]++
								return v
//line /usr/local/go/src/net/http/h2_bundle.go:7680
		// _ = "end of CoverTab[39964]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7681
		_go_fuzz_dep_.CoverTab[39965]++
//line /usr/local/go/src/net/http/h2_bundle.go:7681
		// _ = "end of CoverTab[39965]"
//line /usr/local/go/src/net/http/h2_bundle.go:7681
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7681
	// _ = "end of CoverTab[39962]"
//line /usr/local/go/src/net/http/h2_bundle.go:7681
	_go_fuzz_dep_.CoverTab[39963]++
							return http2initialHeaderTableSize
//line /usr/local/go/src/net/http/h2_bundle.go:7682
	// _ = "end of CoverTab[39963]"
}

func (t *http2Transport) maxEncoderHeaderTableSize() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:7685
	_go_fuzz_dep_.CoverTab[39966]++
							if v := t.MaxEncoderHeaderTableSize; v > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7686
		_go_fuzz_dep_.CoverTab[39968]++
								return v
//line /usr/local/go/src/net/http/h2_bundle.go:7687
		// _ = "end of CoverTab[39968]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7688
		_go_fuzz_dep_.CoverTab[39969]++
//line /usr/local/go/src/net/http/h2_bundle.go:7688
		// _ = "end of CoverTab[39969]"
//line /usr/local/go/src/net/http/h2_bundle.go:7688
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7688
	// _ = "end of CoverTab[39966]"
//line /usr/local/go/src/net/http/h2_bundle.go:7688
	_go_fuzz_dep_.CoverTab[39967]++
							return http2initialHeaderTableSize
//line /usr/local/go/src/net/http/h2_bundle.go:7689
	// _ = "end of CoverTab[39967]"
}

func (t *http2Transport) NewClientConn(c net.Conn) (*http2ClientConn, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7692
	_go_fuzz_dep_.CoverTab[39970]++
							return t.newClientConn(c, t.disableKeepAlives())
//line /usr/local/go/src/net/http/h2_bundle.go:7693
	// _ = "end of CoverTab[39970]"
}

func (t *http2Transport) newClientConn(c net.Conn, singleUse bool) (*http2ClientConn, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:7696
	_go_fuzz_dep_.CoverTab[39971]++
							cc := &http2ClientConn{
		t:			t,
		tconn:			c,
		readerDone:		make(chan struct{}),
		nextStreamID:		1,
		maxFrameSize:		16 << 10,
		initialWindowSize:	65535,
		maxConcurrentStreams:	http2initialMaxConcurrentStreams,
		peerMaxHeaderListSize:	0xffffffffffffffff,
		streams:		make(map[uint32]*http2clientStream),
		singleUse:		singleUse,
		wantSettingsAck:	true,
		pings:			make(map[[8]byte]chan struct{}),
		reqHeaderMu:		make(chan struct{}, 1),
	}
	if d := t.idleConnTimeout(); d != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7712
		_go_fuzz_dep_.CoverTab[39982]++
								cc.idleTimeout = d
								cc.idleTimer = time.AfterFunc(d, cc.onIdleTimeout)
//line /usr/local/go/src/net/http/h2_bundle.go:7714
		// _ = "end of CoverTab[39982]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7715
		_go_fuzz_dep_.CoverTab[39983]++
//line /usr/local/go/src/net/http/h2_bundle.go:7715
		// _ = "end of CoverTab[39983]"
//line /usr/local/go/src/net/http/h2_bundle.go:7715
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7715
	// _ = "end of CoverTab[39971]"
//line /usr/local/go/src/net/http/h2_bundle.go:7715
	_go_fuzz_dep_.CoverTab[39972]++
							if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:7716
		_go_fuzz_dep_.CoverTab[39984]++
								t.vlogf("http2: Transport creating client conn %p to %v", cc, c.RemoteAddr())
//line /usr/local/go/src/net/http/h2_bundle.go:7717
		// _ = "end of CoverTab[39984]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7718
		_go_fuzz_dep_.CoverTab[39985]++
//line /usr/local/go/src/net/http/h2_bundle.go:7718
		// _ = "end of CoverTab[39985]"
//line /usr/local/go/src/net/http/h2_bundle.go:7718
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7718
	// _ = "end of CoverTab[39972]"
//line /usr/local/go/src/net/http/h2_bundle.go:7718
	_go_fuzz_dep_.CoverTab[39973]++

							cc.cond = sync.NewCond(&cc.mu)
							cc.flow.add(int32(http2initialWindowSize))

//line /usr/local/go/src/net/http/h2_bundle.go:7725
	cc.bw = bufio.NewWriter(http2stickyErrWriter{
		conn:		c,
		timeout:	t.WriteByteTimeout,
		err:		&cc.werr,
	})
	cc.br = bufio.NewReader(c)
	cc.fr = http2NewFramer(cc.bw, cc.br)
	if t.maxFrameReadSize() != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7732
		_go_fuzz_dep_.CoverTab[39986]++
								cc.fr.SetMaxReadFrameSize(t.maxFrameReadSize())
//line /usr/local/go/src/net/http/h2_bundle.go:7733
		// _ = "end of CoverTab[39986]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7734
		_go_fuzz_dep_.CoverTab[39987]++
//line /usr/local/go/src/net/http/h2_bundle.go:7734
		// _ = "end of CoverTab[39987]"
//line /usr/local/go/src/net/http/h2_bundle.go:7734
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7734
	// _ = "end of CoverTab[39973]"
//line /usr/local/go/src/net/http/h2_bundle.go:7734
	_go_fuzz_dep_.CoverTab[39974]++
							if t.CountError != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7735
		_go_fuzz_dep_.CoverTab[39988]++
								cc.fr.countError = t.CountError
//line /usr/local/go/src/net/http/h2_bundle.go:7736
		// _ = "end of CoverTab[39988]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7737
		_go_fuzz_dep_.CoverTab[39989]++
//line /usr/local/go/src/net/http/h2_bundle.go:7737
		// _ = "end of CoverTab[39989]"
//line /usr/local/go/src/net/http/h2_bundle.go:7737
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7737
	// _ = "end of CoverTab[39974]"
//line /usr/local/go/src/net/http/h2_bundle.go:7737
	_go_fuzz_dep_.CoverTab[39975]++
							maxHeaderTableSize := t.maxDecoderHeaderTableSize()
							cc.fr.ReadMetaHeaders = hpack.NewDecoder(maxHeaderTableSize, nil)
							cc.fr.MaxHeaderListSize = t.maxHeaderListSize()

							cc.henc = hpack.NewEncoder(&cc.hbuf)
							cc.henc.SetMaxDynamicTableSizeLimit(t.maxEncoderHeaderTableSize())
							cc.peerMaxHeaderTableSize = http2initialHeaderTableSize

							if t.AllowHTTP {
//line /usr/local/go/src/net/http/h2_bundle.go:7746
		_go_fuzz_dep_.CoverTab[39990]++
								cc.nextStreamID = 3
//line /usr/local/go/src/net/http/h2_bundle.go:7747
		// _ = "end of CoverTab[39990]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7748
		_go_fuzz_dep_.CoverTab[39991]++
//line /usr/local/go/src/net/http/h2_bundle.go:7748
		// _ = "end of CoverTab[39991]"
//line /usr/local/go/src/net/http/h2_bundle.go:7748
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7748
	// _ = "end of CoverTab[39975]"
//line /usr/local/go/src/net/http/h2_bundle.go:7748
	_go_fuzz_dep_.CoverTab[39976]++

							if cs, ok := c.(http2connectionStater); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:7750
		_go_fuzz_dep_.CoverTab[39992]++
								state := cs.ConnectionState()
								cc.tlsState = &state
//line /usr/local/go/src/net/http/h2_bundle.go:7752
		// _ = "end of CoverTab[39992]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7753
		_go_fuzz_dep_.CoverTab[39993]++
//line /usr/local/go/src/net/http/h2_bundle.go:7753
		// _ = "end of CoverTab[39993]"
//line /usr/local/go/src/net/http/h2_bundle.go:7753
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7753
	// _ = "end of CoverTab[39976]"
//line /usr/local/go/src/net/http/h2_bundle.go:7753
	_go_fuzz_dep_.CoverTab[39977]++

							initialSettings := []http2Setting{
		{ID: http2SettingEnablePush, Val: 0},
		{ID: http2SettingInitialWindowSize, Val: http2transportDefaultStreamFlow},
	}
	if max := t.maxFrameReadSize(); max != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7759
		_go_fuzz_dep_.CoverTab[39994]++
								initialSettings = append(initialSettings, http2Setting{ID: http2SettingMaxFrameSize, Val: max})
//line /usr/local/go/src/net/http/h2_bundle.go:7760
		// _ = "end of CoverTab[39994]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7761
		_go_fuzz_dep_.CoverTab[39995]++
//line /usr/local/go/src/net/http/h2_bundle.go:7761
		// _ = "end of CoverTab[39995]"
//line /usr/local/go/src/net/http/h2_bundle.go:7761
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7761
	// _ = "end of CoverTab[39977]"
//line /usr/local/go/src/net/http/h2_bundle.go:7761
	_go_fuzz_dep_.CoverTab[39978]++
							if max := t.maxHeaderListSize(); max != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:7762
		_go_fuzz_dep_.CoverTab[39996]++
								initialSettings = append(initialSettings, http2Setting{ID: http2SettingMaxHeaderListSize, Val: max})
//line /usr/local/go/src/net/http/h2_bundle.go:7763
		// _ = "end of CoverTab[39996]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7764
		_go_fuzz_dep_.CoverTab[39997]++
//line /usr/local/go/src/net/http/h2_bundle.go:7764
		// _ = "end of CoverTab[39997]"
//line /usr/local/go/src/net/http/h2_bundle.go:7764
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7764
	// _ = "end of CoverTab[39978]"
//line /usr/local/go/src/net/http/h2_bundle.go:7764
	_go_fuzz_dep_.CoverTab[39979]++
							if maxHeaderTableSize != http2initialHeaderTableSize {
//line /usr/local/go/src/net/http/h2_bundle.go:7765
		_go_fuzz_dep_.CoverTab[39998]++
								initialSettings = append(initialSettings, http2Setting{ID: http2SettingHeaderTableSize, Val: maxHeaderTableSize})
//line /usr/local/go/src/net/http/h2_bundle.go:7766
		// _ = "end of CoverTab[39998]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7767
		_go_fuzz_dep_.CoverTab[39999]++
//line /usr/local/go/src/net/http/h2_bundle.go:7767
		// _ = "end of CoverTab[39999]"
//line /usr/local/go/src/net/http/h2_bundle.go:7767
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7767
	// _ = "end of CoverTab[39979]"
//line /usr/local/go/src/net/http/h2_bundle.go:7767
	_go_fuzz_dep_.CoverTab[39980]++

							cc.bw.Write(http2clientPreface)
							cc.fr.WriteSettings(initialSettings...)
							cc.fr.WriteWindowUpdate(0, http2transportDefaultConnFlow)
							cc.inflow.add(http2transportDefaultConnFlow + http2initialWindowSize)
							cc.bw.Flush()
							if cc.werr != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7774
		_go_fuzz_dep_.CoverTab[40000]++
								cc.Close()
								return nil, cc.werr
//line /usr/local/go/src/net/http/h2_bundle.go:7776
		// _ = "end of CoverTab[40000]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7777
		_go_fuzz_dep_.CoverTab[40001]++
//line /usr/local/go/src/net/http/h2_bundle.go:7777
		// _ = "end of CoverTab[40001]"
//line /usr/local/go/src/net/http/h2_bundle.go:7777
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7777
	// _ = "end of CoverTab[39980]"
//line /usr/local/go/src/net/http/h2_bundle.go:7777
	_go_fuzz_dep_.CoverTab[39981]++
//line /usr/local/go/src/net/http/h2_bundle.go:7777
	_curRoutineNum27_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:7777
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum27_)

							go cc.readLoop()
							return cc, nil
//line /usr/local/go/src/net/http/h2_bundle.go:7780
	// _ = "end of CoverTab[39981]"
}

func (cc *http2ClientConn) healthCheck() {
//line /usr/local/go/src/net/http/h2_bundle.go:7783
	_go_fuzz_dep_.CoverTab[40002]++
							pingTimeout := cc.t.pingTimeout()

//line /usr/local/go/src/net/http/h2_bundle.go:7787
	ctx, cancel := context.WithTimeout(context.Background(), pingTimeout)
	defer cancel()
	cc.vlogf("http2: Transport sending health check")
	err := cc.Ping(ctx)
	if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7791
		_go_fuzz_dep_.CoverTab[40003]++
								cc.vlogf("http2: Transport health check failure: %v", err)
								cc.closeForLostPing()
//line /usr/local/go/src/net/http/h2_bundle.go:7793
		// _ = "end of CoverTab[40003]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7794
		_go_fuzz_dep_.CoverTab[40004]++
								cc.vlogf("http2: Transport health check success")
//line /usr/local/go/src/net/http/h2_bundle.go:7795
		// _ = "end of CoverTab[40004]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7796
	// _ = "end of CoverTab[40002]"
}

// SetDoNotReuse marks cc as not reusable for future HTTP requests.
func (cc *http2ClientConn) SetDoNotReuse() {
//line /usr/local/go/src/net/http/h2_bundle.go:7800
	_go_fuzz_dep_.CoverTab[40005]++
							cc.mu.Lock()
							defer cc.mu.Unlock()
							cc.doNotReuse = true
//line /usr/local/go/src/net/http/h2_bundle.go:7803
	// _ = "end of CoverTab[40005]"
}

func (cc *http2ClientConn) setGoAway(f *http2GoAwayFrame) {
//line /usr/local/go/src/net/http/h2_bundle.go:7806
	_go_fuzz_dep_.CoverTab[40006]++
							cc.mu.Lock()
							defer cc.mu.Unlock()

							old := cc.goAway
							cc.goAway = f

//line /usr/local/go/src/net/http/h2_bundle.go:7814
	if cc.goAwayDebug == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:7814
		_go_fuzz_dep_.CoverTab[40009]++
								cc.goAwayDebug = string(f.DebugData())
//line /usr/local/go/src/net/http/h2_bundle.go:7815
		// _ = "end of CoverTab[40009]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7816
		_go_fuzz_dep_.CoverTab[40010]++
//line /usr/local/go/src/net/http/h2_bundle.go:7816
		// _ = "end of CoverTab[40010]"
//line /usr/local/go/src/net/http/h2_bundle.go:7816
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7816
	// _ = "end of CoverTab[40006]"
//line /usr/local/go/src/net/http/h2_bundle.go:7816
	_go_fuzz_dep_.CoverTab[40007]++
							if old != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7817
		_go_fuzz_dep_.CoverTab[40011]++
//line /usr/local/go/src/net/http/h2_bundle.go:7817
		return old.ErrCode != http2ErrCodeNo
//line /usr/local/go/src/net/http/h2_bundle.go:7817
		// _ = "end of CoverTab[40011]"
//line /usr/local/go/src/net/http/h2_bundle.go:7817
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7817
		_go_fuzz_dep_.CoverTab[40012]++
								cc.goAway.ErrCode = old.ErrCode
//line /usr/local/go/src/net/http/h2_bundle.go:7818
		// _ = "end of CoverTab[40012]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7819
		_go_fuzz_dep_.CoverTab[40013]++
//line /usr/local/go/src/net/http/h2_bundle.go:7819
		// _ = "end of CoverTab[40013]"
//line /usr/local/go/src/net/http/h2_bundle.go:7819
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7819
	// _ = "end of CoverTab[40007]"
//line /usr/local/go/src/net/http/h2_bundle.go:7819
	_go_fuzz_dep_.CoverTab[40008]++
							last := f.LastStreamID
							for streamID, cs := range cc.streams {
//line /usr/local/go/src/net/http/h2_bundle.go:7821
		_go_fuzz_dep_.CoverTab[40014]++
								if streamID > last {
//line /usr/local/go/src/net/http/h2_bundle.go:7822
			_go_fuzz_dep_.CoverTab[40015]++
									cs.abortStreamLocked(http2errClientConnGotGoAway)
//line /usr/local/go/src/net/http/h2_bundle.go:7823
			// _ = "end of CoverTab[40015]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7824
			_go_fuzz_dep_.CoverTab[40016]++
//line /usr/local/go/src/net/http/h2_bundle.go:7824
			// _ = "end of CoverTab[40016]"
//line /usr/local/go/src/net/http/h2_bundle.go:7824
		}
//line /usr/local/go/src/net/http/h2_bundle.go:7824
		// _ = "end of CoverTab[40014]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7825
	// _ = "end of CoverTab[40008]"
}

// CanTakeNewRequest reports whether the connection can take a new request,
//line /usr/local/go/src/net/http/h2_bundle.go:7828
// meaning it has not been closed or received or sent a GOAWAY.
//line /usr/local/go/src/net/http/h2_bundle.go:7828
//
//line /usr/local/go/src/net/http/h2_bundle.go:7828
// If the caller is going to immediately make a new request on this
//line /usr/local/go/src/net/http/h2_bundle.go:7828
// connection, use ReserveNewRequest instead.
//line /usr/local/go/src/net/http/h2_bundle.go:7833
func (cc *http2ClientConn) CanTakeNewRequest() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7833
	_go_fuzz_dep_.CoverTab[40017]++
							cc.mu.Lock()
							defer cc.mu.Unlock()
							return cc.canTakeNewRequestLocked()
//line /usr/local/go/src/net/http/h2_bundle.go:7836
	// _ = "end of CoverTab[40017]"
}

// ReserveNewRequest is like CanTakeNewRequest but also reserves a
//line /usr/local/go/src/net/http/h2_bundle.go:7839
// concurrent stream in cc. The reservation is decremented on the
//line /usr/local/go/src/net/http/h2_bundle.go:7839
// next call to RoundTrip.
//line /usr/local/go/src/net/http/h2_bundle.go:7842
func (cc *http2ClientConn) ReserveNewRequest() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7842
	_go_fuzz_dep_.CoverTab[40018]++
							cc.mu.Lock()
							defer cc.mu.Unlock()
							if st := cc.idleStateLocked(); !st.canTakeNewRequest {
//line /usr/local/go/src/net/http/h2_bundle.go:7845
		_go_fuzz_dep_.CoverTab[40020]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:7846
		// _ = "end of CoverTab[40020]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7847
		_go_fuzz_dep_.CoverTab[40021]++
//line /usr/local/go/src/net/http/h2_bundle.go:7847
		// _ = "end of CoverTab[40021]"
//line /usr/local/go/src/net/http/h2_bundle.go:7847
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7847
	// _ = "end of CoverTab[40018]"
//line /usr/local/go/src/net/http/h2_bundle.go:7847
	_go_fuzz_dep_.CoverTab[40019]++
							cc.streamsReserved++
							return true
//line /usr/local/go/src/net/http/h2_bundle.go:7849
	// _ = "end of CoverTab[40019]"
}

// ClientConnState describes the state of a ClientConn.
type http2ClientConnState struct {
	// Closed is whether the connection is closed.
	Closed	bool

	// Closing is whether the connection is in the process of
	// closing. It may be closing due to shutdown, being a
	// single-use connection, being marked as DoNotReuse, or
	// having received a GOAWAY frame.
	Closing	bool

	// StreamsActive is how many streams are active.
	StreamsActive	int

	// StreamsReserved is how many streams have been reserved via
	// ClientConn.ReserveNewRequest.
	StreamsReserved	int

	// StreamsPending is how many requests have been sent in excess
	// of the peer's advertised MaxConcurrentStreams setting and
	// are waiting for other streams to complete.
	StreamsPending	int

	// MaxConcurrentStreams is how many concurrent streams the
	// peer advertised as acceptable. Zero means no SETTINGS
	// frame has been received yet.
	MaxConcurrentStreams	uint32

	// LastIdle, if non-zero, is when the connection last
	// transitioned to idle state.
	LastIdle	time.Time
}

// State returns a snapshot of cc's state.
func (cc *http2ClientConn) State() http2ClientConnState {
//line /usr/local/go/src/net/http/h2_bundle.go:7886
	_go_fuzz_dep_.CoverTab[40022]++
							cc.wmu.Lock()
							maxConcurrent := cc.maxConcurrentStreams
							if !cc.seenSettings {
//line /usr/local/go/src/net/http/h2_bundle.go:7889
		_go_fuzz_dep_.CoverTab[40024]++
								maxConcurrent = 0
//line /usr/local/go/src/net/http/h2_bundle.go:7890
		// _ = "end of CoverTab[40024]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7891
		_go_fuzz_dep_.CoverTab[40025]++
//line /usr/local/go/src/net/http/h2_bundle.go:7891
		// _ = "end of CoverTab[40025]"
//line /usr/local/go/src/net/http/h2_bundle.go:7891
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7891
	// _ = "end of CoverTab[40022]"
//line /usr/local/go/src/net/http/h2_bundle.go:7891
	_go_fuzz_dep_.CoverTab[40023]++
							cc.wmu.Unlock()

							cc.mu.Lock()
							defer cc.mu.Unlock()
							return http2ClientConnState{
		Closed:	cc.closed,
		Closing: cc.closing || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7898
			_go_fuzz_dep_.CoverTab[40026]++
//line /usr/local/go/src/net/http/h2_bundle.go:7898
			return cc.singleUse
//line /usr/local/go/src/net/http/h2_bundle.go:7898
			// _ = "end of CoverTab[40026]"
//line /usr/local/go/src/net/http/h2_bundle.go:7898
		}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7898
			_go_fuzz_dep_.CoverTab[40027]++
//line /usr/local/go/src/net/http/h2_bundle.go:7898
			return cc.doNotReuse
//line /usr/local/go/src/net/http/h2_bundle.go:7898
			// _ = "end of CoverTab[40027]"
//line /usr/local/go/src/net/http/h2_bundle.go:7898
		}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7898
			_go_fuzz_dep_.CoverTab[40028]++
//line /usr/local/go/src/net/http/h2_bundle.go:7898
			return cc.goAway != nil
//line /usr/local/go/src/net/http/h2_bundle.go:7898
			// _ = "end of CoverTab[40028]"
//line /usr/local/go/src/net/http/h2_bundle.go:7898
		}(),
		StreamsActive:		len(cc.streams),
		StreamsReserved:	cc.streamsReserved,
		StreamsPending:		cc.pendingRequests,
		LastIdle:		cc.lastIdle,
		MaxConcurrentStreams:	maxConcurrent,
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7904
	// _ = "end of CoverTab[40023]"
}

// clientConnIdleState describes the suitability of a client
//line /usr/local/go/src/net/http/h2_bundle.go:7907
// connection to initiate a new RoundTrip request.
//line /usr/local/go/src/net/http/h2_bundle.go:7909
type http2clientConnIdleState struct {
	canTakeNewRequest bool
}

func (cc *http2ClientConn) idleState() http2clientConnIdleState {
//line /usr/local/go/src/net/http/h2_bundle.go:7913
	_go_fuzz_dep_.CoverTab[40029]++
							cc.mu.Lock()
							defer cc.mu.Unlock()
							return cc.idleStateLocked()
//line /usr/local/go/src/net/http/h2_bundle.go:7916
	// _ = "end of CoverTab[40029]"
}

func (cc *http2ClientConn) idleStateLocked() (st http2clientConnIdleState) {
//line /usr/local/go/src/net/http/h2_bundle.go:7919
	_go_fuzz_dep_.CoverTab[40030]++
							if cc.singleUse && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7920
		_go_fuzz_dep_.CoverTab[40033]++
//line /usr/local/go/src/net/http/h2_bundle.go:7920
		return cc.nextStreamID > 1
//line /usr/local/go/src/net/http/h2_bundle.go:7920
		// _ = "end of CoverTab[40033]"
//line /usr/local/go/src/net/http/h2_bundle.go:7920
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7920
		_go_fuzz_dep_.CoverTab[40034]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:7921
		// _ = "end of CoverTab[40034]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7922
		_go_fuzz_dep_.CoverTab[40035]++
//line /usr/local/go/src/net/http/h2_bundle.go:7922
		// _ = "end of CoverTab[40035]"
//line /usr/local/go/src/net/http/h2_bundle.go:7922
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7922
	// _ = "end of CoverTab[40030]"
//line /usr/local/go/src/net/http/h2_bundle.go:7922
	_go_fuzz_dep_.CoverTab[40031]++
							var maxConcurrentOkay bool
							if cc.t.StrictMaxConcurrentStreams {
//line /usr/local/go/src/net/http/h2_bundle.go:7924
		_go_fuzz_dep_.CoverTab[40036]++

//line /usr/local/go/src/net/http/h2_bundle.go:7929
		maxConcurrentOkay = true
//line /usr/local/go/src/net/http/h2_bundle.go:7929
		// _ = "end of CoverTab[40036]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7930
		_go_fuzz_dep_.CoverTab[40037]++
								maxConcurrentOkay = int64(len(cc.streams)+cc.streamsReserved+1) <= int64(cc.maxConcurrentStreams)
//line /usr/local/go/src/net/http/h2_bundle.go:7931
		// _ = "end of CoverTab[40037]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7932
	// _ = "end of CoverTab[40031]"
//line /usr/local/go/src/net/http/h2_bundle.go:7932
	_go_fuzz_dep_.CoverTab[40032]++

							st.canTakeNewRequest = cc.goAway == nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		_go_fuzz_dep_.CoverTab[40038]++
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		return !cc.closed
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		// _ = "end of CoverTab[40038]"
//line /usr/local/go/src/net/http/h2_bundle.go:7934
	}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		_go_fuzz_dep_.CoverTab[40039]++
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		return !cc.closing
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		// _ = "end of CoverTab[40039]"
//line /usr/local/go/src/net/http/h2_bundle.go:7934
	}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		_go_fuzz_dep_.CoverTab[40040]++
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		return maxConcurrentOkay
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		// _ = "end of CoverTab[40040]"
//line /usr/local/go/src/net/http/h2_bundle.go:7934
	}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		_go_fuzz_dep_.CoverTab[40041]++
//line /usr/local/go/src/net/http/h2_bundle.go:7934
		return !cc.doNotReuse
								// _ = "end of CoverTab[40041]"
//line /usr/local/go/src/net/http/h2_bundle.go:7935
	}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7935
		_go_fuzz_dep_.CoverTab[40042]++
//line /usr/local/go/src/net/http/h2_bundle.go:7935
		return int64(cc.nextStreamID)+2*int64(cc.pendingRequests) < math.MaxInt32
								// _ = "end of CoverTab[40042]"
//line /usr/local/go/src/net/http/h2_bundle.go:7936
	}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7936
		_go_fuzz_dep_.CoverTab[40043]++
//line /usr/local/go/src/net/http/h2_bundle.go:7936
		return !cc.tooIdleLocked()
								// _ = "end of CoverTab[40043]"
//line /usr/local/go/src/net/http/h2_bundle.go:7937
	}()
							return
//line /usr/local/go/src/net/http/h2_bundle.go:7938
	// _ = "end of CoverTab[40032]"
}

func (cc *http2ClientConn) canTakeNewRequestLocked() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7941
	_go_fuzz_dep_.CoverTab[40044]++
							st := cc.idleStateLocked()
							return st.canTakeNewRequest
//line /usr/local/go/src/net/http/h2_bundle.go:7943
	// _ = "end of CoverTab[40044]"
}

// tooIdleLocked reports whether this connection has been been sitting idle
//line /usr/local/go/src/net/http/h2_bundle.go:7946
// for too much wall time.
//line /usr/local/go/src/net/http/h2_bundle.go:7948
func (cc *http2ClientConn) tooIdleLocked() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7948
	_go_fuzz_dep_.CoverTab[40045]++

//line /usr/local/go/src/net/http/h2_bundle.go:7953
	return cc.idleTimeout != 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7953
		_go_fuzz_dep_.CoverTab[40046]++
//line /usr/local/go/src/net/http/h2_bundle.go:7953
		return !cc.lastIdle.IsZero()
//line /usr/local/go/src/net/http/h2_bundle.go:7953
		// _ = "end of CoverTab[40046]"
//line /usr/local/go/src/net/http/h2_bundle.go:7953
	}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7953
		_go_fuzz_dep_.CoverTab[40047]++
//line /usr/local/go/src/net/http/h2_bundle.go:7953
		return time.Since(cc.lastIdle.Round(0)) > cc.idleTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:7953
		// _ = "end of CoverTab[40047]"
//line /usr/local/go/src/net/http/h2_bundle.go:7953
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:7953
	// _ = "end of CoverTab[40045]"
}

// onIdleTimeout is called from a time.AfterFunc goroutine. It will
//line /usr/local/go/src/net/http/h2_bundle.go:7956
// only be called when we're idle, but because we're coming from a new
//line /usr/local/go/src/net/http/h2_bundle.go:7956
// goroutine, there could be a new request coming in at the same time,
//line /usr/local/go/src/net/http/h2_bundle.go:7956
// so this simply calls the synchronized closeIfIdle to shut down this
//line /usr/local/go/src/net/http/h2_bundle.go:7956
// connection. The timer could just call closeIfIdle, but this is more
//line /usr/local/go/src/net/http/h2_bundle.go:7956
// clear.
//line /usr/local/go/src/net/http/h2_bundle.go:7962
func (cc *http2ClientConn) onIdleTimeout() {
//line /usr/local/go/src/net/http/h2_bundle.go:7962
	_go_fuzz_dep_.CoverTab[40048]++
							cc.closeIfIdle()
//line /usr/local/go/src/net/http/h2_bundle.go:7963
	// _ = "end of CoverTab[40048]"
}

func (cc *http2ClientConn) closeConn() {
//line /usr/local/go/src/net/http/h2_bundle.go:7966
	_go_fuzz_dep_.CoverTab[40049]++
							t := time.AfterFunc(250*time.Millisecond, cc.forceCloseConn)
							defer t.Stop()
							cc.tconn.Close()
//line /usr/local/go/src/net/http/h2_bundle.go:7969
	// _ = "end of CoverTab[40049]"
}

// A tls.Conn.Close can hang for a long time if the peer is unresponsive.
//line /usr/local/go/src/net/http/h2_bundle.go:7972
// Try to shut it down more aggressively.
//line /usr/local/go/src/net/http/h2_bundle.go:7974
func (cc *http2ClientConn) forceCloseConn() {
//line /usr/local/go/src/net/http/h2_bundle.go:7974
	_go_fuzz_dep_.CoverTab[40050]++
							tc, ok := cc.tconn.(*tls.Conn)
							if !ok {
//line /usr/local/go/src/net/http/h2_bundle.go:7976
		_go_fuzz_dep_.CoverTab[40052]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:7977
		// _ = "end of CoverTab[40052]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7978
		_go_fuzz_dep_.CoverTab[40053]++
//line /usr/local/go/src/net/http/h2_bundle.go:7978
		// _ = "end of CoverTab[40053]"
//line /usr/local/go/src/net/http/h2_bundle.go:7978
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7978
	// _ = "end of CoverTab[40050]"
//line /usr/local/go/src/net/http/h2_bundle.go:7978
	_go_fuzz_dep_.CoverTab[40051]++
							if nc := http2tlsUnderlyingConn(tc); nc != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:7979
		_go_fuzz_dep_.CoverTab[40054]++
								nc.Close()
//line /usr/local/go/src/net/http/h2_bundle.go:7980
		// _ = "end of CoverTab[40054]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7981
		_go_fuzz_dep_.CoverTab[40055]++
//line /usr/local/go/src/net/http/h2_bundle.go:7981
		// _ = "end of CoverTab[40055]"
//line /usr/local/go/src/net/http/h2_bundle.go:7981
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7981
	// _ = "end of CoverTab[40051]"
}

func (cc *http2ClientConn) closeIfIdle() {
//line /usr/local/go/src/net/http/h2_bundle.go:7984
	_go_fuzz_dep_.CoverTab[40056]++
							cc.mu.Lock()
							if len(cc.streams) > 0 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:7986
		_go_fuzz_dep_.CoverTab[40059]++
//line /usr/local/go/src/net/http/h2_bundle.go:7986
		return cc.streamsReserved > 0
//line /usr/local/go/src/net/http/h2_bundle.go:7986
		// _ = "end of CoverTab[40059]"
//line /usr/local/go/src/net/http/h2_bundle.go:7986
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:7986
		_go_fuzz_dep_.CoverTab[40060]++
								cc.mu.Unlock()
								return
//line /usr/local/go/src/net/http/h2_bundle.go:7988
		// _ = "end of CoverTab[40060]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7989
		_go_fuzz_dep_.CoverTab[40061]++
//line /usr/local/go/src/net/http/h2_bundle.go:7989
		// _ = "end of CoverTab[40061]"
//line /usr/local/go/src/net/http/h2_bundle.go:7989
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7989
	// _ = "end of CoverTab[40056]"
//line /usr/local/go/src/net/http/h2_bundle.go:7989
	_go_fuzz_dep_.CoverTab[40057]++
							cc.closed = true
							nextID := cc.nextStreamID

							cc.mu.Unlock()

							if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:7995
		_go_fuzz_dep_.CoverTab[40062]++
								cc.vlogf("http2: Transport closing idle conn %p (forSingleUse=%v, maxStream=%v)", cc, cc.singleUse, nextID-2)
//line /usr/local/go/src/net/http/h2_bundle.go:7996
		// _ = "end of CoverTab[40062]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:7997
		_go_fuzz_dep_.CoverTab[40063]++
//line /usr/local/go/src/net/http/h2_bundle.go:7997
		// _ = "end of CoverTab[40063]"
//line /usr/local/go/src/net/http/h2_bundle.go:7997
	}
//line /usr/local/go/src/net/http/h2_bundle.go:7997
	// _ = "end of CoverTab[40057]"
//line /usr/local/go/src/net/http/h2_bundle.go:7997
	_go_fuzz_dep_.CoverTab[40058]++
							cc.closeConn()
//line /usr/local/go/src/net/http/h2_bundle.go:7998
	// _ = "end of CoverTab[40058]"
}

func (cc *http2ClientConn) isDoNotReuseAndIdle() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8001
	_go_fuzz_dep_.CoverTab[40064]++
							cc.mu.Lock()
							defer cc.mu.Unlock()
							return cc.doNotReuse && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8004
		_go_fuzz_dep_.CoverTab[40065]++
//line /usr/local/go/src/net/http/h2_bundle.go:8004
		return len(cc.streams) == 0
//line /usr/local/go/src/net/http/h2_bundle.go:8004
		// _ = "end of CoverTab[40065]"
//line /usr/local/go/src/net/http/h2_bundle.go:8004
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:8004
	// _ = "end of CoverTab[40064]"
}

var http2shutdownEnterWaitStateHook = func() { _go_fuzz_dep_.CoverTab[40066]++; // _ = "end of CoverTab[40066]" }

// Shutdown gracefully closes the client connection, waiting for running streams to complete.
func (cc *http2ClientConn) Shutdown(ctx context.Context) error {
//line /usr/local/go/src/net/http/h2_bundle.go:8010
	_go_fuzz_dep_.CoverTab[40067]++
							if err := cc.sendGoAway(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8011
		_go_fuzz_dep_.CoverTab[40070]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:8012
		// _ = "end of CoverTab[40070]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8013
		_go_fuzz_dep_.CoverTab[40071]++
//line /usr/local/go/src/net/http/h2_bundle.go:8013
		// _ = "end of CoverTab[40071]"
//line /usr/local/go/src/net/http/h2_bundle.go:8013
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8013
	// _ = "end of CoverTab[40067]"
//line /usr/local/go/src/net/http/h2_bundle.go:8013
	_go_fuzz_dep_.CoverTab[40068]++

							done := make(chan struct{})
							cancelled := false
//line /usr/local/go/src/net/http/h2_bundle.go:8016
	_curRoutineNum28_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:8016
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum28_)
							go func() {
//line /usr/local/go/src/net/http/h2_bundle.go:8017
		_go_fuzz_dep_.CoverTab[40072]++
//line /usr/local/go/src/net/http/h2_bundle.go:8017
		defer func() {
//line /usr/local/go/src/net/http/h2_bundle.go:8017
			_go_fuzz_dep_.CoverTab[40073]++
//line /usr/local/go/src/net/http/h2_bundle.go:8017
			_go_fuzz_dep_.RoutineInfo.AddTerminatedRoutineNum(_curRoutineNum28_)
//line /usr/local/go/src/net/http/h2_bundle.go:8017
			// _ = "end of CoverTab[40073]"
//line /usr/local/go/src/net/http/h2_bundle.go:8017
		}()
								cc.mu.Lock()
								defer cc.mu.Unlock()
								for {
//line /usr/local/go/src/net/http/h2_bundle.go:8020
			_go_fuzz_dep_.CoverTab[40074]++
									if len(cc.streams) == 0 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8021
				_go_fuzz_dep_.CoverTab[40077]++
//line /usr/local/go/src/net/http/h2_bundle.go:8021
				return cc.closed
//line /usr/local/go/src/net/http/h2_bundle.go:8021
				// _ = "end of CoverTab[40077]"
//line /usr/local/go/src/net/http/h2_bundle.go:8021
			}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8021
				_go_fuzz_dep_.CoverTab[40078]++
										cc.closed = true
										close(done)
										break
//line /usr/local/go/src/net/http/h2_bundle.go:8024
				// _ = "end of CoverTab[40078]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8025
				_go_fuzz_dep_.CoverTab[40079]++
//line /usr/local/go/src/net/http/h2_bundle.go:8025
				// _ = "end of CoverTab[40079]"
//line /usr/local/go/src/net/http/h2_bundle.go:8025
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8025
			// _ = "end of CoverTab[40074]"
//line /usr/local/go/src/net/http/h2_bundle.go:8025
			_go_fuzz_dep_.CoverTab[40075]++
									if cancelled {
//line /usr/local/go/src/net/http/h2_bundle.go:8026
				_go_fuzz_dep_.CoverTab[40080]++
										break
//line /usr/local/go/src/net/http/h2_bundle.go:8027
				// _ = "end of CoverTab[40080]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8028
				_go_fuzz_dep_.CoverTab[40081]++
//line /usr/local/go/src/net/http/h2_bundle.go:8028
				// _ = "end of CoverTab[40081]"
//line /usr/local/go/src/net/http/h2_bundle.go:8028
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8028
			// _ = "end of CoverTab[40075]"
//line /usr/local/go/src/net/http/h2_bundle.go:8028
			_go_fuzz_dep_.CoverTab[40076]++
									cc.cond.Wait()
//line /usr/local/go/src/net/http/h2_bundle.go:8029
			// _ = "end of CoverTab[40076]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8030
		// _ = "end of CoverTab[40072]"
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:8031
	// _ = "end of CoverTab[40068]"
//line /usr/local/go/src/net/http/h2_bundle.go:8031
	_go_fuzz_dep_.CoverTab[40069]++
							http2shutdownEnterWaitStateHook()
							select {
	case <-done:
//line /usr/local/go/src/net/http/h2_bundle.go:8034
		_go_fuzz_dep_.CoverTab[40082]++
								cc.closeConn()
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:8036
		// _ = "end of CoverTab[40082]"
	case <-ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:8037
		_go_fuzz_dep_.CoverTab[40083]++
								cc.mu.Lock()

								cancelled = true
								cc.cond.Broadcast()
								cc.mu.Unlock()
								return ctx.Err()
//line /usr/local/go/src/net/http/h2_bundle.go:8043
		// _ = "end of CoverTab[40083]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8044
	// _ = "end of CoverTab[40069]"
}

func (cc *http2ClientConn) sendGoAway() error {
//line /usr/local/go/src/net/http/h2_bundle.go:8047
	_go_fuzz_dep_.CoverTab[40084]++
							cc.mu.Lock()
							closing := cc.closing
							cc.closing = true
							maxStreamID := cc.nextStreamID
							cc.mu.Unlock()
							if closing {
//line /usr/local/go/src/net/http/h2_bundle.go:8053
		_go_fuzz_dep_.CoverTab[40088]++

								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:8055
		// _ = "end of CoverTab[40088]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8056
		_go_fuzz_dep_.CoverTab[40089]++
//line /usr/local/go/src/net/http/h2_bundle.go:8056
		// _ = "end of CoverTab[40089]"
//line /usr/local/go/src/net/http/h2_bundle.go:8056
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8056
	// _ = "end of CoverTab[40084]"
//line /usr/local/go/src/net/http/h2_bundle.go:8056
	_go_fuzz_dep_.CoverTab[40085]++

							cc.wmu.Lock()
							defer cc.wmu.Unlock()

							if err := cc.fr.WriteGoAway(maxStreamID, http2ErrCodeNo, nil); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8061
		_go_fuzz_dep_.CoverTab[40090]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:8062
		// _ = "end of CoverTab[40090]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8063
		_go_fuzz_dep_.CoverTab[40091]++
//line /usr/local/go/src/net/http/h2_bundle.go:8063
		// _ = "end of CoverTab[40091]"
//line /usr/local/go/src/net/http/h2_bundle.go:8063
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8063
	// _ = "end of CoverTab[40085]"
//line /usr/local/go/src/net/http/h2_bundle.go:8063
	_go_fuzz_dep_.CoverTab[40086]++
							if err := cc.bw.Flush(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8064
		_go_fuzz_dep_.CoverTab[40092]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:8065
		// _ = "end of CoverTab[40092]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8066
		_go_fuzz_dep_.CoverTab[40093]++
//line /usr/local/go/src/net/http/h2_bundle.go:8066
		// _ = "end of CoverTab[40093]"
//line /usr/local/go/src/net/http/h2_bundle.go:8066
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8066
	// _ = "end of CoverTab[40086]"
//line /usr/local/go/src/net/http/h2_bundle.go:8066
	_go_fuzz_dep_.CoverTab[40087]++

							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:8068
	// _ = "end of CoverTab[40087]"
}

// closes the client connection immediately. In-flight requests are interrupted.
//line /usr/local/go/src/net/http/h2_bundle.go:8071
// err is sent to streams.
//line /usr/local/go/src/net/http/h2_bundle.go:8073
func (cc *http2ClientConn) closeForError(err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8073
	_go_fuzz_dep_.CoverTab[40094]++
							cc.mu.Lock()
							cc.closed = true
							for _, cs := range cc.streams {
//line /usr/local/go/src/net/http/h2_bundle.go:8076
		_go_fuzz_dep_.CoverTab[40096]++
								cs.abortStreamLocked(err)
//line /usr/local/go/src/net/http/h2_bundle.go:8077
		// _ = "end of CoverTab[40096]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8078
	// _ = "end of CoverTab[40094]"
//line /usr/local/go/src/net/http/h2_bundle.go:8078
	_go_fuzz_dep_.CoverTab[40095]++
							cc.cond.Broadcast()
							cc.mu.Unlock()
							cc.closeConn()
//line /usr/local/go/src/net/http/h2_bundle.go:8081
	// _ = "end of CoverTab[40095]"
}

// Close closes the client connection immediately.
//line /usr/local/go/src/net/http/h2_bundle.go:8084
//
//line /usr/local/go/src/net/http/h2_bundle.go:8084
// In-flight requests are interrupted. For a graceful shutdown, use Shutdown instead.
//line /usr/local/go/src/net/http/h2_bundle.go:8087
func (cc *http2ClientConn) Close() error {
//line /usr/local/go/src/net/http/h2_bundle.go:8087
	_go_fuzz_dep_.CoverTab[40097]++
							err := errors.New("http2: client connection force closed via ClientConn.Close")
							cc.closeForError(err)
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:8090
	// _ = "end of CoverTab[40097]"
}

// closes the client connection immediately. In-flight requests are interrupted.
func (cc *http2ClientConn) closeForLostPing() {
//line /usr/local/go/src/net/http/h2_bundle.go:8094
	_go_fuzz_dep_.CoverTab[40098]++
							err := errors.New("http2: client connection lost")
							if f := cc.t.CountError; f != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8096
		_go_fuzz_dep_.CoverTab[40100]++
								f("conn_close_lost_ping")
//line /usr/local/go/src/net/http/h2_bundle.go:8097
		// _ = "end of CoverTab[40100]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8098
		_go_fuzz_dep_.CoverTab[40101]++
//line /usr/local/go/src/net/http/h2_bundle.go:8098
		// _ = "end of CoverTab[40101]"
//line /usr/local/go/src/net/http/h2_bundle.go:8098
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8098
	// _ = "end of CoverTab[40098]"
//line /usr/local/go/src/net/http/h2_bundle.go:8098
	_go_fuzz_dep_.CoverTab[40099]++
							cc.closeForError(err)
//line /usr/local/go/src/net/http/h2_bundle.go:8099
	// _ = "end of CoverTab[40099]"
}

// errRequestCanceled is a copy of net/http's errRequestCanceled because it's not
//line /usr/local/go/src/net/http/h2_bundle.go:8102
// exported. At least they'll be DeepEqual for h1-vs-h2 comparisons tests.
//line /usr/local/go/src/net/http/h2_bundle.go:8104
var http2errRequestCanceled = errors.New("net/http: request canceled")

func http2commaSeparatedTrailers(req *Request) (string, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8106
	_go_fuzz_dep_.CoverTab[40102]++
							keys := make([]string, 0, len(req.Trailer))
							for k := range req.Trailer {
//line /usr/local/go/src/net/http/h2_bundle.go:8108
		_go_fuzz_dep_.CoverTab[40105]++
								k = http2canonicalHeader(k)
								switch k {
		case "Transfer-Encoding", "Trailer", "Content-Length":
//line /usr/local/go/src/net/http/h2_bundle.go:8111
			_go_fuzz_dep_.CoverTab[40107]++
									return "", fmt.Errorf("invalid Trailer key %q", k)
//line /usr/local/go/src/net/http/h2_bundle.go:8112
			// _ = "end of CoverTab[40107]"
//line /usr/local/go/src/net/http/h2_bundle.go:8112
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:8112
			_go_fuzz_dep_.CoverTab[40108]++
//line /usr/local/go/src/net/http/h2_bundle.go:8112
			// _ = "end of CoverTab[40108]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8113
		// _ = "end of CoverTab[40105]"
//line /usr/local/go/src/net/http/h2_bundle.go:8113
		_go_fuzz_dep_.CoverTab[40106]++
								keys = append(keys, k)
//line /usr/local/go/src/net/http/h2_bundle.go:8114
		// _ = "end of CoverTab[40106]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8115
	// _ = "end of CoverTab[40102]"
//line /usr/local/go/src/net/http/h2_bundle.go:8115
	_go_fuzz_dep_.CoverTab[40103]++
							if len(keys) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8116
		_go_fuzz_dep_.CoverTab[40109]++
								sort.Strings(keys)
								return strings.Join(keys, ","), nil
//line /usr/local/go/src/net/http/h2_bundle.go:8118
		// _ = "end of CoverTab[40109]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8119
		_go_fuzz_dep_.CoverTab[40110]++
//line /usr/local/go/src/net/http/h2_bundle.go:8119
		// _ = "end of CoverTab[40110]"
//line /usr/local/go/src/net/http/h2_bundle.go:8119
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8119
	// _ = "end of CoverTab[40103]"
//line /usr/local/go/src/net/http/h2_bundle.go:8119
	_go_fuzz_dep_.CoverTab[40104]++
							return "", nil
//line /usr/local/go/src/net/http/h2_bundle.go:8120
	// _ = "end of CoverTab[40104]"
}

func (cc *http2ClientConn) responseHeaderTimeout() time.Duration {
//line /usr/local/go/src/net/http/h2_bundle.go:8123
	_go_fuzz_dep_.CoverTab[40111]++
							if cc.t.t1 != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8124
		_go_fuzz_dep_.CoverTab[40113]++
								return cc.t.t1.ResponseHeaderTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:8125
		// _ = "end of CoverTab[40113]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8126
		_go_fuzz_dep_.CoverTab[40114]++
//line /usr/local/go/src/net/http/h2_bundle.go:8126
		// _ = "end of CoverTab[40114]"
//line /usr/local/go/src/net/http/h2_bundle.go:8126
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8126
	// _ = "end of CoverTab[40111]"
//line /usr/local/go/src/net/http/h2_bundle.go:8126
	_go_fuzz_dep_.CoverTab[40112]++

//line /usr/local/go/src/net/http/h2_bundle.go:8131
	return 0
//line /usr/local/go/src/net/http/h2_bundle.go:8131
	// _ = "end of CoverTab[40112]"
}

// checkConnHeaders checks whether req has any invalid connection-level headers.
//line /usr/local/go/src/net/http/h2_bundle.go:8134
// per RFC 7540 section 8.1.2.2: Connection-Specific Header Fields.
//line /usr/local/go/src/net/http/h2_bundle.go:8134
// Certain headers are special-cased as okay but not transmitted later.
//line /usr/local/go/src/net/http/h2_bundle.go:8137
func http2checkConnHeaders(req *Request) error {
//line /usr/local/go/src/net/http/h2_bundle.go:8137
	_go_fuzz_dep_.CoverTab[40115]++
							if v := req.Header.Get("Upgrade"); v != "" {
//line /usr/local/go/src/net/http/h2_bundle.go:8138
		_go_fuzz_dep_.CoverTab[40119]++
								return fmt.Errorf("http2: invalid Upgrade request header: %q", req.Header["Upgrade"])
//line /usr/local/go/src/net/http/h2_bundle.go:8139
		// _ = "end of CoverTab[40119]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8140
		_go_fuzz_dep_.CoverTab[40120]++
//line /usr/local/go/src/net/http/h2_bundle.go:8140
		// _ = "end of CoverTab[40120]"
//line /usr/local/go/src/net/http/h2_bundle.go:8140
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8140
	// _ = "end of CoverTab[40115]"
//line /usr/local/go/src/net/http/h2_bundle.go:8140
	_go_fuzz_dep_.CoverTab[40116]++
							if vv := req.Header["Transfer-Encoding"]; len(vv) > 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8141
		_go_fuzz_dep_.CoverTab[40121]++
//line /usr/local/go/src/net/http/h2_bundle.go:8141
		return (len(vv) > 1 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8141
			_go_fuzz_dep_.CoverTab[40122]++
//line /usr/local/go/src/net/http/h2_bundle.go:8141
			return vv[0] != "" && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8141
				_go_fuzz_dep_.CoverTab[40123]++
//line /usr/local/go/src/net/http/h2_bundle.go:8141
				return vv[0] != "chunked"
//line /usr/local/go/src/net/http/h2_bundle.go:8141
				// _ = "end of CoverTab[40123]"
//line /usr/local/go/src/net/http/h2_bundle.go:8141
			}()
//line /usr/local/go/src/net/http/h2_bundle.go:8141
			// _ = "end of CoverTab[40122]"
//line /usr/local/go/src/net/http/h2_bundle.go:8141
		}())
//line /usr/local/go/src/net/http/h2_bundle.go:8141
		// _ = "end of CoverTab[40121]"
//line /usr/local/go/src/net/http/h2_bundle.go:8141
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8141
		_go_fuzz_dep_.CoverTab[40124]++
								return fmt.Errorf("http2: invalid Transfer-Encoding request header: %q", vv)
//line /usr/local/go/src/net/http/h2_bundle.go:8142
		// _ = "end of CoverTab[40124]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8143
		_go_fuzz_dep_.CoverTab[40125]++
//line /usr/local/go/src/net/http/h2_bundle.go:8143
		// _ = "end of CoverTab[40125]"
//line /usr/local/go/src/net/http/h2_bundle.go:8143
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8143
	// _ = "end of CoverTab[40116]"
//line /usr/local/go/src/net/http/h2_bundle.go:8143
	_go_fuzz_dep_.CoverTab[40117]++
							if vv := req.Header["Connection"]; len(vv) > 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8144
		_go_fuzz_dep_.CoverTab[40126]++
//line /usr/local/go/src/net/http/h2_bundle.go:8144
		return (len(vv) > 1 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8144
			_go_fuzz_dep_.CoverTab[40127]++
//line /usr/local/go/src/net/http/h2_bundle.go:8144
			return vv[0] != "" && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8144
				_go_fuzz_dep_.CoverTab[40128]++
//line /usr/local/go/src/net/http/h2_bundle.go:8144
				return !http2asciiEqualFold(vv[0], "close")
//line /usr/local/go/src/net/http/h2_bundle.go:8144
				// _ = "end of CoverTab[40128]"
//line /usr/local/go/src/net/http/h2_bundle.go:8144
			}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8144
				_go_fuzz_dep_.CoverTab[40129]++
//line /usr/local/go/src/net/http/h2_bundle.go:8144
				return !http2asciiEqualFold(vv[0], "keep-alive")
//line /usr/local/go/src/net/http/h2_bundle.go:8144
				// _ = "end of CoverTab[40129]"
//line /usr/local/go/src/net/http/h2_bundle.go:8144
			}()
//line /usr/local/go/src/net/http/h2_bundle.go:8144
			// _ = "end of CoverTab[40127]"
//line /usr/local/go/src/net/http/h2_bundle.go:8144
		}())
//line /usr/local/go/src/net/http/h2_bundle.go:8144
		// _ = "end of CoverTab[40126]"
//line /usr/local/go/src/net/http/h2_bundle.go:8144
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8144
		_go_fuzz_dep_.CoverTab[40130]++
								return fmt.Errorf("http2: invalid Connection request header: %q", vv)
//line /usr/local/go/src/net/http/h2_bundle.go:8145
		// _ = "end of CoverTab[40130]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8146
		_go_fuzz_dep_.CoverTab[40131]++
//line /usr/local/go/src/net/http/h2_bundle.go:8146
		// _ = "end of CoverTab[40131]"
//line /usr/local/go/src/net/http/h2_bundle.go:8146
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8146
	// _ = "end of CoverTab[40117]"
//line /usr/local/go/src/net/http/h2_bundle.go:8146
	_go_fuzz_dep_.CoverTab[40118]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:8147
	// _ = "end of CoverTab[40118]"
}

// actualContentLength returns a sanitized version of
//line /usr/local/go/src/net/http/h2_bundle.go:8150
// req.ContentLength, where 0 actually means zero (not unknown) and -1
//line /usr/local/go/src/net/http/h2_bundle.go:8150
// means unknown.
//line /usr/local/go/src/net/http/h2_bundle.go:8153
func http2actualContentLength(req *Request) int64 {
//line /usr/local/go/src/net/http/h2_bundle.go:8153
	_go_fuzz_dep_.CoverTab[40132]++
							if req.Body == nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8154
		_go_fuzz_dep_.CoverTab[40135]++
//line /usr/local/go/src/net/http/h2_bundle.go:8154
		return req.Body == NoBody
//line /usr/local/go/src/net/http/h2_bundle.go:8154
		// _ = "end of CoverTab[40135]"
//line /usr/local/go/src/net/http/h2_bundle.go:8154
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8154
		_go_fuzz_dep_.CoverTab[40136]++
								return 0
//line /usr/local/go/src/net/http/h2_bundle.go:8155
		// _ = "end of CoverTab[40136]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8156
		_go_fuzz_dep_.CoverTab[40137]++
//line /usr/local/go/src/net/http/h2_bundle.go:8156
		// _ = "end of CoverTab[40137]"
//line /usr/local/go/src/net/http/h2_bundle.go:8156
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8156
	// _ = "end of CoverTab[40132]"
//line /usr/local/go/src/net/http/h2_bundle.go:8156
	_go_fuzz_dep_.CoverTab[40133]++
							if req.ContentLength != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8157
		_go_fuzz_dep_.CoverTab[40138]++
								return req.ContentLength
//line /usr/local/go/src/net/http/h2_bundle.go:8158
		// _ = "end of CoverTab[40138]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8159
		_go_fuzz_dep_.CoverTab[40139]++
//line /usr/local/go/src/net/http/h2_bundle.go:8159
		// _ = "end of CoverTab[40139]"
//line /usr/local/go/src/net/http/h2_bundle.go:8159
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8159
	// _ = "end of CoverTab[40133]"
//line /usr/local/go/src/net/http/h2_bundle.go:8159
	_go_fuzz_dep_.CoverTab[40134]++
							return -1
//line /usr/local/go/src/net/http/h2_bundle.go:8160
	// _ = "end of CoverTab[40134]"
}

func (cc *http2ClientConn) decrStreamReservations() {
//line /usr/local/go/src/net/http/h2_bundle.go:8163
	_go_fuzz_dep_.CoverTab[40140]++
							cc.mu.Lock()
							defer cc.mu.Unlock()
							cc.decrStreamReservationsLocked()
//line /usr/local/go/src/net/http/h2_bundle.go:8166
	// _ = "end of CoverTab[40140]"
}

func (cc *http2ClientConn) decrStreamReservationsLocked() {
//line /usr/local/go/src/net/http/h2_bundle.go:8169
	_go_fuzz_dep_.CoverTab[40141]++
							if cc.streamsReserved > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8170
		_go_fuzz_dep_.CoverTab[40142]++
								cc.streamsReserved--
//line /usr/local/go/src/net/http/h2_bundle.go:8171
		// _ = "end of CoverTab[40142]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8172
		_go_fuzz_dep_.CoverTab[40143]++
//line /usr/local/go/src/net/http/h2_bundle.go:8172
		// _ = "end of CoverTab[40143]"
//line /usr/local/go/src/net/http/h2_bundle.go:8172
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8172
	// _ = "end of CoverTab[40141]"
}

func (cc *http2ClientConn) RoundTrip(req *Request) (*Response, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8175
	_go_fuzz_dep_.CoverTab[40144]++
							ctx := req.Context()
							cs := &http2clientStream{
		cc:			cc,
		ctx:			ctx,
		reqCancel:		req.Cancel,
		isHead:			req.Method == "HEAD",
		reqBody:		req.Body,
		reqBodyContentLength:	http2actualContentLength(req),
		trace:			httptrace.ContextClientTrace(ctx),
		peerClosed:		make(chan struct{}),
		abort:			make(chan struct{}),
		respHeaderRecv:		make(chan struct{}),
		donec:			make(chan struct{}),
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8189
	_curRoutineNum29_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:8189
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum29_)
							go cs.doRequest(req)

							waitDone := func() error {
//line /usr/local/go/src/net/http/h2_bundle.go:8192
		_go_fuzz_dep_.CoverTab[40147]++
								select {
		case <-cs.donec:
//line /usr/local/go/src/net/http/h2_bundle.go:8194
			_go_fuzz_dep_.CoverTab[40148]++
									return nil
//line /usr/local/go/src/net/http/h2_bundle.go:8195
			// _ = "end of CoverTab[40148]"
		case <-ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:8196
			_go_fuzz_dep_.CoverTab[40149]++
									return ctx.Err()
//line /usr/local/go/src/net/http/h2_bundle.go:8197
			// _ = "end of CoverTab[40149]"
		case <-cs.reqCancel:
//line /usr/local/go/src/net/http/h2_bundle.go:8198
			_go_fuzz_dep_.CoverTab[40150]++
									return http2errRequestCanceled
//line /usr/local/go/src/net/http/h2_bundle.go:8199
			// _ = "end of CoverTab[40150]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8200
		// _ = "end of CoverTab[40147]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8201
	// _ = "end of CoverTab[40144]"
//line /usr/local/go/src/net/http/h2_bundle.go:8201
	_go_fuzz_dep_.CoverTab[40145]++

							handleResponseHeaders := func() (*Response, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8203
		_go_fuzz_dep_.CoverTab[40151]++
								res := cs.res
								if res.StatusCode > 299 {
//line /usr/local/go/src/net/http/h2_bundle.go:8205
			_go_fuzz_dep_.CoverTab[40154]++

//line /usr/local/go/src/net/http/h2_bundle.go:8215
			cs.abortRequestBodyWrite()
//line /usr/local/go/src/net/http/h2_bundle.go:8215
			// _ = "end of CoverTab[40154]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8216
			_go_fuzz_dep_.CoverTab[40155]++
//line /usr/local/go/src/net/http/h2_bundle.go:8216
			// _ = "end of CoverTab[40155]"
//line /usr/local/go/src/net/http/h2_bundle.go:8216
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8216
		// _ = "end of CoverTab[40151]"
//line /usr/local/go/src/net/http/h2_bundle.go:8216
		_go_fuzz_dep_.CoverTab[40152]++
								res.Request = req
								res.TLS = cc.tlsState
								if res.Body == http2noBody && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8219
			_go_fuzz_dep_.CoverTab[40156]++
//line /usr/local/go/src/net/http/h2_bundle.go:8219
			return http2actualContentLength(req) == 0
//line /usr/local/go/src/net/http/h2_bundle.go:8219
			// _ = "end of CoverTab[40156]"
//line /usr/local/go/src/net/http/h2_bundle.go:8219
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8219
			_go_fuzz_dep_.CoverTab[40157]++

//line /usr/local/go/src/net/http/h2_bundle.go:8223
			if err := waitDone(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8223
				_go_fuzz_dep_.CoverTab[40158]++
										return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:8224
				// _ = "end of CoverTab[40158]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8225
				_go_fuzz_dep_.CoverTab[40159]++
//line /usr/local/go/src/net/http/h2_bundle.go:8225
				// _ = "end of CoverTab[40159]"
//line /usr/local/go/src/net/http/h2_bundle.go:8225
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8225
			// _ = "end of CoverTab[40157]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8226
			_go_fuzz_dep_.CoverTab[40160]++
//line /usr/local/go/src/net/http/h2_bundle.go:8226
			// _ = "end of CoverTab[40160]"
//line /usr/local/go/src/net/http/h2_bundle.go:8226
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8226
		// _ = "end of CoverTab[40152]"
//line /usr/local/go/src/net/http/h2_bundle.go:8226
		_go_fuzz_dep_.CoverTab[40153]++
								return res, nil
//line /usr/local/go/src/net/http/h2_bundle.go:8227
		// _ = "end of CoverTab[40153]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8228
	// _ = "end of CoverTab[40145]"
//line /usr/local/go/src/net/http/h2_bundle.go:8228
	_go_fuzz_dep_.CoverTab[40146]++

							for {
//line /usr/local/go/src/net/http/h2_bundle.go:8230
		_go_fuzz_dep_.CoverTab[40161]++
								select {
		case <-cs.respHeaderRecv:
//line /usr/local/go/src/net/http/h2_bundle.go:8232
			_go_fuzz_dep_.CoverTab[40162]++
									return handleResponseHeaders()
//line /usr/local/go/src/net/http/h2_bundle.go:8233
			// _ = "end of CoverTab[40162]"
		case <-cs.abort:
//line /usr/local/go/src/net/http/h2_bundle.go:8234
			_go_fuzz_dep_.CoverTab[40163]++
									select {
			case <-cs.respHeaderRecv:
//line /usr/local/go/src/net/http/h2_bundle.go:8236
				_go_fuzz_dep_.CoverTab[40166]++

//line /usr/local/go/src/net/http/h2_bundle.go:8241
				return handleResponseHeaders()
//line /usr/local/go/src/net/http/h2_bundle.go:8241
				// _ = "end of CoverTab[40166]"
			default:
//line /usr/local/go/src/net/http/h2_bundle.go:8242
				_go_fuzz_dep_.CoverTab[40167]++
										waitDone()
										return nil, cs.abortErr
//line /usr/local/go/src/net/http/h2_bundle.go:8244
				// _ = "end of CoverTab[40167]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8245
			// _ = "end of CoverTab[40163]"
		case <-ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:8246
			_go_fuzz_dep_.CoverTab[40164]++
									err := ctx.Err()
									cs.abortStream(err)
									return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:8249
			// _ = "end of CoverTab[40164]"
		case <-cs.reqCancel:
//line /usr/local/go/src/net/http/h2_bundle.go:8250
			_go_fuzz_dep_.CoverTab[40165]++
									cs.abortStream(http2errRequestCanceled)
									return nil, http2errRequestCanceled
//line /usr/local/go/src/net/http/h2_bundle.go:8252
			// _ = "end of CoverTab[40165]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8253
		// _ = "end of CoverTab[40161]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8254
	// _ = "end of CoverTab[40146]"
}

// doRequest runs for the duration of the request lifetime.
//line /usr/local/go/src/net/http/h2_bundle.go:8257
//
//line /usr/local/go/src/net/http/h2_bundle.go:8257
// It sends the request and performs post-request cleanup (closing Request.Body, etc.).
//line /usr/local/go/src/net/http/h2_bundle.go:8260
func (cs *http2clientStream) doRequest(req *Request) {
//line /usr/local/go/src/net/http/h2_bundle.go:8260
	_go_fuzz_dep_.CoverTab[40168]++
							err := cs.writeRequest(req)
							cs.cleanupWriteRequest(err)
//line /usr/local/go/src/net/http/h2_bundle.go:8262
	// _ = "end of CoverTab[40168]"
}

// writeRequest sends a request.
//line /usr/local/go/src/net/http/h2_bundle.go:8265
//
//line /usr/local/go/src/net/http/h2_bundle.go:8265
// It returns nil after the request is written, the response read,
//line /usr/local/go/src/net/http/h2_bundle.go:8265
// and the request stream is half-closed by the peer.
//line /usr/local/go/src/net/http/h2_bundle.go:8265
//
//line /usr/local/go/src/net/http/h2_bundle.go:8265
// It returns non-nil if the request ends otherwise.
//line /usr/local/go/src/net/http/h2_bundle.go:8265
// If the returned error is StreamError, the error Code may be used in resetting the stream.
//line /usr/local/go/src/net/http/h2_bundle.go:8272
func (cs *http2clientStream) writeRequest(req *Request) (err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8272
	_go_fuzz_dep_.CoverTab[40169]++
							cc := cs.cc
							ctx := cs.ctx

							if err := http2checkConnHeaders(req); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8276
		_go_fuzz_dep_.CoverTab[40181]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:8277
		// _ = "end of CoverTab[40181]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8278
		_go_fuzz_dep_.CoverTab[40182]++
//line /usr/local/go/src/net/http/h2_bundle.go:8278
		// _ = "end of CoverTab[40182]"
//line /usr/local/go/src/net/http/h2_bundle.go:8278
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8278
	// _ = "end of CoverTab[40169]"
//line /usr/local/go/src/net/http/h2_bundle.go:8278
	_go_fuzz_dep_.CoverTab[40170]++

//line /usr/local/go/src/net/http/h2_bundle.go:8283
	if cc.reqHeaderMu == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8283
		_go_fuzz_dep_.CoverTab[40183]++
								panic("RoundTrip on uninitialized ClientConn")
//line /usr/local/go/src/net/http/h2_bundle.go:8284
		// _ = "end of CoverTab[40183]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8285
		_go_fuzz_dep_.CoverTab[40184]++
//line /usr/local/go/src/net/http/h2_bundle.go:8285
		// _ = "end of CoverTab[40184]"
//line /usr/local/go/src/net/http/h2_bundle.go:8285
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8285
	// _ = "end of CoverTab[40170]"
//line /usr/local/go/src/net/http/h2_bundle.go:8285
	_go_fuzz_dep_.CoverTab[40171]++
							select {
	case cc.reqHeaderMu <- struct{}{}:
//line /usr/local/go/src/net/http/h2_bundle.go:8287
		_go_fuzz_dep_.CoverTab[40185]++
//line /usr/local/go/src/net/http/h2_bundle.go:8287
		// _ = "end of CoverTab[40185]"
	case <-cs.reqCancel:
//line /usr/local/go/src/net/http/h2_bundle.go:8288
		_go_fuzz_dep_.CoverTab[40186]++
								return http2errRequestCanceled
//line /usr/local/go/src/net/http/h2_bundle.go:8289
		// _ = "end of CoverTab[40186]"
	case <-ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:8290
		_go_fuzz_dep_.CoverTab[40187]++
								return ctx.Err()
//line /usr/local/go/src/net/http/h2_bundle.go:8291
		// _ = "end of CoverTab[40187]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8292
	// _ = "end of CoverTab[40171]"
//line /usr/local/go/src/net/http/h2_bundle.go:8292
	_go_fuzz_dep_.CoverTab[40172]++

							cc.mu.Lock()
							if cc.idleTimer != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8295
		_go_fuzz_dep_.CoverTab[40188]++
								cc.idleTimer.Stop()
//line /usr/local/go/src/net/http/h2_bundle.go:8296
		// _ = "end of CoverTab[40188]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8297
		_go_fuzz_dep_.CoverTab[40189]++
//line /usr/local/go/src/net/http/h2_bundle.go:8297
		// _ = "end of CoverTab[40189]"
//line /usr/local/go/src/net/http/h2_bundle.go:8297
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8297
	// _ = "end of CoverTab[40172]"
//line /usr/local/go/src/net/http/h2_bundle.go:8297
	_go_fuzz_dep_.CoverTab[40173]++
							cc.decrStreamReservationsLocked()
							if err := cc.awaitOpenSlotForStreamLocked(cs); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8299
		_go_fuzz_dep_.CoverTab[40190]++
								cc.mu.Unlock()
								<-cc.reqHeaderMu
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:8302
		// _ = "end of CoverTab[40190]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8303
		_go_fuzz_dep_.CoverTab[40191]++
//line /usr/local/go/src/net/http/h2_bundle.go:8303
		// _ = "end of CoverTab[40191]"
//line /usr/local/go/src/net/http/h2_bundle.go:8303
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8303
	// _ = "end of CoverTab[40173]"
//line /usr/local/go/src/net/http/h2_bundle.go:8303
	_go_fuzz_dep_.CoverTab[40174]++
							cc.addStreamLocked(cs)
							if http2isConnectionCloseRequest(req) {
//line /usr/local/go/src/net/http/h2_bundle.go:8305
		_go_fuzz_dep_.CoverTab[40192]++
								cc.doNotReuse = true
//line /usr/local/go/src/net/http/h2_bundle.go:8306
		// _ = "end of CoverTab[40192]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8307
		_go_fuzz_dep_.CoverTab[40193]++
//line /usr/local/go/src/net/http/h2_bundle.go:8307
		// _ = "end of CoverTab[40193]"
//line /usr/local/go/src/net/http/h2_bundle.go:8307
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8307
	// _ = "end of CoverTab[40174]"
//line /usr/local/go/src/net/http/h2_bundle.go:8307
	_go_fuzz_dep_.CoverTab[40175]++
							cc.mu.Unlock()

//line /usr/local/go/src/net/http/h2_bundle.go:8311
	if !cc.t.disableCompression() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8311
		_go_fuzz_dep_.CoverTab[40194]++
//line /usr/local/go/src/net/http/h2_bundle.go:8311
		return req.Header.Get("Accept-Encoding") == ""
								// _ = "end of CoverTab[40194]"
//line /usr/local/go/src/net/http/h2_bundle.go:8312
	}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8312
		_go_fuzz_dep_.CoverTab[40195]++
//line /usr/local/go/src/net/http/h2_bundle.go:8312
		return req.Header.Get("Range") == ""
								// _ = "end of CoverTab[40195]"
//line /usr/local/go/src/net/http/h2_bundle.go:8313
	}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8313
		_go_fuzz_dep_.CoverTab[40196]++
//line /usr/local/go/src/net/http/h2_bundle.go:8313
		return !cs.isHead
								// _ = "end of CoverTab[40196]"
//line /usr/local/go/src/net/http/h2_bundle.go:8314
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8314
		_go_fuzz_dep_.CoverTab[40197]++

//line /usr/local/go/src/net/http/h2_bundle.go:8327
		cs.requestedGzip = true
//line /usr/local/go/src/net/http/h2_bundle.go:8327
		// _ = "end of CoverTab[40197]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8328
		_go_fuzz_dep_.CoverTab[40198]++
//line /usr/local/go/src/net/http/h2_bundle.go:8328
		// _ = "end of CoverTab[40198]"
//line /usr/local/go/src/net/http/h2_bundle.go:8328
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8328
	// _ = "end of CoverTab[40175]"
//line /usr/local/go/src/net/http/h2_bundle.go:8328
	_go_fuzz_dep_.CoverTab[40176]++

							continueTimeout := cc.t.expectContinueTimeout()
							if continueTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8331
		_go_fuzz_dep_.CoverTab[40199]++
								if !httpguts.HeaderValuesContainsToken(req.Header["Expect"], "100-continue") {
//line /usr/local/go/src/net/http/h2_bundle.go:8332
			_go_fuzz_dep_.CoverTab[40200]++
									continueTimeout = 0
//line /usr/local/go/src/net/http/h2_bundle.go:8333
			// _ = "end of CoverTab[40200]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8334
			_go_fuzz_dep_.CoverTab[40201]++
									cs.on100 = make(chan struct{}, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:8335
			// _ = "end of CoverTab[40201]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8336
		// _ = "end of CoverTab[40199]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8337
		_go_fuzz_dep_.CoverTab[40202]++
//line /usr/local/go/src/net/http/h2_bundle.go:8337
		// _ = "end of CoverTab[40202]"
//line /usr/local/go/src/net/http/h2_bundle.go:8337
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8337
	// _ = "end of CoverTab[40176]"
//line /usr/local/go/src/net/http/h2_bundle.go:8337
	_go_fuzz_dep_.CoverTab[40177]++

//line /usr/local/go/src/net/http/h2_bundle.go:8343
	err = cs.encodeAndWriteHeaders(req)
	<-cc.reqHeaderMu
	if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8345
		_go_fuzz_dep_.CoverTab[40203]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:8346
		// _ = "end of CoverTab[40203]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8347
		_go_fuzz_dep_.CoverTab[40204]++
//line /usr/local/go/src/net/http/h2_bundle.go:8347
		// _ = "end of CoverTab[40204]"
//line /usr/local/go/src/net/http/h2_bundle.go:8347
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8347
	// _ = "end of CoverTab[40177]"
//line /usr/local/go/src/net/http/h2_bundle.go:8347
	_go_fuzz_dep_.CoverTab[40178]++

							hasBody := cs.reqBodyContentLength != 0
							if !hasBody {
//line /usr/local/go/src/net/http/h2_bundle.go:8350
		_go_fuzz_dep_.CoverTab[40205]++
								cs.sentEndStream = true
//line /usr/local/go/src/net/http/h2_bundle.go:8351
		// _ = "end of CoverTab[40205]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8352
		_go_fuzz_dep_.CoverTab[40206]++
								if continueTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8353
			_go_fuzz_dep_.CoverTab[40208]++
									http2traceWait100Continue(cs.trace)
									timer := time.NewTimer(continueTimeout)
									select {
			case <-timer.C:
//line /usr/local/go/src/net/http/h2_bundle.go:8357
				_go_fuzz_dep_.CoverTab[40210]++
										err = nil
//line /usr/local/go/src/net/http/h2_bundle.go:8358
				// _ = "end of CoverTab[40210]"
			case <-cs.on100:
//line /usr/local/go/src/net/http/h2_bundle.go:8359
				_go_fuzz_dep_.CoverTab[40211]++
										err = nil
//line /usr/local/go/src/net/http/h2_bundle.go:8360
				// _ = "end of CoverTab[40211]"
			case <-cs.abort:
//line /usr/local/go/src/net/http/h2_bundle.go:8361
				_go_fuzz_dep_.CoverTab[40212]++
										err = cs.abortErr
//line /usr/local/go/src/net/http/h2_bundle.go:8362
				// _ = "end of CoverTab[40212]"
			case <-ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:8363
				_go_fuzz_dep_.CoverTab[40213]++
										err = ctx.Err()
//line /usr/local/go/src/net/http/h2_bundle.go:8364
				// _ = "end of CoverTab[40213]"
			case <-cs.reqCancel:
//line /usr/local/go/src/net/http/h2_bundle.go:8365
				_go_fuzz_dep_.CoverTab[40214]++
										err = http2errRequestCanceled
//line /usr/local/go/src/net/http/h2_bundle.go:8366
				// _ = "end of CoverTab[40214]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8367
			// _ = "end of CoverTab[40208]"
//line /usr/local/go/src/net/http/h2_bundle.go:8367
			_go_fuzz_dep_.CoverTab[40209]++
									timer.Stop()
									if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8369
				_go_fuzz_dep_.CoverTab[40215]++
										http2traceWroteRequest(cs.trace, err)
										return err
//line /usr/local/go/src/net/http/h2_bundle.go:8371
				// _ = "end of CoverTab[40215]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8372
				_go_fuzz_dep_.CoverTab[40216]++
//line /usr/local/go/src/net/http/h2_bundle.go:8372
				// _ = "end of CoverTab[40216]"
//line /usr/local/go/src/net/http/h2_bundle.go:8372
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8372
			// _ = "end of CoverTab[40209]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8373
			_go_fuzz_dep_.CoverTab[40217]++
//line /usr/local/go/src/net/http/h2_bundle.go:8373
			// _ = "end of CoverTab[40217]"
//line /usr/local/go/src/net/http/h2_bundle.go:8373
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8373
		// _ = "end of CoverTab[40206]"
//line /usr/local/go/src/net/http/h2_bundle.go:8373
		_go_fuzz_dep_.CoverTab[40207]++

								if err = cs.writeRequestBody(req); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8375
			_go_fuzz_dep_.CoverTab[40218]++
									if err != http2errStopReqBodyWrite {
//line /usr/local/go/src/net/http/h2_bundle.go:8376
				_go_fuzz_dep_.CoverTab[40219]++
										http2traceWroteRequest(cs.trace, err)
										return err
//line /usr/local/go/src/net/http/h2_bundle.go:8378
				// _ = "end of CoverTab[40219]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8379
				_go_fuzz_dep_.CoverTab[40220]++
//line /usr/local/go/src/net/http/h2_bundle.go:8379
				// _ = "end of CoverTab[40220]"
//line /usr/local/go/src/net/http/h2_bundle.go:8379
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8379
			// _ = "end of CoverTab[40218]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8380
			_go_fuzz_dep_.CoverTab[40221]++
									cs.sentEndStream = true
//line /usr/local/go/src/net/http/h2_bundle.go:8381
			// _ = "end of CoverTab[40221]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8382
		// _ = "end of CoverTab[40207]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8383
	// _ = "end of CoverTab[40178]"
//line /usr/local/go/src/net/http/h2_bundle.go:8383
	_go_fuzz_dep_.CoverTab[40179]++

							http2traceWroteRequest(cs.trace, err)

							var respHeaderTimer <-chan time.Time
							var respHeaderRecv chan struct{}
							if d := cc.responseHeaderTimeout(); d != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8389
		_go_fuzz_dep_.CoverTab[40222]++
								timer := time.NewTimer(d)
								defer timer.Stop()
								respHeaderTimer = timer.C
								respHeaderRecv = cs.respHeaderRecv
//line /usr/local/go/src/net/http/h2_bundle.go:8393
		// _ = "end of CoverTab[40222]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8394
		_go_fuzz_dep_.CoverTab[40223]++
//line /usr/local/go/src/net/http/h2_bundle.go:8394
		// _ = "end of CoverTab[40223]"
//line /usr/local/go/src/net/http/h2_bundle.go:8394
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8394
	// _ = "end of CoverTab[40179]"
//line /usr/local/go/src/net/http/h2_bundle.go:8394
	_go_fuzz_dep_.CoverTab[40180]++

//line /usr/local/go/src/net/http/h2_bundle.go:8398
	for {
//line /usr/local/go/src/net/http/h2_bundle.go:8398
		_go_fuzz_dep_.CoverTab[40224]++
								select {
		case <-cs.peerClosed:
//line /usr/local/go/src/net/http/h2_bundle.go:8400
			_go_fuzz_dep_.CoverTab[40225]++
									return nil
//line /usr/local/go/src/net/http/h2_bundle.go:8401
			// _ = "end of CoverTab[40225]"
		case <-respHeaderTimer:
//line /usr/local/go/src/net/http/h2_bundle.go:8402
			_go_fuzz_dep_.CoverTab[40226]++
									return http2errTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:8403
			// _ = "end of CoverTab[40226]"
		case <-respHeaderRecv:
//line /usr/local/go/src/net/http/h2_bundle.go:8404
			_go_fuzz_dep_.CoverTab[40227]++
									respHeaderRecv = nil
									respHeaderTimer = nil
//line /usr/local/go/src/net/http/h2_bundle.go:8406
			// _ = "end of CoverTab[40227]"
		case <-cs.abort:
//line /usr/local/go/src/net/http/h2_bundle.go:8407
			_go_fuzz_dep_.CoverTab[40228]++
									return cs.abortErr
//line /usr/local/go/src/net/http/h2_bundle.go:8408
			// _ = "end of CoverTab[40228]"
		case <-ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:8409
			_go_fuzz_dep_.CoverTab[40229]++
									return ctx.Err()
//line /usr/local/go/src/net/http/h2_bundle.go:8410
			// _ = "end of CoverTab[40229]"
		case <-cs.reqCancel:
//line /usr/local/go/src/net/http/h2_bundle.go:8411
			_go_fuzz_dep_.CoverTab[40230]++
									return http2errRequestCanceled
//line /usr/local/go/src/net/http/h2_bundle.go:8412
			// _ = "end of CoverTab[40230]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8413
		// _ = "end of CoverTab[40224]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8414
	// _ = "end of CoverTab[40180]"
}

func (cs *http2clientStream) encodeAndWriteHeaders(req *Request) error {
//line /usr/local/go/src/net/http/h2_bundle.go:8417
	_go_fuzz_dep_.CoverTab[40231]++
							cc := cs.cc
							ctx := cs.ctx

							cc.wmu.Lock()
							defer cc.wmu.Unlock()

//line /usr/local/go/src/net/http/h2_bundle.go:8425
	select {
	case <-cs.abort:
//line /usr/local/go/src/net/http/h2_bundle.go:8426
		_go_fuzz_dep_.CoverTab[40235]++
								return cs.abortErr
//line /usr/local/go/src/net/http/h2_bundle.go:8427
		// _ = "end of CoverTab[40235]"
	case <-ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:8428
		_go_fuzz_dep_.CoverTab[40236]++
								return ctx.Err()
//line /usr/local/go/src/net/http/h2_bundle.go:8429
		// _ = "end of CoverTab[40236]"
	case <-cs.reqCancel:
//line /usr/local/go/src/net/http/h2_bundle.go:8430
		_go_fuzz_dep_.CoverTab[40237]++
								return http2errRequestCanceled
//line /usr/local/go/src/net/http/h2_bundle.go:8431
		// _ = "end of CoverTab[40237]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:8432
		_go_fuzz_dep_.CoverTab[40238]++
//line /usr/local/go/src/net/http/h2_bundle.go:8432
		// _ = "end of CoverTab[40238]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8433
	// _ = "end of CoverTab[40231]"
//line /usr/local/go/src/net/http/h2_bundle.go:8433
	_go_fuzz_dep_.CoverTab[40232]++

//line /usr/local/go/src/net/http/h2_bundle.go:8440
	trailers, err := http2commaSeparatedTrailers(req)
	if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8441
		_go_fuzz_dep_.CoverTab[40239]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:8442
		// _ = "end of CoverTab[40239]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8443
		_go_fuzz_dep_.CoverTab[40240]++
//line /usr/local/go/src/net/http/h2_bundle.go:8443
		// _ = "end of CoverTab[40240]"
//line /usr/local/go/src/net/http/h2_bundle.go:8443
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8443
	// _ = "end of CoverTab[40232]"
//line /usr/local/go/src/net/http/h2_bundle.go:8443
	_go_fuzz_dep_.CoverTab[40233]++
							hasTrailers := trailers != ""
							contentLen := http2actualContentLength(req)
							hasBody := contentLen != 0
							hdrs, err := cc.encodeHeaders(req, cs.requestedGzip, trailers, contentLen)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8448
		_go_fuzz_dep_.CoverTab[40241]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:8449
		// _ = "end of CoverTab[40241]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8450
		_go_fuzz_dep_.CoverTab[40242]++
//line /usr/local/go/src/net/http/h2_bundle.go:8450
		// _ = "end of CoverTab[40242]"
//line /usr/local/go/src/net/http/h2_bundle.go:8450
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8450
	// _ = "end of CoverTab[40233]"
//line /usr/local/go/src/net/http/h2_bundle.go:8450
	_go_fuzz_dep_.CoverTab[40234]++

//line /usr/local/go/src/net/http/h2_bundle.go:8453
	endStream := !hasBody && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8453
		_go_fuzz_dep_.CoverTab[40243]++
//line /usr/local/go/src/net/http/h2_bundle.go:8453
		return !hasTrailers
//line /usr/local/go/src/net/http/h2_bundle.go:8453
		// _ = "end of CoverTab[40243]"
//line /usr/local/go/src/net/http/h2_bundle.go:8453
	}()
							cs.sentHeaders = true
							err = cc.writeHeaders(cs.ID, endStream, int(cc.maxFrameSize), hdrs)
							http2traceWroteHeaders(cs.trace)
							return err
//line /usr/local/go/src/net/http/h2_bundle.go:8457
	// _ = "end of CoverTab[40234]"
}

// cleanupWriteRequest performs post-request tasks.
//line /usr/local/go/src/net/http/h2_bundle.go:8460
//
//line /usr/local/go/src/net/http/h2_bundle.go:8460
// If err (the result of writeRequest) is non-nil and the stream is not closed,
//line /usr/local/go/src/net/http/h2_bundle.go:8460
// cleanupWriteRequest will send a reset to the peer.
//line /usr/local/go/src/net/http/h2_bundle.go:8464
func (cs *http2clientStream) cleanupWriteRequest(err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8464
	_go_fuzz_dep_.CoverTab[40244]++
							cc := cs.cc

							if cs.ID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8467
		_go_fuzz_dep_.CoverTab[40253]++

								cc.decrStreamReservations()
//line /usr/local/go/src/net/http/h2_bundle.go:8469
		// _ = "end of CoverTab[40253]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8470
		_go_fuzz_dep_.CoverTab[40254]++
//line /usr/local/go/src/net/http/h2_bundle.go:8470
		// _ = "end of CoverTab[40254]"
//line /usr/local/go/src/net/http/h2_bundle.go:8470
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8470
	// _ = "end of CoverTab[40244]"
//line /usr/local/go/src/net/http/h2_bundle.go:8470
	_go_fuzz_dep_.CoverTab[40245]++

//line /usr/local/go/src/net/http/h2_bundle.go:8476
	cc.mu.Lock()
	mustCloseBody := false
	if cs.reqBody != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8478
		_go_fuzz_dep_.CoverTab[40255]++
//line /usr/local/go/src/net/http/h2_bundle.go:8478
		return cs.reqBodyClosed == nil
//line /usr/local/go/src/net/http/h2_bundle.go:8478
		// _ = "end of CoverTab[40255]"
//line /usr/local/go/src/net/http/h2_bundle.go:8478
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8478
		_go_fuzz_dep_.CoverTab[40256]++
								mustCloseBody = true
								cs.reqBodyClosed = make(chan struct{})
//line /usr/local/go/src/net/http/h2_bundle.go:8480
		// _ = "end of CoverTab[40256]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8481
		_go_fuzz_dep_.CoverTab[40257]++
//line /usr/local/go/src/net/http/h2_bundle.go:8481
		// _ = "end of CoverTab[40257]"
//line /usr/local/go/src/net/http/h2_bundle.go:8481
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8481
	// _ = "end of CoverTab[40245]"
//line /usr/local/go/src/net/http/h2_bundle.go:8481
	_go_fuzz_dep_.CoverTab[40246]++
							bodyClosed := cs.reqBodyClosed
							cc.mu.Unlock()
							if mustCloseBody {
//line /usr/local/go/src/net/http/h2_bundle.go:8484
		_go_fuzz_dep_.CoverTab[40258]++
								cs.reqBody.Close()
								close(bodyClosed)
//line /usr/local/go/src/net/http/h2_bundle.go:8486
		// _ = "end of CoverTab[40258]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8487
		_go_fuzz_dep_.CoverTab[40259]++
//line /usr/local/go/src/net/http/h2_bundle.go:8487
		// _ = "end of CoverTab[40259]"
//line /usr/local/go/src/net/http/h2_bundle.go:8487
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8487
	// _ = "end of CoverTab[40246]"
//line /usr/local/go/src/net/http/h2_bundle.go:8487
	_go_fuzz_dep_.CoverTab[40247]++
							if bodyClosed != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8488
		_go_fuzz_dep_.CoverTab[40260]++
								<-bodyClosed
//line /usr/local/go/src/net/http/h2_bundle.go:8489
		// _ = "end of CoverTab[40260]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8490
		_go_fuzz_dep_.CoverTab[40261]++
//line /usr/local/go/src/net/http/h2_bundle.go:8490
		// _ = "end of CoverTab[40261]"
//line /usr/local/go/src/net/http/h2_bundle.go:8490
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8490
	// _ = "end of CoverTab[40247]"
//line /usr/local/go/src/net/http/h2_bundle.go:8490
	_go_fuzz_dep_.CoverTab[40248]++

							if err != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8492
		_go_fuzz_dep_.CoverTab[40262]++
//line /usr/local/go/src/net/http/h2_bundle.go:8492
		return cs.sentEndStream
//line /usr/local/go/src/net/http/h2_bundle.go:8492
		// _ = "end of CoverTab[40262]"
//line /usr/local/go/src/net/http/h2_bundle.go:8492
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8492
		_go_fuzz_dep_.CoverTab[40263]++

//line /usr/local/go/src/net/http/h2_bundle.go:8496
		select {
		case <-cs.peerClosed:
//line /usr/local/go/src/net/http/h2_bundle.go:8497
			_go_fuzz_dep_.CoverTab[40264]++
									err = nil
//line /usr/local/go/src/net/http/h2_bundle.go:8498
			// _ = "end of CoverTab[40264]"
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:8499
			_go_fuzz_dep_.CoverTab[40265]++
//line /usr/local/go/src/net/http/h2_bundle.go:8499
			// _ = "end of CoverTab[40265]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8500
		// _ = "end of CoverTab[40263]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8501
		_go_fuzz_dep_.CoverTab[40266]++
//line /usr/local/go/src/net/http/h2_bundle.go:8501
		// _ = "end of CoverTab[40266]"
//line /usr/local/go/src/net/http/h2_bundle.go:8501
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8501
	// _ = "end of CoverTab[40248]"
//line /usr/local/go/src/net/http/h2_bundle.go:8501
	_go_fuzz_dep_.CoverTab[40249]++
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8502
		_go_fuzz_dep_.CoverTab[40267]++
								cs.abortStream(err)
								if cs.sentHeaders {
//line /usr/local/go/src/net/http/h2_bundle.go:8504
			_go_fuzz_dep_.CoverTab[40269]++
									if se, ok := err.(http2StreamError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:8505
				_go_fuzz_dep_.CoverTab[40270]++
										if se.Cause != http2errFromPeer {
//line /usr/local/go/src/net/http/h2_bundle.go:8506
					_go_fuzz_dep_.CoverTab[40271]++
											cc.writeStreamReset(cs.ID, se.Code, err)
//line /usr/local/go/src/net/http/h2_bundle.go:8507
					// _ = "end of CoverTab[40271]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8508
					_go_fuzz_dep_.CoverTab[40272]++
//line /usr/local/go/src/net/http/h2_bundle.go:8508
					// _ = "end of CoverTab[40272]"
//line /usr/local/go/src/net/http/h2_bundle.go:8508
				}
//line /usr/local/go/src/net/http/h2_bundle.go:8508
				// _ = "end of CoverTab[40270]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8509
				_go_fuzz_dep_.CoverTab[40273]++
										cc.writeStreamReset(cs.ID, http2ErrCodeCancel, err)
//line /usr/local/go/src/net/http/h2_bundle.go:8510
				// _ = "end of CoverTab[40273]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8511
			// _ = "end of CoverTab[40269]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8512
			_go_fuzz_dep_.CoverTab[40274]++
//line /usr/local/go/src/net/http/h2_bundle.go:8512
			// _ = "end of CoverTab[40274]"
//line /usr/local/go/src/net/http/h2_bundle.go:8512
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8512
		// _ = "end of CoverTab[40267]"
//line /usr/local/go/src/net/http/h2_bundle.go:8512
		_go_fuzz_dep_.CoverTab[40268]++
								cs.bufPipe.CloseWithError(err)
//line /usr/local/go/src/net/http/h2_bundle.go:8513
		// _ = "end of CoverTab[40268]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8514
		_go_fuzz_dep_.CoverTab[40275]++
								if cs.sentHeaders && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8515
			_go_fuzz_dep_.CoverTab[40277]++
//line /usr/local/go/src/net/http/h2_bundle.go:8515
			return !cs.sentEndStream
//line /usr/local/go/src/net/http/h2_bundle.go:8515
			// _ = "end of CoverTab[40277]"
//line /usr/local/go/src/net/http/h2_bundle.go:8515
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8515
			_go_fuzz_dep_.CoverTab[40278]++
									cc.writeStreamReset(cs.ID, http2ErrCodeNo, nil)
//line /usr/local/go/src/net/http/h2_bundle.go:8516
			// _ = "end of CoverTab[40278]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8517
			_go_fuzz_dep_.CoverTab[40279]++
//line /usr/local/go/src/net/http/h2_bundle.go:8517
			// _ = "end of CoverTab[40279]"
//line /usr/local/go/src/net/http/h2_bundle.go:8517
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8517
		// _ = "end of CoverTab[40275]"
//line /usr/local/go/src/net/http/h2_bundle.go:8517
		_go_fuzz_dep_.CoverTab[40276]++
								cs.bufPipe.CloseWithError(http2errRequestCanceled)
//line /usr/local/go/src/net/http/h2_bundle.go:8518
		// _ = "end of CoverTab[40276]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8519
	// _ = "end of CoverTab[40249]"
//line /usr/local/go/src/net/http/h2_bundle.go:8519
	_go_fuzz_dep_.CoverTab[40250]++
							if cs.ID != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8520
		_go_fuzz_dep_.CoverTab[40280]++
								cc.forgetStreamID(cs.ID)
//line /usr/local/go/src/net/http/h2_bundle.go:8521
		// _ = "end of CoverTab[40280]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8522
		_go_fuzz_dep_.CoverTab[40281]++
//line /usr/local/go/src/net/http/h2_bundle.go:8522
		// _ = "end of CoverTab[40281]"
//line /usr/local/go/src/net/http/h2_bundle.go:8522
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8522
	// _ = "end of CoverTab[40250]"
//line /usr/local/go/src/net/http/h2_bundle.go:8522
	_go_fuzz_dep_.CoverTab[40251]++

							cc.wmu.Lock()
							werr := cc.werr
							cc.wmu.Unlock()
							if werr != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8527
		_go_fuzz_dep_.CoverTab[40282]++
								cc.Close()
//line /usr/local/go/src/net/http/h2_bundle.go:8528
		// _ = "end of CoverTab[40282]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8529
		_go_fuzz_dep_.CoverTab[40283]++
//line /usr/local/go/src/net/http/h2_bundle.go:8529
		// _ = "end of CoverTab[40283]"
//line /usr/local/go/src/net/http/h2_bundle.go:8529
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8529
	// _ = "end of CoverTab[40251]"
//line /usr/local/go/src/net/http/h2_bundle.go:8529
	_go_fuzz_dep_.CoverTab[40252]++

							close(cs.donec)
//line /usr/local/go/src/net/http/h2_bundle.go:8531
	// _ = "end of CoverTab[40252]"
}

// awaitOpenSlotForStream waits until len(streams) < maxConcurrentStreams.
//line /usr/local/go/src/net/http/h2_bundle.go:8534
// Must hold cc.mu.
//line /usr/local/go/src/net/http/h2_bundle.go:8536
func (cc *http2ClientConn) awaitOpenSlotForStreamLocked(cs *http2clientStream) error {
//line /usr/local/go/src/net/http/h2_bundle.go:8536
	_go_fuzz_dep_.CoverTab[40284]++
							for {
//line /usr/local/go/src/net/http/h2_bundle.go:8537
		_go_fuzz_dep_.CoverTab[40285]++
								cc.lastActive = time.Now()
								if cc.closed || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8539
			_go_fuzz_dep_.CoverTab[40288]++
//line /usr/local/go/src/net/http/h2_bundle.go:8539
			return !cc.canTakeNewRequestLocked()
//line /usr/local/go/src/net/http/h2_bundle.go:8539
			// _ = "end of CoverTab[40288]"
//line /usr/local/go/src/net/http/h2_bundle.go:8539
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8539
			_go_fuzz_dep_.CoverTab[40289]++
									return http2errClientConnUnusable
//line /usr/local/go/src/net/http/h2_bundle.go:8540
			// _ = "end of CoverTab[40289]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8541
			_go_fuzz_dep_.CoverTab[40290]++
//line /usr/local/go/src/net/http/h2_bundle.go:8541
			// _ = "end of CoverTab[40290]"
//line /usr/local/go/src/net/http/h2_bundle.go:8541
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8541
		// _ = "end of CoverTab[40285]"
//line /usr/local/go/src/net/http/h2_bundle.go:8541
		_go_fuzz_dep_.CoverTab[40286]++
								cc.lastIdle = time.Time{}
								if int64(len(cc.streams)) < int64(cc.maxConcurrentStreams) {
//line /usr/local/go/src/net/http/h2_bundle.go:8543
			_go_fuzz_dep_.CoverTab[40291]++
									return nil
//line /usr/local/go/src/net/http/h2_bundle.go:8544
			// _ = "end of CoverTab[40291]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8545
			_go_fuzz_dep_.CoverTab[40292]++
//line /usr/local/go/src/net/http/h2_bundle.go:8545
			// _ = "end of CoverTab[40292]"
//line /usr/local/go/src/net/http/h2_bundle.go:8545
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8545
		// _ = "end of CoverTab[40286]"
//line /usr/local/go/src/net/http/h2_bundle.go:8545
		_go_fuzz_dep_.CoverTab[40287]++
								cc.pendingRequests++
								cc.cond.Wait()
								cc.pendingRequests--
								select {
		case <-cs.abort:
//line /usr/local/go/src/net/http/h2_bundle.go:8550
			_go_fuzz_dep_.CoverTab[40293]++
									return cs.abortErr
//line /usr/local/go/src/net/http/h2_bundle.go:8551
			// _ = "end of CoverTab[40293]"
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:8552
			_go_fuzz_dep_.CoverTab[40294]++
//line /usr/local/go/src/net/http/h2_bundle.go:8552
			// _ = "end of CoverTab[40294]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8553
		// _ = "end of CoverTab[40287]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8554
	// _ = "end of CoverTab[40284]"
}

// requires cc.wmu be held
func (cc *http2ClientConn) writeHeaders(streamID uint32, endStream bool, maxFrameSize int, hdrs []byte) error {
//line /usr/local/go/src/net/http/h2_bundle.go:8558
	_go_fuzz_dep_.CoverTab[40295]++
							first := true
							for len(hdrs) > 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8560
		_go_fuzz_dep_.CoverTab[40297]++
//line /usr/local/go/src/net/http/h2_bundle.go:8560
		return cc.werr == nil
//line /usr/local/go/src/net/http/h2_bundle.go:8560
		// _ = "end of CoverTab[40297]"
//line /usr/local/go/src/net/http/h2_bundle.go:8560
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8560
		_go_fuzz_dep_.CoverTab[40298]++
								chunk := hdrs
								if len(chunk) > maxFrameSize {
//line /usr/local/go/src/net/http/h2_bundle.go:8562
			_go_fuzz_dep_.CoverTab[40300]++
									chunk = chunk[:maxFrameSize]
//line /usr/local/go/src/net/http/h2_bundle.go:8563
			// _ = "end of CoverTab[40300]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8564
			_go_fuzz_dep_.CoverTab[40301]++
//line /usr/local/go/src/net/http/h2_bundle.go:8564
			// _ = "end of CoverTab[40301]"
//line /usr/local/go/src/net/http/h2_bundle.go:8564
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8564
		// _ = "end of CoverTab[40298]"
//line /usr/local/go/src/net/http/h2_bundle.go:8564
		_go_fuzz_dep_.CoverTab[40299]++
								hdrs = hdrs[len(chunk):]
								endHeaders := len(hdrs) == 0
								if first {
//line /usr/local/go/src/net/http/h2_bundle.go:8567
			_go_fuzz_dep_.CoverTab[40302]++
									cc.fr.WriteHeaders(http2HeadersFrameParam{
				StreamID:	streamID,
				BlockFragment:	chunk,
				EndStream:	endStream,
				EndHeaders:	endHeaders,
			})
									first = false
//line /usr/local/go/src/net/http/h2_bundle.go:8574
			// _ = "end of CoverTab[40302]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8575
			_go_fuzz_dep_.CoverTab[40303]++
									cc.fr.WriteContinuation(streamID, endHeaders, chunk)
//line /usr/local/go/src/net/http/h2_bundle.go:8576
			// _ = "end of CoverTab[40303]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8577
		// _ = "end of CoverTab[40299]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8578
	// _ = "end of CoverTab[40295]"
//line /usr/local/go/src/net/http/h2_bundle.go:8578
	_go_fuzz_dep_.CoverTab[40296]++
							cc.bw.Flush()
							return cc.werr
//line /usr/local/go/src/net/http/h2_bundle.go:8580
	// _ = "end of CoverTab[40296]"
}

// internal error values; they don't escape to callers
var (
	// abort request body write; don't send cancel
	http2errStopReqBodyWrite	= errors.New("http2: aborting request body write")

	// abort request body write, but send stream reset of cancel.
	http2errStopReqBodyWriteAndCancel	= errors.New("http2: canceling request")

	http2errReqBodyTooLong	= errors.New("http2: request body larger than specified content length")
)

// frameScratchBufferLen returns the length of a buffer to use for
//line /usr/local/go/src/net/http/h2_bundle.go:8594
// outgoing request bodies to read/write to/from.
//line /usr/local/go/src/net/http/h2_bundle.go:8594
//
//line /usr/local/go/src/net/http/h2_bundle.go:8594
// It returns max(1, min(peer's advertised max frame size,
//line /usr/local/go/src/net/http/h2_bundle.go:8594
// Request.ContentLength+1, 512KB)).
//line /usr/local/go/src/net/http/h2_bundle.go:8599
func (cs *http2clientStream) frameScratchBufferLen(maxFrameSize int) int {
//line /usr/local/go/src/net/http/h2_bundle.go:8599
	_go_fuzz_dep_.CoverTab[40304]++
							const max = 512 << 10
							n := int64(maxFrameSize)
							if n > max {
//line /usr/local/go/src/net/http/h2_bundle.go:8602
		_go_fuzz_dep_.CoverTab[40308]++
								n = max
//line /usr/local/go/src/net/http/h2_bundle.go:8603
		// _ = "end of CoverTab[40308]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8604
		_go_fuzz_dep_.CoverTab[40309]++
//line /usr/local/go/src/net/http/h2_bundle.go:8604
		// _ = "end of CoverTab[40309]"
//line /usr/local/go/src/net/http/h2_bundle.go:8604
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8604
	// _ = "end of CoverTab[40304]"
//line /usr/local/go/src/net/http/h2_bundle.go:8604
	_go_fuzz_dep_.CoverTab[40305]++
							if cl := cs.reqBodyContentLength; cl != -1 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8605
		_go_fuzz_dep_.CoverTab[40310]++
//line /usr/local/go/src/net/http/h2_bundle.go:8605
		return cl+1 < n
//line /usr/local/go/src/net/http/h2_bundle.go:8605
		// _ = "end of CoverTab[40310]"
//line /usr/local/go/src/net/http/h2_bundle.go:8605
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8605
		_go_fuzz_dep_.CoverTab[40311]++

//line /usr/local/go/src/net/http/h2_bundle.go:8610
		n = cl + 1
//line /usr/local/go/src/net/http/h2_bundle.go:8610
		// _ = "end of CoverTab[40311]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8611
		_go_fuzz_dep_.CoverTab[40312]++
//line /usr/local/go/src/net/http/h2_bundle.go:8611
		// _ = "end of CoverTab[40312]"
//line /usr/local/go/src/net/http/h2_bundle.go:8611
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8611
	// _ = "end of CoverTab[40305]"
//line /usr/local/go/src/net/http/h2_bundle.go:8611
	_go_fuzz_dep_.CoverTab[40306]++
							if n < 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:8612
		_go_fuzz_dep_.CoverTab[40313]++
								return 1
//line /usr/local/go/src/net/http/h2_bundle.go:8613
		// _ = "end of CoverTab[40313]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8614
		_go_fuzz_dep_.CoverTab[40314]++
//line /usr/local/go/src/net/http/h2_bundle.go:8614
		// _ = "end of CoverTab[40314]"
//line /usr/local/go/src/net/http/h2_bundle.go:8614
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8614
	// _ = "end of CoverTab[40306]"
//line /usr/local/go/src/net/http/h2_bundle.go:8614
	_go_fuzz_dep_.CoverTab[40307]++
							return int(n)
//line /usr/local/go/src/net/http/h2_bundle.go:8615
	// _ = "end of CoverTab[40307]"
}

var http2bufPool sync.Pool	// of *[]byte

func (cs *http2clientStream) writeRequestBody(req *Request) (err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8620
	_go_fuzz_dep_.CoverTab[40315]++
							cc := cs.cc
							body := cs.reqBody
							sentEnd := false

							hasTrailers := req.Trailer != nil
							remainLen := cs.reqBodyContentLength
							hasContentLen := remainLen != -1

							cc.mu.Lock()
							maxFrameSize := int(cc.maxFrameSize)
							cc.mu.Unlock()

//line /usr/local/go/src/net/http/h2_bundle.go:8634
	scratchLen := cs.frameScratchBufferLen(maxFrameSize)
	var buf []byte
	if bp, ok := http2bufPool.Get().(*[]byte); ok && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8636
		_go_fuzz_dep_.CoverTab[40323]++
//line /usr/local/go/src/net/http/h2_bundle.go:8636
		return len(*bp) >= scratchLen
//line /usr/local/go/src/net/http/h2_bundle.go:8636
		// _ = "end of CoverTab[40323]"
//line /usr/local/go/src/net/http/h2_bundle.go:8636
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8636
		_go_fuzz_dep_.CoverTab[40324]++
								defer http2bufPool.Put(bp)
								buf = *bp
//line /usr/local/go/src/net/http/h2_bundle.go:8638
		// _ = "end of CoverTab[40324]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8639
		_go_fuzz_dep_.CoverTab[40325]++
								buf = make([]byte, scratchLen)
								defer http2bufPool.Put(&buf)
//line /usr/local/go/src/net/http/h2_bundle.go:8641
		// _ = "end of CoverTab[40325]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8642
	// _ = "end of CoverTab[40315]"
//line /usr/local/go/src/net/http/h2_bundle.go:8642
	_go_fuzz_dep_.CoverTab[40316]++

							var sawEOF bool
							for !sawEOF {
//line /usr/local/go/src/net/http/h2_bundle.go:8645
		_go_fuzz_dep_.CoverTab[40326]++
								n, err := body.Read(buf)
								if hasContentLen {
//line /usr/local/go/src/net/http/h2_bundle.go:8647
			_go_fuzz_dep_.CoverTab[40330]++
									remainLen -= int64(n)
									if remainLen == 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8649
				_go_fuzz_dep_.CoverTab[40332]++
//line /usr/local/go/src/net/http/h2_bundle.go:8649
				return err == nil
//line /usr/local/go/src/net/http/h2_bundle.go:8649
				// _ = "end of CoverTab[40332]"
//line /usr/local/go/src/net/http/h2_bundle.go:8649
			}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8649
				_go_fuzz_dep_.CoverTab[40333]++
				// The request body's Content-Length was predeclared and
				// we just finished reading it all, but the underlying io.Reader
				// returned the final chunk with a nil error (which is one of
				// the two valid things a Reader can do at EOF). Because we'd prefer
				// to send the END_STREAM bit early, double-check that we're actually
				// at EOF. Subsequent reads should return (0, EOF) at this point.
										// If either value is different, we return an error in one of two ways below.
										var scratch [1]byte
										var n1 int
										n1, err = body.Read(scratch[:])
										remainLen -= int64(n1)
//line /usr/local/go/src/net/http/h2_bundle.go:8660
				// _ = "end of CoverTab[40333]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8661
				_go_fuzz_dep_.CoverTab[40334]++
//line /usr/local/go/src/net/http/h2_bundle.go:8661
				// _ = "end of CoverTab[40334]"
//line /usr/local/go/src/net/http/h2_bundle.go:8661
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8661
			// _ = "end of CoverTab[40330]"
//line /usr/local/go/src/net/http/h2_bundle.go:8661
			_go_fuzz_dep_.CoverTab[40331]++
									if remainLen < 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8662
				_go_fuzz_dep_.CoverTab[40335]++
										err = http2errReqBodyTooLong
										return err
//line /usr/local/go/src/net/http/h2_bundle.go:8664
				// _ = "end of CoverTab[40335]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8665
				_go_fuzz_dep_.CoverTab[40336]++
//line /usr/local/go/src/net/http/h2_bundle.go:8665
				// _ = "end of CoverTab[40336]"
//line /usr/local/go/src/net/http/h2_bundle.go:8665
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8665
			// _ = "end of CoverTab[40331]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8666
			_go_fuzz_dep_.CoverTab[40337]++
//line /usr/local/go/src/net/http/h2_bundle.go:8666
			// _ = "end of CoverTab[40337]"
//line /usr/local/go/src/net/http/h2_bundle.go:8666
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8666
		// _ = "end of CoverTab[40326]"
//line /usr/local/go/src/net/http/h2_bundle.go:8666
		_go_fuzz_dep_.CoverTab[40327]++
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8667
			_go_fuzz_dep_.CoverTab[40338]++
									cc.mu.Lock()
									bodyClosed := cs.reqBodyClosed != nil
									cc.mu.Unlock()
									switch {
			case bodyClosed:
//line /usr/local/go/src/net/http/h2_bundle.go:8672
				_go_fuzz_dep_.CoverTab[40339]++
										return http2errStopReqBodyWrite
//line /usr/local/go/src/net/http/h2_bundle.go:8673
				// _ = "end of CoverTab[40339]"
			case err == io.EOF:
//line /usr/local/go/src/net/http/h2_bundle.go:8674
				_go_fuzz_dep_.CoverTab[40340]++
										sawEOF = true
										err = nil
//line /usr/local/go/src/net/http/h2_bundle.go:8676
				// _ = "end of CoverTab[40340]"
			default:
//line /usr/local/go/src/net/http/h2_bundle.go:8677
				_go_fuzz_dep_.CoverTab[40341]++
										return err
//line /usr/local/go/src/net/http/h2_bundle.go:8678
				// _ = "end of CoverTab[40341]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8679
			// _ = "end of CoverTab[40338]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8680
			_go_fuzz_dep_.CoverTab[40342]++
//line /usr/local/go/src/net/http/h2_bundle.go:8680
			// _ = "end of CoverTab[40342]"
//line /usr/local/go/src/net/http/h2_bundle.go:8680
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8680
		// _ = "end of CoverTab[40327]"
//line /usr/local/go/src/net/http/h2_bundle.go:8680
		_go_fuzz_dep_.CoverTab[40328]++

								remain := buf[:n]
								for len(remain) > 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8683
			_go_fuzz_dep_.CoverTab[40343]++
//line /usr/local/go/src/net/http/h2_bundle.go:8683
			return err == nil
//line /usr/local/go/src/net/http/h2_bundle.go:8683
			// _ = "end of CoverTab[40343]"
//line /usr/local/go/src/net/http/h2_bundle.go:8683
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8683
			_go_fuzz_dep_.CoverTab[40344]++
									var allowed int32
									allowed, err = cs.awaitFlowControl(len(remain))
									if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8686
				_go_fuzz_dep_.CoverTab[40347]++
										return err
//line /usr/local/go/src/net/http/h2_bundle.go:8687
				// _ = "end of CoverTab[40347]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8688
				_go_fuzz_dep_.CoverTab[40348]++
//line /usr/local/go/src/net/http/h2_bundle.go:8688
				// _ = "end of CoverTab[40348]"
//line /usr/local/go/src/net/http/h2_bundle.go:8688
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8688
			// _ = "end of CoverTab[40344]"
//line /usr/local/go/src/net/http/h2_bundle.go:8688
			_go_fuzz_dep_.CoverTab[40345]++
									cc.wmu.Lock()
									data := remain[:allowed]
									remain = remain[allowed:]
									sentEnd = sawEOF && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8692
				_go_fuzz_dep_.CoverTab[40349]++
//line /usr/local/go/src/net/http/h2_bundle.go:8692
				return len(remain) == 0
//line /usr/local/go/src/net/http/h2_bundle.go:8692
				// _ = "end of CoverTab[40349]"
//line /usr/local/go/src/net/http/h2_bundle.go:8692
			}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8692
				_go_fuzz_dep_.CoverTab[40350]++
//line /usr/local/go/src/net/http/h2_bundle.go:8692
				return !hasTrailers
//line /usr/local/go/src/net/http/h2_bundle.go:8692
				// _ = "end of CoverTab[40350]"
//line /usr/local/go/src/net/http/h2_bundle.go:8692
			}()
									err = cc.fr.WriteData(cs.ID, sentEnd, data)
									if err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8694
				_go_fuzz_dep_.CoverTab[40351]++

//line /usr/local/go/src/net/http/h2_bundle.go:8701
				err = cc.bw.Flush()
//line /usr/local/go/src/net/http/h2_bundle.go:8701
				// _ = "end of CoverTab[40351]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8702
				_go_fuzz_dep_.CoverTab[40352]++
//line /usr/local/go/src/net/http/h2_bundle.go:8702
				// _ = "end of CoverTab[40352]"
//line /usr/local/go/src/net/http/h2_bundle.go:8702
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8702
			// _ = "end of CoverTab[40345]"
//line /usr/local/go/src/net/http/h2_bundle.go:8702
			_go_fuzz_dep_.CoverTab[40346]++
									cc.wmu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:8703
			// _ = "end of CoverTab[40346]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8704
		// _ = "end of CoverTab[40328]"
//line /usr/local/go/src/net/http/h2_bundle.go:8704
		_go_fuzz_dep_.CoverTab[40329]++
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8705
			_go_fuzz_dep_.CoverTab[40353]++
									return err
//line /usr/local/go/src/net/http/h2_bundle.go:8706
			// _ = "end of CoverTab[40353]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8707
			_go_fuzz_dep_.CoverTab[40354]++
//line /usr/local/go/src/net/http/h2_bundle.go:8707
			// _ = "end of CoverTab[40354]"
//line /usr/local/go/src/net/http/h2_bundle.go:8707
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8707
		// _ = "end of CoverTab[40329]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8708
	// _ = "end of CoverTab[40316]"
//line /usr/local/go/src/net/http/h2_bundle.go:8708
	_go_fuzz_dep_.CoverTab[40317]++

							if sentEnd {
//line /usr/local/go/src/net/http/h2_bundle.go:8710
		_go_fuzz_dep_.CoverTab[40355]++

//line /usr/local/go/src/net/http/h2_bundle.go:8714
		return nil
//line /usr/local/go/src/net/http/h2_bundle.go:8714
		// _ = "end of CoverTab[40355]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8715
		_go_fuzz_dep_.CoverTab[40356]++
//line /usr/local/go/src/net/http/h2_bundle.go:8715
		// _ = "end of CoverTab[40356]"
//line /usr/local/go/src/net/http/h2_bundle.go:8715
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8715
	// _ = "end of CoverTab[40317]"
//line /usr/local/go/src/net/http/h2_bundle.go:8715
	_go_fuzz_dep_.CoverTab[40318]++

//line /usr/local/go/src/net/http/h2_bundle.go:8720
	cc.mu.Lock()
	trailer := req.Trailer
	err = cs.abortErr
	cc.mu.Unlock()
	if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8724
		_go_fuzz_dep_.CoverTab[40357]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:8725
		// _ = "end of CoverTab[40357]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8726
		_go_fuzz_dep_.CoverTab[40358]++
//line /usr/local/go/src/net/http/h2_bundle.go:8726
		// _ = "end of CoverTab[40358]"
//line /usr/local/go/src/net/http/h2_bundle.go:8726
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8726
	// _ = "end of CoverTab[40318]"
//line /usr/local/go/src/net/http/h2_bundle.go:8726
	_go_fuzz_dep_.CoverTab[40319]++

							cc.wmu.Lock()
							defer cc.wmu.Unlock()
							var trls []byte
							if len(trailer) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8731
		_go_fuzz_dep_.CoverTab[40359]++
								trls, err = cc.encodeTrailers(trailer)
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8733
			_go_fuzz_dep_.CoverTab[40360]++
									return err
//line /usr/local/go/src/net/http/h2_bundle.go:8734
			// _ = "end of CoverTab[40360]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8735
			_go_fuzz_dep_.CoverTab[40361]++
//line /usr/local/go/src/net/http/h2_bundle.go:8735
			// _ = "end of CoverTab[40361]"
//line /usr/local/go/src/net/http/h2_bundle.go:8735
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8735
		// _ = "end of CoverTab[40359]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8736
		_go_fuzz_dep_.CoverTab[40362]++
//line /usr/local/go/src/net/http/h2_bundle.go:8736
		// _ = "end of CoverTab[40362]"
//line /usr/local/go/src/net/http/h2_bundle.go:8736
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8736
	// _ = "end of CoverTab[40319]"
//line /usr/local/go/src/net/http/h2_bundle.go:8736
	_go_fuzz_dep_.CoverTab[40320]++

//line /usr/local/go/src/net/http/h2_bundle.go:8740
	if len(trls) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8740
		_go_fuzz_dep_.CoverTab[40363]++
								err = cc.writeHeaders(cs.ID, true, maxFrameSize, trls)
//line /usr/local/go/src/net/http/h2_bundle.go:8741
		// _ = "end of CoverTab[40363]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8742
		_go_fuzz_dep_.CoverTab[40364]++
								err = cc.fr.WriteData(cs.ID, true, nil)
//line /usr/local/go/src/net/http/h2_bundle.go:8743
		// _ = "end of CoverTab[40364]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8744
	// _ = "end of CoverTab[40320]"
//line /usr/local/go/src/net/http/h2_bundle.go:8744
	_go_fuzz_dep_.CoverTab[40321]++
							if ferr := cc.bw.Flush(); ferr != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8745
		_go_fuzz_dep_.CoverTab[40365]++
//line /usr/local/go/src/net/http/h2_bundle.go:8745
		return err == nil
//line /usr/local/go/src/net/http/h2_bundle.go:8745
		// _ = "end of CoverTab[40365]"
//line /usr/local/go/src/net/http/h2_bundle.go:8745
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8745
		_go_fuzz_dep_.CoverTab[40366]++
								err = ferr
//line /usr/local/go/src/net/http/h2_bundle.go:8746
		// _ = "end of CoverTab[40366]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8747
		_go_fuzz_dep_.CoverTab[40367]++
//line /usr/local/go/src/net/http/h2_bundle.go:8747
		// _ = "end of CoverTab[40367]"
//line /usr/local/go/src/net/http/h2_bundle.go:8747
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8747
	// _ = "end of CoverTab[40321]"
//line /usr/local/go/src/net/http/h2_bundle.go:8747
	_go_fuzz_dep_.CoverTab[40322]++
							return err
//line /usr/local/go/src/net/http/h2_bundle.go:8748
	// _ = "end of CoverTab[40322]"
}

// awaitFlowControl waits for [1, min(maxBytes, cc.cs.maxFrameSize)] flow
//line /usr/local/go/src/net/http/h2_bundle.go:8751
// control tokens from the server.
//line /usr/local/go/src/net/http/h2_bundle.go:8751
// It returns either the non-zero number of tokens taken or an error
//line /usr/local/go/src/net/http/h2_bundle.go:8751
// if the stream is dead.
//line /usr/local/go/src/net/http/h2_bundle.go:8755
func (cs *http2clientStream) awaitFlowControl(maxBytes int) (taken int32, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8755
	_go_fuzz_dep_.CoverTab[40368]++
							cc := cs.cc
							ctx := cs.ctx
							cc.mu.Lock()
							defer cc.mu.Unlock()
							for {
//line /usr/local/go/src/net/http/h2_bundle.go:8760
		_go_fuzz_dep_.CoverTab[40369]++
								if cc.closed {
//line /usr/local/go/src/net/http/h2_bundle.go:8761
			_go_fuzz_dep_.CoverTab[40374]++
									return 0, http2errClientConnClosed
//line /usr/local/go/src/net/http/h2_bundle.go:8762
			// _ = "end of CoverTab[40374]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8763
			_go_fuzz_dep_.CoverTab[40375]++
//line /usr/local/go/src/net/http/h2_bundle.go:8763
			// _ = "end of CoverTab[40375]"
//line /usr/local/go/src/net/http/h2_bundle.go:8763
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8763
		// _ = "end of CoverTab[40369]"
//line /usr/local/go/src/net/http/h2_bundle.go:8763
		_go_fuzz_dep_.CoverTab[40370]++
								if cs.reqBodyClosed != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8764
			_go_fuzz_dep_.CoverTab[40376]++
									return 0, http2errStopReqBodyWrite
//line /usr/local/go/src/net/http/h2_bundle.go:8765
			// _ = "end of CoverTab[40376]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8766
			_go_fuzz_dep_.CoverTab[40377]++
//line /usr/local/go/src/net/http/h2_bundle.go:8766
			// _ = "end of CoverTab[40377]"
//line /usr/local/go/src/net/http/h2_bundle.go:8766
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8766
		// _ = "end of CoverTab[40370]"
//line /usr/local/go/src/net/http/h2_bundle.go:8766
		_go_fuzz_dep_.CoverTab[40371]++
								select {
		case <-cs.abort:
//line /usr/local/go/src/net/http/h2_bundle.go:8768
			_go_fuzz_dep_.CoverTab[40378]++
									return 0, cs.abortErr
//line /usr/local/go/src/net/http/h2_bundle.go:8769
			// _ = "end of CoverTab[40378]"
		case <-ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:8770
			_go_fuzz_dep_.CoverTab[40379]++
									return 0, ctx.Err()
//line /usr/local/go/src/net/http/h2_bundle.go:8771
			// _ = "end of CoverTab[40379]"
		case <-cs.reqCancel:
//line /usr/local/go/src/net/http/h2_bundle.go:8772
			_go_fuzz_dep_.CoverTab[40380]++
									return 0, http2errRequestCanceled
//line /usr/local/go/src/net/http/h2_bundle.go:8773
			// _ = "end of CoverTab[40380]"
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:8774
			_go_fuzz_dep_.CoverTab[40381]++
//line /usr/local/go/src/net/http/h2_bundle.go:8774
			// _ = "end of CoverTab[40381]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8775
		// _ = "end of CoverTab[40371]"
//line /usr/local/go/src/net/http/h2_bundle.go:8775
		_go_fuzz_dep_.CoverTab[40372]++
								if a := cs.flow.available(); a > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8776
			_go_fuzz_dep_.CoverTab[40382]++
									take := a
									if int(take) > maxBytes {
//line /usr/local/go/src/net/http/h2_bundle.go:8778
				_go_fuzz_dep_.CoverTab[40385]++

										take = int32(maxBytes)
//line /usr/local/go/src/net/http/h2_bundle.go:8780
				// _ = "end of CoverTab[40385]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8781
				_go_fuzz_dep_.CoverTab[40386]++
//line /usr/local/go/src/net/http/h2_bundle.go:8781
				// _ = "end of CoverTab[40386]"
//line /usr/local/go/src/net/http/h2_bundle.go:8781
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8781
			// _ = "end of CoverTab[40382]"
//line /usr/local/go/src/net/http/h2_bundle.go:8781
			_go_fuzz_dep_.CoverTab[40383]++
									if take > int32(cc.maxFrameSize) {
//line /usr/local/go/src/net/http/h2_bundle.go:8782
				_go_fuzz_dep_.CoverTab[40387]++
										take = int32(cc.maxFrameSize)
//line /usr/local/go/src/net/http/h2_bundle.go:8783
				// _ = "end of CoverTab[40387]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8784
				_go_fuzz_dep_.CoverTab[40388]++
//line /usr/local/go/src/net/http/h2_bundle.go:8784
				// _ = "end of CoverTab[40388]"
//line /usr/local/go/src/net/http/h2_bundle.go:8784
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8784
			// _ = "end of CoverTab[40383]"
//line /usr/local/go/src/net/http/h2_bundle.go:8784
			_go_fuzz_dep_.CoverTab[40384]++
									cs.flow.take(take)
									return take, nil
//line /usr/local/go/src/net/http/h2_bundle.go:8786
			// _ = "end of CoverTab[40384]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8787
			_go_fuzz_dep_.CoverTab[40389]++
//line /usr/local/go/src/net/http/h2_bundle.go:8787
			// _ = "end of CoverTab[40389]"
//line /usr/local/go/src/net/http/h2_bundle.go:8787
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8787
		// _ = "end of CoverTab[40372]"
//line /usr/local/go/src/net/http/h2_bundle.go:8787
		_go_fuzz_dep_.CoverTab[40373]++
								cc.cond.Wait()
//line /usr/local/go/src/net/http/h2_bundle.go:8788
		// _ = "end of CoverTab[40373]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8789
	// _ = "end of CoverTab[40368]"
}

var http2errNilRequestURL = errors.New("http2: Request.URI is nil")

// requires cc.wmu be held.
func (cc *http2ClientConn) encodeHeaders(req *Request, addGzipHeader bool, trailers string, contentLength int64) ([]byte, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8795
	_go_fuzz_dep_.CoverTab[40390]++
							cc.hbuf.Reset()
							if req.URL == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8797
		_go_fuzz_dep_.CoverTab[40400]++
								return nil, http2errNilRequestURL
//line /usr/local/go/src/net/http/h2_bundle.go:8798
		// _ = "end of CoverTab[40400]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8799
		_go_fuzz_dep_.CoverTab[40401]++
//line /usr/local/go/src/net/http/h2_bundle.go:8799
		// _ = "end of CoverTab[40401]"
//line /usr/local/go/src/net/http/h2_bundle.go:8799
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8799
	// _ = "end of CoverTab[40390]"
//line /usr/local/go/src/net/http/h2_bundle.go:8799
	_go_fuzz_dep_.CoverTab[40391]++

							host := req.Host
							if host == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:8802
		_go_fuzz_dep_.CoverTab[40402]++
								host = req.URL.Host
//line /usr/local/go/src/net/http/h2_bundle.go:8803
		// _ = "end of CoverTab[40402]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8804
		_go_fuzz_dep_.CoverTab[40403]++
//line /usr/local/go/src/net/http/h2_bundle.go:8804
		// _ = "end of CoverTab[40403]"
//line /usr/local/go/src/net/http/h2_bundle.go:8804
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8804
	// _ = "end of CoverTab[40391]"
//line /usr/local/go/src/net/http/h2_bundle.go:8804
	_go_fuzz_dep_.CoverTab[40392]++
							host, err := httpguts.PunycodeHostPort(host)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:8806
		_go_fuzz_dep_.CoverTab[40404]++
								return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:8807
		// _ = "end of CoverTab[40404]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8808
		_go_fuzz_dep_.CoverTab[40405]++
//line /usr/local/go/src/net/http/h2_bundle.go:8808
		// _ = "end of CoverTab[40405]"
//line /usr/local/go/src/net/http/h2_bundle.go:8808
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8808
	// _ = "end of CoverTab[40392]"
//line /usr/local/go/src/net/http/h2_bundle.go:8808
	_go_fuzz_dep_.CoverTab[40393]++

							var path string
							if req.Method != "CONNECT" {
//line /usr/local/go/src/net/http/h2_bundle.go:8811
		_go_fuzz_dep_.CoverTab[40406]++
								path = req.URL.RequestURI()
								if !http2validPseudoPath(path) {
//line /usr/local/go/src/net/http/h2_bundle.go:8813
			_go_fuzz_dep_.CoverTab[40407]++
									orig := path
									path = strings.TrimPrefix(path, req.URL.Scheme+"://"+host)
									if !http2validPseudoPath(path) {
//line /usr/local/go/src/net/http/h2_bundle.go:8816
				_go_fuzz_dep_.CoverTab[40408]++
										if req.URL.Opaque != "" {
//line /usr/local/go/src/net/http/h2_bundle.go:8817
					_go_fuzz_dep_.CoverTab[40409]++
											return nil, fmt.Errorf("invalid request :path %q from URL.Opaque = %q", orig, req.URL.Opaque)
//line /usr/local/go/src/net/http/h2_bundle.go:8818
					// _ = "end of CoverTab[40409]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8819
					_go_fuzz_dep_.CoverTab[40410]++
											return nil, fmt.Errorf("invalid request :path %q", orig)
//line /usr/local/go/src/net/http/h2_bundle.go:8820
					// _ = "end of CoverTab[40410]"
				}
//line /usr/local/go/src/net/http/h2_bundle.go:8821
				// _ = "end of CoverTab[40408]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8822
				_go_fuzz_dep_.CoverTab[40411]++
//line /usr/local/go/src/net/http/h2_bundle.go:8822
				// _ = "end of CoverTab[40411]"
//line /usr/local/go/src/net/http/h2_bundle.go:8822
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8822
			// _ = "end of CoverTab[40407]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8823
			_go_fuzz_dep_.CoverTab[40412]++
//line /usr/local/go/src/net/http/h2_bundle.go:8823
			// _ = "end of CoverTab[40412]"
//line /usr/local/go/src/net/http/h2_bundle.go:8823
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8823
		// _ = "end of CoverTab[40406]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8824
		_go_fuzz_dep_.CoverTab[40413]++
//line /usr/local/go/src/net/http/h2_bundle.go:8824
		// _ = "end of CoverTab[40413]"
//line /usr/local/go/src/net/http/h2_bundle.go:8824
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8824
	// _ = "end of CoverTab[40393]"
//line /usr/local/go/src/net/http/h2_bundle.go:8824
	_go_fuzz_dep_.CoverTab[40394]++

//line /usr/local/go/src/net/http/h2_bundle.go:8829
	for k, vv := range req.Header {
//line /usr/local/go/src/net/http/h2_bundle.go:8829
		_go_fuzz_dep_.CoverTab[40414]++
								if !httpguts.ValidHeaderFieldName(k) {
//line /usr/local/go/src/net/http/h2_bundle.go:8830
			_go_fuzz_dep_.CoverTab[40416]++
									return nil, fmt.Errorf("invalid HTTP header name %q", k)
//line /usr/local/go/src/net/http/h2_bundle.go:8831
			// _ = "end of CoverTab[40416]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8832
			_go_fuzz_dep_.CoverTab[40417]++
//line /usr/local/go/src/net/http/h2_bundle.go:8832
			// _ = "end of CoverTab[40417]"
//line /usr/local/go/src/net/http/h2_bundle.go:8832
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8832
		// _ = "end of CoverTab[40414]"
//line /usr/local/go/src/net/http/h2_bundle.go:8832
		_go_fuzz_dep_.CoverTab[40415]++
								for _, v := range vv {
//line /usr/local/go/src/net/http/h2_bundle.go:8833
			_go_fuzz_dep_.CoverTab[40418]++
									if !httpguts.ValidHeaderFieldValue(v) {
//line /usr/local/go/src/net/http/h2_bundle.go:8834
				_go_fuzz_dep_.CoverTab[40419]++

										return nil, fmt.Errorf("invalid HTTP header value for header %q", k)
//line /usr/local/go/src/net/http/h2_bundle.go:8836
				// _ = "end of CoverTab[40419]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8837
				_go_fuzz_dep_.CoverTab[40420]++
//line /usr/local/go/src/net/http/h2_bundle.go:8837
				// _ = "end of CoverTab[40420]"
//line /usr/local/go/src/net/http/h2_bundle.go:8837
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8837
			// _ = "end of CoverTab[40418]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8838
		// _ = "end of CoverTab[40415]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8839
	// _ = "end of CoverTab[40394]"
//line /usr/local/go/src/net/http/h2_bundle.go:8839
	_go_fuzz_dep_.CoverTab[40395]++

							enumerateHeaders := func(f func(name, value string)) {
//line /usr/local/go/src/net/http/h2_bundle.go:8841
		_go_fuzz_dep_.CoverTab[40421]++

//line /usr/local/go/src/net/http/h2_bundle.go:8847
		f(":authority", host)
		m := req.Method
		if m == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:8849
			_go_fuzz_dep_.CoverTab[40428]++
									m = MethodGet
//line /usr/local/go/src/net/http/h2_bundle.go:8850
			// _ = "end of CoverTab[40428]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8851
			_go_fuzz_dep_.CoverTab[40429]++
//line /usr/local/go/src/net/http/h2_bundle.go:8851
			// _ = "end of CoverTab[40429]"
//line /usr/local/go/src/net/http/h2_bundle.go:8851
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8851
		// _ = "end of CoverTab[40421]"
//line /usr/local/go/src/net/http/h2_bundle.go:8851
		_go_fuzz_dep_.CoverTab[40422]++
								f(":method", m)
								if req.Method != "CONNECT" {
//line /usr/local/go/src/net/http/h2_bundle.go:8853
			_go_fuzz_dep_.CoverTab[40430]++
									f(":path", path)
									f(":scheme", req.URL.Scheme)
//line /usr/local/go/src/net/http/h2_bundle.go:8855
			// _ = "end of CoverTab[40430]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8856
			_go_fuzz_dep_.CoverTab[40431]++
//line /usr/local/go/src/net/http/h2_bundle.go:8856
			// _ = "end of CoverTab[40431]"
//line /usr/local/go/src/net/http/h2_bundle.go:8856
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8856
		// _ = "end of CoverTab[40422]"
//line /usr/local/go/src/net/http/h2_bundle.go:8856
		_go_fuzz_dep_.CoverTab[40423]++
								if trailers != "" {
//line /usr/local/go/src/net/http/h2_bundle.go:8857
			_go_fuzz_dep_.CoverTab[40432]++
									f("trailer", trailers)
//line /usr/local/go/src/net/http/h2_bundle.go:8858
			// _ = "end of CoverTab[40432]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8859
			_go_fuzz_dep_.CoverTab[40433]++
//line /usr/local/go/src/net/http/h2_bundle.go:8859
			// _ = "end of CoverTab[40433]"
//line /usr/local/go/src/net/http/h2_bundle.go:8859
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8859
		// _ = "end of CoverTab[40423]"
//line /usr/local/go/src/net/http/h2_bundle.go:8859
		_go_fuzz_dep_.CoverTab[40424]++

								var didUA bool
								for k, vv := range req.Header {
//line /usr/local/go/src/net/http/h2_bundle.go:8862
			_go_fuzz_dep_.CoverTab[40434]++
									if http2asciiEqualFold(k, "host") || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8863
				_go_fuzz_dep_.CoverTab[40436]++
//line /usr/local/go/src/net/http/h2_bundle.go:8863
				return http2asciiEqualFold(k, "content-length")
//line /usr/local/go/src/net/http/h2_bundle.go:8863
				// _ = "end of CoverTab[40436]"
//line /usr/local/go/src/net/http/h2_bundle.go:8863
			}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8863
				_go_fuzz_dep_.CoverTab[40437]++

//line /usr/local/go/src/net/http/h2_bundle.go:8866
				continue
//line /usr/local/go/src/net/http/h2_bundle.go:8866
				// _ = "end of CoverTab[40437]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8867
				_go_fuzz_dep_.CoverTab[40438]++
//line /usr/local/go/src/net/http/h2_bundle.go:8867
				if http2asciiEqualFold(k, "connection") || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8867
					_go_fuzz_dep_.CoverTab[40439]++
//line /usr/local/go/src/net/http/h2_bundle.go:8867
					return http2asciiEqualFold(k, "proxy-connection")
											// _ = "end of CoverTab[40439]"
//line /usr/local/go/src/net/http/h2_bundle.go:8868
				}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8868
					_go_fuzz_dep_.CoverTab[40440]++
//line /usr/local/go/src/net/http/h2_bundle.go:8868
					return http2asciiEqualFold(k, "transfer-encoding")
											// _ = "end of CoverTab[40440]"
//line /usr/local/go/src/net/http/h2_bundle.go:8869
				}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8869
					_go_fuzz_dep_.CoverTab[40441]++
//line /usr/local/go/src/net/http/h2_bundle.go:8869
					return http2asciiEqualFold(k, "upgrade")
											// _ = "end of CoverTab[40441]"
//line /usr/local/go/src/net/http/h2_bundle.go:8870
				}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8870
					_go_fuzz_dep_.CoverTab[40442]++
//line /usr/local/go/src/net/http/h2_bundle.go:8870
					return http2asciiEqualFold(k, "keep-alive")
											// _ = "end of CoverTab[40442]"
//line /usr/local/go/src/net/http/h2_bundle.go:8871
				}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8871
					_go_fuzz_dep_.CoverTab[40443]++

//line /usr/local/go/src/net/http/h2_bundle.go:8876
					continue
//line /usr/local/go/src/net/http/h2_bundle.go:8876
					// _ = "end of CoverTab[40443]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8877
					_go_fuzz_dep_.CoverTab[40444]++
//line /usr/local/go/src/net/http/h2_bundle.go:8877
					if http2asciiEqualFold(k, "user-agent") {
//line /usr/local/go/src/net/http/h2_bundle.go:8877
						_go_fuzz_dep_.CoverTab[40445]++

//line /usr/local/go/src/net/http/h2_bundle.go:8882
						didUA = true
						if len(vv) < 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:8883
							_go_fuzz_dep_.CoverTab[40447]++
													continue
//line /usr/local/go/src/net/http/h2_bundle.go:8884
							// _ = "end of CoverTab[40447]"
						} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8885
							_go_fuzz_dep_.CoverTab[40448]++
//line /usr/local/go/src/net/http/h2_bundle.go:8885
							// _ = "end of CoverTab[40448]"
//line /usr/local/go/src/net/http/h2_bundle.go:8885
						}
//line /usr/local/go/src/net/http/h2_bundle.go:8885
						// _ = "end of CoverTab[40445]"
//line /usr/local/go/src/net/http/h2_bundle.go:8885
						_go_fuzz_dep_.CoverTab[40446]++
												vv = vv[:1]
												if vv[0] == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:8887
							_go_fuzz_dep_.CoverTab[40449]++
													continue
//line /usr/local/go/src/net/http/h2_bundle.go:8888
							// _ = "end of CoverTab[40449]"
						} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8889
							_go_fuzz_dep_.CoverTab[40450]++
//line /usr/local/go/src/net/http/h2_bundle.go:8889
							// _ = "end of CoverTab[40450]"
//line /usr/local/go/src/net/http/h2_bundle.go:8889
						}
//line /usr/local/go/src/net/http/h2_bundle.go:8889
						// _ = "end of CoverTab[40446]"
					} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8890
						_go_fuzz_dep_.CoverTab[40451]++
//line /usr/local/go/src/net/http/h2_bundle.go:8890
						if http2asciiEqualFold(k, "cookie") {
//line /usr/local/go/src/net/http/h2_bundle.go:8890
							_go_fuzz_dep_.CoverTab[40452]++

//line /usr/local/go/src/net/http/h2_bundle.go:8894
							for _, v := range vv {
//line /usr/local/go/src/net/http/h2_bundle.go:8894
								_go_fuzz_dep_.CoverTab[40454]++
														for {
//line /usr/local/go/src/net/http/h2_bundle.go:8895
									_go_fuzz_dep_.CoverTab[40456]++
															p := strings.IndexByte(v, ';')
															if p < 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8897
										_go_fuzz_dep_.CoverTab[40459]++
																break
//line /usr/local/go/src/net/http/h2_bundle.go:8898
										// _ = "end of CoverTab[40459]"
									} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8899
										_go_fuzz_dep_.CoverTab[40460]++
//line /usr/local/go/src/net/http/h2_bundle.go:8899
										// _ = "end of CoverTab[40460]"
//line /usr/local/go/src/net/http/h2_bundle.go:8899
									}
//line /usr/local/go/src/net/http/h2_bundle.go:8899
									// _ = "end of CoverTab[40456]"
//line /usr/local/go/src/net/http/h2_bundle.go:8899
									_go_fuzz_dep_.CoverTab[40457]++
															f("cookie", v[:p])
															p++

															for p+1 <= len(v) && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8903
										_go_fuzz_dep_.CoverTab[40461]++
//line /usr/local/go/src/net/http/h2_bundle.go:8903
										return v[p] == ' '
//line /usr/local/go/src/net/http/h2_bundle.go:8903
										// _ = "end of CoverTab[40461]"
//line /usr/local/go/src/net/http/h2_bundle.go:8903
									}() {
//line /usr/local/go/src/net/http/h2_bundle.go:8903
										_go_fuzz_dep_.CoverTab[40462]++
																p++
//line /usr/local/go/src/net/http/h2_bundle.go:8904
										// _ = "end of CoverTab[40462]"
									}
//line /usr/local/go/src/net/http/h2_bundle.go:8905
									// _ = "end of CoverTab[40457]"
//line /usr/local/go/src/net/http/h2_bundle.go:8905
									_go_fuzz_dep_.CoverTab[40458]++
															v = v[p:]
//line /usr/local/go/src/net/http/h2_bundle.go:8906
									// _ = "end of CoverTab[40458]"
								}
//line /usr/local/go/src/net/http/h2_bundle.go:8907
								// _ = "end of CoverTab[40454]"
//line /usr/local/go/src/net/http/h2_bundle.go:8907
								_go_fuzz_dep_.CoverTab[40455]++
														if len(v) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8908
									_go_fuzz_dep_.CoverTab[40463]++
															f("cookie", v)
//line /usr/local/go/src/net/http/h2_bundle.go:8909
									// _ = "end of CoverTab[40463]"
								} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8910
									_go_fuzz_dep_.CoverTab[40464]++
//line /usr/local/go/src/net/http/h2_bundle.go:8910
									// _ = "end of CoverTab[40464]"
//line /usr/local/go/src/net/http/h2_bundle.go:8910
								}
//line /usr/local/go/src/net/http/h2_bundle.go:8910
								// _ = "end of CoverTab[40455]"
							}
//line /usr/local/go/src/net/http/h2_bundle.go:8911
							// _ = "end of CoverTab[40452]"
//line /usr/local/go/src/net/http/h2_bundle.go:8911
							_go_fuzz_dep_.CoverTab[40453]++
													continue
//line /usr/local/go/src/net/http/h2_bundle.go:8912
							// _ = "end of CoverTab[40453]"
						} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8913
							_go_fuzz_dep_.CoverTab[40465]++
//line /usr/local/go/src/net/http/h2_bundle.go:8913
							// _ = "end of CoverTab[40465]"
//line /usr/local/go/src/net/http/h2_bundle.go:8913
						}
//line /usr/local/go/src/net/http/h2_bundle.go:8913
						// _ = "end of CoverTab[40451]"
//line /usr/local/go/src/net/http/h2_bundle.go:8913
					}
//line /usr/local/go/src/net/http/h2_bundle.go:8913
					// _ = "end of CoverTab[40444]"
//line /usr/local/go/src/net/http/h2_bundle.go:8913
				}
//line /usr/local/go/src/net/http/h2_bundle.go:8913
				// _ = "end of CoverTab[40438]"
//line /usr/local/go/src/net/http/h2_bundle.go:8913
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8913
			// _ = "end of CoverTab[40434]"
//line /usr/local/go/src/net/http/h2_bundle.go:8913
			_go_fuzz_dep_.CoverTab[40435]++

									for _, v := range vv {
//line /usr/local/go/src/net/http/h2_bundle.go:8915
				_go_fuzz_dep_.CoverTab[40466]++
										f(k, v)
//line /usr/local/go/src/net/http/h2_bundle.go:8916
				// _ = "end of CoverTab[40466]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:8917
			// _ = "end of CoverTab[40435]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8918
		// _ = "end of CoverTab[40424]"
//line /usr/local/go/src/net/http/h2_bundle.go:8918
		_go_fuzz_dep_.CoverTab[40425]++
								if http2shouldSendReqContentLength(req.Method, contentLength) {
//line /usr/local/go/src/net/http/h2_bundle.go:8919
			_go_fuzz_dep_.CoverTab[40467]++
									f("content-length", strconv.FormatInt(contentLength, 10))
//line /usr/local/go/src/net/http/h2_bundle.go:8920
			// _ = "end of CoverTab[40467]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8921
			_go_fuzz_dep_.CoverTab[40468]++
//line /usr/local/go/src/net/http/h2_bundle.go:8921
			// _ = "end of CoverTab[40468]"
//line /usr/local/go/src/net/http/h2_bundle.go:8921
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8921
		// _ = "end of CoverTab[40425]"
//line /usr/local/go/src/net/http/h2_bundle.go:8921
		_go_fuzz_dep_.CoverTab[40426]++
								if addGzipHeader {
//line /usr/local/go/src/net/http/h2_bundle.go:8922
			_go_fuzz_dep_.CoverTab[40469]++
									f("accept-encoding", "gzip")
//line /usr/local/go/src/net/http/h2_bundle.go:8923
			// _ = "end of CoverTab[40469]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8924
			_go_fuzz_dep_.CoverTab[40470]++
//line /usr/local/go/src/net/http/h2_bundle.go:8924
			// _ = "end of CoverTab[40470]"
//line /usr/local/go/src/net/http/h2_bundle.go:8924
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8924
		// _ = "end of CoverTab[40426]"
//line /usr/local/go/src/net/http/h2_bundle.go:8924
		_go_fuzz_dep_.CoverTab[40427]++
								if !didUA {
//line /usr/local/go/src/net/http/h2_bundle.go:8925
			_go_fuzz_dep_.CoverTab[40471]++
									f("user-agent", http2defaultUserAgent)
//line /usr/local/go/src/net/http/h2_bundle.go:8926
			// _ = "end of CoverTab[40471]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8927
			_go_fuzz_dep_.CoverTab[40472]++
//line /usr/local/go/src/net/http/h2_bundle.go:8927
			// _ = "end of CoverTab[40472]"
//line /usr/local/go/src/net/http/h2_bundle.go:8927
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8927
		// _ = "end of CoverTab[40427]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8928
	// _ = "end of CoverTab[40395]"
//line /usr/local/go/src/net/http/h2_bundle.go:8928
	_go_fuzz_dep_.CoverTab[40396]++

//line /usr/local/go/src/net/http/h2_bundle.go:8934
	hlSize := uint64(0)
	enumerateHeaders(func(name, value string) {
//line /usr/local/go/src/net/http/h2_bundle.go:8935
		_go_fuzz_dep_.CoverTab[40473]++
								hf := hpack.HeaderField{Name: name, Value: value}
								hlSize += uint64(hf.Size())
//line /usr/local/go/src/net/http/h2_bundle.go:8937
		// _ = "end of CoverTab[40473]"
	})
//line /usr/local/go/src/net/http/h2_bundle.go:8938
	// _ = "end of CoverTab[40396]"
//line /usr/local/go/src/net/http/h2_bundle.go:8938
	_go_fuzz_dep_.CoverTab[40397]++

							if hlSize > cc.peerMaxHeaderListSize {
//line /usr/local/go/src/net/http/h2_bundle.go:8940
		_go_fuzz_dep_.CoverTab[40474]++
								return nil, http2errRequestHeaderListSize
//line /usr/local/go/src/net/http/h2_bundle.go:8941
		// _ = "end of CoverTab[40474]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8942
		_go_fuzz_dep_.CoverTab[40475]++
//line /usr/local/go/src/net/http/h2_bundle.go:8942
		// _ = "end of CoverTab[40475]"
//line /usr/local/go/src/net/http/h2_bundle.go:8942
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8942
	// _ = "end of CoverTab[40397]"
//line /usr/local/go/src/net/http/h2_bundle.go:8942
	_go_fuzz_dep_.CoverTab[40398]++

							trace := httptrace.ContextClientTrace(req.Context())
							traceHeaders := http2traceHasWroteHeaderField(trace)

//line /usr/local/go/src/net/http/h2_bundle.go:8948
	enumerateHeaders(func(name, value string) {
//line /usr/local/go/src/net/http/h2_bundle.go:8948
		_go_fuzz_dep_.CoverTab[40476]++
								name, ascii := http2lowerHeader(name)
								if !ascii {
//line /usr/local/go/src/net/http/h2_bundle.go:8950
			_go_fuzz_dep_.CoverTab[40478]++

//line /usr/local/go/src/net/http/h2_bundle.go:8953
			return
//line /usr/local/go/src/net/http/h2_bundle.go:8953
			// _ = "end of CoverTab[40478]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8954
			_go_fuzz_dep_.CoverTab[40479]++
//line /usr/local/go/src/net/http/h2_bundle.go:8954
			// _ = "end of CoverTab[40479]"
//line /usr/local/go/src/net/http/h2_bundle.go:8954
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8954
		// _ = "end of CoverTab[40476]"
//line /usr/local/go/src/net/http/h2_bundle.go:8954
		_go_fuzz_dep_.CoverTab[40477]++
								cc.writeHeader(name, value)
								if traceHeaders {
//line /usr/local/go/src/net/http/h2_bundle.go:8956
			_go_fuzz_dep_.CoverTab[40480]++
									http2traceWroteHeaderField(trace, name, value)
//line /usr/local/go/src/net/http/h2_bundle.go:8957
			// _ = "end of CoverTab[40480]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8958
			_go_fuzz_dep_.CoverTab[40481]++
//line /usr/local/go/src/net/http/h2_bundle.go:8958
			// _ = "end of CoverTab[40481]"
//line /usr/local/go/src/net/http/h2_bundle.go:8958
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8958
		// _ = "end of CoverTab[40477]"
	})
//line /usr/local/go/src/net/http/h2_bundle.go:8959
	// _ = "end of CoverTab[40398]"
//line /usr/local/go/src/net/http/h2_bundle.go:8959
	_go_fuzz_dep_.CoverTab[40399]++

							return cc.hbuf.Bytes(), nil
//line /usr/local/go/src/net/http/h2_bundle.go:8961
	// _ = "end of CoverTab[40399]"
}

// shouldSendReqContentLength reports whether the http2.Transport should send
//line /usr/local/go/src/net/http/h2_bundle.go:8964
// a "content-length" request header. This logic is basically a copy of the net/http
//line /usr/local/go/src/net/http/h2_bundle.go:8964
// transferWriter.shouldSendContentLength.
//line /usr/local/go/src/net/http/h2_bundle.go:8964
// The contentLength is the corrected contentLength (so 0 means actually 0, not unknown).
//line /usr/local/go/src/net/http/h2_bundle.go:8964
// -1 means unknown.
//line /usr/local/go/src/net/http/h2_bundle.go:8969
func http2shouldSendReqContentLength(method string, contentLength int64) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:8969
	_go_fuzz_dep_.CoverTab[40482]++
							if contentLength > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8970
		_go_fuzz_dep_.CoverTab[40485]++
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:8971
		// _ = "end of CoverTab[40485]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8972
		_go_fuzz_dep_.CoverTab[40486]++
//line /usr/local/go/src/net/http/h2_bundle.go:8972
		// _ = "end of CoverTab[40486]"
//line /usr/local/go/src/net/http/h2_bundle.go:8972
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8972
	// _ = "end of CoverTab[40482]"
//line /usr/local/go/src/net/http/h2_bundle.go:8972
	_go_fuzz_dep_.CoverTab[40483]++
							if contentLength < 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:8973
		_go_fuzz_dep_.CoverTab[40487]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:8974
		// _ = "end of CoverTab[40487]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8975
		_go_fuzz_dep_.CoverTab[40488]++
//line /usr/local/go/src/net/http/h2_bundle.go:8975
		// _ = "end of CoverTab[40488]"
//line /usr/local/go/src/net/http/h2_bundle.go:8975
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8975
	// _ = "end of CoverTab[40483]"
//line /usr/local/go/src/net/http/h2_bundle.go:8975
	_go_fuzz_dep_.CoverTab[40484]++

//line /usr/local/go/src/net/http/h2_bundle.go:8978
	switch method {
	case "POST", "PUT", "PATCH":
//line /usr/local/go/src/net/http/h2_bundle.go:8979
		_go_fuzz_dep_.CoverTab[40489]++
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:8980
		// _ = "end of CoverTab[40489]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:8981
		_go_fuzz_dep_.CoverTab[40490]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:8982
		// _ = "end of CoverTab[40490]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8983
	// _ = "end of CoverTab[40484]"
}

// requires cc.wmu be held.
func (cc *http2ClientConn) encodeTrailers(trailer Header) ([]byte, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:8987
	_go_fuzz_dep_.CoverTab[40491]++
							cc.hbuf.Reset()

							hlSize := uint64(0)
							for k, vv := range trailer {
//line /usr/local/go/src/net/http/h2_bundle.go:8991
		_go_fuzz_dep_.CoverTab[40495]++
								for _, v := range vv {
//line /usr/local/go/src/net/http/h2_bundle.go:8992
			_go_fuzz_dep_.CoverTab[40496]++
									hf := hpack.HeaderField{Name: k, Value: v}
									hlSize += uint64(hf.Size())
//line /usr/local/go/src/net/http/h2_bundle.go:8994
			// _ = "end of CoverTab[40496]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:8995
		// _ = "end of CoverTab[40495]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8996
	// _ = "end of CoverTab[40491]"
//line /usr/local/go/src/net/http/h2_bundle.go:8996
	_go_fuzz_dep_.CoverTab[40492]++
							if hlSize > cc.peerMaxHeaderListSize {
//line /usr/local/go/src/net/http/h2_bundle.go:8997
		_go_fuzz_dep_.CoverTab[40497]++
								return nil, http2errRequestHeaderListSize
//line /usr/local/go/src/net/http/h2_bundle.go:8998
		// _ = "end of CoverTab[40497]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:8999
		_go_fuzz_dep_.CoverTab[40498]++
//line /usr/local/go/src/net/http/h2_bundle.go:8999
		// _ = "end of CoverTab[40498]"
//line /usr/local/go/src/net/http/h2_bundle.go:8999
	}
//line /usr/local/go/src/net/http/h2_bundle.go:8999
	// _ = "end of CoverTab[40492]"
//line /usr/local/go/src/net/http/h2_bundle.go:8999
	_go_fuzz_dep_.CoverTab[40493]++

							for k, vv := range trailer {
//line /usr/local/go/src/net/http/h2_bundle.go:9001
		_go_fuzz_dep_.CoverTab[40499]++
								lowKey, ascii := http2lowerHeader(k)
								if !ascii {
//line /usr/local/go/src/net/http/h2_bundle.go:9003
			_go_fuzz_dep_.CoverTab[40501]++

//line /usr/local/go/src/net/http/h2_bundle.go:9006
			continue
//line /usr/local/go/src/net/http/h2_bundle.go:9006
			// _ = "end of CoverTab[40501]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9007
			_go_fuzz_dep_.CoverTab[40502]++
//line /usr/local/go/src/net/http/h2_bundle.go:9007
			// _ = "end of CoverTab[40502]"
//line /usr/local/go/src/net/http/h2_bundle.go:9007
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9007
		// _ = "end of CoverTab[40499]"
//line /usr/local/go/src/net/http/h2_bundle.go:9007
		_go_fuzz_dep_.CoverTab[40500]++

//line /usr/local/go/src/net/http/h2_bundle.go:9010
		for _, v := range vv {
//line /usr/local/go/src/net/http/h2_bundle.go:9010
			_go_fuzz_dep_.CoverTab[40503]++
									cc.writeHeader(lowKey, v)
//line /usr/local/go/src/net/http/h2_bundle.go:9011
			// _ = "end of CoverTab[40503]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9012
		// _ = "end of CoverTab[40500]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9013
	// _ = "end of CoverTab[40493]"
//line /usr/local/go/src/net/http/h2_bundle.go:9013
	_go_fuzz_dep_.CoverTab[40494]++
							return cc.hbuf.Bytes(), nil
//line /usr/local/go/src/net/http/h2_bundle.go:9014
	// _ = "end of CoverTab[40494]"
}

func (cc *http2ClientConn) writeHeader(name, value string) {
//line /usr/local/go/src/net/http/h2_bundle.go:9017
	_go_fuzz_dep_.CoverTab[40504]++
							if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:9018
		_go_fuzz_dep_.CoverTab[40506]++
								log.Printf("http2: Transport encoding header %q = %q", name, value)
//line /usr/local/go/src/net/http/h2_bundle.go:9019
		// _ = "end of CoverTab[40506]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9020
		_go_fuzz_dep_.CoverTab[40507]++
//line /usr/local/go/src/net/http/h2_bundle.go:9020
		// _ = "end of CoverTab[40507]"
//line /usr/local/go/src/net/http/h2_bundle.go:9020
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9020
	// _ = "end of CoverTab[40504]"
//line /usr/local/go/src/net/http/h2_bundle.go:9020
	_go_fuzz_dep_.CoverTab[40505]++
							cc.henc.WriteField(hpack.HeaderField{Name: name, Value: value})
//line /usr/local/go/src/net/http/h2_bundle.go:9021
	// _ = "end of CoverTab[40505]"
}

type http2resAndError struct {
	_	http2incomparable
	res	*Response
	err	error
}

// requires cc.mu be held.
func (cc *http2ClientConn) addStreamLocked(cs *http2clientStream) {
//line /usr/local/go/src/net/http/h2_bundle.go:9031
	_go_fuzz_dep_.CoverTab[40508]++
							cs.flow.add(int32(cc.initialWindowSize))
							cs.flow.setConnFlow(&cc.flow)
							cs.inflow.add(http2transportDefaultStreamFlow)
							cs.inflow.setConnFlow(&cc.inflow)
							cs.ID = cc.nextStreamID
							cc.nextStreamID += 2
							cc.streams[cs.ID] = cs
							if cs.ID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9039
		_go_fuzz_dep_.CoverTab[40509]++
								panic("assigned stream ID 0")
//line /usr/local/go/src/net/http/h2_bundle.go:9040
		// _ = "end of CoverTab[40509]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9041
		_go_fuzz_dep_.CoverTab[40510]++
//line /usr/local/go/src/net/http/h2_bundle.go:9041
		// _ = "end of CoverTab[40510]"
//line /usr/local/go/src/net/http/h2_bundle.go:9041
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9041
	// _ = "end of CoverTab[40508]"
}

func (cc *http2ClientConn) forgetStreamID(id uint32) {
//line /usr/local/go/src/net/http/h2_bundle.go:9044
	_go_fuzz_dep_.CoverTab[40511]++
							cc.mu.Lock()
							slen := len(cc.streams)
							delete(cc.streams, id)
							if len(cc.streams) != slen-1 {
//line /usr/local/go/src/net/http/h2_bundle.go:9048
		_go_fuzz_dep_.CoverTab[40515]++
								panic("forgetting unknown stream id")
//line /usr/local/go/src/net/http/h2_bundle.go:9049
		// _ = "end of CoverTab[40515]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9050
		_go_fuzz_dep_.CoverTab[40516]++
//line /usr/local/go/src/net/http/h2_bundle.go:9050
		// _ = "end of CoverTab[40516]"
//line /usr/local/go/src/net/http/h2_bundle.go:9050
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9050
	// _ = "end of CoverTab[40511]"
//line /usr/local/go/src/net/http/h2_bundle.go:9050
	_go_fuzz_dep_.CoverTab[40512]++
							cc.lastActive = time.Now()
							if len(cc.streams) == 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9052
		_go_fuzz_dep_.CoverTab[40517]++
//line /usr/local/go/src/net/http/h2_bundle.go:9052
		return cc.idleTimer != nil
//line /usr/local/go/src/net/http/h2_bundle.go:9052
		// _ = "end of CoverTab[40517]"
//line /usr/local/go/src/net/http/h2_bundle.go:9052
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9052
		_go_fuzz_dep_.CoverTab[40518]++
								cc.idleTimer.Reset(cc.idleTimeout)
								cc.lastIdle = time.Now()
//line /usr/local/go/src/net/http/h2_bundle.go:9054
		// _ = "end of CoverTab[40518]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9055
		_go_fuzz_dep_.CoverTab[40519]++
//line /usr/local/go/src/net/http/h2_bundle.go:9055
		// _ = "end of CoverTab[40519]"
//line /usr/local/go/src/net/http/h2_bundle.go:9055
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9055
	// _ = "end of CoverTab[40512]"
//line /usr/local/go/src/net/http/h2_bundle.go:9055
	_go_fuzz_dep_.CoverTab[40513]++

//line /usr/local/go/src/net/http/h2_bundle.go:9058
	cc.cond.Broadcast()

	closeOnIdle := cc.singleUse || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9060
		_go_fuzz_dep_.CoverTab[40520]++
//line /usr/local/go/src/net/http/h2_bundle.go:9060
		return cc.doNotReuse
//line /usr/local/go/src/net/http/h2_bundle.go:9060
		// _ = "end of CoverTab[40520]"
//line /usr/local/go/src/net/http/h2_bundle.go:9060
	}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9060
		_go_fuzz_dep_.CoverTab[40521]++
//line /usr/local/go/src/net/http/h2_bundle.go:9060
		return cc.t.disableKeepAlives()
//line /usr/local/go/src/net/http/h2_bundle.go:9060
		// _ = "end of CoverTab[40521]"
//line /usr/local/go/src/net/http/h2_bundle.go:9060
	}() || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9060
		_go_fuzz_dep_.CoverTab[40522]++
//line /usr/local/go/src/net/http/h2_bundle.go:9060
		return cc.goAway != nil
//line /usr/local/go/src/net/http/h2_bundle.go:9060
		// _ = "end of CoverTab[40522]"
//line /usr/local/go/src/net/http/h2_bundle.go:9060
	}()
							if closeOnIdle && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9061
		_go_fuzz_dep_.CoverTab[40523]++
//line /usr/local/go/src/net/http/h2_bundle.go:9061
		return cc.streamsReserved == 0
//line /usr/local/go/src/net/http/h2_bundle.go:9061
		// _ = "end of CoverTab[40523]"
//line /usr/local/go/src/net/http/h2_bundle.go:9061
	}() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9061
		_go_fuzz_dep_.CoverTab[40524]++
//line /usr/local/go/src/net/http/h2_bundle.go:9061
		return len(cc.streams) == 0
//line /usr/local/go/src/net/http/h2_bundle.go:9061
		// _ = "end of CoverTab[40524]"
//line /usr/local/go/src/net/http/h2_bundle.go:9061
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9061
		_go_fuzz_dep_.CoverTab[40525]++
								if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:9062
			_go_fuzz_dep_.CoverTab[40527]++
									cc.vlogf("http2: Transport closing idle conn %p (forSingleUse=%v, maxStream=%v)", cc, cc.singleUse, cc.nextStreamID-2)
//line /usr/local/go/src/net/http/h2_bundle.go:9063
			// _ = "end of CoverTab[40527]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9064
			_go_fuzz_dep_.CoverTab[40528]++
//line /usr/local/go/src/net/http/h2_bundle.go:9064
			// _ = "end of CoverTab[40528]"
//line /usr/local/go/src/net/http/h2_bundle.go:9064
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9064
		// _ = "end of CoverTab[40525]"
//line /usr/local/go/src/net/http/h2_bundle.go:9064
		_go_fuzz_dep_.CoverTab[40526]++
								cc.closed = true
								defer cc.closeConn()
//line /usr/local/go/src/net/http/h2_bundle.go:9066
		// _ = "end of CoverTab[40526]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9067
		_go_fuzz_dep_.CoverTab[40529]++
//line /usr/local/go/src/net/http/h2_bundle.go:9067
		// _ = "end of CoverTab[40529]"
//line /usr/local/go/src/net/http/h2_bundle.go:9067
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9067
	// _ = "end of CoverTab[40513]"
//line /usr/local/go/src/net/http/h2_bundle.go:9067
	_go_fuzz_dep_.CoverTab[40514]++

							cc.mu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:9069
	// _ = "end of CoverTab[40514]"
}

// clientConnReadLoop is the state owned by the clientConn's frame-reading readLoop.
type http2clientConnReadLoop struct {
	_	http2incomparable
	cc	*http2ClientConn
}

// readLoop runs in its own goroutine and reads and dispatches frames.
func (cc *http2ClientConn) readLoop() {
//line /usr/local/go/src/net/http/h2_bundle.go:9079
	_go_fuzz_dep_.CoverTab[40530]++
							rl := &http2clientConnReadLoop{cc: cc}
							defer rl.cleanup()
							cc.readerErr = rl.run()
							if ce, ok := cc.readerErr.(http2ConnectionError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:9083
		_go_fuzz_dep_.CoverTab[40531]++
								cc.wmu.Lock()
								cc.fr.WriteGoAway(0, http2ErrCode(ce), nil)
								cc.wmu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:9086
		// _ = "end of CoverTab[40531]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9087
		_go_fuzz_dep_.CoverTab[40532]++
//line /usr/local/go/src/net/http/h2_bundle.go:9087
		// _ = "end of CoverTab[40532]"
//line /usr/local/go/src/net/http/h2_bundle.go:9087
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9087
	// _ = "end of CoverTab[40530]"
}

// GoAwayError is returned by the Transport when the server closes the
//line /usr/local/go/src/net/http/h2_bundle.go:9090
// TCP connection after sending a GOAWAY frame.
//line /usr/local/go/src/net/http/h2_bundle.go:9092
type http2GoAwayError struct {
	LastStreamID	uint32
	ErrCode		http2ErrCode
	DebugData	string
}

func (e http2GoAwayError) Error() string {
//line /usr/local/go/src/net/http/h2_bundle.go:9098
	_go_fuzz_dep_.CoverTab[40533]++
							return fmt.Sprintf("http2: server sent GOAWAY and closed the connection; LastStreamID=%v, ErrCode=%v, debug=%q",
		e.LastStreamID, e.ErrCode, e.DebugData)
//line /usr/local/go/src/net/http/h2_bundle.go:9100
	// _ = "end of CoverTab[40533]"
}

func http2isEOFOrNetReadError(err error) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9103
	_go_fuzz_dep_.CoverTab[40534]++
							if err == io.EOF {
//line /usr/local/go/src/net/http/h2_bundle.go:9104
		_go_fuzz_dep_.CoverTab[40536]++
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:9105
		// _ = "end of CoverTab[40536]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9106
		_go_fuzz_dep_.CoverTab[40537]++
//line /usr/local/go/src/net/http/h2_bundle.go:9106
		// _ = "end of CoverTab[40537]"
//line /usr/local/go/src/net/http/h2_bundle.go:9106
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9106
	// _ = "end of CoverTab[40534]"
//line /usr/local/go/src/net/http/h2_bundle.go:9106
	_go_fuzz_dep_.CoverTab[40535]++
							ne, ok := err.(*net.OpError)
							return ok && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9108
		_go_fuzz_dep_.CoverTab[40538]++
//line /usr/local/go/src/net/http/h2_bundle.go:9108
		return ne.Op == "read"
//line /usr/local/go/src/net/http/h2_bundle.go:9108
		// _ = "end of CoverTab[40538]"
//line /usr/local/go/src/net/http/h2_bundle.go:9108
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:9108
	// _ = "end of CoverTab[40535]"
}

func (rl *http2clientConnReadLoop) cleanup() {
//line /usr/local/go/src/net/http/h2_bundle.go:9111
	_go_fuzz_dep_.CoverTab[40539]++
							cc := rl.cc
							cc.t.connPool().MarkDead(cc)
							defer cc.closeConn()
							defer close(cc.readerDone)

							if cc.idleTimer != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9117
		_go_fuzz_dep_.CoverTab[40543]++
								cc.idleTimer.Stop()
//line /usr/local/go/src/net/http/h2_bundle.go:9118
		// _ = "end of CoverTab[40543]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9119
		_go_fuzz_dep_.CoverTab[40544]++
//line /usr/local/go/src/net/http/h2_bundle.go:9119
		// _ = "end of CoverTab[40544]"
//line /usr/local/go/src/net/http/h2_bundle.go:9119
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9119
	// _ = "end of CoverTab[40539]"
//line /usr/local/go/src/net/http/h2_bundle.go:9119
	_go_fuzz_dep_.CoverTab[40540]++

//line /usr/local/go/src/net/http/h2_bundle.go:9124
	err := cc.readerErr
	cc.mu.Lock()
	if cc.goAway != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9126
		_go_fuzz_dep_.CoverTab[40545]++
//line /usr/local/go/src/net/http/h2_bundle.go:9126
		return http2isEOFOrNetReadError(err)
//line /usr/local/go/src/net/http/h2_bundle.go:9126
		// _ = "end of CoverTab[40545]"
//line /usr/local/go/src/net/http/h2_bundle.go:9126
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9126
		_go_fuzz_dep_.CoverTab[40546]++
								err = http2GoAwayError{
			LastStreamID:	cc.goAway.LastStreamID,
			ErrCode:	cc.goAway.ErrCode,
			DebugData:	cc.goAwayDebug,
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9131
		// _ = "end of CoverTab[40546]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9132
		_go_fuzz_dep_.CoverTab[40547]++
//line /usr/local/go/src/net/http/h2_bundle.go:9132
		if err == io.EOF {
//line /usr/local/go/src/net/http/h2_bundle.go:9132
			_go_fuzz_dep_.CoverTab[40548]++
									err = io.ErrUnexpectedEOF
//line /usr/local/go/src/net/http/h2_bundle.go:9133
			// _ = "end of CoverTab[40548]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9134
			_go_fuzz_dep_.CoverTab[40549]++
//line /usr/local/go/src/net/http/h2_bundle.go:9134
			// _ = "end of CoverTab[40549]"
//line /usr/local/go/src/net/http/h2_bundle.go:9134
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9134
		// _ = "end of CoverTab[40547]"
//line /usr/local/go/src/net/http/h2_bundle.go:9134
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9134
	// _ = "end of CoverTab[40540]"
//line /usr/local/go/src/net/http/h2_bundle.go:9134
	_go_fuzz_dep_.CoverTab[40541]++
							cc.closed = true

							for _, cs := range cc.streams {
//line /usr/local/go/src/net/http/h2_bundle.go:9137
		_go_fuzz_dep_.CoverTab[40550]++
								select {
		case <-cs.peerClosed:
//line /usr/local/go/src/net/http/h2_bundle.go:9139
			_go_fuzz_dep_.CoverTab[40551]++
//line /usr/local/go/src/net/http/h2_bundle.go:9139
			// _ = "end of CoverTab[40551]"

//line /usr/local/go/src/net/http/h2_bundle.go:9142
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:9142
			_go_fuzz_dep_.CoverTab[40552]++
									cs.abortStreamLocked(err)
//line /usr/local/go/src/net/http/h2_bundle.go:9143
			// _ = "end of CoverTab[40552]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9144
		// _ = "end of CoverTab[40550]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9145
	// _ = "end of CoverTab[40541]"
//line /usr/local/go/src/net/http/h2_bundle.go:9145
	_go_fuzz_dep_.CoverTab[40542]++
							cc.cond.Broadcast()
							cc.mu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:9147
	// _ = "end of CoverTab[40542]"
}

// countReadFrameError calls Transport.CountError with a string
//line /usr/local/go/src/net/http/h2_bundle.go:9150
// representing err.
//line /usr/local/go/src/net/http/h2_bundle.go:9152
func (cc *http2ClientConn) countReadFrameError(err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:9152
	_go_fuzz_dep_.CoverTab[40553]++
							f := cc.t.CountError
							if f == nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9154
		_go_fuzz_dep_.CoverTab[40559]++
//line /usr/local/go/src/net/http/h2_bundle.go:9154
		return err == nil
//line /usr/local/go/src/net/http/h2_bundle.go:9154
		// _ = "end of CoverTab[40559]"
//line /usr/local/go/src/net/http/h2_bundle.go:9154
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9154
		_go_fuzz_dep_.CoverTab[40560]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:9155
		// _ = "end of CoverTab[40560]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9156
		_go_fuzz_dep_.CoverTab[40561]++
//line /usr/local/go/src/net/http/h2_bundle.go:9156
		// _ = "end of CoverTab[40561]"
//line /usr/local/go/src/net/http/h2_bundle.go:9156
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9156
	// _ = "end of CoverTab[40553]"
//line /usr/local/go/src/net/http/h2_bundle.go:9156
	_go_fuzz_dep_.CoverTab[40554]++
							if ce, ok := err.(http2ConnectionError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:9157
		_go_fuzz_dep_.CoverTab[40562]++
								errCode := http2ErrCode(ce)
								f(fmt.Sprintf("read_frame_conn_error_%s", errCode.stringToken()))
								return
//line /usr/local/go/src/net/http/h2_bundle.go:9160
		// _ = "end of CoverTab[40562]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9161
		_go_fuzz_dep_.CoverTab[40563]++
//line /usr/local/go/src/net/http/h2_bundle.go:9161
		// _ = "end of CoverTab[40563]"
//line /usr/local/go/src/net/http/h2_bundle.go:9161
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9161
	// _ = "end of CoverTab[40554]"
//line /usr/local/go/src/net/http/h2_bundle.go:9161
	_go_fuzz_dep_.CoverTab[40555]++
							if errors.Is(err, io.EOF) {
//line /usr/local/go/src/net/http/h2_bundle.go:9162
		_go_fuzz_dep_.CoverTab[40564]++
								f("read_frame_eof")
								return
//line /usr/local/go/src/net/http/h2_bundle.go:9164
		// _ = "end of CoverTab[40564]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9165
		_go_fuzz_dep_.CoverTab[40565]++
//line /usr/local/go/src/net/http/h2_bundle.go:9165
		// _ = "end of CoverTab[40565]"
//line /usr/local/go/src/net/http/h2_bundle.go:9165
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9165
	// _ = "end of CoverTab[40555]"
//line /usr/local/go/src/net/http/h2_bundle.go:9165
	_go_fuzz_dep_.CoverTab[40556]++
							if errors.Is(err, io.ErrUnexpectedEOF) {
//line /usr/local/go/src/net/http/h2_bundle.go:9166
		_go_fuzz_dep_.CoverTab[40566]++
								f("read_frame_unexpected_eof")
								return
//line /usr/local/go/src/net/http/h2_bundle.go:9168
		// _ = "end of CoverTab[40566]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9169
		_go_fuzz_dep_.CoverTab[40567]++
//line /usr/local/go/src/net/http/h2_bundle.go:9169
		// _ = "end of CoverTab[40567]"
//line /usr/local/go/src/net/http/h2_bundle.go:9169
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9169
	// _ = "end of CoverTab[40556]"
//line /usr/local/go/src/net/http/h2_bundle.go:9169
	_go_fuzz_dep_.CoverTab[40557]++
							if errors.Is(err, http2ErrFrameTooLarge) {
//line /usr/local/go/src/net/http/h2_bundle.go:9170
		_go_fuzz_dep_.CoverTab[40568]++
								f("read_frame_too_large")
								return
//line /usr/local/go/src/net/http/h2_bundle.go:9172
		// _ = "end of CoverTab[40568]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9173
		_go_fuzz_dep_.CoverTab[40569]++
//line /usr/local/go/src/net/http/h2_bundle.go:9173
		// _ = "end of CoverTab[40569]"
//line /usr/local/go/src/net/http/h2_bundle.go:9173
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9173
	// _ = "end of CoverTab[40557]"
//line /usr/local/go/src/net/http/h2_bundle.go:9173
	_go_fuzz_dep_.CoverTab[40558]++
							f("read_frame_other")
//line /usr/local/go/src/net/http/h2_bundle.go:9174
	// _ = "end of CoverTab[40558]"
}

func (rl *http2clientConnReadLoop) run() error {
//line /usr/local/go/src/net/http/h2_bundle.go:9177
	_go_fuzz_dep_.CoverTab[40570]++
							cc := rl.cc
							gotSettings := false
							readIdleTimeout := cc.t.ReadIdleTimeout
							var t *time.Timer
							if readIdleTimeout != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9182
		_go_fuzz_dep_.CoverTab[40572]++
								t = time.AfterFunc(readIdleTimeout, cc.healthCheck)
								defer t.Stop()
//line /usr/local/go/src/net/http/h2_bundle.go:9184
		// _ = "end of CoverTab[40572]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9185
		_go_fuzz_dep_.CoverTab[40573]++
//line /usr/local/go/src/net/http/h2_bundle.go:9185
		// _ = "end of CoverTab[40573]"
//line /usr/local/go/src/net/http/h2_bundle.go:9185
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9185
	// _ = "end of CoverTab[40570]"
//line /usr/local/go/src/net/http/h2_bundle.go:9185
	_go_fuzz_dep_.CoverTab[40571]++
							for {
//line /usr/local/go/src/net/http/h2_bundle.go:9186
		_go_fuzz_dep_.CoverTab[40574]++
								f, err := cc.fr.ReadFrame()
								if t != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9188
			_go_fuzz_dep_.CoverTab[40581]++
									t.Reset(readIdleTimeout)
//line /usr/local/go/src/net/http/h2_bundle.go:9189
			// _ = "end of CoverTab[40581]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9190
			_go_fuzz_dep_.CoverTab[40582]++
//line /usr/local/go/src/net/http/h2_bundle.go:9190
			// _ = "end of CoverTab[40582]"
//line /usr/local/go/src/net/http/h2_bundle.go:9190
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9190
		// _ = "end of CoverTab[40574]"
//line /usr/local/go/src/net/http/h2_bundle.go:9190
		_go_fuzz_dep_.CoverTab[40575]++
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9191
			_go_fuzz_dep_.CoverTab[40583]++
									cc.vlogf("http2: Transport readFrame error on conn %p: (%T) %v", cc, err, err)
//line /usr/local/go/src/net/http/h2_bundle.go:9192
			// _ = "end of CoverTab[40583]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9193
			_go_fuzz_dep_.CoverTab[40584]++
//line /usr/local/go/src/net/http/h2_bundle.go:9193
			// _ = "end of CoverTab[40584]"
//line /usr/local/go/src/net/http/h2_bundle.go:9193
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9193
		// _ = "end of CoverTab[40575]"
//line /usr/local/go/src/net/http/h2_bundle.go:9193
		_go_fuzz_dep_.CoverTab[40576]++
								if se, ok := err.(http2StreamError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:9194
			_go_fuzz_dep_.CoverTab[40585]++
									if cs := rl.streamByID(se.StreamID); cs != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9195
				_go_fuzz_dep_.CoverTab[40587]++
										if se.Cause == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9196
					_go_fuzz_dep_.CoverTab[40589]++
											se.Cause = cc.fr.errDetail
//line /usr/local/go/src/net/http/h2_bundle.go:9197
					// _ = "end of CoverTab[40589]"
				} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9198
					_go_fuzz_dep_.CoverTab[40590]++
//line /usr/local/go/src/net/http/h2_bundle.go:9198
					// _ = "end of CoverTab[40590]"
//line /usr/local/go/src/net/http/h2_bundle.go:9198
				}
//line /usr/local/go/src/net/http/h2_bundle.go:9198
				// _ = "end of CoverTab[40587]"
//line /usr/local/go/src/net/http/h2_bundle.go:9198
				_go_fuzz_dep_.CoverTab[40588]++
										rl.endStreamError(cs, se)
//line /usr/local/go/src/net/http/h2_bundle.go:9199
				// _ = "end of CoverTab[40588]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9200
				_go_fuzz_dep_.CoverTab[40591]++
//line /usr/local/go/src/net/http/h2_bundle.go:9200
				// _ = "end of CoverTab[40591]"
//line /usr/local/go/src/net/http/h2_bundle.go:9200
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9200
			// _ = "end of CoverTab[40585]"
//line /usr/local/go/src/net/http/h2_bundle.go:9200
			_go_fuzz_dep_.CoverTab[40586]++
									continue
//line /usr/local/go/src/net/http/h2_bundle.go:9201
			// _ = "end of CoverTab[40586]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9202
			_go_fuzz_dep_.CoverTab[40592]++
//line /usr/local/go/src/net/http/h2_bundle.go:9202
			if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9202
				_go_fuzz_dep_.CoverTab[40593]++
										cc.countReadFrameError(err)
										return err
//line /usr/local/go/src/net/http/h2_bundle.go:9204
				// _ = "end of CoverTab[40593]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9205
				_go_fuzz_dep_.CoverTab[40594]++
//line /usr/local/go/src/net/http/h2_bundle.go:9205
				// _ = "end of CoverTab[40594]"
//line /usr/local/go/src/net/http/h2_bundle.go:9205
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9205
			// _ = "end of CoverTab[40592]"
//line /usr/local/go/src/net/http/h2_bundle.go:9205
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9205
		// _ = "end of CoverTab[40576]"
//line /usr/local/go/src/net/http/h2_bundle.go:9205
		_go_fuzz_dep_.CoverTab[40577]++
								if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:9206
			_go_fuzz_dep_.CoverTab[40595]++
									cc.vlogf("http2: Transport received %s", http2summarizeFrame(f))
//line /usr/local/go/src/net/http/h2_bundle.go:9207
			// _ = "end of CoverTab[40595]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9208
			_go_fuzz_dep_.CoverTab[40596]++
//line /usr/local/go/src/net/http/h2_bundle.go:9208
			// _ = "end of CoverTab[40596]"
//line /usr/local/go/src/net/http/h2_bundle.go:9208
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9208
		// _ = "end of CoverTab[40577]"
//line /usr/local/go/src/net/http/h2_bundle.go:9208
		_go_fuzz_dep_.CoverTab[40578]++
								if !gotSettings {
//line /usr/local/go/src/net/http/h2_bundle.go:9209
			_go_fuzz_dep_.CoverTab[40597]++
									if _, ok := f.(*http2SettingsFrame); !ok {
//line /usr/local/go/src/net/http/h2_bundle.go:9210
				_go_fuzz_dep_.CoverTab[40599]++
										cc.logf("protocol error: received %T before a SETTINGS frame", f)
										return http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:9212
				// _ = "end of CoverTab[40599]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9213
				_go_fuzz_dep_.CoverTab[40600]++
//line /usr/local/go/src/net/http/h2_bundle.go:9213
				// _ = "end of CoverTab[40600]"
//line /usr/local/go/src/net/http/h2_bundle.go:9213
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9213
			// _ = "end of CoverTab[40597]"
//line /usr/local/go/src/net/http/h2_bundle.go:9213
			_go_fuzz_dep_.CoverTab[40598]++
									gotSettings = true
//line /usr/local/go/src/net/http/h2_bundle.go:9214
			// _ = "end of CoverTab[40598]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9215
			_go_fuzz_dep_.CoverTab[40601]++
//line /usr/local/go/src/net/http/h2_bundle.go:9215
			// _ = "end of CoverTab[40601]"
//line /usr/local/go/src/net/http/h2_bundle.go:9215
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9215
		// _ = "end of CoverTab[40578]"
//line /usr/local/go/src/net/http/h2_bundle.go:9215
		_go_fuzz_dep_.CoverTab[40579]++

								switch f := f.(type) {
		case *http2MetaHeadersFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:9218
			_go_fuzz_dep_.CoverTab[40602]++
									err = rl.processHeaders(f)
//line /usr/local/go/src/net/http/h2_bundle.go:9219
			// _ = "end of CoverTab[40602]"
		case *http2DataFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:9220
			_go_fuzz_dep_.CoverTab[40603]++
									err = rl.processData(f)
//line /usr/local/go/src/net/http/h2_bundle.go:9221
			// _ = "end of CoverTab[40603]"
		case *http2GoAwayFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:9222
			_go_fuzz_dep_.CoverTab[40604]++
									err = rl.processGoAway(f)
//line /usr/local/go/src/net/http/h2_bundle.go:9223
			// _ = "end of CoverTab[40604]"
		case *http2RSTStreamFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:9224
			_go_fuzz_dep_.CoverTab[40605]++
									err = rl.processResetStream(f)
//line /usr/local/go/src/net/http/h2_bundle.go:9225
			// _ = "end of CoverTab[40605]"
		case *http2SettingsFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:9226
			_go_fuzz_dep_.CoverTab[40606]++
									err = rl.processSettings(f)
//line /usr/local/go/src/net/http/h2_bundle.go:9227
			// _ = "end of CoverTab[40606]"
		case *http2PushPromiseFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:9228
			_go_fuzz_dep_.CoverTab[40607]++
									err = rl.processPushPromise(f)
//line /usr/local/go/src/net/http/h2_bundle.go:9229
			// _ = "end of CoverTab[40607]"
		case *http2WindowUpdateFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:9230
			_go_fuzz_dep_.CoverTab[40608]++
									err = rl.processWindowUpdate(f)
//line /usr/local/go/src/net/http/h2_bundle.go:9231
			// _ = "end of CoverTab[40608]"
		case *http2PingFrame:
//line /usr/local/go/src/net/http/h2_bundle.go:9232
			_go_fuzz_dep_.CoverTab[40609]++
									err = rl.processPing(f)
//line /usr/local/go/src/net/http/h2_bundle.go:9233
			// _ = "end of CoverTab[40609]"
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:9234
			_go_fuzz_dep_.CoverTab[40610]++
									cc.logf("Transport: unhandled response frame type %T", f)
//line /usr/local/go/src/net/http/h2_bundle.go:9235
			// _ = "end of CoverTab[40610]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9236
		// _ = "end of CoverTab[40579]"
//line /usr/local/go/src/net/http/h2_bundle.go:9236
		_go_fuzz_dep_.CoverTab[40580]++
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9237
			_go_fuzz_dep_.CoverTab[40611]++
									if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:9238
				_go_fuzz_dep_.CoverTab[40613]++
										cc.vlogf("http2: Transport conn %p received error from processing frame %v: %v", cc, http2summarizeFrame(f), err)
//line /usr/local/go/src/net/http/h2_bundle.go:9239
				// _ = "end of CoverTab[40613]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9240
				_go_fuzz_dep_.CoverTab[40614]++
//line /usr/local/go/src/net/http/h2_bundle.go:9240
				// _ = "end of CoverTab[40614]"
//line /usr/local/go/src/net/http/h2_bundle.go:9240
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9240
			// _ = "end of CoverTab[40611]"
//line /usr/local/go/src/net/http/h2_bundle.go:9240
			_go_fuzz_dep_.CoverTab[40612]++
									return err
//line /usr/local/go/src/net/http/h2_bundle.go:9241
			// _ = "end of CoverTab[40612]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9242
			_go_fuzz_dep_.CoverTab[40615]++
//line /usr/local/go/src/net/http/h2_bundle.go:9242
			// _ = "end of CoverTab[40615]"
//line /usr/local/go/src/net/http/h2_bundle.go:9242
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9242
		// _ = "end of CoverTab[40580]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9243
	// _ = "end of CoverTab[40571]"
}

func (rl *http2clientConnReadLoop) processHeaders(f *http2MetaHeadersFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9246
	_go_fuzz_dep_.CoverTab[40616]++
							cs := rl.streamByID(f.StreamID)
							if cs == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9248
		_go_fuzz_dep_.CoverTab[40624]++

//line /usr/local/go/src/net/http/h2_bundle.go:9252
		return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9252
		// _ = "end of CoverTab[40624]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9253
		_go_fuzz_dep_.CoverTab[40625]++
//line /usr/local/go/src/net/http/h2_bundle.go:9253
		// _ = "end of CoverTab[40625]"
//line /usr/local/go/src/net/http/h2_bundle.go:9253
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9253
	// _ = "end of CoverTab[40616]"
//line /usr/local/go/src/net/http/h2_bundle.go:9253
	_go_fuzz_dep_.CoverTab[40617]++
							if cs.readClosed {
//line /usr/local/go/src/net/http/h2_bundle.go:9254
		_go_fuzz_dep_.CoverTab[40626]++
								rl.endStreamError(cs, http2StreamError{
			StreamID:	f.StreamID,
			Code:		http2ErrCodeProtocol,
			Cause:		errors.New("protocol error: headers after END_STREAM"),
		})
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9260
		// _ = "end of CoverTab[40626]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9261
		_go_fuzz_dep_.CoverTab[40627]++
//line /usr/local/go/src/net/http/h2_bundle.go:9261
		// _ = "end of CoverTab[40627]"
//line /usr/local/go/src/net/http/h2_bundle.go:9261
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9261
	// _ = "end of CoverTab[40617]"
//line /usr/local/go/src/net/http/h2_bundle.go:9261
	_go_fuzz_dep_.CoverTab[40618]++
							if !cs.firstByte {
//line /usr/local/go/src/net/http/h2_bundle.go:9262
		_go_fuzz_dep_.CoverTab[40628]++
								if cs.trace != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9263
			_go_fuzz_dep_.CoverTab[40630]++

//line /usr/local/go/src/net/http/h2_bundle.go:9268
			http2traceFirstResponseByte(cs.trace)
//line /usr/local/go/src/net/http/h2_bundle.go:9268
			// _ = "end of CoverTab[40630]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9269
			_go_fuzz_dep_.CoverTab[40631]++
//line /usr/local/go/src/net/http/h2_bundle.go:9269
			// _ = "end of CoverTab[40631]"
//line /usr/local/go/src/net/http/h2_bundle.go:9269
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9269
		// _ = "end of CoverTab[40628]"
//line /usr/local/go/src/net/http/h2_bundle.go:9269
		_go_fuzz_dep_.CoverTab[40629]++
								cs.firstByte = true
//line /usr/local/go/src/net/http/h2_bundle.go:9270
		// _ = "end of CoverTab[40629]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9271
		_go_fuzz_dep_.CoverTab[40632]++
//line /usr/local/go/src/net/http/h2_bundle.go:9271
		// _ = "end of CoverTab[40632]"
//line /usr/local/go/src/net/http/h2_bundle.go:9271
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9271
	// _ = "end of CoverTab[40618]"
//line /usr/local/go/src/net/http/h2_bundle.go:9271
	_go_fuzz_dep_.CoverTab[40619]++
							if !cs.pastHeaders {
//line /usr/local/go/src/net/http/h2_bundle.go:9272
		_go_fuzz_dep_.CoverTab[40633]++
								cs.pastHeaders = true
//line /usr/local/go/src/net/http/h2_bundle.go:9273
		// _ = "end of CoverTab[40633]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9274
		_go_fuzz_dep_.CoverTab[40634]++
								return rl.processTrailers(cs, f)
//line /usr/local/go/src/net/http/h2_bundle.go:9275
		// _ = "end of CoverTab[40634]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9276
	// _ = "end of CoverTab[40619]"
//line /usr/local/go/src/net/http/h2_bundle.go:9276
	_go_fuzz_dep_.CoverTab[40620]++

							res, err := rl.handleResponse(cs, f)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9279
		_go_fuzz_dep_.CoverTab[40635]++
								if _, ok := err.(http2ConnectionError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:9280
			_go_fuzz_dep_.CoverTab[40637]++
									return err
//line /usr/local/go/src/net/http/h2_bundle.go:9281
			// _ = "end of CoverTab[40637]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9282
			_go_fuzz_dep_.CoverTab[40638]++
//line /usr/local/go/src/net/http/h2_bundle.go:9282
			// _ = "end of CoverTab[40638]"
//line /usr/local/go/src/net/http/h2_bundle.go:9282
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9282
		// _ = "end of CoverTab[40635]"
//line /usr/local/go/src/net/http/h2_bundle.go:9282
		_go_fuzz_dep_.CoverTab[40636]++

								rl.endStreamError(cs, http2StreamError{
			StreamID:	f.StreamID,
			Code:		http2ErrCodeProtocol,
			Cause:		err,
		})
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9289
		// _ = "end of CoverTab[40636]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9290
		_go_fuzz_dep_.CoverTab[40639]++
//line /usr/local/go/src/net/http/h2_bundle.go:9290
		// _ = "end of CoverTab[40639]"
//line /usr/local/go/src/net/http/h2_bundle.go:9290
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9290
	// _ = "end of CoverTab[40620]"
//line /usr/local/go/src/net/http/h2_bundle.go:9290
	_go_fuzz_dep_.CoverTab[40621]++
							if res == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9291
		_go_fuzz_dep_.CoverTab[40640]++

								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9293
		// _ = "end of CoverTab[40640]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9294
		_go_fuzz_dep_.CoverTab[40641]++
//line /usr/local/go/src/net/http/h2_bundle.go:9294
		// _ = "end of CoverTab[40641]"
//line /usr/local/go/src/net/http/h2_bundle.go:9294
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9294
	// _ = "end of CoverTab[40621]"
//line /usr/local/go/src/net/http/h2_bundle.go:9294
	_go_fuzz_dep_.CoverTab[40622]++
							cs.resTrailer = &res.Trailer
							cs.res = res
							close(cs.respHeaderRecv)
							if f.StreamEnded() {
//line /usr/local/go/src/net/http/h2_bundle.go:9298
		_go_fuzz_dep_.CoverTab[40642]++
								rl.endStream(cs)
//line /usr/local/go/src/net/http/h2_bundle.go:9299
		// _ = "end of CoverTab[40642]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9300
		_go_fuzz_dep_.CoverTab[40643]++
//line /usr/local/go/src/net/http/h2_bundle.go:9300
		// _ = "end of CoverTab[40643]"
//line /usr/local/go/src/net/http/h2_bundle.go:9300
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9300
	// _ = "end of CoverTab[40622]"
//line /usr/local/go/src/net/http/h2_bundle.go:9300
	_go_fuzz_dep_.CoverTab[40623]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9301
	// _ = "end of CoverTab[40623]"
}

// may return error types nil, or ConnectionError. Any other error value
//line /usr/local/go/src/net/http/h2_bundle.go:9304
// is a StreamError of type ErrCodeProtocol. The returned error in that case
//line /usr/local/go/src/net/http/h2_bundle.go:9304
// is the detail.
//line /usr/local/go/src/net/http/h2_bundle.go:9304
//
//line /usr/local/go/src/net/http/h2_bundle.go:9304
// As a special case, handleResponse may return (nil, nil) to skip the
//line /usr/local/go/src/net/http/h2_bundle.go:9304
// frame (currently only used for 1xx responses).
//line /usr/local/go/src/net/http/h2_bundle.go:9310
func (rl *http2clientConnReadLoop) handleResponse(cs *http2clientStream, f *http2MetaHeadersFrame) (*Response, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:9310
	_go_fuzz_dep_.CoverTab[40644]++
							if f.Truncated {
//line /usr/local/go/src/net/http/h2_bundle.go:9311
		_go_fuzz_dep_.CoverTab[40654]++
								return nil, http2errResponseHeaderListSize
//line /usr/local/go/src/net/http/h2_bundle.go:9312
		// _ = "end of CoverTab[40654]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9313
		_go_fuzz_dep_.CoverTab[40655]++
//line /usr/local/go/src/net/http/h2_bundle.go:9313
		// _ = "end of CoverTab[40655]"
//line /usr/local/go/src/net/http/h2_bundle.go:9313
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9313
	// _ = "end of CoverTab[40644]"
//line /usr/local/go/src/net/http/h2_bundle.go:9313
	_go_fuzz_dep_.CoverTab[40645]++

							status := f.PseudoValue("status")
							if status == "" {
//line /usr/local/go/src/net/http/h2_bundle.go:9316
		_go_fuzz_dep_.CoverTab[40656]++
								return nil, errors.New("malformed response from server: missing status pseudo header")
//line /usr/local/go/src/net/http/h2_bundle.go:9317
		// _ = "end of CoverTab[40656]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9318
		_go_fuzz_dep_.CoverTab[40657]++
//line /usr/local/go/src/net/http/h2_bundle.go:9318
		// _ = "end of CoverTab[40657]"
//line /usr/local/go/src/net/http/h2_bundle.go:9318
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9318
	// _ = "end of CoverTab[40645]"
//line /usr/local/go/src/net/http/h2_bundle.go:9318
	_go_fuzz_dep_.CoverTab[40646]++
							statusCode, err := strconv.Atoi(status)
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9320
		_go_fuzz_dep_.CoverTab[40658]++
								return nil, errors.New("malformed response from server: malformed non-numeric status pseudo header")
//line /usr/local/go/src/net/http/h2_bundle.go:9321
		// _ = "end of CoverTab[40658]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9322
		_go_fuzz_dep_.CoverTab[40659]++
//line /usr/local/go/src/net/http/h2_bundle.go:9322
		// _ = "end of CoverTab[40659]"
//line /usr/local/go/src/net/http/h2_bundle.go:9322
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9322
	// _ = "end of CoverTab[40646]"
//line /usr/local/go/src/net/http/h2_bundle.go:9322
	_go_fuzz_dep_.CoverTab[40647]++

							regularFields := f.RegularFields()
							strs := make([]string, len(regularFields))
							header := make(Header, len(regularFields))
							res := &Response{
		Proto:		"HTTP/2.0",
		ProtoMajor:	2,
		Header:		header,
		StatusCode:	statusCode,
		Status:		status + " " + StatusText(statusCode),
	}
	for _, hf := range regularFields {
//line /usr/local/go/src/net/http/h2_bundle.go:9334
		_go_fuzz_dep_.CoverTab[40660]++
								key := http2canonicalHeader(hf.Name)
								if key == "Trailer" {
//line /usr/local/go/src/net/http/h2_bundle.go:9336
			_go_fuzz_dep_.CoverTab[40661]++
									t := res.Trailer
									if t == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9338
				_go_fuzz_dep_.CoverTab[40663]++
										t = make(Header)
										res.Trailer = t
//line /usr/local/go/src/net/http/h2_bundle.go:9340
				// _ = "end of CoverTab[40663]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9341
				_go_fuzz_dep_.CoverTab[40664]++
//line /usr/local/go/src/net/http/h2_bundle.go:9341
				// _ = "end of CoverTab[40664]"
//line /usr/local/go/src/net/http/h2_bundle.go:9341
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9341
			// _ = "end of CoverTab[40661]"
//line /usr/local/go/src/net/http/h2_bundle.go:9341
			_go_fuzz_dep_.CoverTab[40662]++
									http2foreachHeaderElement(hf.Value, func(v string) {
//line /usr/local/go/src/net/http/h2_bundle.go:9342
				_go_fuzz_dep_.CoverTab[40665]++
										t[http2canonicalHeader(v)] = nil
//line /usr/local/go/src/net/http/h2_bundle.go:9343
				// _ = "end of CoverTab[40665]"
			})
//line /usr/local/go/src/net/http/h2_bundle.go:9344
			// _ = "end of CoverTab[40662]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9345
			_go_fuzz_dep_.CoverTab[40666]++
									vv := header[key]
									if vv == nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9347
				_go_fuzz_dep_.CoverTab[40667]++
//line /usr/local/go/src/net/http/h2_bundle.go:9347
				return len(strs) > 0
//line /usr/local/go/src/net/http/h2_bundle.go:9347
				// _ = "end of CoverTab[40667]"
//line /usr/local/go/src/net/http/h2_bundle.go:9347
			}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9347
				_go_fuzz_dep_.CoverTab[40668]++

//line /usr/local/go/src/net/http/h2_bundle.go:9352
				vv, strs = strs[:1:1], strs[1:]
										vv[0] = hf.Value
										header[key] = vv
//line /usr/local/go/src/net/http/h2_bundle.go:9354
				// _ = "end of CoverTab[40668]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9355
				_go_fuzz_dep_.CoverTab[40669]++
										header[key] = append(vv, hf.Value)
//line /usr/local/go/src/net/http/h2_bundle.go:9356
				// _ = "end of CoverTab[40669]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9357
			// _ = "end of CoverTab[40666]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9358
		// _ = "end of CoverTab[40660]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9359
	// _ = "end of CoverTab[40647]"
//line /usr/local/go/src/net/http/h2_bundle.go:9359
	_go_fuzz_dep_.CoverTab[40648]++

							if statusCode >= 100 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9361
		_go_fuzz_dep_.CoverTab[40670]++
//line /usr/local/go/src/net/http/h2_bundle.go:9361
		return statusCode <= 199
//line /usr/local/go/src/net/http/h2_bundle.go:9361
		// _ = "end of CoverTab[40670]"
//line /usr/local/go/src/net/http/h2_bundle.go:9361
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9361
		_go_fuzz_dep_.CoverTab[40671]++
								if f.StreamEnded() {
//line /usr/local/go/src/net/http/h2_bundle.go:9362
			_go_fuzz_dep_.CoverTab[40676]++
									return nil, errors.New("1xx informational response with END_STREAM flag")
//line /usr/local/go/src/net/http/h2_bundle.go:9363
			// _ = "end of CoverTab[40676]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9364
			_go_fuzz_dep_.CoverTab[40677]++
//line /usr/local/go/src/net/http/h2_bundle.go:9364
			// _ = "end of CoverTab[40677]"
//line /usr/local/go/src/net/http/h2_bundle.go:9364
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9364
		// _ = "end of CoverTab[40671]"
//line /usr/local/go/src/net/http/h2_bundle.go:9364
		_go_fuzz_dep_.CoverTab[40672]++
								cs.num1xx++
								const max1xxResponses = 5	// arbitrary bound on number of informational responses, same as net/http
								if cs.num1xx > max1xxResponses {
//line /usr/local/go/src/net/http/h2_bundle.go:9367
			_go_fuzz_dep_.CoverTab[40678]++
									return nil, errors.New("http2: too many 1xx informational responses")
//line /usr/local/go/src/net/http/h2_bundle.go:9368
			// _ = "end of CoverTab[40678]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9369
			_go_fuzz_dep_.CoverTab[40679]++
//line /usr/local/go/src/net/http/h2_bundle.go:9369
			// _ = "end of CoverTab[40679]"
//line /usr/local/go/src/net/http/h2_bundle.go:9369
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9369
		// _ = "end of CoverTab[40672]"
//line /usr/local/go/src/net/http/h2_bundle.go:9369
		_go_fuzz_dep_.CoverTab[40673]++
								if fn := cs.get1xxTraceFunc(); fn != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9370
			_go_fuzz_dep_.CoverTab[40680]++
									if err := fn(statusCode, textproto.MIMEHeader(header)); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9371
				_go_fuzz_dep_.CoverTab[40681]++
										return nil, err
//line /usr/local/go/src/net/http/h2_bundle.go:9372
				// _ = "end of CoverTab[40681]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9373
				_go_fuzz_dep_.CoverTab[40682]++
//line /usr/local/go/src/net/http/h2_bundle.go:9373
				// _ = "end of CoverTab[40682]"
//line /usr/local/go/src/net/http/h2_bundle.go:9373
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9373
			// _ = "end of CoverTab[40680]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9374
			_go_fuzz_dep_.CoverTab[40683]++
//line /usr/local/go/src/net/http/h2_bundle.go:9374
			// _ = "end of CoverTab[40683]"
//line /usr/local/go/src/net/http/h2_bundle.go:9374
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9374
		// _ = "end of CoverTab[40673]"
//line /usr/local/go/src/net/http/h2_bundle.go:9374
		_go_fuzz_dep_.CoverTab[40674]++
								if statusCode == 100 {
//line /usr/local/go/src/net/http/h2_bundle.go:9375
			_go_fuzz_dep_.CoverTab[40684]++
									http2traceGot100Continue(cs.trace)
									select {
			case cs.on100 <- struct{}{}:
//line /usr/local/go/src/net/http/h2_bundle.go:9378
				_go_fuzz_dep_.CoverTab[40685]++
//line /usr/local/go/src/net/http/h2_bundle.go:9378
				// _ = "end of CoverTab[40685]"
			default:
//line /usr/local/go/src/net/http/h2_bundle.go:9379
				_go_fuzz_dep_.CoverTab[40686]++
//line /usr/local/go/src/net/http/h2_bundle.go:9379
				// _ = "end of CoverTab[40686]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9380
			// _ = "end of CoverTab[40684]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9381
			_go_fuzz_dep_.CoverTab[40687]++
//line /usr/local/go/src/net/http/h2_bundle.go:9381
			// _ = "end of CoverTab[40687]"
//line /usr/local/go/src/net/http/h2_bundle.go:9381
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9381
		// _ = "end of CoverTab[40674]"
//line /usr/local/go/src/net/http/h2_bundle.go:9381
		_go_fuzz_dep_.CoverTab[40675]++
								cs.pastHeaders = false
								return nil, nil
//line /usr/local/go/src/net/http/h2_bundle.go:9383
		// _ = "end of CoverTab[40675]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9384
		_go_fuzz_dep_.CoverTab[40688]++
//line /usr/local/go/src/net/http/h2_bundle.go:9384
		// _ = "end of CoverTab[40688]"
//line /usr/local/go/src/net/http/h2_bundle.go:9384
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9384
	// _ = "end of CoverTab[40648]"
//line /usr/local/go/src/net/http/h2_bundle.go:9384
	_go_fuzz_dep_.CoverTab[40649]++

							res.ContentLength = -1
							if clens := res.Header["Content-Length"]; len(clens) == 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:9387
		_go_fuzz_dep_.CoverTab[40689]++
								if cl, err := strconv.ParseUint(clens[0], 10, 63); err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9388
			_go_fuzz_dep_.CoverTab[40690]++
									res.ContentLength = int64(cl)
//line /usr/local/go/src/net/http/h2_bundle.go:9389
			// _ = "end of CoverTab[40690]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9390
			_go_fuzz_dep_.CoverTab[40691]++
//line /usr/local/go/src/net/http/h2_bundle.go:9390
			// _ = "end of CoverTab[40691]"

//line /usr/local/go/src/net/http/h2_bundle.go:9393
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9393
		// _ = "end of CoverTab[40689]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9394
		_go_fuzz_dep_.CoverTab[40692]++
//line /usr/local/go/src/net/http/h2_bundle.go:9394
		if len(clens) > 1 {
//line /usr/local/go/src/net/http/h2_bundle.go:9394
			_go_fuzz_dep_.CoverTab[40693]++
//line /usr/local/go/src/net/http/h2_bundle.go:9394
			// _ = "end of CoverTab[40693]"

//line /usr/local/go/src/net/http/h2_bundle.go:9397
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9397
			_go_fuzz_dep_.CoverTab[40694]++
//line /usr/local/go/src/net/http/h2_bundle.go:9397
			if f.StreamEnded() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9397
				_go_fuzz_dep_.CoverTab[40695]++
//line /usr/local/go/src/net/http/h2_bundle.go:9397
				return !cs.isHead
//line /usr/local/go/src/net/http/h2_bundle.go:9397
				// _ = "end of CoverTab[40695]"
//line /usr/local/go/src/net/http/h2_bundle.go:9397
			}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9397
				_go_fuzz_dep_.CoverTab[40696]++
										res.ContentLength = 0
//line /usr/local/go/src/net/http/h2_bundle.go:9398
				// _ = "end of CoverTab[40696]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9399
				_go_fuzz_dep_.CoverTab[40697]++
//line /usr/local/go/src/net/http/h2_bundle.go:9399
				// _ = "end of CoverTab[40697]"
//line /usr/local/go/src/net/http/h2_bundle.go:9399
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9399
			// _ = "end of CoverTab[40694]"
//line /usr/local/go/src/net/http/h2_bundle.go:9399
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9399
		// _ = "end of CoverTab[40692]"
//line /usr/local/go/src/net/http/h2_bundle.go:9399
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9399
	// _ = "end of CoverTab[40649]"
//line /usr/local/go/src/net/http/h2_bundle.go:9399
	_go_fuzz_dep_.CoverTab[40650]++

							if cs.isHead {
//line /usr/local/go/src/net/http/h2_bundle.go:9401
		_go_fuzz_dep_.CoverTab[40698]++
								res.Body = http2noBody
								return res, nil
//line /usr/local/go/src/net/http/h2_bundle.go:9403
		// _ = "end of CoverTab[40698]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9404
		_go_fuzz_dep_.CoverTab[40699]++
//line /usr/local/go/src/net/http/h2_bundle.go:9404
		// _ = "end of CoverTab[40699]"
//line /usr/local/go/src/net/http/h2_bundle.go:9404
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9404
	// _ = "end of CoverTab[40650]"
//line /usr/local/go/src/net/http/h2_bundle.go:9404
	_go_fuzz_dep_.CoverTab[40651]++

							if f.StreamEnded() {
//line /usr/local/go/src/net/http/h2_bundle.go:9406
		_go_fuzz_dep_.CoverTab[40700]++
								if res.ContentLength > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9407
			_go_fuzz_dep_.CoverTab[40702]++
									res.Body = http2missingBody{}
//line /usr/local/go/src/net/http/h2_bundle.go:9408
			// _ = "end of CoverTab[40702]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9409
			_go_fuzz_dep_.CoverTab[40703]++
									res.Body = http2noBody
//line /usr/local/go/src/net/http/h2_bundle.go:9410
			// _ = "end of CoverTab[40703]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9411
		// _ = "end of CoverTab[40700]"
//line /usr/local/go/src/net/http/h2_bundle.go:9411
		_go_fuzz_dep_.CoverTab[40701]++
								return res, nil
//line /usr/local/go/src/net/http/h2_bundle.go:9412
		// _ = "end of CoverTab[40701]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9413
		_go_fuzz_dep_.CoverTab[40704]++
//line /usr/local/go/src/net/http/h2_bundle.go:9413
		// _ = "end of CoverTab[40704]"
//line /usr/local/go/src/net/http/h2_bundle.go:9413
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9413
	// _ = "end of CoverTab[40651]"
//line /usr/local/go/src/net/http/h2_bundle.go:9413
	_go_fuzz_dep_.CoverTab[40652]++

							cs.bufPipe.setBuffer(&http2dataBuffer{expected: res.ContentLength})
							cs.bytesRemain = res.ContentLength
							res.Body = http2transportResponseBody{cs}

							if cs.requestedGzip && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9419
		_go_fuzz_dep_.CoverTab[40705]++
//line /usr/local/go/src/net/http/h2_bundle.go:9419
		return http2asciiEqualFold(res.Header.Get("Content-Encoding"), "gzip")
//line /usr/local/go/src/net/http/h2_bundle.go:9419
		// _ = "end of CoverTab[40705]"
//line /usr/local/go/src/net/http/h2_bundle.go:9419
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9419
		_go_fuzz_dep_.CoverTab[40706]++
								res.Header.Del("Content-Encoding")
								res.Header.Del("Content-Length")
								res.ContentLength = -1
								res.Body = &http2gzipReader{body: res.Body}
								res.Uncompressed = true
//line /usr/local/go/src/net/http/h2_bundle.go:9424
		// _ = "end of CoverTab[40706]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9425
		_go_fuzz_dep_.CoverTab[40707]++
//line /usr/local/go/src/net/http/h2_bundle.go:9425
		// _ = "end of CoverTab[40707]"
//line /usr/local/go/src/net/http/h2_bundle.go:9425
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9425
	// _ = "end of CoverTab[40652]"
//line /usr/local/go/src/net/http/h2_bundle.go:9425
	_go_fuzz_dep_.CoverTab[40653]++
							return res, nil
//line /usr/local/go/src/net/http/h2_bundle.go:9426
	// _ = "end of CoverTab[40653]"
}

func (rl *http2clientConnReadLoop) processTrailers(cs *http2clientStream, f *http2MetaHeadersFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9429
	_go_fuzz_dep_.CoverTab[40708]++
							if cs.pastTrailers {
//line /usr/local/go/src/net/http/h2_bundle.go:9430
		_go_fuzz_dep_.CoverTab[40713]++

								return http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:9432
		// _ = "end of CoverTab[40713]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9433
		_go_fuzz_dep_.CoverTab[40714]++
//line /usr/local/go/src/net/http/h2_bundle.go:9433
		// _ = "end of CoverTab[40714]"
//line /usr/local/go/src/net/http/h2_bundle.go:9433
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9433
	// _ = "end of CoverTab[40708]"
//line /usr/local/go/src/net/http/h2_bundle.go:9433
	_go_fuzz_dep_.CoverTab[40709]++
							cs.pastTrailers = true
							if !f.StreamEnded() {
//line /usr/local/go/src/net/http/h2_bundle.go:9435
		_go_fuzz_dep_.CoverTab[40715]++

//line /usr/local/go/src/net/http/h2_bundle.go:9438
		return http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:9438
		// _ = "end of CoverTab[40715]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9439
		_go_fuzz_dep_.CoverTab[40716]++
//line /usr/local/go/src/net/http/h2_bundle.go:9439
		// _ = "end of CoverTab[40716]"
//line /usr/local/go/src/net/http/h2_bundle.go:9439
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9439
	// _ = "end of CoverTab[40709]"
//line /usr/local/go/src/net/http/h2_bundle.go:9439
	_go_fuzz_dep_.CoverTab[40710]++
							if len(f.PseudoFields()) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9440
		_go_fuzz_dep_.CoverTab[40717]++

//line /usr/local/go/src/net/http/h2_bundle.go:9443
		return http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:9443
		// _ = "end of CoverTab[40717]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9444
		_go_fuzz_dep_.CoverTab[40718]++
//line /usr/local/go/src/net/http/h2_bundle.go:9444
		// _ = "end of CoverTab[40718]"
//line /usr/local/go/src/net/http/h2_bundle.go:9444
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9444
	// _ = "end of CoverTab[40710]"
//line /usr/local/go/src/net/http/h2_bundle.go:9444
	_go_fuzz_dep_.CoverTab[40711]++

							trailer := make(Header)
							for _, hf := range f.RegularFields() {
//line /usr/local/go/src/net/http/h2_bundle.go:9447
		_go_fuzz_dep_.CoverTab[40719]++
								key := http2canonicalHeader(hf.Name)
								trailer[key] = append(trailer[key], hf.Value)
//line /usr/local/go/src/net/http/h2_bundle.go:9449
		// _ = "end of CoverTab[40719]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9450
	// _ = "end of CoverTab[40711]"
//line /usr/local/go/src/net/http/h2_bundle.go:9450
	_go_fuzz_dep_.CoverTab[40712]++
							cs.trailer = trailer

							rl.endStream(cs)
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9454
	// _ = "end of CoverTab[40712]"
}

// transportResponseBody is the concrete type of Transport.RoundTrip's
//line /usr/local/go/src/net/http/h2_bundle.go:9457
// Response.Body. It is an io.ReadCloser.
//line /usr/local/go/src/net/http/h2_bundle.go:9459
type http2transportResponseBody struct {
	cs *http2clientStream
}

func (b http2transportResponseBody) Read(p []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:9463
	_go_fuzz_dep_.CoverTab[40720]++
							cs := b.cs
							cc := cs.cc

							if cs.readErr != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9467
		_go_fuzz_dep_.CoverTab[40727]++
								return 0, cs.readErr
//line /usr/local/go/src/net/http/h2_bundle.go:9468
		// _ = "end of CoverTab[40727]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9469
		_go_fuzz_dep_.CoverTab[40728]++
//line /usr/local/go/src/net/http/h2_bundle.go:9469
		// _ = "end of CoverTab[40728]"
//line /usr/local/go/src/net/http/h2_bundle.go:9469
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9469
	// _ = "end of CoverTab[40720]"
//line /usr/local/go/src/net/http/h2_bundle.go:9469
	_go_fuzz_dep_.CoverTab[40721]++
							n, err = b.cs.bufPipe.Read(p)
							if cs.bytesRemain != -1 {
//line /usr/local/go/src/net/http/h2_bundle.go:9471
		_go_fuzz_dep_.CoverTab[40729]++
								if int64(n) > cs.bytesRemain {
//line /usr/local/go/src/net/http/h2_bundle.go:9472
			_go_fuzz_dep_.CoverTab[40731]++
									n = int(cs.bytesRemain)
									if err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9474
				_go_fuzz_dep_.CoverTab[40733]++
										err = errors.New("net/http: server replied with more than declared Content-Length; truncated")
										cs.abortStream(err)
//line /usr/local/go/src/net/http/h2_bundle.go:9476
				// _ = "end of CoverTab[40733]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9477
				_go_fuzz_dep_.CoverTab[40734]++
//line /usr/local/go/src/net/http/h2_bundle.go:9477
				// _ = "end of CoverTab[40734]"
//line /usr/local/go/src/net/http/h2_bundle.go:9477
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9477
			// _ = "end of CoverTab[40731]"
//line /usr/local/go/src/net/http/h2_bundle.go:9477
			_go_fuzz_dep_.CoverTab[40732]++
									cs.readErr = err
									return int(cs.bytesRemain), err
//line /usr/local/go/src/net/http/h2_bundle.go:9479
			// _ = "end of CoverTab[40732]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9480
			_go_fuzz_dep_.CoverTab[40735]++
//line /usr/local/go/src/net/http/h2_bundle.go:9480
			// _ = "end of CoverTab[40735]"
//line /usr/local/go/src/net/http/h2_bundle.go:9480
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9480
		// _ = "end of CoverTab[40729]"
//line /usr/local/go/src/net/http/h2_bundle.go:9480
		_go_fuzz_dep_.CoverTab[40730]++
								cs.bytesRemain -= int64(n)
								if err == io.EOF && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9482
			_go_fuzz_dep_.CoverTab[40736]++
//line /usr/local/go/src/net/http/h2_bundle.go:9482
			return cs.bytesRemain > 0
//line /usr/local/go/src/net/http/h2_bundle.go:9482
			// _ = "end of CoverTab[40736]"
//line /usr/local/go/src/net/http/h2_bundle.go:9482
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9482
			_go_fuzz_dep_.CoverTab[40737]++
									err = io.ErrUnexpectedEOF
									cs.readErr = err
									return n, err
//line /usr/local/go/src/net/http/h2_bundle.go:9485
			// _ = "end of CoverTab[40737]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9486
			_go_fuzz_dep_.CoverTab[40738]++
//line /usr/local/go/src/net/http/h2_bundle.go:9486
			// _ = "end of CoverTab[40738]"
//line /usr/local/go/src/net/http/h2_bundle.go:9486
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9486
		// _ = "end of CoverTab[40730]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9487
		_go_fuzz_dep_.CoverTab[40739]++
//line /usr/local/go/src/net/http/h2_bundle.go:9487
		// _ = "end of CoverTab[40739]"
//line /usr/local/go/src/net/http/h2_bundle.go:9487
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9487
	// _ = "end of CoverTab[40721]"
//line /usr/local/go/src/net/http/h2_bundle.go:9487
	_go_fuzz_dep_.CoverTab[40722]++
							if n == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9488
		_go_fuzz_dep_.CoverTab[40740]++

								return
//line /usr/local/go/src/net/http/h2_bundle.go:9490
		// _ = "end of CoverTab[40740]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9491
		_go_fuzz_dep_.CoverTab[40741]++
//line /usr/local/go/src/net/http/h2_bundle.go:9491
		// _ = "end of CoverTab[40741]"
//line /usr/local/go/src/net/http/h2_bundle.go:9491
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9491
	// _ = "end of CoverTab[40722]"
//line /usr/local/go/src/net/http/h2_bundle.go:9491
	_go_fuzz_dep_.CoverTab[40723]++

							cc.mu.Lock()
							var connAdd, streamAdd int32

							if v := cc.inflow.available(); v < http2transportDefaultConnFlow/2 {
//line /usr/local/go/src/net/http/h2_bundle.go:9496
		_go_fuzz_dep_.CoverTab[40742]++
								connAdd = http2transportDefaultConnFlow - v
								cc.inflow.add(connAdd)
//line /usr/local/go/src/net/http/h2_bundle.go:9498
		// _ = "end of CoverTab[40742]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9499
		_go_fuzz_dep_.CoverTab[40743]++
//line /usr/local/go/src/net/http/h2_bundle.go:9499
		// _ = "end of CoverTab[40743]"
//line /usr/local/go/src/net/http/h2_bundle.go:9499
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9499
	// _ = "end of CoverTab[40723]"
//line /usr/local/go/src/net/http/h2_bundle.go:9499
	_go_fuzz_dep_.CoverTab[40724]++
							if err == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9500
		_go_fuzz_dep_.CoverTab[40744]++

//line /usr/local/go/src/net/http/h2_bundle.go:9504
		v := int(cs.inflow.available()) + cs.bufPipe.Len()
		if v < http2transportDefaultStreamFlow-http2transportDefaultStreamMinRefresh {
//line /usr/local/go/src/net/http/h2_bundle.go:9505
			_go_fuzz_dep_.CoverTab[40745]++
									streamAdd = int32(http2transportDefaultStreamFlow - v)
									cs.inflow.add(streamAdd)
//line /usr/local/go/src/net/http/h2_bundle.go:9507
			// _ = "end of CoverTab[40745]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9508
			_go_fuzz_dep_.CoverTab[40746]++
//line /usr/local/go/src/net/http/h2_bundle.go:9508
			// _ = "end of CoverTab[40746]"
//line /usr/local/go/src/net/http/h2_bundle.go:9508
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9508
		// _ = "end of CoverTab[40744]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9509
		_go_fuzz_dep_.CoverTab[40747]++
//line /usr/local/go/src/net/http/h2_bundle.go:9509
		// _ = "end of CoverTab[40747]"
//line /usr/local/go/src/net/http/h2_bundle.go:9509
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9509
	// _ = "end of CoverTab[40724]"
//line /usr/local/go/src/net/http/h2_bundle.go:9509
	_go_fuzz_dep_.CoverTab[40725]++
							cc.mu.Unlock()

							if connAdd != 0 || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9512
		_go_fuzz_dep_.CoverTab[40748]++
//line /usr/local/go/src/net/http/h2_bundle.go:9512
		return streamAdd != 0
//line /usr/local/go/src/net/http/h2_bundle.go:9512
		// _ = "end of CoverTab[40748]"
//line /usr/local/go/src/net/http/h2_bundle.go:9512
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9512
		_go_fuzz_dep_.CoverTab[40749]++
								cc.wmu.Lock()
								defer cc.wmu.Unlock()
								if connAdd != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9515
			_go_fuzz_dep_.CoverTab[40752]++
									cc.fr.WriteWindowUpdate(0, http2mustUint31(connAdd))
//line /usr/local/go/src/net/http/h2_bundle.go:9516
			// _ = "end of CoverTab[40752]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9517
			_go_fuzz_dep_.CoverTab[40753]++
//line /usr/local/go/src/net/http/h2_bundle.go:9517
			// _ = "end of CoverTab[40753]"
//line /usr/local/go/src/net/http/h2_bundle.go:9517
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9517
		// _ = "end of CoverTab[40749]"
//line /usr/local/go/src/net/http/h2_bundle.go:9517
		_go_fuzz_dep_.CoverTab[40750]++
								if streamAdd != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9518
			_go_fuzz_dep_.CoverTab[40754]++
									cc.fr.WriteWindowUpdate(cs.ID, http2mustUint31(streamAdd))
//line /usr/local/go/src/net/http/h2_bundle.go:9519
			// _ = "end of CoverTab[40754]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9520
			_go_fuzz_dep_.CoverTab[40755]++
//line /usr/local/go/src/net/http/h2_bundle.go:9520
			// _ = "end of CoverTab[40755]"
//line /usr/local/go/src/net/http/h2_bundle.go:9520
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9520
		// _ = "end of CoverTab[40750]"
//line /usr/local/go/src/net/http/h2_bundle.go:9520
		_go_fuzz_dep_.CoverTab[40751]++
								cc.bw.Flush()
//line /usr/local/go/src/net/http/h2_bundle.go:9521
		// _ = "end of CoverTab[40751]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9522
		_go_fuzz_dep_.CoverTab[40756]++
//line /usr/local/go/src/net/http/h2_bundle.go:9522
		// _ = "end of CoverTab[40756]"
//line /usr/local/go/src/net/http/h2_bundle.go:9522
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9522
	// _ = "end of CoverTab[40725]"
//line /usr/local/go/src/net/http/h2_bundle.go:9522
	_go_fuzz_dep_.CoverTab[40726]++
							return
//line /usr/local/go/src/net/http/h2_bundle.go:9523
	// _ = "end of CoverTab[40726]"
}

var http2errClosedResponseBody = errors.New("http2: response body closed")

func (b http2transportResponseBody) Close() error {
//line /usr/local/go/src/net/http/h2_bundle.go:9528
	_go_fuzz_dep_.CoverTab[40757]++
							cs := b.cs
							cc := cs.cc

							unread := cs.bufPipe.Len()
							if unread > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9533
		_go_fuzz_dep_.CoverTab[40760]++
								cc.mu.Lock()

								if unread > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9536
			_go_fuzz_dep_.CoverTab[40763]++
									cc.inflow.add(int32(unread))
//line /usr/local/go/src/net/http/h2_bundle.go:9537
			// _ = "end of CoverTab[40763]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9538
			_go_fuzz_dep_.CoverTab[40764]++
//line /usr/local/go/src/net/http/h2_bundle.go:9538
			// _ = "end of CoverTab[40764]"
//line /usr/local/go/src/net/http/h2_bundle.go:9538
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9538
		// _ = "end of CoverTab[40760]"
//line /usr/local/go/src/net/http/h2_bundle.go:9538
		_go_fuzz_dep_.CoverTab[40761]++
								cc.mu.Unlock()

//line /usr/local/go/src/net/http/h2_bundle.go:9543
		cc.wmu.Lock()

		if unread > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9545
			_go_fuzz_dep_.CoverTab[40765]++
									cc.fr.WriteWindowUpdate(0, uint32(unread))
//line /usr/local/go/src/net/http/h2_bundle.go:9546
			// _ = "end of CoverTab[40765]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9547
			_go_fuzz_dep_.CoverTab[40766]++
//line /usr/local/go/src/net/http/h2_bundle.go:9547
			// _ = "end of CoverTab[40766]"
//line /usr/local/go/src/net/http/h2_bundle.go:9547
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9547
		// _ = "end of CoverTab[40761]"
//line /usr/local/go/src/net/http/h2_bundle.go:9547
		_go_fuzz_dep_.CoverTab[40762]++
								cc.bw.Flush()
								cc.wmu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:9549
		// _ = "end of CoverTab[40762]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9550
		_go_fuzz_dep_.CoverTab[40767]++
//line /usr/local/go/src/net/http/h2_bundle.go:9550
		// _ = "end of CoverTab[40767]"
//line /usr/local/go/src/net/http/h2_bundle.go:9550
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9550
	// _ = "end of CoverTab[40757]"
//line /usr/local/go/src/net/http/h2_bundle.go:9550
	_go_fuzz_dep_.CoverTab[40758]++

							cs.bufPipe.BreakWithError(http2errClosedResponseBody)
							cs.abortStream(http2errClosedResponseBody)

							select {
	case <-cs.donec:
//line /usr/local/go/src/net/http/h2_bundle.go:9556
		_go_fuzz_dep_.CoverTab[40768]++
//line /usr/local/go/src/net/http/h2_bundle.go:9556
		// _ = "end of CoverTab[40768]"
	case <-cs.ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:9557
		_go_fuzz_dep_.CoverTab[40769]++

//line /usr/local/go/src/net/http/h2_bundle.go:9561
		return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9561
		// _ = "end of CoverTab[40769]"
	case <-cs.reqCancel:
//line /usr/local/go/src/net/http/h2_bundle.go:9562
		_go_fuzz_dep_.CoverTab[40770]++
								return http2errRequestCanceled
//line /usr/local/go/src/net/http/h2_bundle.go:9563
		// _ = "end of CoverTab[40770]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9564
	// _ = "end of CoverTab[40758]"
//line /usr/local/go/src/net/http/h2_bundle.go:9564
	_go_fuzz_dep_.CoverTab[40759]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9565
	// _ = "end of CoverTab[40759]"
}

func (rl *http2clientConnReadLoop) processData(f *http2DataFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9568
	_go_fuzz_dep_.CoverTab[40771]++
							cc := rl.cc
							cs := rl.streamByID(f.StreamID)
							data := f.Data()
							if cs == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9572
		_go_fuzz_dep_.CoverTab[40777]++
								cc.mu.Lock()
								neverSent := cc.nextStreamID
								cc.mu.Unlock()
								if f.StreamID >= neverSent {
//line /usr/local/go/src/net/http/h2_bundle.go:9576
			_go_fuzz_dep_.CoverTab[40780]++

									cc.logf("http2: Transport received unsolicited DATA frame; closing connection")
									return http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:9579
			// _ = "end of CoverTab[40780]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9580
			_go_fuzz_dep_.CoverTab[40781]++
//line /usr/local/go/src/net/http/h2_bundle.go:9580
			// _ = "end of CoverTab[40781]"
//line /usr/local/go/src/net/http/h2_bundle.go:9580
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9580
		// _ = "end of CoverTab[40777]"
//line /usr/local/go/src/net/http/h2_bundle.go:9580
		_go_fuzz_dep_.CoverTab[40778]++

//line /usr/local/go/src/net/http/h2_bundle.go:9587
		if f.Length > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9587
			_go_fuzz_dep_.CoverTab[40782]++
									cc.mu.Lock()
									cc.inflow.add(int32(f.Length))
									cc.mu.Unlock()

									cc.wmu.Lock()
									cc.fr.WriteWindowUpdate(0, uint32(f.Length))
									cc.bw.Flush()
									cc.wmu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:9595
			// _ = "end of CoverTab[40782]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9596
			_go_fuzz_dep_.CoverTab[40783]++
//line /usr/local/go/src/net/http/h2_bundle.go:9596
			// _ = "end of CoverTab[40783]"
//line /usr/local/go/src/net/http/h2_bundle.go:9596
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9596
		// _ = "end of CoverTab[40778]"
//line /usr/local/go/src/net/http/h2_bundle.go:9596
		_go_fuzz_dep_.CoverTab[40779]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9597
		// _ = "end of CoverTab[40779]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9598
		_go_fuzz_dep_.CoverTab[40784]++
//line /usr/local/go/src/net/http/h2_bundle.go:9598
		// _ = "end of CoverTab[40784]"
//line /usr/local/go/src/net/http/h2_bundle.go:9598
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9598
	// _ = "end of CoverTab[40771]"
//line /usr/local/go/src/net/http/h2_bundle.go:9598
	_go_fuzz_dep_.CoverTab[40772]++
							if cs.readClosed {
//line /usr/local/go/src/net/http/h2_bundle.go:9599
		_go_fuzz_dep_.CoverTab[40785]++
								cc.logf("protocol error: received DATA after END_STREAM")
								rl.endStreamError(cs, http2StreamError{
			StreamID:	f.StreamID,
			Code:		http2ErrCodeProtocol,
		})
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9605
		// _ = "end of CoverTab[40785]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9606
		_go_fuzz_dep_.CoverTab[40786]++
//line /usr/local/go/src/net/http/h2_bundle.go:9606
		// _ = "end of CoverTab[40786]"
//line /usr/local/go/src/net/http/h2_bundle.go:9606
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9606
	// _ = "end of CoverTab[40772]"
//line /usr/local/go/src/net/http/h2_bundle.go:9606
	_go_fuzz_dep_.CoverTab[40773]++
							if !cs.firstByte {
//line /usr/local/go/src/net/http/h2_bundle.go:9607
		_go_fuzz_dep_.CoverTab[40787]++
								cc.logf("protocol error: received DATA before a HEADERS frame")
								rl.endStreamError(cs, http2StreamError{
			StreamID:	f.StreamID,
			Code:		http2ErrCodeProtocol,
		})
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9613
		// _ = "end of CoverTab[40787]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9614
		_go_fuzz_dep_.CoverTab[40788]++
//line /usr/local/go/src/net/http/h2_bundle.go:9614
		// _ = "end of CoverTab[40788]"
//line /usr/local/go/src/net/http/h2_bundle.go:9614
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9614
	// _ = "end of CoverTab[40773]"
//line /usr/local/go/src/net/http/h2_bundle.go:9614
	_go_fuzz_dep_.CoverTab[40774]++
							if f.Length > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9615
		_go_fuzz_dep_.CoverTab[40789]++
								if cs.isHead && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9616
			_go_fuzz_dep_.CoverTab[40796]++
//line /usr/local/go/src/net/http/h2_bundle.go:9616
			return len(data) > 0
//line /usr/local/go/src/net/http/h2_bundle.go:9616
			// _ = "end of CoverTab[40796]"
//line /usr/local/go/src/net/http/h2_bundle.go:9616
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9616
			_go_fuzz_dep_.CoverTab[40797]++
									cc.logf("protocol error: received DATA on a HEAD request")
									rl.endStreamError(cs, http2StreamError{
				StreamID:	f.StreamID,
				Code:		http2ErrCodeProtocol,
			})
									return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9622
			// _ = "end of CoverTab[40797]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9623
			_go_fuzz_dep_.CoverTab[40798]++
//line /usr/local/go/src/net/http/h2_bundle.go:9623
			// _ = "end of CoverTab[40798]"
//line /usr/local/go/src/net/http/h2_bundle.go:9623
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9623
		// _ = "end of CoverTab[40789]"
//line /usr/local/go/src/net/http/h2_bundle.go:9623
		_go_fuzz_dep_.CoverTab[40790]++

								cc.mu.Lock()
								if cs.inflow.available() >= int32(f.Length) {
//line /usr/local/go/src/net/http/h2_bundle.go:9626
			_go_fuzz_dep_.CoverTab[40799]++
									cs.inflow.take(int32(f.Length))
//line /usr/local/go/src/net/http/h2_bundle.go:9627
			// _ = "end of CoverTab[40799]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9628
			_go_fuzz_dep_.CoverTab[40800]++
									cc.mu.Unlock()
									return http2ConnectionError(http2ErrCodeFlowControl)
//line /usr/local/go/src/net/http/h2_bundle.go:9630
			// _ = "end of CoverTab[40800]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9631
		// _ = "end of CoverTab[40790]"
//line /usr/local/go/src/net/http/h2_bundle.go:9631
		_go_fuzz_dep_.CoverTab[40791]++
		// Return any padded flow control now, since we won't
		// refund it later on body reads.
		var refund int
		if pad := int(f.Length) - len(data); pad > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9635
			_go_fuzz_dep_.CoverTab[40801]++
									refund += pad
//line /usr/local/go/src/net/http/h2_bundle.go:9636
			// _ = "end of CoverTab[40801]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9637
			_go_fuzz_dep_.CoverTab[40802]++
//line /usr/local/go/src/net/http/h2_bundle.go:9637
			// _ = "end of CoverTab[40802]"
//line /usr/local/go/src/net/http/h2_bundle.go:9637
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9637
		// _ = "end of CoverTab[40791]"
//line /usr/local/go/src/net/http/h2_bundle.go:9637
		_go_fuzz_dep_.CoverTab[40792]++

								didReset := false
								var err error
								if len(data) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9641
			_go_fuzz_dep_.CoverTab[40803]++
									if _, err = cs.bufPipe.Write(data); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9642
				_go_fuzz_dep_.CoverTab[40804]++

//line /usr/local/go/src/net/http/h2_bundle.go:9645
				didReset = true
										refund += len(data)
//line /usr/local/go/src/net/http/h2_bundle.go:9646
				// _ = "end of CoverTab[40804]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9647
				_go_fuzz_dep_.CoverTab[40805]++
//line /usr/local/go/src/net/http/h2_bundle.go:9647
				// _ = "end of CoverTab[40805]"
//line /usr/local/go/src/net/http/h2_bundle.go:9647
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9647
			// _ = "end of CoverTab[40803]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9648
			_go_fuzz_dep_.CoverTab[40806]++
//line /usr/local/go/src/net/http/h2_bundle.go:9648
			// _ = "end of CoverTab[40806]"
//line /usr/local/go/src/net/http/h2_bundle.go:9648
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9648
		// _ = "end of CoverTab[40792]"
//line /usr/local/go/src/net/http/h2_bundle.go:9648
		_go_fuzz_dep_.CoverTab[40793]++

								if refund > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9650
			_go_fuzz_dep_.CoverTab[40807]++
									cc.inflow.add(int32(refund))
									if !didReset {
//line /usr/local/go/src/net/http/h2_bundle.go:9652
				_go_fuzz_dep_.CoverTab[40808]++
										cs.inflow.add(int32(refund))
//line /usr/local/go/src/net/http/h2_bundle.go:9653
				// _ = "end of CoverTab[40808]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9654
				_go_fuzz_dep_.CoverTab[40809]++
//line /usr/local/go/src/net/http/h2_bundle.go:9654
				// _ = "end of CoverTab[40809]"
//line /usr/local/go/src/net/http/h2_bundle.go:9654
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9654
			// _ = "end of CoverTab[40807]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9655
			_go_fuzz_dep_.CoverTab[40810]++
//line /usr/local/go/src/net/http/h2_bundle.go:9655
			// _ = "end of CoverTab[40810]"
//line /usr/local/go/src/net/http/h2_bundle.go:9655
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9655
		// _ = "end of CoverTab[40793]"
//line /usr/local/go/src/net/http/h2_bundle.go:9655
		_go_fuzz_dep_.CoverTab[40794]++
								cc.mu.Unlock()

								if refund > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9658
			_go_fuzz_dep_.CoverTab[40811]++
									cc.wmu.Lock()
									cc.fr.WriteWindowUpdate(0, uint32(refund))
									if !didReset {
//line /usr/local/go/src/net/http/h2_bundle.go:9661
				_go_fuzz_dep_.CoverTab[40813]++
										cc.fr.WriteWindowUpdate(cs.ID, uint32(refund))
//line /usr/local/go/src/net/http/h2_bundle.go:9662
				// _ = "end of CoverTab[40813]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9663
				_go_fuzz_dep_.CoverTab[40814]++
//line /usr/local/go/src/net/http/h2_bundle.go:9663
				// _ = "end of CoverTab[40814]"
//line /usr/local/go/src/net/http/h2_bundle.go:9663
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9663
			// _ = "end of CoverTab[40811]"
//line /usr/local/go/src/net/http/h2_bundle.go:9663
			_go_fuzz_dep_.CoverTab[40812]++
									cc.bw.Flush()
									cc.wmu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:9665
			// _ = "end of CoverTab[40812]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9666
			_go_fuzz_dep_.CoverTab[40815]++
//line /usr/local/go/src/net/http/h2_bundle.go:9666
			// _ = "end of CoverTab[40815]"
//line /usr/local/go/src/net/http/h2_bundle.go:9666
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9666
		// _ = "end of CoverTab[40794]"
//line /usr/local/go/src/net/http/h2_bundle.go:9666
		_go_fuzz_dep_.CoverTab[40795]++

								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9668
			_go_fuzz_dep_.CoverTab[40816]++
									rl.endStreamError(cs, err)
									return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9670
			// _ = "end of CoverTab[40816]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9671
			_go_fuzz_dep_.CoverTab[40817]++
//line /usr/local/go/src/net/http/h2_bundle.go:9671
			// _ = "end of CoverTab[40817]"
//line /usr/local/go/src/net/http/h2_bundle.go:9671
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9671
		// _ = "end of CoverTab[40795]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9672
		_go_fuzz_dep_.CoverTab[40818]++
//line /usr/local/go/src/net/http/h2_bundle.go:9672
		// _ = "end of CoverTab[40818]"
//line /usr/local/go/src/net/http/h2_bundle.go:9672
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9672
	// _ = "end of CoverTab[40774]"
//line /usr/local/go/src/net/http/h2_bundle.go:9672
	_go_fuzz_dep_.CoverTab[40775]++

							if f.StreamEnded() {
//line /usr/local/go/src/net/http/h2_bundle.go:9674
		_go_fuzz_dep_.CoverTab[40819]++
								rl.endStream(cs)
//line /usr/local/go/src/net/http/h2_bundle.go:9675
		// _ = "end of CoverTab[40819]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9676
		_go_fuzz_dep_.CoverTab[40820]++
//line /usr/local/go/src/net/http/h2_bundle.go:9676
		// _ = "end of CoverTab[40820]"
//line /usr/local/go/src/net/http/h2_bundle.go:9676
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9676
	// _ = "end of CoverTab[40775]"
//line /usr/local/go/src/net/http/h2_bundle.go:9676
	_go_fuzz_dep_.CoverTab[40776]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9677
	// _ = "end of CoverTab[40776]"
}

func (rl *http2clientConnReadLoop) endStream(cs *http2clientStream) {
//line /usr/local/go/src/net/http/h2_bundle.go:9680
	_go_fuzz_dep_.CoverTab[40821]++

//line /usr/local/go/src/net/http/h2_bundle.go:9683
	if !cs.readClosed {
//line /usr/local/go/src/net/http/h2_bundle.go:9683
		_go_fuzz_dep_.CoverTab[40822]++
								cs.readClosed = true

//line /usr/local/go/src/net/http/h2_bundle.go:9689
		rl.cc.mu.Lock()
								defer rl.cc.mu.Unlock()
								cs.bufPipe.closeWithErrorAndCode(io.EOF, cs.copyTrailers)
								close(cs.peerClosed)
//line /usr/local/go/src/net/http/h2_bundle.go:9692
		// _ = "end of CoverTab[40822]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9693
		_go_fuzz_dep_.CoverTab[40823]++
//line /usr/local/go/src/net/http/h2_bundle.go:9693
		// _ = "end of CoverTab[40823]"
//line /usr/local/go/src/net/http/h2_bundle.go:9693
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9693
	// _ = "end of CoverTab[40821]"
}

func (rl *http2clientConnReadLoop) endStreamError(cs *http2clientStream, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:9696
	_go_fuzz_dep_.CoverTab[40824]++
							cs.readAborted = true
							cs.abortStream(err)
//line /usr/local/go/src/net/http/h2_bundle.go:9698
	// _ = "end of CoverTab[40824]"
}

func (rl *http2clientConnReadLoop) streamByID(id uint32) *http2clientStream {
//line /usr/local/go/src/net/http/h2_bundle.go:9701
	_go_fuzz_dep_.CoverTab[40825]++
							rl.cc.mu.Lock()
							defer rl.cc.mu.Unlock()
							cs := rl.cc.streams[id]
							if cs != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9705
		_go_fuzz_dep_.CoverTab[40827]++
//line /usr/local/go/src/net/http/h2_bundle.go:9705
		return !cs.readAborted
//line /usr/local/go/src/net/http/h2_bundle.go:9705
		// _ = "end of CoverTab[40827]"
//line /usr/local/go/src/net/http/h2_bundle.go:9705
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9705
		_go_fuzz_dep_.CoverTab[40828]++
								return cs
//line /usr/local/go/src/net/http/h2_bundle.go:9706
		// _ = "end of CoverTab[40828]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9707
		_go_fuzz_dep_.CoverTab[40829]++
//line /usr/local/go/src/net/http/h2_bundle.go:9707
		// _ = "end of CoverTab[40829]"
//line /usr/local/go/src/net/http/h2_bundle.go:9707
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9707
	// _ = "end of CoverTab[40825]"
//line /usr/local/go/src/net/http/h2_bundle.go:9707
	_go_fuzz_dep_.CoverTab[40826]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9708
	// _ = "end of CoverTab[40826]"
}

func (cs *http2clientStream) copyTrailers() {
//line /usr/local/go/src/net/http/h2_bundle.go:9711
	_go_fuzz_dep_.CoverTab[40830]++
							for k, vv := range cs.trailer {
//line /usr/local/go/src/net/http/h2_bundle.go:9712
		_go_fuzz_dep_.CoverTab[40831]++
								t := cs.resTrailer
								if *t == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9714
			_go_fuzz_dep_.CoverTab[40833]++
									*t = make(Header)
//line /usr/local/go/src/net/http/h2_bundle.go:9715
			// _ = "end of CoverTab[40833]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9716
			_go_fuzz_dep_.CoverTab[40834]++
//line /usr/local/go/src/net/http/h2_bundle.go:9716
			// _ = "end of CoverTab[40834]"
//line /usr/local/go/src/net/http/h2_bundle.go:9716
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9716
		// _ = "end of CoverTab[40831]"
//line /usr/local/go/src/net/http/h2_bundle.go:9716
		_go_fuzz_dep_.CoverTab[40832]++
								(*t)[k] = vv
//line /usr/local/go/src/net/http/h2_bundle.go:9717
		// _ = "end of CoverTab[40832]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9718
	// _ = "end of CoverTab[40830]"
}

func (rl *http2clientConnReadLoop) processGoAway(f *http2GoAwayFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9721
	_go_fuzz_dep_.CoverTab[40835]++
							cc := rl.cc
							cc.t.connPool().MarkDead(cc)
							if f.ErrCode != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:9724
		_go_fuzz_dep_.CoverTab[40837]++

								cc.vlogf("transport got GOAWAY with error code = %v", f.ErrCode)
								if fn := cc.t.CountError; fn != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9727
			_go_fuzz_dep_.CoverTab[40838]++
									fn("recv_goaway_" + f.ErrCode.stringToken())
//line /usr/local/go/src/net/http/h2_bundle.go:9728
			// _ = "end of CoverTab[40838]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9729
			_go_fuzz_dep_.CoverTab[40839]++
//line /usr/local/go/src/net/http/h2_bundle.go:9729
			// _ = "end of CoverTab[40839]"
//line /usr/local/go/src/net/http/h2_bundle.go:9729
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9729
		// _ = "end of CoverTab[40837]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9730
		_go_fuzz_dep_.CoverTab[40840]++
//line /usr/local/go/src/net/http/h2_bundle.go:9730
		// _ = "end of CoverTab[40840]"
//line /usr/local/go/src/net/http/h2_bundle.go:9730
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9730
	// _ = "end of CoverTab[40835]"
//line /usr/local/go/src/net/http/h2_bundle.go:9730
	_go_fuzz_dep_.CoverTab[40836]++
							cc.setGoAway(f)
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9732
	// _ = "end of CoverTab[40836]"
}

func (rl *http2clientConnReadLoop) processSettings(f *http2SettingsFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9735
	_go_fuzz_dep_.CoverTab[40841]++
							cc := rl.cc

//line /usr/local/go/src/net/http/h2_bundle.go:9739
	cc.wmu.Lock()
	defer cc.wmu.Unlock()

	if err := rl.processSettingsNoWrite(f); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9742
		_go_fuzz_dep_.CoverTab[40844]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:9743
		// _ = "end of CoverTab[40844]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9744
		_go_fuzz_dep_.CoverTab[40845]++
//line /usr/local/go/src/net/http/h2_bundle.go:9744
		// _ = "end of CoverTab[40845]"
//line /usr/local/go/src/net/http/h2_bundle.go:9744
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9744
	// _ = "end of CoverTab[40841]"
//line /usr/local/go/src/net/http/h2_bundle.go:9744
	_go_fuzz_dep_.CoverTab[40842]++
							if !f.IsAck() {
//line /usr/local/go/src/net/http/h2_bundle.go:9745
		_go_fuzz_dep_.CoverTab[40846]++
								cc.fr.WriteSettingsAck()
								cc.bw.Flush()
//line /usr/local/go/src/net/http/h2_bundle.go:9747
		// _ = "end of CoverTab[40846]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9748
		_go_fuzz_dep_.CoverTab[40847]++
//line /usr/local/go/src/net/http/h2_bundle.go:9748
		// _ = "end of CoverTab[40847]"
//line /usr/local/go/src/net/http/h2_bundle.go:9748
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9748
	// _ = "end of CoverTab[40842]"
//line /usr/local/go/src/net/http/h2_bundle.go:9748
	_go_fuzz_dep_.CoverTab[40843]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9749
	// _ = "end of CoverTab[40843]"
}

func (rl *http2clientConnReadLoop) processSettingsNoWrite(f *http2SettingsFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9752
	_go_fuzz_dep_.CoverTab[40848]++
							cc := rl.cc
							cc.mu.Lock()
							defer cc.mu.Unlock()

							if f.IsAck() {
//line /usr/local/go/src/net/http/h2_bundle.go:9757
		_go_fuzz_dep_.CoverTab[40853]++
								if cc.wantSettingsAck {
//line /usr/local/go/src/net/http/h2_bundle.go:9758
			_go_fuzz_dep_.CoverTab[40855]++
									cc.wantSettingsAck = false
									return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9760
			// _ = "end of CoverTab[40855]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9761
			_go_fuzz_dep_.CoverTab[40856]++
//line /usr/local/go/src/net/http/h2_bundle.go:9761
			// _ = "end of CoverTab[40856]"
//line /usr/local/go/src/net/http/h2_bundle.go:9761
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9761
		// _ = "end of CoverTab[40853]"
//line /usr/local/go/src/net/http/h2_bundle.go:9761
		_go_fuzz_dep_.CoverTab[40854]++
								return http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:9762
		// _ = "end of CoverTab[40854]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9763
		_go_fuzz_dep_.CoverTab[40857]++
//line /usr/local/go/src/net/http/h2_bundle.go:9763
		// _ = "end of CoverTab[40857]"
//line /usr/local/go/src/net/http/h2_bundle.go:9763
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9763
	// _ = "end of CoverTab[40848]"
//line /usr/local/go/src/net/http/h2_bundle.go:9763
	_go_fuzz_dep_.CoverTab[40849]++

							var seenMaxConcurrentStreams bool
							err := f.ForeachSetting(func(s http2Setting) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9766
		_go_fuzz_dep_.CoverTab[40858]++
								switch s.ID {
		case http2SettingMaxFrameSize:
//line /usr/local/go/src/net/http/h2_bundle.go:9768
			_go_fuzz_dep_.CoverTab[40860]++
									cc.maxFrameSize = s.Val
//line /usr/local/go/src/net/http/h2_bundle.go:9769
			// _ = "end of CoverTab[40860]"
		case http2SettingMaxConcurrentStreams:
//line /usr/local/go/src/net/http/h2_bundle.go:9770
			_go_fuzz_dep_.CoverTab[40861]++
									cc.maxConcurrentStreams = s.Val
									seenMaxConcurrentStreams = true
//line /usr/local/go/src/net/http/h2_bundle.go:9772
			// _ = "end of CoverTab[40861]"
		case http2SettingMaxHeaderListSize:
//line /usr/local/go/src/net/http/h2_bundle.go:9773
			_go_fuzz_dep_.CoverTab[40862]++
									cc.peerMaxHeaderListSize = uint64(s.Val)
//line /usr/local/go/src/net/http/h2_bundle.go:9774
			// _ = "end of CoverTab[40862]"
		case http2SettingInitialWindowSize:
//line /usr/local/go/src/net/http/h2_bundle.go:9775
			_go_fuzz_dep_.CoverTab[40863]++

//line /usr/local/go/src/net/http/h2_bundle.go:9780
			if s.Val > math.MaxInt32 {
//line /usr/local/go/src/net/http/h2_bundle.go:9780
				_go_fuzz_dep_.CoverTab[40868]++
										return http2ConnectionError(http2ErrCodeFlowControl)
//line /usr/local/go/src/net/http/h2_bundle.go:9781
				// _ = "end of CoverTab[40868]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9782
				_go_fuzz_dep_.CoverTab[40869]++
//line /usr/local/go/src/net/http/h2_bundle.go:9782
				// _ = "end of CoverTab[40869]"
//line /usr/local/go/src/net/http/h2_bundle.go:9782
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9782
			// _ = "end of CoverTab[40863]"
//line /usr/local/go/src/net/http/h2_bundle.go:9782
			_go_fuzz_dep_.CoverTab[40864]++

//line /usr/local/go/src/net/http/h2_bundle.go:9787
			delta := int32(s.Val) - int32(cc.initialWindowSize)
			for _, cs := range cc.streams {
//line /usr/local/go/src/net/http/h2_bundle.go:9788
				_go_fuzz_dep_.CoverTab[40870]++
										cs.flow.add(delta)
//line /usr/local/go/src/net/http/h2_bundle.go:9789
				// _ = "end of CoverTab[40870]"
			}
//line /usr/local/go/src/net/http/h2_bundle.go:9790
			// _ = "end of CoverTab[40864]"
//line /usr/local/go/src/net/http/h2_bundle.go:9790
			_go_fuzz_dep_.CoverTab[40865]++
									cc.cond.Broadcast()

									cc.initialWindowSize = s.Val
//line /usr/local/go/src/net/http/h2_bundle.go:9793
			// _ = "end of CoverTab[40865]"
		case http2SettingHeaderTableSize:
//line /usr/local/go/src/net/http/h2_bundle.go:9794
			_go_fuzz_dep_.CoverTab[40866]++
									cc.henc.SetMaxDynamicTableSize(s.Val)
									cc.peerMaxHeaderTableSize = s.Val
//line /usr/local/go/src/net/http/h2_bundle.go:9796
			// _ = "end of CoverTab[40866]"
		default:
//line /usr/local/go/src/net/http/h2_bundle.go:9797
			_go_fuzz_dep_.CoverTab[40867]++
									cc.vlogf("Unhandled Setting: %v", s)
//line /usr/local/go/src/net/http/h2_bundle.go:9798
			// _ = "end of CoverTab[40867]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9799
		// _ = "end of CoverTab[40858]"
//line /usr/local/go/src/net/http/h2_bundle.go:9799
		_go_fuzz_dep_.CoverTab[40859]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9800
		// _ = "end of CoverTab[40859]"
	})
//line /usr/local/go/src/net/http/h2_bundle.go:9801
	// _ = "end of CoverTab[40849]"
//line /usr/local/go/src/net/http/h2_bundle.go:9801
	_go_fuzz_dep_.CoverTab[40850]++
							if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9802
		_go_fuzz_dep_.CoverTab[40871]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:9803
		// _ = "end of CoverTab[40871]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9804
		_go_fuzz_dep_.CoverTab[40872]++
//line /usr/local/go/src/net/http/h2_bundle.go:9804
		// _ = "end of CoverTab[40872]"
//line /usr/local/go/src/net/http/h2_bundle.go:9804
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9804
	// _ = "end of CoverTab[40850]"
//line /usr/local/go/src/net/http/h2_bundle.go:9804
	_go_fuzz_dep_.CoverTab[40851]++

							if !cc.seenSettings {
//line /usr/local/go/src/net/http/h2_bundle.go:9806
		_go_fuzz_dep_.CoverTab[40873]++
								if !seenMaxConcurrentStreams {
//line /usr/local/go/src/net/http/h2_bundle.go:9807
			_go_fuzz_dep_.CoverTab[40875]++

//line /usr/local/go/src/net/http/h2_bundle.go:9812
			cc.maxConcurrentStreams = http2defaultMaxConcurrentStreams
//line /usr/local/go/src/net/http/h2_bundle.go:9812
			// _ = "end of CoverTab[40875]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9813
			_go_fuzz_dep_.CoverTab[40876]++
//line /usr/local/go/src/net/http/h2_bundle.go:9813
			// _ = "end of CoverTab[40876]"
//line /usr/local/go/src/net/http/h2_bundle.go:9813
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9813
		// _ = "end of CoverTab[40873]"
//line /usr/local/go/src/net/http/h2_bundle.go:9813
		_go_fuzz_dep_.CoverTab[40874]++
								cc.seenSettings = true
//line /usr/local/go/src/net/http/h2_bundle.go:9814
		// _ = "end of CoverTab[40874]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9815
		_go_fuzz_dep_.CoverTab[40877]++
//line /usr/local/go/src/net/http/h2_bundle.go:9815
		// _ = "end of CoverTab[40877]"
//line /usr/local/go/src/net/http/h2_bundle.go:9815
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9815
	// _ = "end of CoverTab[40851]"
//line /usr/local/go/src/net/http/h2_bundle.go:9815
	_go_fuzz_dep_.CoverTab[40852]++

							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9817
	// _ = "end of CoverTab[40852]"
}

func (rl *http2clientConnReadLoop) processWindowUpdate(f *http2WindowUpdateFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9820
	_go_fuzz_dep_.CoverTab[40878]++
							cc := rl.cc
							cs := rl.streamByID(f.StreamID)
							if f.StreamID != 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9823
		_go_fuzz_dep_.CoverTab[40882]++
//line /usr/local/go/src/net/http/h2_bundle.go:9823
		return cs == nil
//line /usr/local/go/src/net/http/h2_bundle.go:9823
		// _ = "end of CoverTab[40882]"
//line /usr/local/go/src/net/http/h2_bundle.go:9823
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:9823
		_go_fuzz_dep_.CoverTab[40883]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9824
		// _ = "end of CoverTab[40883]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9825
		_go_fuzz_dep_.CoverTab[40884]++
//line /usr/local/go/src/net/http/h2_bundle.go:9825
		// _ = "end of CoverTab[40884]"
//line /usr/local/go/src/net/http/h2_bundle.go:9825
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9825
	// _ = "end of CoverTab[40878]"
//line /usr/local/go/src/net/http/h2_bundle.go:9825
	_go_fuzz_dep_.CoverTab[40879]++

							cc.mu.Lock()
							defer cc.mu.Unlock()

							fl := &cc.flow
							if cs != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9831
		_go_fuzz_dep_.CoverTab[40885]++
								fl = &cs.flow
//line /usr/local/go/src/net/http/h2_bundle.go:9832
		// _ = "end of CoverTab[40885]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9833
		_go_fuzz_dep_.CoverTab[40886]++
//line /usr/local/go/src/net/http/h2_bundle.go:9833
		// _ = "end of CoverTab[40886]"
//line /usr/local/go/src/net/http/h2_bundle.go:9833
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9833
	// _ = "end of CoverTab[40879]"
//line /usr/local/go/src/net/http/h2_bundle.go:9833
	_go_fuzz_dep_.CoverTab[40880]++
							if !fl.add(int32(f.Increment)) {
//line /usr/local/go/src/net/http/h2_bundle.go:9834
		_go_fuzz_dep_.CoverTab[40887]++
								return http2ConnectionError(http2ErrCodeFlowControl)
//line /usr/local/go/src/net/http/h2_bundle.go:9835
		// _ = "end of CoverTab[40887]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9836
		_go_fuzz_dep_.CoverTab[40888]++
//line /usr/local/go/src/net/http/h2_bundle.go:9836
		// _ = "end of CoverTab[40888]"
//line /usr/local/go/src/net/http/h2_bundle.go:9836
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9836
	// _ = "end of CoverTab[40880]"
//line /usr/local/go/src/net/http/h2_bundle.go:9836
	_go_fuzz_dep_.CoverTab[40881]++
							cc.cond.Broadcast()
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9838
	// _ = "end of CoverTab[40881]"
}

func (rl *http2clientConnReadLoop) processResetStream(f *http2RSTStreamFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9841
	_go_fuzz_dep_.CoverTab[40889]++
							cs := rl.streamByID(f.StreamID)
							if cs == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9843
		_go_fuzz_dep_.CoverTab[40893]++

								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9845
		// _ = "end of CoverTab[40893]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9846
		_go_fuzz_dep_.CoverTab[40894]++
//line /usr/local/go/src/net/http/h2_bundle.go:9846
		// _ = "end of CoverTab[40894]"
//line /usr/local/go/src/net/http/h2_bundle.go:9846
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9846
	// _ = "end of CoverTab[40889]"
//line /usr/local/go/src/net/http/h2_bundle.go:9846
	_go_fuzz_dep_.CoverTab[40890]++
							serr := http2streamError(cs.ID, f.ErrCode)
							serr.Cause = http2errFromPeer
							if f.ErrCode == http2ErrCodeProtocol {
//line /usr/local/go/src/net/http/h2_bundle.go:9849
		_go_fuzz_dep_.CoverTab[40895]++
								rl.cc.SetDoNotReuse()
//line /usr/local/go/src/net/http/h2_bundle.go:9850
		// _ = "end of CoverTab[40895]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9851
		_go_fuzz_dep_.CoverTab[40896]++
//line /usr/local/go/src/net/http/h2_bundle.go:9851
		// _ = "end of CoverTab[40896]"
//line /usr/local/go/src/net/http/h2_bundle.go:9851
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9851
	// _ = "end of CoverTab[40890]"
//line /usr/local/go/src/net/http/h2_bundle.go:9851
	_go_fuzz_dep_.CoverTab[40891]++
							if fn := cs.cc.t.CountError; fn != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9852
		_go_fuzz_dep_.CoverTab[40897]++
								fn("recv_rststream_" + f.ErrCode.stringToken())
//line /usr/local/go/src/net/http/h2_bundle.go:9853
		// _ = "end of CoverTab[40897]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9854
		_go_fuzz_dep_.CoverTab[40898]++
//line /usr/local/go/src/net/http/h2_bundle.go:9854
		// _ = "end of CoverTab[40898]"
//line /usr/local/go/src/net/http/h2_bundle.go:9854
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9854
	// _ = "end of CoverTab[40891]"
//line /usr/local/go/src/net/http/h2_bundle.go:9854
	_go_fuzz_dep_.CoverTab[40892]++
							cs.abortStream(serr)

							cs.bufPipe.CloseWithError(serr)
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9858
	// _ = "end of CoverTab[40892]"
}

// Ping sends a PING frame to the server and waits for the ack.
func (cc *http2ClientConn) Ping(ctx context.Context) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9862
	_go_fuzz_dep_.CoverTab[40899]++
							c := make(chan struct{})
	// Generate a random payload
	var p [8]byte
	for {
//line /usr/local/go/src/net/http/h2_bundle.go:9866
		_go_fuzz_dep_.CoverTab[40902]++
								if _, err := rand.Read(p[:]); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9867
			_go_fuzz_dep_.CoverTab[40905]++
									return err
//line /usr/local/go/src/net/http/h2_bundle.go:9868
			// _ = "end of CoverTab[40905]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9869
			_go_fuzz_dep_.CoverTab[40906]++
//line /usr/local/go/src/net/http/h2_bundle.go:9869
			// _ = "end of CoverTab[40906]"
//line /usr/local/go/src/net/http/h2_bundle.go:9869
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9869
		// _ = "end of CoverTab[40902]"
//line /usr/local/go/src/net/http/h2_bundle.go:9869
		_go_fuzz_dep_.CoverTab[40903]++
								cc.mu.Lock()

								if _, found := cc.pings[p]; !found {
//line /usr/local/go/src/net/http/h2_bundle.go:9872
			_go_fuzz_dep_.CoverTab[40907]++
									cc.pings[p] = c
									cc.mu.Unlock()
									break
//line /usr/local/go/src/net/http/h2_bundle.go:9875
			// _ = "end of CoverTab[40907]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9876
			_go_fuzz_dep_.CoverTab[40908]++
//line /usr/local/go/src/net/http/h2_bundle.go:9876
			// _ = "end of CoverTab[40908]"
//line /usr/local/go/src/net/http/h2_bundle.go:9876
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9876
		// _ = "end of CoverTab[40903]"
//line /usr/local/go/src/net/http/h2_bundle.go:9876
		_go_fuzz_dep_.CoverTab[40904]++
								cc.mu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:9877
		// _ = "end of CoverTab[40904]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9878
	// _ = "end of CoverTab[40899]"
//line /usr/local/go/src/net/http/h2_bundle.go:9878
	_go_fuzz_dep_.CoverTab[40900]++
							errc := make(chan error, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:9879
	_curRoutineNum30_ := _atomic_.AddUint32(&_go_fuzz_dep_.RoutineNum, 1)
//line /usr/local/go/src/net/http/h2_bundle.go:9879
	_go_fuzz_dep_.RoutineInfo.AddCreatedRoutineNum(_curRoutineNum30_)
							go func() {
//line /usr/local/go/src/net/http/h2_bundle.go:9880
		_go_fuzz_dep_.CoverTab[40909]++
//line /usr/local/go/src/net/http/h2_bundle.go:9880
		defer func() {
//line /usr/local/go/src/net/http/h2_bundle.go:9880
			_go_fuzz_dep_.CoverTab[40911]++
//line /usr/local/go/src/net/http/h2_bundle.go:9880
			_go_fuzz_dep_.RoutineInfo.AddTerminatedRoutineNum(_curRoutineNum30_)
//line /usr/local/go/src/net/http/h2_bundle.go:9880
			// _ = "end of CoverTab[40911]"
//line /usr/local/go/src/net/http/h2_bundle.go:9880
		}()
								cc.wmu.Lock()
								defer cc.wmu.Unlock()
								if err := cc.fr.WritePing(false, p); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9883
			_go_fuzz_dep_.CoverTab[40912]++
									errc <- err
									return
//line /usr/local/go/src/net/http/h2_bundle.go:9885
			// _ = "end of CoverTab[40912]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9886
			_go_fuzz_dep_.CoverTab[40913]++
//line /usr/local/go/src/net/http/h2_bundle.go:9886
			// _ = "end of CoverTab[40913]"
//line /usr/local/go/src/net/http/h2_bundle.go:9886
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9886
		// _ = "end of CoverTab[40909]"
//line /usr/local/go/src/net/http/h2_bundle.go:9886
		_go_fuzz_dep_.CoverTab[40910]++
								if err := cc.bw.Flush(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9887
			_go_fuzz_dep_.CoverTab[40914]++
									errc <- err
									return
//line /usr/local/go/src/net/http/h2_bundle.go:9889
			// _ = "end of CoverTab[40914]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9890
			_go_fuzz_dep_.CoverTab[40915]++
//line /usr/local/go/src/net/http/h2_bundle.go:9890
			// _ = "end of CoverTab[40915]"
//line /usr/local/go/src/net/http/h2_bundle.go:9890
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9890
		// _ = "end of CoverTab[40910]"
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:9891
	// _ = "end of CoverTab[40900]"
//line /usr/local/go/src/net/http/h2_bundle.go:9891
	_go_fuzz_dep_.CoverTab[40901]++
							select {
	case <-c:
//line /usr/local/go/src/net/http/h2_bundle.go:9893
		_go_fuzz_dep_.CoverTab[40916]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9894
		// _ = "end of CoverTab[40916]"
	case err := <-errc:
//line /usr/local/go/src/net/http/h2_bundle.go:9895
		_go_fuzz_dep_.CoverTab[40917]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:9896
		// _ = "end of CoverTab[40917]"
	case <-ctx.Done():
//line /usr/local/go/src/net/http/h2_bundle.go:9897
		_go_fuzz_dep_.CoverTab[40918]++
								return ctx.Err()
//line /usr/local/go/src/net/http/h2_bundle.go:9898
		// _ = "end of CoverTab[40918]"
	case <-cc.readerDone:
//line /usr/local/go/src/net/http/h2_bundle.go:9899
		_go_fuzz_dep_.CoverTab[40919]++

								return cc.readerErr
//line /usr/local/go/src/net/http/h2_bundle.go:9901
		// _ = "end of CoverTab[40919]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9902
	// _ = "end of CoverTab[40901]"
}

func (rl *http2clientConnReadLoop) processPing(f *http2PingFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9905
	_go_fuzz_dep_.CoverTab[40920]++
							if f.IsAck() {
//line /usr/local/go/src/net/http/h2_bundle.go:9906
		_go_fuzz_dep_.CoverTab[40923]++
								cc := rl.cc
								cc.mu.Lock()
								defer cc.mu.Unlock()

								if c, ok := cc.pings[f.Data]; ok {
//line /usr/local/go/src/net/http/h2_bundle.go:9911
			_go_fuzz_dep_.CoverTab[40925]++
									close(c)
									delete(cc.pings, f.Data)
//line /usr/local/go/src/net/http/h2_bundle.go:9913
			// _ = "end of CoverTab[40925]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9914
			_go_fuzz_dep_.CoverTab[40926]++
//line /usr/local/go/src/net/http/h2_bundle.go:9914
			// _ = "end of CoverTab[40926]"
//line /usr/local/go/src/net/http/h2_bundle.go:9914
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9914
		// _ = "end of CoverTab[40923]"
//line /usr/local/go/src/net/http/h2_bundle.go:9914
		_go_fuzz_dep_.CoverTab[40924]++
								return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9915
		// _ = "end of CoverTab[40924]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9916
		_go_fuzz_dep_.CoverTab[40927]++
//line /usr/local/go/src/net/http/h2_bundle.go:9916
		// _ = "end of CoverTab[40927]"
//line /usr/local/go/src/net/http/h2_bundle.go:9916
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9916
	// _ = "end of CoverTab[40920]"
//line /usr/local/go/src/net/http/h2_bundle.go:9916
	_go_fuzz_dep_.CoverTab[40921]++
							cc := rl.cc
							cc.wmu.Lock()
							defer cc.wmu.Unlock()
							if err := cc.fr.WritePing(true, f.Data); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:9920
		_go_fuzz_dep_.CoverTab[40928]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:9921
		// _ = "end of CoverTab[40928]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9922
		_go_fuzz_dep_.CoverTab[40929]++
//line /usr/local/go/src/net/http/h2_bundle.go:9922
		// _ = "end of CoverTab[40929]"
//line /usr/local/go/src/net/http/h2_bundle.go:9922
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9922
	// _ = "end of CoverTab[40921]"
//line /usr/local/go/src/net/http/h2_bundle.go:9922
	_go_fuzz_dep_.CoverTab[40922]++
							return cc.bw.Flush()
//line /usr/local/go/src/net/http/h2_bundle.go:9923
	// _ = "end of CoverTab[40922]"
}

func (rl *http2clientConnReadLoop) processPushPromise(f *http2PushPromiseFrame) error {
//line /usr/local/go/src/net/http/h2_bundle.go:9926
	_go_fuzz_dep_.CoverTab[40930]++

//line /usr/local/go/src/net/http/h2_bundle.go:9934
	return http2ConnectionError(http2ErrCodeProtocol)
//line /usr/local/go/src/net/http/h2_bundle.go:9934
	// _ = "end of CoverTab[40930]"
}

func (cc *http2ClientConn) writeStreamReset(streamID uint32, code http2ErrCode, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:9937
	_go_fuzz_dep_.CoverTab[40931]++

//line /usr/local/go/src/net/http/h2_bundle.go:9942
	cc.wmu.Lock()
							cc.fr.WriteRSTStream(streamID, code)
							cc.bw.Flush()
							cc.wmu.Unlock()
//line /usr/local/go/src/net/http/h2_bundle.go:9945
	// _ = "end of CoverTab[40931]"
}

var (
	http2errResponseHeaderListSize	= errors.New("http2: response header list larger than advertised limit")
	http2errRequestHeaderListSize	= errors.New("http2: request header list larger than peer's advertised limit")
)

func (cc *http2ClientConn) logf(format string, args ...interface{}) {
//line /usr/local/go/src/net/http/h2_bundle.go:9953
	_go_fuzz_dep_.CoverTab[40932]++
							cc.t.logf(format, args...)
//line /usr/local/go/src/net/http/h2_bundle.go:9954
	// _ = "end of CoverTab[40932]"
}

func (cc *http2ClientConn) vlogf(format string, args ...interface{}) {
//line /usr/local/go/src/net/http/h2_bundle.go:9957
	_go_fuzz_dep_.CoverTab[40933]++
							cc.t.vlogf(format, args...)
//line /usr/local/go/src/net/http/h2_bundle.go:9958
	// _ = "end of CoverTab[40933]"
}

func (t *http2Transport) vlogf(format string, args ...interface{}) {
//line /usr/local/go/src/net/http/h2_bundle.go:9961
	_go_fuzz_dep_.CoverTab[40934]++
							if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:9962
		_go_fuzz_dep_.CoverTab[40935]++
								t.logf(format, args...)
//line /usr/local/go/src/net/http/h2_bundle.go:9963
		// _ = "end of CoverTab[40935]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9964
		_go_fuzz_dep_.CoverTab[40936]++
//line /usr/local/go/src/net/http/h2_bundle.go:9964
		// _ = "end of CoverTab[40936]"
//line /usr/local/go/src/net/http/h2_bundle.go:9964
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9964
	// _ = "end of CoverTab[40934]"
}

func (t *http2Transport) logf(format string, args ...interface{}) {
//line /usr/local/go/src/net/http/h2_bundle.go:9967
	_go_fuzz_dep_.CoverTab[40937]++
							log.Printf(format, args...)
//line /usr/local/go/src/net/http/h2_bundle.go:9968
	// _ = "end of CoverTab[40937]"
}

var http2noBody io.ReadCloser = http2noBodyReader{}

type http2noBodyReader struct{}

func (http2noBodyReader) Close() error {
//line /usr/local/go/src/net/http/h2_bundle.go:9975
	_go_fuzz_dep_.CoverTab[40938]++
//line /usr/local/go/src/net/http/h2_bundle.go:9975
	return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9975
	// _ = "end of CoverTab[40938]"
//line /usr/local/go/src/net/http/h2_bundle.go:9975
}

func (http2noBodyReader) Read([]byte) (int, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:9977
	_go_fuzz_dep_.CoverTab[40939]++
//line /usr/local/go/src/net/http/h2_bundle.go:9977
	return 0, io.EOF
//line /usr/local/go/src/net/http/h2_bundle.go:9977
	// _ = "end of CoverTab[40939]"
//line /usr/local/go/src/net/http/h2_bundle.go:9977
}

type http2missingBody struct{}

func (http2missingBody) Close() error {
//line /usr/local/go/src/net/http/h2_bundle.go:9981
	_go_fuzz_dep_.CoverTab[40940]++
//line /usr/local/go/src/net/http/h2_bundle.go:9981
	return nil
//line /usr/local/go/src/net/http/h2_bundle.go:9981
	// _ = "end of CoverTab[40940]"
//line /usr/local/go/src/net/http/h2_bundle.go:9981
}

func (http2missingBody) Read([]byte) (int, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:9983
	_go_fuzz_dep_.CoverTab[40941]++
//line /usr/local/go/src/net/http/h2_bundle.go:9983
	return 0, io.ErrUnexpectedEOF
//line /usr/local/go/src/net/http/h2_bundle.go:9983
	// _ = "end of CoverTab[40941]"
//line /usr/local/go/src/net/http/h2_bundle.go:9983
}

func http2strSliceContains(ss []string, s string) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:9985
	_go_fuzz_dep_.CoverTab[40942]++
							for _, v := range ss {
//line /usr/local/go/src/net/http/h2_bundle.go:9986
		_go_fuzz_dep_.CoverTab[40944]++
								if v == s {
//line /usr/local/go/src/net/http/h2_bundle.go:9987
			_go_fuzz_dep_.CoverTab[40945]++
									return true
//line /usr/local/go/src/net/http/h2_bundle.go:9988
			// _ = "end of CoverTab[40945]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:9989
			_go_fuzz_dep_.CoverTab[40946]++
//line /usr/local/go/src/net/http/h2_bundle.go:9989
			// _ = "end of CoverTab[40946]"
//line /usr/local/go/src/net/http/h2_bundle.go:9989
		}
//line /usr/local/go/src/net/http/h2_bundle.go:9989
		// _ = "end of CoverTab[40944]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:9990
	// _ = "end of CoverTab[40942]"
//line /usr/local/go/src/net/http/h2_bundle.go:9990
	_go_fuzz_dep_.CoverTab[40943]++
							return false
//line /usr/local/go/src/net/http/h2_bundle.go:9991
	// _ = "end of CoverTab[40943]"
}

type http2erringRoundTripper struct{ err error }

func (rt http2erringRoundTripper) RoundTripErr() error {
//line /usr/local/go/src/net/http/h2_bundle.go:9996
	_go_fuzz_dep_.CoverTab[40947]++
//line /usr/local/go/src/net/http/h2_bundle.go:9996
	return rt.err
//line /usr/local/go/src/net/http/h2_bundle.go:9996
	// _ = "end of CoverTab[40947]"
//line /usr/local/go/src/net/http/h2_bundle.go:9996
}

func (rt http2erringRoundTripper) RoundTrip(*Request) (*Response, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:9998
	_go_fuzz_dep_.CoverTab[40948]++
//line /usr/local/go/src/net/http/h2_bundle.go:9998
	return nil, rt.err
//line /usr/local/go/src/net/http/h2_bundle.go:9998
	// _ = "end of CoverTab[40948]"
//line /usr/local/go/src/net/http/h2_bundle.go:9998
}

// gzipReader wraps a response body so it can lazily
//line /usr/local/go/src/net/http/h2_bundle.go:10000
// call gzip.NewReader on the first call to Read
//line /usr/local/go/src/net/http/h2_bundle.go:10002
type http2gzipReader struct {
	_	http2incomparable
	body	io.ReadCloser	// underlying Response.Body
	zr	*gzip.Reader	// lazily-initialized gzip reader
	zerr	error		// sticky error
}

func (gz *http2gzipReader) Read(p []byte) (n int, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:10009
	_go_fuzz_dep_.CoverTab[40949]++
							if gz.zerr != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10010
		_go_fuzz_dep_.CoverTab[40952]++
								return 0, gz.zerr
//line /usr/local/go/src/net/http/h2_bundle.go:10011
		// _ = "end of CoverTab[40952]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10012
		_go_fuzz_dep_.CoverTab[40953]++
//line /usr/local/go/src/net/http/h2_bundle.go:10012
		// _ = "end of CoverTab[40953]"
//line /usr/local/go/src/net/http/h2_bundle.go:10012
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10012
	// _ = "end of CoverTab[40949]"
//line /usr/local/go/src/net/http/h2_bundle.go:10012
	_go_fuzz_dep_.CoverTab[40950]++
							if gz.zr == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10013
		_go_fuzz_dep_.CoverTab[40954]++
								gz.zr, err = gzip.NewReader(gz.body)
								if err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10015
			_go_fuzz_dep_.CoverTab[40955]++
									gz.zerr = err
									return 0, err
//line /usr/local/go/src/net/http/h2_bundle.go:10017
			// _ = "end of CoverTab[40955]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10018
			_go_fuzz_dep_.CoverTab[40956]++
//line /usr/local/go/src/net/http/h2_bundle.go:10018
			// _ = "end of CoverTab[40956]"
//line /usr/local/go/src/net/http/h2_bundle.go:10018
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10018
		// _ = "end of CoverTab[40954]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10019
		_go_fuzz_dep_.CoverTab[40957]++
//line /usr/local/go/src/net/http/h2_bundle.go:10019
		// _ = "end of CoverTab[40957]"
//line /usr/local/go/src/net/http/h2_bundle.go:10019
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10019
	// _ = "end of CoverTab[40950]"
//line /usr/local/go/src/net/http/h2_bundle.go:10019
	_go_fuzz_dep_.CoverTab[40951]++
							return gz.zr.Read(p)
//line /usr/local/go/src/net/http/h2_bundle.go:10020
	// _ = "end of CoverTab[40951]"
}

func (gz *http2gzipReader) Close() error {
//line /usr/local/go/src/net/http/h2_bundle.go:10023
	_go_fuzz_dep_.CoverTab[40958]++
							if err := gz.body.Close(); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10024
		_go_fuzz_dep_.CoverTab[40960]++
								return err
//line /usr/local/go/src/net/http/h2_bundle.go:10025
		// _ = "end of CoverTab[40960]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10026
		_go_fuzz_dep_.CoverTab[40961]++
//line /usr/local/go/src/net/http/h2_bundle.go:10026
		// _ = "end of CoverTab[40961]"
//line /usr/local/go/src/net/http/h2_bundle.go:10026
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10026
	// _ = "end of CoverTab[40958]"
//line /usr/local/go/src/net/http/h2_bundle.go:10026
	_go_fuzz_dep_.CoverTab[40959]++
							gz.zerr = fs.ErrClosed
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:10028
	// _ = "end of CoverTab[40959]"
}

type http2errorReader struct{ err error }

func (r http2errorReader) Read(p []byte) (int, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:10033
	_go_fuzz_dep_.CoverTab[40962]++
//line /usr/local/go/src/net/http/h2_bundle.go:10033
	return 0, r.err
//line /usr/local/go/src/net/http/h2_bundle.go:10033
	// _ = "end of CoverTab[40962]"
//line /usr/local/go/src/net/http/h2_bundle.go:10033
}

// isConnectionCloseRequest reports whether req should use its own
//line /usr/local/go/src/net/http/h2_bundle.go:10035
// connection for a single request and then close the connection.
//line /usr/local/go/src/net/http/h2_bundle.go:10037
func http2isConnectionCloseRequest(req *Request) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10037
	_go_fuzz_dep_.CoverTab[40963]++
							return req.Close || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10038
		_go_fuzz_dep_.CoverTab[40964]++
//line /usr/local/go/src/net/http/h2_bundle.go:10038
		return httpguts.HeaderValuesContainsToken(req.Header["Connection"], "close")
//line /usr/local/go/src/net/http/h2_bundle.go:10038
		// _ = "end of CoverTab[40964]"
//line /usr/local/go/src/net/http/h2_bundle.go:10038
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:10038
	// _ = "end of CoverTab[40963]"
}

// registerHTTPSProtocol calls Transport.RegisterProtocol but
//line /usr/local/go/src/net/http/h2_bundle.go:10041
// converting panics into errors.
//line /usr/local/go/src/net/http/h2_bundle.go:10043
func http2registerHTTPSProtocol(t *Transport, rt http2noDialH2RoundTripper) (err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:10043
	_go_fuzz_dep_.CoverTab[40965]++
							defer func() {
//line /usr/local/go/src/net/http/h2_bundle.go:10044
		_go_fuzz_dep_.CoverTab[40967]++
								if e := recover(); e != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10045
			_go_fuzz_dep_.CoverTab[40968]++
									err = fmt.Errorf("%v", e)
//line /usr/local/go/src/net/http/h2_bundle.go:10046
			// _ = "end of CoverTab[40968]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10047
			_go_fuzz_dep_.CoverTab[40969]++
//line /usr/local/go/src/net/http/h2_bundle.go:10047
			// _ = "end of CoverTab[40969]"
//line /usr/local/go/src/net/http/h2_bundle.go:10047
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10047
		// _ = "end of CoverTab[40967]"
	}()
//line /usr/local/go/src/net/http/h2_bundle.go:10048
	// _ = "end of CoverTab[40965]"
//line /usr/local/go/src/net/http/h2_bundle.go:10048
	_go_fuzz_dep_.CoverTab[40966]++
							t.RegisterProtocol("https", rt)
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:10050
	// _ = "end of CoverTab[40966]"
}

// noDialH2RoundTripper is a RoundTripper which only tries to complete the request
//line /usr/local/go/src/net/http/h2_bundle.go:10053
// if there's already has a cached connection to the host.
//line /usr/local/go/src/net/http/h2_bundle.go:10053
// (The field is exported so it can be accessed via reflect from net/http; tested
//line /usr/local/go/src/net/http/h2_bundle.go:10053
// by TestNoDialH2RoundTripperType)
//line /usr/local/go/src/net/http/h2_bundle.go:10057
type http2noDialH2RoundTripper struct{ *http2Transport }

func (rt http2noDialH2RoundTripper) RoundTrip(req *Request) (*Response, error) {
//line /usr/local/go/src/net/http/h2_bundle.go:10059
	_go_fuzz_dep_.CoverTab[40970]++
							res, err := rt.http2Transport.RoundTrip(req)
							if http2isNoCachedConnError(err) {
//line /usr/local/go/src/net/http/h2_bundle.go:10061
		_go_fuzz_dep_.CoverTab[40972]++
								return nil, ErrSkipAltProtocol
//line /usr/local/go/src/net/http/h2_bundle.go:10062
		// _ = "end of CoverTab[40972]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10063
		_go_fuzz_dep_.CoverTab[40973]++
//line /usr/local/go/src/net/http/h2_bundle.go:10063
		// _ = "end of CoverTab[40973]"
//line /usr/local/go/src/net/http/h2_bundle.go:10063
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10063
	// _ = "end of CoverTab[40970]"
//line /usr/local/go/src/net/http/h2_bundle.go:10063
	_go_fuzz_dep_.CoverTab[40971]++
							return res, err
//line /usr/local/go/src/net/http/h2_bundle.go:10064
	// _ = "end of CoverTab[40971]"
}

func (t *http2Transport) idleConnTimeout() time.Duration {
//line /usr/local/go/src/net/http/h2_bundle.go:10067
	_go_fuzz_dep_.CoverTab[40974]++
							if t.t1 != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10068
		_go_fuzz_dep_.CoverTab[40976]++
								return t.t1.IdleConnTimeout
//line /usr/local/go/src/net/http/h2_bundle.go:10069
		// _ = "end of CoverTab[40976]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10070
		_go_fuzz_dep_.CoverTab[40977]++
//line /usr/local/go/src/net/http/h2_bundle.go:10070
		// _ = "end of CoverTab[40977]"
//line /usr/local/go/src/net/http/h2_bundle.go:10070
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10070
	// _ = "end of CoverTab[40974]"
//line /usr/local/go/src/net/http/h2_bundle.go:10070
	_go_fuzz_dep_.CoverTab[40975]++
							return 0
//line /usr/local/go/src/net/http/h2_bundle.go:10071
	// _ = "end of CoverTab[40975]"
}

func http2traceGetConn(req *Request, hostPort string) {
//line /usr/local/go/src/net/http/h2_bundle.go:10074
	_go_fuzz_dep_.CoverTab[40978]++
							trace := httptrace.ContextClientTrace(req.Context())
							if trace == nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10076
		_go_fuzz_dep_.CoverTab[40980]++
//line /usr/local/go/src/net/http/h2_bundle.go:10076
		return trace.GetConn == nil
//line /usr/local/go/src/net/http/h2_bundle.go:10076
		// _ = "end of CoverTab[40980]"
//line /usr/local/go/src/net/http/h2_bundle.go:10076
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10076
		_go_fuzz_dep_.CoverTab[40981]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:10077
		// _ = "end of CoverTab[40981]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10078
		_go_fuzz_dep_.CoverTab[40982]++
//line /usr/local/go/src/net/http/h2_bundle.go:10078
		// _ = "end of CoverTab[40982]"
//line /usr/local/go/src/net/http/h2_bundle.go:10078
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10078
	// _ = "end of CoverTab[40978]"
//line /usr/local/go/src/net/http/h2_bundle.go:10078
	_go_fuzz_dep_.CoverTab[40979]++
							trace.GetConn(hostPort)
//line /usr/local/go/src/net/http/h2_bundle.go:10079
	// _ = "end of CoverTab[40979]"
}

func http2traceGotConn(req *Request, cc *http2ClientConn, reused bool) {
//line /usr/local/go/src/net/http/h2_bundle.go:10082
	_go_fuzz_dep_.CoverTab[40983]++
							trace := httptrace.ContextClientTrace(req.Context())
							if trace == nil || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10084
		_go_fuzz_dep_.CoverTab[40986]++
//line /usr/local/go/src/net/http/h2_bundle.go:10084
		return trace.GotConn == nil
//line /usr/local/go/src/net/http/h2_bundle.go:10084
		// _ = "end of CoverTab[40986]"
//line /usr/local/go/src/net/http/h2_bundle.go:10084
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10084
		_go_fuzz_dep_.CoverTab[40987]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:10085
		// _ = "end of CoverTab[40987]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10086
		_go_fuzz_dep_.CoverTab[40988]++
//line /usr/local/go/src/net/http/h2_bundle.go:10086
		// _ = "end of CoverTab[40988]"
//line /usr/local/go/src/net/http/h2_bundle.go:10086
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10086
	// _ = "end of CoverTab[40983]"
//line /usr/local/go/src/net/http/h2_bundle.go:10086
	_go_fuzz_dep_.CoverTab[40984]++
							ci := httptrace.GotConnInfo{Conn: cc.tconn}
							ci.Reused = reused
							cc.mu.Lock()
							ci.WasIdle = len(cc.streams) == 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10090
		_go_fuzz_dep_.CoverTab[40989]++
//line /usr/local/go/src/net/http/h2_bundle.go:10090
		return reused
//line /usr/local/go/src/net/http/h2_bundle.go:10090
		// _ = "end of CoverTab[40989]"
//line /usr/local/go/src/net/http/h2_bundle.go:10090
	}()
							if ci.WasIdle && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10091
		_go_fuzz_dep_.CoverTab[40990]++
//line /usr/local/go/src/net/http/h2_bundle.go:10091
		return !cc.lastActive.IsZero()
//line /usr/local/go/src/net/http/h2_bundle.go:10091
		// _ = "end of CoverTab[40990]"
//line /usr/local/go/src/net/http/h2_bundle.go:10091
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10091
		_go_fuzz_dep_.CoverTab[40991]++
								ci.IdleTime = time.Since(cc.lastActive)
//line /usr/local/go/src/net/http/h2_bundle.go:10092
		// _ = "end of CoverTab[40991]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10093
		_go_fuzz_dep_.CoverTab[40992]++
//line /usr/local/go/src/net/http/h2_bundle.go:10093
		// _ = "end of CoverTab[40992]"
//line /usr/local/go/src/net/http/h2_bundle.go:10093
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10093
	// _ = "end of CoverTab[40984]"
//line /usr/local/go/src/net/http/h2_bundle.go:10093
	_go_fuzz_dep_.CoverTab[40985]++
							cc.mu.Unlock()

							trace.GotConn(ci)
//line /usr/local/go/src/net/http/h2_bundle.go:10096
	// _ = "end of CoverTab[40985]"
}

func http2traceWroteHeaders(trace *httptrace.ClientTrace) {
//line /usr/local/go/src/net/http/h2_bundle.go:10099
	_go_fuzz_dep_.CoverTab[40993]++
							if trace != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10100
		_go_fuzz_dep_.CoverTab[40994]++
//line /usr/local/go/src/net/http/h2_bundle.go:10100
		return trace.WroteHeaders != nil
//line /usr/local/go/src/net/http/h2_bundle.go:10100
		// _ = "end of CoverTab[40994]"
//line /usr/local/go/src/net/http/h2_bundle.go:10100
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10100
		_go_fuzz_dep_.CoverTab[40995]++
								trace.WroteHeaders()
//line /usr/local/go/src/net/http/h2_bundle.go:10101
		// _ = "end of CoverTab[40995]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10102
		_go_fuzz_dep_.CoverTab[40996]++
//line /usr/local/go/src/net/http/h2_bundle.go:10102
		// _ = "end of CoverTab[40996]"
//line /usr/local/go/src/net/http/h2_bundle.go:10102
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10102
	// _ = "end of CoverTab[40993]"
}

func http2traceGot100Continue(trace *httptrace.ClientTrace) {
//line /usr/local/go/src/net/http/h2_bundle.go:10105
	_go_fuzz_dep_.CoverTab[40997]++
							if trace != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10106
		_go_fuzz_dep_.CoverTab[40998]++
//line /usr/local/go/src/net/http/h2_bundle.go:10106
		return trace.Got100Continue != nil
//line /usr/local/go/src/net/http/h2_bundle.go:10106
		// _ = "end of CoverTab[40998]"
//line /usr/local/go/src/net/http/h2_bundle.go:10106
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10106
		_go_fuzz_dep_.CoverTab[40999]++
								trace.Got100Continue()
//line /usr/local/go/src/net/http/h2_bundle.go:10107
		// _ = "end of CoverTab[40999]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10108
		_go_fuzz_dep_.CoverTab[41000]++
//line /usr/local/go/src/net/http/h2_bundle.go:10108
		// _ = "end of CoverTab[41000]"
//line /usr/local/go/src/net/http/h2_bundle.go:10108
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10108
	// _ = "end of CoverTab[40997]"
}

func http2traceWait100Continue(trace *httptrace.ClientTrace) {
//line /usr/local/go/src/net/http/h2_bundle.go:10111
	_go_fuzz_dep_.CoverTab[41001]++
							if trace != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10112
		_go_fuzz_dep_.CoverTab[41002]++
//line /usr/local/go/src/net/http/h2_bundle.go:10112
		return trace.Wait100Continue != nil
//line /usr/local/go/src/net/http/h2_bundle.go:10112
		// _ = "end of CoverTab[41002]"
//line /usr/local/go/src/net/http/h2_bundle.go:10112
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10112
		_go_fuzz_dep_.CoverTab[41003]++
								trace.Wait100Continue()
//line /usr/local/go/src/net/http/h2_bundle.go:10113
		// _ = "end of CoverTab[41003]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10114
		_go_fuzz_dep_.CoverTab[41004]++
//line /usr/local/go/src/net/http/h2_bundle.go:10114
		// _ = "end of CoverTab[41004]"
//line /usr/local/go/src/net/http/h2_bundle.go:10114
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10114
	// _ = "end of CoverTab[41001]"
}

func http2traceWroteRequest(trace *httptrace.ClientTrace, err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:10117
	_go_fuzz_dep_.CoverTab[41005]++
							if trace != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10118
		_go_fuzz_dep_.CoverTab[41006]++
//line /usr/local/go/src/net/http/h2_bundle.go:10118
		return trace.WroteRequest != nil
//line /usr/local/go/src/net/http/h2_bundle.go:10118
		// _ = "end of CoverTab[41006]"
//line /usr/local/go/src/net/http/h2_bundle.go:10118
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10118
		_go_fuzz_dep_.CoverTab[41007]++
								trace.WroteRequest(httptrace.WroteRequestInfo{Err: err})
//line /usr/local/go/src/net/http/h2_bundle.go:10119
		// _ = "end of CoverTab[41007]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10120
		_go_fuzz_dep_.CoverTab[41008]++
//line /usr/local/go/src/net/http/h2_bundle.go:10120
		// _ = "end of CoverTab[41008]"
//line /usr/local/go/src/net/http/h2_bundle.go:10120
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10120
	// _ = "end of CoverTab[41005]"
}

func http2traceFirstResponseByte(trace *httptrace.ClientTrace) {
//line /usr/local/go/src/net/http/h2_bundle.go:10123
	_go_fuzz_dep_.CoverTab[41009]++
							if trace != nil && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10124
		_go_fuzz_dep_.CoverTab[41010]++
//line /usr/local/go/src/net/http/h2_bundle.go:10124
		return trace.GotFirstResponseByte != nil
//line /usr/local/go/src/net/http/h2_bundle.go:10124
		// _ = "end of CoverTab[41010]"
//line /usr/local/go/src/net/http/h2_bundle.go:10124
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10124
		_go_fuzz_dep_.CoverTab[41011]++
								trace.GotFirstResponseByte()
//line /usr/local/go/src/net/http/h2_bundle.go:10125
		// _ = "end of CoverTab[41011]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10126
		_go_fuzz_dep_.CoverTab[41012]++
//line /usr/local/go/src/net/http/h2_bundle.go:10126
		// _ = "end of CoverTab[41012]"
//line /usr/local/go/src/net/http/h2_bundle.go:10126
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10126
	// _ = "end of CoverTab[41009]"
}

// writeFramer is implemented by any type that is used to write frames.
type http2writeFramer interface {
	writeFrame(http2writeContext) error

	// staysWithinBuffer reports whether this writer promises that
	// it will only write less than or equal to size bytes, and it
	// won't Flush the write context.
	staysWithinBuffer(size int) bool
}

// writeContext is the interface needed by the various frame writer
//line /usr/local/go/src/net/http/h2_bundle.go:10139
// types below. All the writeFrame methods below are scheduled via the
//line /usr/local/go/src/net/http/h2_bundle.go:10139
// frame writing scheduler (see writeScheduler in writesched.go).
//line /usr/local/go/src/net/http/h2_bundle.go:10139
//
//line /usr/local/go/src/net/http/h2_bundle.go:10139
// This interface is implemented by *serverConn.
//line /usr/local/go/src/net/http/h2_bundle.go:10139
//
//line /usr/local/go/src/net/http/h2_bundle.go:10139
// TODO: decide whether to a) use this in the client code (which didn't
//line /usr/local/go/src/net/http/h2_bundle.go:10139
// end up using this yet, because it has a simpler design, not
//line /usr/local/go/src/net/http/h2_bundle.go:10139
// currently implementing priorities), or b) delete this and
//line /usr/local/go/src/net/http/h2_bundle.go:10139
// make the server code a bit more concrete.
//line /usr/local/go/src/net/http/h2_bundle.go:10149
type http2writeContext interface {
	Framer() *http2Framer
	Flush() error
	CloseConn() error
	// HeaderEncoder returns an HPACK encoder that writes to the
	// returned buffer.
	HeaderEncoder() (*hpack.Encoder, *bytes.Buffer)
}

// writeEndsStream reports whether w writes a frame that will transition
//line /usr/local/go/src/net/http/h2_bundle.go:10158
// the stream to a half-closed local state. This returns false for RST_STREAM,
//line /usr/local/go/src/net/http/h2_bundle.go:10158
// which closes the entire stream (not just the local half).
//line /usr/local/go/src/net/http/h2_bundle.go:10161
func http2writeEndsStream(w http2writeFramer) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10161
	_go_fuzz_dep_.CoverTab[41013]++
							switch v := w.(type) {
	case *http2writeData:
//line /usr/local/go/src/net/http/h2_bundle.go:10163
		_go_fuzz_dep_.CoverTab[41015]++
								return v.endStream
//line /usr/local/go/src/net/http/h2_bundle.go:10164
		// _ = "end of CoverTab[41015]"
	case *http2writeResHeaders:
//line /usr/local/go/src/net/http/h2_bundle.go:10165
		_go_fuzz_dep_.CoverTab[41016]++
								return v.endStream
//line /usr/local/go/src/net/http/h2_bundle.go:10166
		// _ = "end of CoverTab[41016]"
	case nil:
//line /usr/local/go/src/net/http/h2_bundle.go:10167
		_go_fuzz_dep_.CoverTab[41017]++

//line /usr/local/go/src/net/http/h2_bundle.go:10171
		panic("writeEndsStream called on nil writeFramer")
//line /usr/local/go/src/net/http/h2_bundle.go:10171
		// _ = "end of CoverTab[41017]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10172
	// _ = "end of CoverTab[41013]"
//line /usr/local/go/src/net/http/h2_bundle.go:10172
	_go_fuzz_dep_.CoverTab[41014]++
							return false
//line /usr/local/go/src/net/http/h2_bundle.go:10173
	// _ = "end of CoverTab[41014]"
}

type http2flushFrameWriter struct{}

func (http2flushFrameWriter) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10178
	_go_fuzz_dep_.CoverTab[41018]++
							return ctx.Flush()
//line /usr/local/go/src/net/http/h2_bundle.go:10179
	// _ = "end of CoverTab[41018]"
}

func (http2flushFrameWriter) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10182
	_go_fuzz_dep_.CoverTab[41019]++
//line /usr/local/go/src/net/http/h2_bundle.go:10182
	return false
//line /usr/local/go/src/net/http/h2_bundle.go:10182
	// _ = "end of CoverTab[41019]"
//line /usr/local/go/src/net/http/h2_bundle.go:10182
}

type http2writeSettings []http2Setting

func (s http2writeSettings) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10186
	_go_fuzz_dep_.CoverTab[41020]++
							const settingSize = 6	// uint16 + uint32
							return http2frameHeaderLen+settingSize*len(s) <= max
//line /usr/local/go/src/net/http/h2_bundle.go:10188
	// _ = "end of CoverTab[41020]"

}

func (s http2writeSettings) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10192
	_go_fuzz_dep_.CoverTab[41021]++
							return ctx.Framer().WriteSettings([]http2Setting(s)...)
//line /usr/local/go/src/net/http/h2_bundle.go:10193
	// _ = "end of CoverTab[41021]"
}

type http2writeGoAway struct {
	maxStreamID	uint32
	code		http2ErrCode
}

func (p *http2writeGoAway) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10201
	_go_fuzz_dep_.CoverTab[41022]++
							err := ctx.Framer().WriteGoAway(p.maxStreamID, p.code, nil)
							ctx.Flush()
							return err
//line /usr/local/go/src/net/http/h2_bundle.go:10204
	// _ = "end of CoverTab[41022]"
}

func (*http2writeGoAway) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10207
	_go_fuzz_dep_.CoverTab[41023]++
//line /usr/local/go/src/net/http/h2_bundle.go:10207
	return false
//line /usr/local/go/src/net/http/h2_bundle.go:10207
	// _ = "end of CoverTab[41023]"
//line /usr/local/go/src/net/http/h2_bundle.go:10207
}

type http2writeData struct {
	streamID	uint32
	p		[]byte
	endStream	bool
}

func (w *http2writeData) String() string {
//line /usr/local/go/src/net/http/h2_bundle.go:10215
	_go_fuzz_dep_.CoverTab[41024]++
							return fmt.Sprintf("writeData(stream=%d, p=%d, endStream=%v)", w.streamID, len(w.p), w.endStream)
//line /usr/local/go/src/net/http/h2_bundle.go:10216
	// _ = "end of CoverTab[41024]"
}

func (w *http2writeData) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10219
	_go_fuzz_dep_.CoverTab[41025]++
							return ctx.Framer().WriteData(w.streamID, w.endStream, w.p)
//line /usr/local/go/src/net/http/h2_bundle.go:10220
	// _ = "end of CoverTab[41025]"
}

func (w *http2writeData) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10223
	_go_fuzz_dep_.CoverTab[41026]++
							return http2frameHeaderLen+len(w.p) <= max
//line /usr/local/go/src/net/http/h2_bundle.go:10224
	// _ = "end of CoverTab[41026]"
}

// handlerPanicRST is the message sent from handler goroutines when
//line /usr/local/go/src/net/http/h2_bundle.go:10227
// the handler panics.
//line /usr/local/go/src/net/http/h2_bundle.go:10229
type http2handlerPanicRST struct {
	StreamID uint32
}

func (hp http2handlerPanicRST) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10233
	_go_fuzz_dep_.CoverTab[41027]++
							return ctx.Framer().WriteRSTStream(hp.StreamID, http2ErrCodeInternal)
//line /usr/local/go/src/net/http/h2_bundle.go:10234
	// _ = "end of CoverTab[41027]"
}

func (hp http2handlerPanicRST) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10237
	_go_fuzz_dep_.CoverTab[41028]++
//line /usr/local/go/src/net/http/h2_bundle.go:10237
	return http2frameHeaderLen+4 <= max
//line /usr/local/go/src/net/http/h2_bundle.go:10237
	// _ = "end of CoverTab[41028]"
//line /usr/local/go/src/net/http/h2_bundle.go:10237
}

func (se http2StreamError) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10239
	_go_fuzz_dep_.CoverTab[41029]++
							return ctx.Framer().WriteRSTStream(se.StreamID, se.Code)
//line /usr/local/go/src/net/http/h2_bundle.go:10240
	// _ = "end of CoverTab[41029]"
}

func (se http2StreamError) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10243
	_go_fuzz_dep_.CoverTab[41030]++
//line /usr/local/go/src/net/http/h2_bundle.go:10243
	return http2frameHeaderLen+4 <= max
//line /usr/local/go/src/net/http/h2_bundle.go:10243
	// _ = "end of CoverTab[41030]"
//line /usr/local/go/src/net/http/h2_bundle.go:10243
}

type http2writePingAck struct{ pf *http2PingFrame }

func (w http2writePingAck) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10247
	_go_fuzz_dep_.CoverTab[41031]++
							return ctx.Framer().WritePing(true, w.pf.Data)
//line /usr/local/go/src/net/http/h2_bundle.go:10248
	// _ = "end of CoverTab[41031]"
}

func (w http2writePingAck) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10251
	_go_fuzz_dep_.CoverTab[41032]++
							return http2frameHeaderLen+len(w.pf.Data) <= max
//line /usr/local/go/src/net/http/h2_bundle.go:10252
	// _ = "end of CoverTab[41032]"
}

type http2writeSettingsAck struct{}

func (http2writeSettingsAck) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10257
	_go_fuzz_dep_.CoverTab[41033]++
							return ctx.Framer().WriteSettingsAck()
//line /usr/local/go/src/net/http/h2_bundle.go:10258
	// _ = "end of CoverTab[41033]"
}

func (http2writeSettingsAck) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10261
	_go_fuzz_dep_.CoverTab[41034]++
//line /usr/local/go/src/net/http/h2_bundle.go:10261
	return http2frameHeaderLen <= max
//line /usr/local/go/src/net/http/h2_bundle.go:10261
	// _ = "end of CoverTab[41034]"
//line /usr/local/go/src/net/http/h2_bundle.go:10261
}

// splitHeaderBlock splits headerBlock into fragments so that each fragment fits
//line /usr/local/go/src/net/http/h2_bundle.go:10263
// in a single frame, then calls fn for each fragment. firstFrag/lastFrag are true
//line /usr/local/go/src/net/http/h2_bundle.go:10263
// for the first/last fragment, respectively.
//line /usr/local/go/src/net/http/h2_bundle.go:10266
func http2splitHeaderBlock(ctx http2writeContext, headerBlock []byte, fn func(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10266
	_go_fuzz_dep_.CoverTab[41035]++
	// For now we're lazy and just pick the minimum MAX_FRAME_SIZE
	// that all peers must support (16KB). Later we could care
	// more and send larger frames if the peer advertised it, but
	// there's little point. Most headers are small anyway (so we
	// generally won't have CONTINUATION frames), and extra frames
	// only waste 9 bytes anyway.
	const maxFrameSize = 16384

	first := true
	for len(headerBlock) > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:10276
		_go_fuzz_dep_.CoverTab[41037]++
								frag := headerBlock
								if len(frag) > maxFrameSize {
//line /usr/local/go/src/net/http/h2_bundle.go:10278
			_go_fuzz_dep_.CoverTab[41040]++
									frag = frag[:maxFrameSize]
//line /usr/local/go/src/net/http/h2_bundle.go:10279
			// _ = "end of CoverTab[41040]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10280
			_go_fuzz_dep_.CoverTab[41041]++
//line /usr/local/go/src/net/http/h2_bundle.go:10280
			// _ = "end of CoverTab[41041]"
//line /usr/local/go/src/net/http/h2_bundle.go:10280
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10280
		// _ = "end of CoverTab[41037]"
//line /usr/local/go/src/net/http/h2_bundle.go:10280
		_go_fuzz_dep_.CoverTab[41038]++
								headerBlock = headerBlock[len(frag):]
								if err := fn(ctx, frag, first, len(headerBlock) == 0); err != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10282
			_go_fuzz_dep_.CoverTab[41042]++
									return err
//line /usr/local/go/src/net/http/h2_bundle.go:10283
			// _ = "end of CoverTab[41042]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10284
			_go_fuzz_dep_.CoverTab[41043]++
//line /usr/local/go/src/net/http/h2_bundle.go:10284
			// _ = "end of CoverTab[41043]"
//line /usr/local/go/src/net/http/h2_bundle.go:10284
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10284
		// _ = "end of CoverTab[41038]"
//line /usr/local/go/src/net/http/h2_bundle.go:10284
		_go_fuzz_dep_.CoverTab[41039]++
								first = false
//line /usr/local/go/src/net/http/h2_bundle.go:10285
		// _ = "end of CoverTab[41039]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10286
	// _ = "end of CoverTab[41035]"
//line /usr/local/go/src/net/http/h2_bundle.go:10286
	_go_fuzz_dep_.CoverTab[41036]++
							return nil
//line /usr/local/go/src/net/http/h2_bundle.go:10287
	// _ = "end of CoverTab[41036]"
}

// writeResHeaders is a request to write a HEADERS and 0+ CONTINUATION frames
//line /usr/local/go/src/net/http/h2_bundle.go:10290
// for HTTP response headers or trailers from a server handler.
//line /usr/local/go/src/net/http/h2_bundle.go:10292
type http2writeResHeaders struct {
	streamID	uint32
	httpResCode	int		// 0 means no ":status" line
	h		Header		// may be nil
	trailers	[]string	// if non-nil, which keys of h to write. nil means all.
	endStream	bool

	date		string
	contentType	string
	contentLength	string
}

func http2encKV(enc *hpack.Encoder, k, v string) {
//line /usr/local/go/src/net/http/h2_bundle.go:10304
	_go_fuzz_dep_.CoverTab[41044]++
							if http2VerboseLogs {
//line /usr/local/go/src/net/http/h2_bundle.go:10305
		_go_fuzz_dep_.CoverTab[41046]++
								log.Printf("http2: server encoding header %q = %q", k, v)
//line /usr/local/go/src/net/http/h2_bundle.go:10306
		// _ = "end of CoverTab[41046]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10307
		_go_fuzz_dep_.CoverTab[41047]++
//line /usr/local/go/src/net/http/h2_bundle.go:10307
		// _ = "end of CoverTab[41047]"
//line /usr/local/go/src/net/http/h2_bundle.go:10307
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10307
	// _ = "end of CoverTab[41044]"
//line /usr/local/go/src/net/http/h2_bundle.go:10307
	_go_fuzz_dep_.CoverTab[41045]++
							enc.WriteField(hpack.HeaderField{Name: k, Value: v})
//line /usr/local/go/src/net/http/h2_bundle.go:10308
	// _ = "end of CoverTab[41045]"
}

func (w *http2writeResHeaders) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10311
	_go_fuzz_dep_.CoverTab[41048]++

//line /usr/local/go/src/net/http/h2_bundle.go:10319
	return false
//line /usr/local/go/src/net/http/h2_bundle.go:10319
	// _ = "end of CoverTab[41048]"
}

func (w *http2writeResHeaders) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10322
	_go_fuzz_dep_.CoverTab[41049]++
							enc, buf := ctx.HeaderEncoder()
							buf.Reset()

							if w.httpResCode != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:10326
		_go_fuzz_dep_.CoverTab[41055]++
								http2encKV(enc, ":status", http2httpCodeString(w.httpResCode))
//line /usr/local/go/src/net/http/h2_bundle.go:10327
		// _ = "end of CoverTab[41055]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10328
		_go_fuzz_dep_.CoverTab[41056]++
//line /usr/local/go/src/net/http/h2_bundle.go:10328
		// _ = "end of CoverTab[41056]"
//line /usr/local/go/src/net/http/h2_bundle.go:10328
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10328
	// _ = "end of CoverTab[41049]"
//line /usr/local/go/src/net/http/h2_bundle.go:10328
	_go_fuzz_dep_.CoverTab[41050]++

							http2encodeHeaders(enc, w.h, w.trailers)

							if w.contentType != "" {
//line /usr/local/go/src/net/http/h2_bundle.go:10332
		_go_fuzz_dep_.CoverTab[41057]++
								http2encKV(enc, "content-type", w.contentType)
//line /usr/local/go/src/net/http/h2_bundle.go:10333
		// _ = "end of CoverTab[41057]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10334
		_go_fuzz_dep_.CoverTab[41058]++
//line /usr/local/go/src/net/http/h2_bundle.go:10334
		// _ = "end of CoverTab[41058]"
//line /usr/local/go/src/net/http/h2_bundle.go:10334
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10334
	// _ = "end of CoverTab[41050]"
//line /usr/local/go/src/net/http/h2_bundle.go:10334
	_go_fuzz_dep_.CoverTab[41051]++
							if w.contentLength != "" {
//line /usr/local/go/src/net/http/h2_bundle.go:10335
		_go_fuzz_dep_.CoverTab[41059]++
								http2encKV(enc, "content-length", w.contentLength)
//line /usr/local/go/src/net/http/h2_bundle.go:10336
		// _ = "end of CoverTab[41059]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10337
		_go_fuzz_dep_.CoverTab[41060]++
//line /usr/local/go/src/net/http/h2_bundle.go:10337
		// _ = "end of CoverTab[41060]"
//line /usr/local/go/src/net/http/h2_bundle.go:10337
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10337
	// _ = "end of CoverTab[41051]"
//line /usr/local/go/src/net/http/h2_bundle.go:10337
	_go_fuzz_dep_.CoverTab[41052]++
							if w.date != "" {
//line /usr/local/go/src/net/http/h2_bundle.go:10338
		_go_fuzz_dep_.CoverTab[41061]++
								http2encKV(enc, "date", w.date)
//line /usr/local/go/src/net/http/h2_bundle.go:10339
		// _ = "end of CoverTab[41061]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10340
		_go_fuzz_dep_.CoverTab[41062]++
//line /usr/local/go/src/net/http/h2_bundle.go:10340
		// _ = "end of CoverTab[41062]"
//line /usr/local/go/src/net/http/h2_bundle.go:10340
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10340
	// _ = "end of CoverTab[41052]"
//line /usr/local/go/src/net/http/h2_bundle.go:10340
	_go_fuzz_dep_.CoverTab[41053]++

							headerBlock := buf.Bytes()
							if len(headerBlock) == 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10343
		_go_fuzz_dep_.CoverTab[41063]++
//line /usr/local/go/src/net/http/h2_bundle.go:10343
		return w.trailers == nil
//line /usr/local/go/src/net/http/h2_bundle.go:10343
		// _ = "end of CoverTab[41063]"
//line /usr/local/go/src/net/http/h2_bundle.go:10343
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10343
		_go_fuzz_dep_.CoverTab[41064]++
								panic("unexpected empty hpack")
//line /usr/local/go/src/net/http/h2_bundle.go:10344
		// _ = "end of CoverTab[41064]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10345
		_go_fuzz_dep_.CoverTab[41065]++
//line /usr/local/go/src/net/http/h2_bundle.go:10345
		// _ = "end of CoverTab[41065]"
//line /usr/local/go/src/net/http/h2_bundle.go:10345
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10345
	// _ = "end of CoverTab[41053]"
//line /usr/local/go/src/net/http/h2_bundle.go:10345
	_go_fuzz_dep_.CoverTab[41054]++

							return http2splitHeaderBlock(ctx, headerBlock, w.writeHeaderBlock)
//line /usr/local/go/src/net/http/h2_bundle.go:10347
	// _ = "end of CoverTab[41054]"
}

func (w *http2writeResHeaders) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10350
	_go_fuzz_dep_.CoverTab[41066]++
							if firstFrag {
//line /usr/local/go/src/net/http/h2_bundle.go:10351
		_go_fuzz_dep_.CoverTab[41067]++
								return ctx.Framer().WriteHeaders(http2HeadersFrameParam{
			StreamID:	w.streamID,
			BlockFragment:	frag,
			EndStream:	w.endStream,
			EndHeaders:	lastFrag,
		})
//line /usr/local/go/src/net/http/h2_bundle.go:10357
		// _ = "end of CoverTab[41067]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10358
		_go_fuzz_dep_.CoverTab[41068]++
								return ctx.Framer().WriteContinuation(w.streamID, lastFrag, frag)
//line /usr/local/go/src/net/http/h2_bundle.go:10359
		// _ = "end of CoverTab[41068]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10360
	// _ = "end of CoverTab[41066]"
}

// writePushPromise is a request to write a PUSH_PROMISE and 0+ CONTINUATION frames.
type http2writePushPromise struct {
	streamID	uint32		// pusher stream
	method		string		// for :method
	url		*url.URL	// for :scheme, :authority, :path
	h		Header

	// Creates an ID for a pushed stream. This runs on serveG just before
	// the frame is written. The returned ID is copied to promisedID.
	allocatePromisedID	func() (uint32, error)
	promisedID		uint32
}

func (w *http2writePushPromise) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10376
	_go_fuzz_dep_.CoverTab[41069]++

							return false
//line /usr/local/go/src/net/http/h2_bundle.go:10378
	// _ = "end of CoverTab[41069]"
}

func (w *http2writePushPromise) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10381
	_go_fuzz_dep_.CoverTab[41070]++
							enc, buf := ctx.HeaderEncoder()
							buf.Reset()

							http2encKV(enc, ":method", w.method)
							http2encKV(enc, ":scheme", w.url.Scheme)
							http2encKV(enc, ":authority", w.url.Host)
							http2encKV(enc, ":path", w.url.RequestURI())
							http2encodeHeaders(enc, w.h, nil)

							headerBlock := buf.Bytes()
							if len(headerBlock) == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:10392
		_go_fuzz_dep_.CoverTab[41072]++
								panic("unexpected empty hpack")
//line /usr/local/go/src/net/http/h2_bundle.go:10393
		// _ = "end of CoverTab[41072]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10394
		_go_fuzz_dep_.CoverTab[41073]++
//line /usr/local/go/src/net/http/h2_bundle.go:10394
		// _ = "end of CoverTab[41073]"
//line /usr/local/go/src/net/http/h2_bundle.go:10394
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10394
	// _ = "end of CoverTab[41070]"
//line /usr/local/go/src/net/http/h2_bundle.go:10394
	_go_fuzz_dep_.CoverTab[41071]++

							return http2splitHeaderBlock(ctx, headerBlock, w.writeHeaderBlock)
//line /usr/local/go/src/net/http/h2_bundle.go:10396
	// _ = "end of CoverTab[41071]"
}

func (w *http2writePushPromise) writeHeaderBlock(ctx http2writeContext, frag []byte, firstFrag, lastFrag bool) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10399
	_go_fuzz_dep_.CoverTab[41074]++
							if firstFrag {
//line /usr/local/go/src/net/http/h2_bundle.go:10400
		_go_fuzz_dep_.CoverTab[41075]++
								return ctx.Framer().WritePushPromise(http2PushPromiseParam{
			StreamID:	w.streamID,
			PromiseID:	w.promisedID,
			BlockFragment:	frag,
			EndHeaders:	lastFrag,
		})
//line /usr/local/go/src/net/http/h2_bundle.go:10406
		// _ = "end of CoverTab[41075]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10407
		_go_fuzz_dep_.CoverTab[41076]++
								return ctx.Framer().WriteContinuation(w.streamID, lastFrag, frag)
//line /usr/local/go/src/net/http/h2_bundle.go:10408
		// _ = "end of CoverTab[41076]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10409
	// _ = "end of CoverTab[41074]"
}

type http2write100ContinueHeadersFrame struct {
	streamID uint32
}

func (w http2write100ContinueHeadersFrame) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10416
	_go_fuzz_dep_.CoverTab[41077]++
							enc, buf := ctx.HeaderEncoder()
							buf.Reset()
							http2encKV(enc, ":status", "100")
							return ctx.Framer().WriteHeaders(http2HeadersFrameParam{
		StreamID:	w.streamID,
		BlockFragment:	buf.Bytes(),
		EndStream:	false,
		EndHeaders:	true,
	})
//line /usr/local/go/src/net/http/h2_bundle.go:10425
	// _ = "end of CoverTab[41077]"
}

func (w http2write100ContinueHeadersFrame) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10428
	_go_fuzz_dep_.CoverTab[41078]++

							return 9+2*(len(":status")+len("100")) <= max
//line /usr/local/go/src/net/http/h2_bundle.go:10430
	// _ = "end of CoverTab[41078]"
}

type http2writeWindowUpdate struct {
	streamID	uint32	// or 0 for conn-level
	n		uint32
}

func (wu http2writeWindowUpdate) staysWithinBuffer(max int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10438
	_go_fuzz_dep_.CoverTab[41079]++
//line /usr/local/go/src/net/http/h2_bundle.go:10438
	return http2frameHeaderLen+4 <= max
//line /usr/local/go/src/net/http/h2_bundle.go:10438
	// _ = "end of CoverTab[41079]"
//line /usr/local/go/src/net/http/h2_bundle.go:10438
}

func (wu http2writeWindowUpdate) writeFrame(ctx http2writeContext) error {
//line /usr/local/go/src/net/http/h2_bundle.go:10440
	_go_fuzz_dep_.CoverTab[41080]++
							return ctx.Framer().WriteWindowUpdate(wu.streamID, wu.n)
//line /usr/local/go/src/net/http/h2_bundle.go:10441
	// _ = "end of CoverTab[41080]"
}

// encodeHeaders encodes an http.Header. If keys is not nil, then (k, h[k])
//line /usr/local/go/src/net/http/h2_bundle.go:10444
// is encoded only if k is in keys.
//line /usr/local/go/src/net/http/h2_bundle.go:10446
func http2encodeHeaders(enc *hpack.Encoder, h Header, keys []string) {
//line /usr/local/go/src/net/http/h2_bundle.go:10446
	_go_fuzz_dep_.CoverTab[41081]++
							if keys == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10447
		_go_fuzz_dep_.CoverTab[41083]++
								sorter := http2sorterPool.Get().(*http2sorter)

//line /usr/local/go/src/net/http/h2_bundle.go:10452
		defer http2sorterPool.Put(sorter)
								keys = sorter.Keys(h)
//line /usr/local/go/src/net/http/h2_bundle.go:10453
		// _ = "end of CoverTab[41083]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10454
		_go_fuzz_dep_.CoverTab[41084]++
//line /usr/local/go/src/net/http/h2_bundle.go:10454
		// _ = "end of CoverTab[41084]"
//line /usr/local/go/src/net/http/h2_bundle.go:10454
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10454
	// _ = "end of CoverTab[41081]"
//line /usr/local/go/src/net/http/h2_bundle.go:10454
	_go_fuzz_dep_.CoverTab[41082]++
							for _, k := range keys {
//line /usr/local/go/src/net/http/h2_bundle.go:10455
		_go_fuzz_dep_.CoverTab[41085]++
								vv := h[k]
								k, ascii := http2lowerHeader(k)
								if !ascii {
//line /usr/local/go/src/net/http/h2_bundle.go:10458
			_go_fuzz_dep_.CoverTab[41088]++

//line /usr/local/go/src/net/http/h2_bundle.go:10461
			continue
//line /usr/local/go/src/net/http/h2_bundle.go:10461
			// _ = "end of CoverTab[41088]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10462
			_go_fuzz_dep_.CoverTab[41089]++
//line /usr/local/go/src/net/http/h2_bundle.go:10462
			// _ = "end of CoverTab[41089]"
//line /usr/local/go/src/net/http/h2_bundle.go:10462
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10462
		// _ = "end of CoverTab[41085]"
//line /usr/local/go/src/net/http/h2_bundle.go:10462
		_go_fuzz_dep_.CoverTab[41086]++
								if !http2validWireHeaderFieldName(k) {
//line /usr/local/go/src/net/http/h2_bundle.go:10463
			_go_fuzz_dep_.CoverTab[41090]++

//line /usr/local/go/src/net/http/h2_bundle.go:10467
			continue
//line /usr/local/go/src/net/http/h2_bundle.go:10467
			// _ = "end of CoverTab[41090]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10468
			_go_fuzz_dep_.CoverTab[41091]++
//line /usr/local/go/src/net/http/h2_bundle.go:10468
			// _ = "end of CoverTab[41091]"
//line /usr/local/go/src/net/http/h2_bundle.go:10468
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10468
		// _ = "end of CoverTab[41086]"
//line /usr/local/go/src/net/http/h2_bundle.go:10468
		_go_fuzz_dep_.CoverTab[41087]++
								isTE := k == "transfer-encoding"
								for _, v := range vv {
//line /usr/local/go/src/net/http/h2_bundle.go:10470
			_go_fuzz_dep_.CoverTab[41092]++
									if !httpguts.ValidHeaderFieldValue(v) {
//line /usr/local/go/src/net/http/h2_bundle.go:10471
				_go_fuzz_dep_.CoverTab[41095]++

//line /usr/local/go/src/net/http/h2_bundle.go:10474
				continue
//line /usr/local/go/src/net/http/h2_bundle.go:10474
				// _ = "end of CoverTab[41095]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10475
				_go_fuzz_dep_.CoverTab[41096]++
//line /usr/local/go/src/net/http/h2_bundle.go:10475
				// _ = "end of CoverTab[41096]"
//line /usr/local/go/src/net/http/h2_bundle.go:10475
			}
//line /usr/local/go/src/net/http/h2_bundle.go:10475
			// _ = "end of CoverTab[41092]"
//line /usr/local/go/src/net/http/h2_bundle.go:10475
			_go_fuzz_dep_.CoverTab[41093]++

									if isTE && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10477
				_go_fuzz_dep_.CoverTab[41097]++
//line /usr/local/go/src/net/http/h2_bundle.go:10477
				return v != "trailers"
//line /usr/local/go/src/net/http/h2_bundle.go:10477
				// _ = "end of CoverTab[41097]"
//line /usr/local/go/src/net/http/h2_bundle.go:10477
			}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10477
				_go_fuzz_dep_.CoverTab[41098]++
										continue
//line /usr/local/go/src/net/http/h2_bundle.go:10478
				// _ = "end of CoverTab[41098]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10479
				_go_fuzz_dep_.CoverTab[41099]++
//line /usr/local/go/src/net/http/h2_bundle.go:10479
				// _ = "end of CoverTab[41099]"
//line /usr/local/go/src/net/http/h2_bundle.go:10479
			}
//line /usr/local/go/src/net/http/h2_bundle.go:10479
			// _ = "end of CoverTab[41093]"
//line /usr/local/go/src/net/http/h2_bundle.go:10479
			_go_fuzz_dep_.CoverTab[41094]++
									http2encKV(enc, k, v)
//line /usr/local/go/src/net/http/h2_bundle.go:10480
			// _ = "end of CoverTab[41094]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10481
		// _ = "end of CoverTab[41087]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10482
	// _ = "end of CoverTab[41082]"
}

// WriteScheduler is the interface implemented by HTTP/2 write schedulers.
//line /usr/local/go/src/net/http/h2_bundle.go:10485
// Methods are never called concurrently.
//line /usr/local/go/src/net/http/h2_bundle.go:10487
type http2WriteScheduler interface {
	// OpenStream opens a new stream in the write scheduler.
	// It is illegal to call this with streamID=0 or with a streamID that is
	// already open -- the call may panic.
	OpenStream(streamID uint32, options http2OpenStreamOptions)

	// CloseStream closes a stream in the write scheduler. Any frames queued on
	// this stream should be discarded. It is illegal to call this on a stream
	// that is not open -- the call may panic.
	CloseStream(streamID uint32)

	// AdjustStream adjusts the priority of the given stream. This may be called
	// on a stream that has not yet been opened or has been closed. Note that
	// RFC 7540 allows PRIORITY frames to be sent on streams in any state. See:
	// https://tools.ietf.org/html/rfc7540#section-5.1
	AdjustStream(streamID uint32, priority http2PriorityParam)

	// Push queues a frame in the scheduler. In most cases, this will not be
	// called with wr.StreamID()!=0 unless that stream is currently open. The one
	// exception is RST_STREAM frames, which may be sent on idle or closed streams.
	Push(wr http2FrameWriteRequest)

	// Pop dequeues the next frame to write. Returns false if no frames can
	// be written. Frames with a given wr.StreamID() are Pop'd in the same
	// order they are Push'd, except RST_STREAM frames. No frames should be
	// discarded except by CloseStream.
	Pop() (wr http2FrameWriteRequest, ok bool)
}

// OpenStreamOptions specifies extra options for WriteScheduler.OpenStream.
type http2OpenStreamOptions struct {
	// PusherID is zero if the stream was initiated by the client. Otherwise,
	// PusherID names the stream that pushed the newly opened stream.
	PusherID uint32
}

// FrameWriteRequest is a request to write a frame.
type http2FrameWriteRequest struct {
	// write is the interface value that does the writing, once the
	// WriteScheduler has selected this frame to write. The write
	// functions are all defined in write.go.
	write	http2writeFramer

	// stream is the stream on which this frame will be written.
	// nil for non-stream frames like PING and SETTINGS.
	// nil for RST_STREAM streams, which use the StreamError.StreamID field instead.
	stream	*http2stream

	// done, if non-nil, must be a buffered channel with space for
	// 1 message and is sent the return value from write (or an
	// earlier error) when the frame has been written.
	done	chan error
}

// StreamID returns the id of the stream this frame will be written to.
//line /usr/local/go/src/net/http/h2_bundle.go:10541
// 0 is used for non-stream frames such as PING and SETTINGS.
//line /usr/local/go/src/net/http/h2_bundle.go:10543
func (wr http2FrameWriteRequest) StreamID() uint32 {
//line /usr/local/go/src/net/http/h2_bundle.go:10543
	_go_fuzz_dep_.CoverTab[41100]++
							if wr.stream == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10544
		_go_fuzz_dep_.CoverTab[41102]++
								if se, ok := wr.write.(http2StreamError); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:10545
			_go_fuzz_dep_.CoverTab[41104]++

//line /usr/local/go/src/net/http/h2_bundle.go:10550
			return se.StreamID
//line /usr/local/go/src/net/http/h2_bundle.go:10550
			// _ = "end of CoverTab[41104]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10551
			_go_fuzz_dep_.CoverTab[41105]++
//line /usr/local/go/src/net/http/h2_bundle.go:10551
			// _ = "end of CoverTab[41105]"
//line /usr/local/go/src/net/http/h2_bundle.go:10551
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10551
		// _ = "end of CoverTab[41102]"
//line /usr/local/go/src/net/http/h2_bundle.go:10551
		_go_fuzz_dep_.CoverTab[41103]++
								return 0
//line /usr/local/go/src/net/http/h2_bundle.go:10552
		// _ = "end of CoverTab[41103]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10553
		_go_fuzz_dep_.CoverTab[41106]++
//line /usr/local/go/src/net/http/h2_bundle.go:10553
		// _ = "end of CoverTab[41106]"
//line /usr/local/go/src/net/http/h2_bundle.go:10553
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10553
	// _ = "end of CoverTab[41100]"
//line /usr/local/go/src/net/http/h2_bundle.go:10553
	_go_fuzz_dep_.CoverTab[41101]++
							return wr.stream.id
//line /usr/local/go/src/net/http/h2_bundle.go:10554
	// _ = "end of CoverTab[41101]"
}

// isControl reports whether wr is a control frame for MaxQueuedControlFrames
//line /usr/local/go/src/net/http/h2_bundle.go:10557
// purposes. That includes non-stream frames and RST_STREAM frames.
//line /usr/local/go/src/net/http/h2_bundle.go:10559
func (wr http2FrameWriteRequest) isControl() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10559
	_go_fuzz_dep_.CoverTab[41107]++
							return wr.stream == nil
//line /usr/local/go/src/net/http/h2_bundle.go:10560
	// _ = "end of CoverTab[41107]"
}

// DataSize returns the number of flow control bytes that must be consumed
//line /usr/local/go/src/net/http/h2_bundle.go:10563
// to write this entire frame. This is 0 for non-DATA frames.
//line /usr/local/go/src/net/http/h2_bundle.go:10565
func (wr http2FrameWriteRequest) DataSize() int {
//line /usr/local/go/src/net/http/h2_bundle.go:10565
	_go_fuzz_dep_.CoverTab[41108]++
							if wd, ok := wr.write.(*http2writeData); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:10566
		_go_fuzz_dep_.CoverTab[41110]++
								return len(wd.p)
//line /usr/local/go/src/net/http/h2_bundle.go:10567
		// _ = "end of CoverTab[41110]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10568
		_go_fuzz_dep_.CoverTab[41111]++
//line /usr/local/go/src/net/http/h2_bundle.go:10568
		// _ = "end of CoverTab[41111]"
//line /usr/local/go/src/net/http/h2_bundle.go:10568
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10568
	// _ = "end of CoverTab[41108]"
//line /usr/local/go/src/net/http/h2_bundle.go:10568
	_go_fuzz_dep_.CoverTab[41109]++
							return 0
//line /usr/local/go/src/net/http/h2_bundle.go:10569
	// _ = "end of CoverTab[41109]"
}

// Consume consumes min(n, available) bytes from this frame, where available
//line /usr/local/go/src/net/http/h2_bundle.go:10572
// is the number of flow control bytes available on the stream. Consume returns
//line /usr/local/go/src/net/http/h2_bundle.go:10572
// 0, 1, or 2 frames, where the integer return value gives the number of frames
//line /usr/local/go/src/net/http/h2_bundle.go:10572
// returned.
//line /usr/local/go/src/net/http/h2_bundle.go:10572
//
//line /usr/local/go/src/net/http/h2_bundle.go:10572
// If flow control prevents consuming any bytes, this returns (_, _, 0). If
//line /usr/local/go/src/net/http/h2_bundle.go:10572
// the entire frame was consumed, this returns (wr, _, 1). Otherwise, this
//line /usr/local/go/src/net/http/h2_bundle.go:10572
// returns (consumed, rest, 2), where 'consumed' contains the consumed bytes and
//line /usr/local/go/src/net/http/h2_bundle.go:10572
// 'rest' contains the remaining bytes. The consumed bytes are deducted from the
//line /usr/local/go/src/net/http/h2_bundle.go:10572
// underlying stream's flow control budget.
//line /usr/local/go/src/net/http/h2_bundle.go:10582
func (wr http2FrameWriteRequest) Consume(n int32) (http2FrameWriteRequest, http2FrameWriteRequest, int) {
//line /usr/local/go/src/net/http/h2_bundle.go:10582
	_go_fuzz_dep_.CoverTab[41112]++
							var empty http2FrameWriteRequest

//line /usr/local/go/src/net/http/h2_bundle.go:10586
	wd, ok := wr.write.(*http2writeData)
	if !ok || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10587
		_go_fuzz_dep_.CoverTab[41118]++
//line /usr/local/go/src/net/http/h2_bundle.go:10587
		return len(wd.p) == 0
//line /usr/local/go/src/net/http/h2_bundle.go:10587
		// _ = "end of CoverTab[41118]"
//line /usr/local/go/src/net/http/h2_bundle.go:10587
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10587
		_go_fuzz_dep_.CoverTab[41119]++
								return wr, empty, 1
//line /usr/local/go/src/net/http/h2_bundle.go:10588
		// _ = "end of CoverTab[41119]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10589
		_go_fuzz_dep_.CoverTab[41120]++
//line /usr/local/go/src/net/http/h2_bundle.go:10589
		// _ = "end of CoverTab[41120]"
//line /usr/local/go/src/net/http/h2_bundle.go:10589
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10589
	// _ = "end of CoverTab[41112]"
//line /usr/local/go/src/net/http/h2_bundle.go:10589
	_go_fuzz_dep_.CoverTab[41113]++

//line /usr/local/go/src/net/http/h2_bundle.go:10592
	allowed := wr.stream.flow.available()
	if n < allowed {
//line /usr/local/go/src/net/http/h2_bundle.go:10593
		_go_fuzz_dep_.CoverTab[41121]++
								allowed = n
//line /usr/local/go/src/net/http/h2_bundle.go:10594
		// _ = "end of CoverTab[41121]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10595
		_go_fuzz_dep_.CoverTab[41122]++
//line /usr/local/go/src/net/http/h2_bundle.go:10595
		// _ = "end of CoverTab[41122]"
//line /usr/local/go/src/net/http/h2_bundle.go:10595
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10595
	// _ = "end of CoverTab[41113]"
//line /usr/local/go/src/net/http/h2_bundle.go:10595
	_go_fuzz_dep_.CoverTab[41114]++
							if wr.stream.sc.maxFrameSize < allowed {
//line /usr/local/go/src/net/http/h2_bundle.go:10596
		_go_fuzz_dep_.CoverTab[41123]++
								allowed = wr.stream.sc.maxFrameSize
//line /usr/local/go/src/net/http/h2_bundle.go:10597
		// _ = "end of CoverTab[41123]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10598
		_go_fuzz_dep_.CoverTab[41124]++
//line /usr/local/go/src/net/http/h2_bundle.go:10598
		// _ = "end of CoverTab[41124]"
//line /usr/local/go/src/net/http/h2_bundle.go:10598
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10598
	// _ = "end of CoverTab[41114]"
//line /usr/local/go/src/net/http/h2_bundle.go:10598
	_go_fuzz_dep_.CoverTab[41115]++
							if allowed <= 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:10599
		_go_fuzz_dep_.CoverTab[41125]++
								return empty, empty, 0
//line /usr/local/go/src/net/http/h2_bundle.go:10600
		// _ = "end of CoverTab[41125]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10601
		_go_fuzz_dep_.CoverTab[41126]++
//line /usr/local/go/src/net/http/h2_bundle.go:10601
		// _ = "end of CoverTab[41126]"
//line /usr/local/go/src/net/http/h2_bundle.go:10601
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10601
	// _ = "end of CoverTab[41115]"
//line /usr/local/go/src/net/http/h2_bundle.go:10601
	_go_fuzz_dep_.CoverTab[41116]++
							if len(wd.p) > int(allowed) {
//line /usr/local/go/src/net/http/h2_bundle.go:10602
		_go_fuzz_dep_.CoverTab[41127]++
								wr.stream.flow.take(allowed)
								consumed := http2FrameWriteRequest{
			stream:	wr.stream,
			write: &http2writeData{
										streamID:	wd.streamID,
										p:		wd.p[:allowed],

//line /usr/local/go/src/net/http/h2_bundle.go:10612
				endStream:	false,
			},

//line /usr/local/go/src/net/http/h2_bundle.go:10616
			done:	nil,
		}
		rest := http2FrameWriteRequest{
			stream:	wr.stream,
			write: &http2writeData{
				streamID:	wd.streamID,
				p:		wd.p[allowed:],
				endStream:	wd.endStream,
			},
			done:	wr.done,
		}
								return consumed, rest, 2
//line /usr/local/go/src/net/http/h2_bundle.go:10627
		// _ = "end of CoverTab[41127]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10628
		_go_fuzz_dep_.CoverTab[41128]++
//line /usr/local/go/src/net/http/h2_bundle.go:10628
		// _ = "end of CoverTab[41128]"
//line /usr/local/go/src/net/http/h2_bundle.go:10628
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10628
	// _ = "end of CoverTab[41116]"
//line /usr/local/go/src/net/http/h2_bundle.go:10628
	_go_fuzz_dep_.CoverTab[41117]++

//line /usr/local/go/src/net/http/h2_bundle.go:10632
	wr.stream.flow.take(int32(len(wd.p)))
							return wr, empty, 1
//line /usr/local/go/src/net/http/h2_bundle.go:10633
	// _ = "end of CoverTab[41117]"
}

// String is for debugging only.
func (wr http2FrameWriteRequest) String() string {
//line /usr/local/go/src/net/http/h2_bundle.go:10637
	_go_fuzz_dep_.CoverTab[41129]++
							var des string
							if s, ok := wr.write.(fmt.Stringer); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:10639
		_go_fuzz_dep_.CoverTab[41131]++
								des = s.String()
//line /usr/local/go/src/net/http/h2_bundle.go:10640
		// _ = "end of CoverTab[41131]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10641
		_go_fuzz_dep_.CoverTab[41132]++
								des = fmt.Sprintf("%T", wr.write)
//line /usr/local/go/src/net/http/h2_bundle.go:10642
		// _ = "end of CoverTab[41132]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10643
	// _ = "end of CoverTab[41129]"
//line /usr/local/go/src/net/http/h2_bundle.go:10643
	_go_fuzz_dep_.CoverTab[41130]++
							return fmt.Sprintf("[FrameWriteRequest stream=%d, ch=%v, writer=%v]", wr.StreamID(), wr.done != nil, des)
//line /usr/local/go/src/net/http/h2_bundle.go:10644
	// _ = "end of CoverTab[41130]"
}

// replyToWriter sends err to wr.done and panics if the send must block
//line /usr/local/go/src/net/http/h2_bundle.go:10647
// This does nothing if wr.done is nil.
//line /usr/local/go/src/net/http/h2_bundle.go:10649
func (wr *http2FrameWriteRequest) replyToWriter(err error) {
//line /usr/local/go/src/net/http/h2_bundle.go:10649
	_go_fuzz_dep_.CoverTab[41133]++
							if wr.done == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10650
		_go_fuzz_dep_.CoverTab[41136]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:10651
		// _ = "end of CoverTab[41136]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10652
		_go_fuzz_dep_.CoverTab[41137]++
//line /usr/local/go/src/net/http/h2_bundle.go:10652
		// _ = "end of CoverTab[41137]"
//line /usr/local/go/src/net/http/h2_bundle.go:10652
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10652
	// _ = "end of CoverTab[41133]"
//line /usr/local/go/src/net/http/h2_bundle.go:10652
	_go_fuzz_dep_.CoverTab[41134]++
							select {
	case wr.done <- err:
//line /usr/local/go/src/net/http/h2_bundle.go:10654
		_go_fuzz_dep_.CoverTab[41138]++
//line /usr/local/go/src/net/http/h2_bundle.go:10654
		// _ = "end of CoverTab[41138]"
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:10655
		_go_fuzz_dep_.CoverTab[41139]++
								panic(fmt.Sprintf("unbuffered done channel passed in for type %T", wr.write))
//line /usr/local/go/src/net/http/h2_bundle.go:10656
		// _ = "end of CoverTab[41139]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10657
	// _ = "end of CoverTab[41134]"
//line /usr/local/go/src/net/http/h2_bundle.go:10657
	_go_fuzz_dep_.CoverTab[41135]++
							wr.write = nil
//line /usr/local/go/src/net/http/h2_bundle.go:10658
	// _ = "end of CoverTab[41135]"
}

// writeQueue is used by implementations of WriteScheduler.
type http2writeQueue struct {
	s []http2FrameWriteRequest
}

func (q *http2writeQueue) empty() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10666
	_go_fuzz_dep_.CoverTab[41140]++
//line /usr/local/go/src/net/http/h2_bundle.go:10666
	return len(q.s) == 0
//line /usr/local/go/src/net/http/h2_bundle.go:10666
	// _ = "end of CoverTab[41140]"
//line /usr/local/go/src/net/http/h2_bundle.go:10666
}

func (q *http2writeQueue) push(wr http2FrameWriteRequest) {
//line /usr/local/go/src/net/http/h2_bundle.go:10668
	_go_fuzz_dep_.CoverTab[41141]++
							q.s = append(q.s, wr)
//line /usr/local/go/src/net/http/h2_bundle.go:10669
	// _ = "end of CoverTab[41141]"
}

func (q *http2writeQueue) shift() http2FrameWriteRequest {
//line /usr/local/go/src/net/http/h2_bundle.go:10672
	_go_fuzz_dep_.CoverTab[41142]++
							if len(q.s) == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:10673
		_go_fuzz_dep_.CoverTab[41144]++
								panic("invalid use of queue")
//line /usr/local/go/src/net/http/h2_bundle.go:10674
		// _ = "end of CoverTab[41144]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10675
		_go_fuzz_dep_.CoverTab[41145]++
//line /usr/local/go/src/net/http/h2_bundle.go:10675
		// _ = "end of CoverTab[41145]"
//line /usr/local/go/src/net/http/h2_bundle.go:10675
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10675
	// _ = "end of CoverTab[41142]"
//line /usr/local/go/src/net/http/h2_bundle.go:10675
	_go_fuzz_dep_.CoverTab[41143]++
							wr := q.s[0]

							copy(q.s, q.s[1:])
							q.s[len(q.s)-1] = http2FrameWriteRequest{}
							q.s = q.s[:len(q.s)-1]
							return wr
//line /usr/local/go/src/net/http/h2_bundle.go:10681
	// _ = "end of CoverTab[41143]"
}

// consume consumes up to n bytes from q.s[0]. If the frame is
//line /usr/local/go/src/net/http/h2_bundle.go:10684
// entirely consumed, it is removed from the queue. If the frame
//line /usr/local/go/src/net/http/h2_bundle.go:10684
// is partially consumed, the frame is kept with the consumed
//line /usr/local/go/src/net/http/h2_bundle.go:10684
// bytes removed. Returns true iff any bytes were consumed.
//line /usr/local/go/src/net/http/h2_bundle.go:10688
func (q *http2writeQueue) consume(n int32) (http2FrameWriteRequest, bool) {
//line /usr/local/go/src/net/http/h2_bundle.go:10688
	_go_fuzz_dep_.CoverTab[41146]++
							if len(q.s) == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:10689
		_go_fuzz_dep_.CoverTab[41149]++
								return http2FrameWriteRequest{}, false
//line /usr/local/go/src/net/http/h2_bundle.go:10690
		// _ = "end of CoverTab[41149]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10691
		_go_fuzz_dep_.CoverTab[41150]++
//line /usr/local/go/src/net/http/h2_bundle.go:10691
		// _ = "end of CoverTab[41150]"
//line /usr/local/go/src/net/http/h2_bundle.go:10691
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10691
	// _ = "end of CoverTab[41146]"
//line /usr/local/go/src/net/http/h2_bundle.go:10691
	_go_fuzz_dep_.CoverTab[41147]++
							consumed, rest, numresult := q.s[0].Consume(n)
							switch numresult {
	case 0:
//line /usr/local/go/src/net/http/h2_bundle.go:10694
		_go_fuzz_dep_.CoverTab[41151]++
								return http2FrameWriteRequest{}, false
//line /usr/local/go/src/net/http/h2_bundle.go:10695
		// _ = "end of CoverTab[41151]"
	case 1:
//line /usr/local/go/src/net/http/h2_bundle.go:10696
		_go_fuzz_dep_.CoverTab[41152]++
								q.shift()
//line /usr/local/go/src/net/http/h2_bundle.go:10697
		// _ = "end of CoverTab[41152]"
	case 2:
//line /usr/local/go/src/net/http/h2_bundle.go:10698
		_go_fuzz_dep_.CoverTab[41153]++
								q.s[0] = rest
//line /usr/local/go/src/net/http/h2_bundle.go:10699
		// _ = "end of CoverTab[41153]"
//line /usr/local/go/src/net/http/h2_bundle.go:10699
	default:
//line /usr/local/go/src/net/http/h2_bundle.go:10699
		_go_fuzz_dep_.CoverTab[41154]++
//line /usr/local/go/src/net/http/h2_bundle.go:10699
		// _ = "end of CoverTab[41154]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10700
	// _ = "end of CoverTab[41147]"
//line /usr/local/go/src/net/http/h2_bundle.go:10700
	_go_fuzz_dep_.CoverTab[41148]++
							return consumed, true
//line /usr/local/go/src/net/http/h2_bundle.go:10701
	// _ = "end of CoverTab[41148]"
}

type http2writeQueuePool []*http2writeQueue

//line /usr/local/go/src/net/http/h2_bundle.go:10708
// put inserts an unused writeQueue into the pool.
func (p *http2writeQueuePool) put(q *http2writeQueue) {
//line /usr/local/go/src/net/http/h2_bundle.go:10709
	_go_fuzz_dep_.CoverTab[41155]++
							for i := range q.s {
//line /usr/local/go/src/net/http/h2_bundle.go:10710
		_go_fuzz_dep_.CoverTab[41157]++
								q.s[i] = http2FrameWriteRequest{}
//line /usr/local/go/src/net/http/h2_bundle.go:10711
		// _ = "end of CoverTab[41157]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10712
	// _ = "end of CoverTab[41155]"
//line /usr/local/go/src/net/http/h2_bundle.go:10712
	_go_fuzz_dep_.CoverTab[41156]++
							q.s = q.s[:0]
							*p = append(*p, q)
//line /usr/local/go/src/net/http/h2_bundle.go:10714
	// _ = "end of CoverTab[41156]"
}

// get returns an empty writeQueue.
func (p *http2writeQueuePool) get() *http2writeQueue {
//line /usr/local/go/src/net/http/h2_bundle.go:10718
	_go_fuzz_dep_.CoverTab[41158]++
							ln := len(*p)
							if ln == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:10720
		_go_fuzz_dep_.CoverTab[41160]++
								return new(http2writeQueue)
//line /usr/local/go/src/net/http/h2_bundle.go:10721
		// _ = "end of CoverTab[41160]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10722
		_go_fuzz_dep_.CoverTab[41161]++
//line /usr/local/go/src/net/http/h2_bundle.go:10722
		// _ = "end of CoverTab[41161]"
//line /usr/local/go/src/net/http/h2_bundle.go:10722
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10722
	// _ = "end of CoverTab[41158]"
//line /usr/local/go/src/net/http/h2_bundle.go:10722
	_go_fuzz_dep_.CoverTab[41159]++
							x := ln - 1
							q := (*p)[x]
							(*p)[x] = nil
							*p = (*p)[:x]
							return q
//line /usr/local/go/src/net/http/h2_bundle.go:10727
	// _ = "end of CoverTab[41159]"
}

// RFC 7540, Section 5.3.5: the default weight is 16.
const http2priorityDefaultWeight = 15	// 16 = 15 + 1

// PriorityWriteSchedulerConfig configures a priorityWriteScheduler.
type http2PriorityWriteSchedulerConfig struct {
	// MaxClosedNodesInTree controls the maximum number of closed streams to
	// retain in the priority tree. Setting this to zero saves a small amount
	// of memory at the cost of performance.
	//
	// See RFC 7540, Section 5.3.4:
	//   "It is possible for a stream to become closed while prioritization
	//   information ... is in transit. ... This potentially creates suboptimal
	//   prioritization, since the stream could be given a priority that is
	//   different from what is intended. To avoid these problems, an endpoint
	//   SHOULD retain stream prioritization state for a period after streams
	//   become closed. The longer state is retained, the lower the chance that
	//   streams are assigned incorrect or default priority values."
	MaxClosedNodesInTree	int

	// MaxIdleNodesInTree controls the maximum number of idle streams to
	// retain in the priority tree. Setting this to zero saves a small amount
	// of memory at the cost of performance.
	//
	// See RFC 7540, Section 5.3.4:
	//   Similarly, streams that are in the "idle" state can be assigned
	//   priority or become a parent of other streams. This allows for the
	//   creation of a grouping node in the dependency tree, which enables
	//   more flexible expressions of priority. Idle streams begin with a
	//   default priority (Section 5.3.5).
	MaxIdleNodesInTree	int

	// ThrottleOutOfOrderWrites enables write throttling to help ensure that
	// data is delivered in priority order. This works around a race where
	// stream B depends on stream A and both streams are about to call Write
	// to queue DATA frames. If B wins the race, a naive scheduler would eagerly
	// write as much data from B as possible, but this is suboptimal because A
	// is a higher-priority stream. With throttling enabled, we write a small
	// amount of data from B to minimize the amount of bandwidth that B can
	// steal from A.
	ThrottleOutOfOrderWrites	bool
}

// NewPriorityWriteScheduler constructs a WriteScheduler that schedules
//line /usr/local/go/src/net/http/h2_bundle.go:10772
// frames by following HTTP/2 priorities as described in RFC 7540 Section 5.3.
//line /usr/local/go/src/net/http/h2_bundle.go:10772
// If cfg is nil, default options are used.
//line /usr/local/go/src/net/http/h2_bundle.go:10775
func http2NewPriorityWriteScheduler(cfg *http2PriorityWriteSchedulerConfig) http2WriteScheduler {
//line /usr/local/go/src/net/http/h2_bundle.go:10775
	_go_fuzz_dep_.CoverTab[41162]++
							if cfg == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10776
		_go_fuzz_dep_.CoverTab[41165]++

//line /usr/local/go/src/net/http/h2_bundle.go:10779
		cfg = &http2PriorityWriteSchedulerConfig{
			MaxClosedNodesInTree:		10,
			MaxIdleNodesInTree:		10,
			ThrottleOutOfOrderWrites:	false,
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10783
		// _ = "end of CoverTab[41165]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10784
		_go_fuzz_dep_.CoverTab[41166]++
//line /usr/local/go/src/net/http/h2_bundle.go:10784
		// _ = "end of CoverTab[41166]"
//line /usr/local/go/src/net/http/h2_bundle.go:10784
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10784
	// _ = "end of CoverTab[41162]"
//line /usr/local/go/src/net/http/h2_bundle.go:10784
	_go_fuzz_dep_.CoverTab[41163]++

							ws := &http2priorityWriteScheduler{
		nodes:			make(map[uint32]*http2priorityNode),
		maxClosedNodesInTree:	cfg.MaxClosedNodesInTree,
		maxIdleNodesInTree:	cfg.MaxIdleNodesInTree,
		enableWriteThrottle:	cfg.ThrottleOutOfOrderWrites,
	}
	ws.nodes[0] = &ws.root
	if cfg.ThrottleOutOfOrderWrites {
//line /usr/local/go/src/net/http/h2_bundle.go:10793
		_go_fuzz_dep_.CoverTab[41167]++
								ws.writeThrottleLimit = 1024
//line /usr/local/go/src/net/http/h2_bundle.go:10794
		// _ = "end of CoverTab[41167]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10795
		_go_fuzz_dep_.CoverTab[41168]++
								ws.writeThrottleLimit = math.MaxInt32
//line /usr/local/go/src/net/http/h2_bundle.go:10796
		// _ = "end of CoverTab[41168]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10797
	// _ = "end of CoverTab[41163]"
//line /usr/local/go/src/net/http/h2_bundle.go:10797
	_go_fuzz_dep_.CoverTab[41164]++
							return ws
//line /usr/local/go/src/net/http/h2_bundle.go:10798
	// _ = "end of CoverTab[41164]"
}

type http2priorityNodeState int

const (
	http2priorityNodeOpen	http2priorityNodeState	= iota
	http2priorityNodeClosed
	http2priorityNodeIdle
)

// priorityNode is a node in an HTTP/2 priority tree.
//line /usr/local/go/src/net/http/h2_bundle.go:10809
// Each node is associated with a single stream ID.
//line /usr/local/go/src/net/http/h2_bundle.go:10809
// See RFC 7540, Section 5.3.
//line /usr/local/go/src/net/http/h2_bundle.go:10812
type http2priorityNode struct {
	q		http2writeQueue		// queue of pending frames to write
	id		uint32			// id of the stream, or 0 for the root of the tree
	weight		uint8			// the actual weight is weight+1, so the value is in [1,256]
	state		http2priorityNodeState	// open | closed | idle
	bytes		int64			// number of bytes written by this node, or 0 if closed
	subtreeBytes	int64			// sum(node.bytes) of all nodes in this subtree

	// These links form the priority tree.
	parent		*http2priorityNode
	kids		*http2priorityNode	// start of the kids list
	prev, next	*http2priorityNode	// doubly-linked list of siblings
}

func (n *http2priorityNode) setParent(parent *http2priorityNode) {
//line /usr/local/go/src/net/http/h2_bundle.go:10826
	_go_fuzz_dep_.CoverTab[41169]++
							if n == parent {
//line /usr/local/go/src/net/http/h2_bundle.go:10827
		_go_fuzz_dep_.CoverTab[41173]++
								panic("setParent to self")
//line /usr/local/go/src/net/http/h2_bundle.go:10828
		// _ = "end of CoverTab[41173]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10829
		_go_fuzz_dep_.CoverTab[41174]++
//line /usr/local/go/src/net/http/h2_bundle.go:10829
		// _ = "end of CoverTab[41174]"
//line /usr/local/go/src/net/http/h2_bundle.go:10829
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10829
	// _ = "end of CoverTab[41169]"
//line /usr/local/go/src/net/http/h2_bundle.go:10829
	_go_fuzz_dep_.CoverTab[41170]++
							if n.parent == parent {
//line /usr/local/go/src/net/http/h2_bundle.go:10830
		_go_fuzz_dep_.CoverTab[41175]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:10831
		// _ = "end of CoverTab[41175]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10832
		_go_fuzz_dep_.CoverTab[41176]++
//line /usr/local/go/src/net/http/h2_bundle.go:10832
		// _ = "end of CoverTab[41176]"
//line /usr/local/go/src/net/http/h2_bundle.go:10832
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10832
	// _ = "end of CoverTab[41170]"
//line /usr/local/go/src/net/http/h2_bundle.go:10832
	_go_fuzz_dep_.CoverTab[41171]++

							if parent := n.parent; parent != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10834
		_go_fuzz_dep_.CoverTab[41177]++
								if n.prev == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10835
			_go_fuzz_dep_.CoverTab[41179]++
									parent.kids = n.next
//line /usr/local/go/src/net/http/h2_bundle.go:10836
			// _ = "end of CoverTab[41179]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10837
			_go_fuzz_dep_.CoverTab[41180]++
									n.prev.next = n.next
//line /usr/local/go/src/net/http/h2_bundle.go:10838
			// _ = "end of CoverTab[41180]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10839
		// _ = "end of CoverTab[41177]"
//line /usr/local/go/src/net/http/h2_bundle.go:10839
		_go_fuzz_dep_.CoverTab[41178]++
								if n.next != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10840
			_go_fuzz_dep_.CoverTab[41181]++
									n.next.prev = n.prev
//line /usr/local/go/src/net/http/h2_bundle.go:10841
			// _ = "end of CoverTab[41181]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10842
			_go_fuzz_dep_.CoverTab[41182]++
//line /usr/local/go/src/net/http/h2_bundle.go:10842
			// _ = "end of CoverTab[41182]"
//line /usr/local/go/src/net/http/h2_bundle.go:10842
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10842
		// _ = "end of CoverTab[41178]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10843
		_go_fuzz_dep_.CoverTab[41183]++
//line /usr/local/go/src/net/http/h2_bundle.go:10843
		// _ = "end of CoverTab[41183]"
//line /usr/local/go/src/net/http/h2_bundle.go:10843
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10843
	// _ = "end of CoverTab[41171]"
//line /usr/local/go/src/net/http/h2_bundle.go:10843
	_go_fuzz_dep_.CoverTab[41172]++

//line /usr/local/go/src/net/http/h2_bundle.go:10847
	n.parent = parent
	if parent == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10848
		_go_fuzz_dep_.CoverTab[41184]++
								n.next = nil
								n.prev = nil
//line /usr/local/go/src/net/http/h2_bundle.go:10850
		// _ = "end of CoverTab[41184]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10851
		_go_fuzz_dep_.CoverTab[41185]++
								n.next = parent.kids
								n.prev = nil
								if n.next != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10854
			_go_fuzz_dep_.CoverTab[41187]++
									n.next.prev = n
//line /usr/local/go/src/net/http/h2_bundle.go:10855
			// _ = "end of CoverTab[41187]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10856
			_go_fuzz_dep_.CoverTab[41188]++
//line /usr/local/go/src/net/http/h2_bundle.go:10856
			// _ = "end of CoverTab[41188]"
//line /usr/local/go/src/net/http/h2_bundle.go:10856
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10856
		// _ = "end of CoverTab[41185]"
//line /usr/local/go/src/net/http/h2_bundle.go:10856
		_go_fuzz_dep_.CoverTab[41186]++
								parent.kids = n
//line /usr/local/go/src/net/http/h2_bundle.go:10857
		// _ = "end of CoverTab[41186]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10858
	// _ = "end of CoverTab[41172]"
}

func (n *http2priorityNode) addBytes(b int64) {
//line /usr/local/go/src/net/http/h2_bundle.go:10861
	_go_fuzz_dep_.CoverTab[41189]++
							n.bytes += b
							for ; n != nil; n = n.parent {
//line /usr/local/go/src/net/http/h2_bundle.go:10863
		_go_fuzz_dep_.CoverTab[41190]++
								n.subtreeBytes += b
//line /usr/local/go/src/net/http/h2_bundle.go:10864
		// _ = "end of CoverTab[41190]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10865
	// _ = "end of CoverTab[41189]"
}

// walkReadyInOrder iterates over the tree in priority order, calling f for each node
//line /usr/local/go/src/net/http/h2_bundle.go:10868
// with a non-empty write queue. When f returns true, this function returns true and the
//line /usr/local/go/src/net/http/h2_bundle.go:10868
// walk halts. tmp is used as scratch space for sorting.
//line /usr/local/go/src/net/http/h2_bundle.go:10868
//
//line /usr/local/go/src/net/http/h2_bundle.go:10868
// f(n, openParent) takes two arguments: the node to visit, n, and a bool that is true
//line /usr/local/go/src/net/http/h2_bundle.go:10868
// if any ancestor p of n is still open (ignoring the root node).
//line /usr/local/go/src/net/http/h2_bundle.go:10874
func (n *http2priorityNode) walkReadyInOrder(openParent bool, tmp *[]*http2priorityNode, f func(*http2priorityNode, bool) bool) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10874
	_go_fuzz_dep_.CoverTab[41191]++
							if !n.q.empty() && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10875
		_go_fuzz_dep_.CoverTab[41200]++
//line /usr/local/go/src/net/http/h2_bundle.go:10875
		return f(n, openParent)
//line /usr/local/go/src/net/http/h2_bundle.go:10875
		// _ = "end of CoverTab[41200]"
//line /usr/local/go/src/net/http/h2_bundle.go:10875
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10875
		_go_fuzz_dep_.CoverTab[41201]++
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:10876
		// _ = "end of CoverTab[41201]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10877
		_go_fuzz_dep_.CoverTab[41202]++
//line /usr/local/go/src/net/http/h2_bundle.go:10877
		// _ = "end of CoverTab[41202]"
//line /usr/local/go/src/net/http/h2_bundle.go:10877
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10877
	// _ = "end of CoverTab[41191]"
//line /usr/local/go/src/net/http/h2_bundle.go:10877
	_go_fuzz_dep_.CoverTab[41192]++
							if n.kids == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10878
		_go_fuzz_dep_.CoverTab[41203]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:10879
		// _ = "end of CoverTab[41203]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10880
		_go_fuzz_dep_.CoverTab[41204]++
//line /usr/local/go/src/net/http/h2_bundle.go:10880
		// _ = "end of CoverTab[41204]"
//line /usr/local/go/src/net/http/h2_bundle.go:10880
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10880
	// _ = "end of CoverTab[41192]"
//line /usr/local/go/src/net/http/h2_bundle.go:10880
	_go_fuzz_dep_.CoverTab[41193]++

//line /usr/local/go/src/net/http/h2_bundle.go:10884
	if n.id != 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:10884
		_go_fuzz_dep_.CoverTab[41205]++
								openParent = openParent || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10885
			_go_fuzz_dep_.CoverTab[41206]++
//line /usr/local/go/src/net/http/h2_bundle.go:10885
			return (n.state == http2priorityNodeOpen)
//line /usr/local/go/src/net/http/h2_bundle.go:10885
			// _ = "end of CoverTab[41206]"
//line /usr/local/go/src/net/http/h2_bundle.go:10885
		}()
//line /usr/local/go/src/net/http/h2_bundle.go:10885
		// _ = "end of CoverTab[41205]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10886
		_go_fuzz_dep_.CoverTab[41207]++
//line /usr/local/go/src/net/http/h2_bundle.go:10886
		// _ = "end of CoverTab[41207]"
//line /usr/local/go/src/net/http/h2_bundle.go:10886
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10886
	// _ = "end of CoverTab[41193]"
//line /usr/local/go/src/net/http/h2_bundle.go:10886
	_go_fuzz_dep_.CoverTab[41194]++

//line /usr/local/go/src/net/http/h2_bundle.go:10891
	w := n.kids.weight
	needSort := false
	for k := n.kids.next; k != nil; k = k.next {
//line /usr/local/go/src/net/http/h2_bundle.go:10893
		_go_fuzz_dep_.CoverTab[41208]++
								if k.weight != w {
//line /usr/local/go/src/net/http/h2_bundle.go:10894
			_go_fuzz_dep_.CoverTab[41209]++
									needSort = true
									break
//line /usr/local/go/src/net/http/h2_bundle.go:10896
			// _ = "end of CoverTab[41209]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10897
			_go_fuzz_dep_.CoverTab[41210]++
//line /usr/local/go/src/net/http/h2_bundle.go:10897
			// _ = "end of CoverTab[41210]"
//line /usr/local/go/src/net/http/h2_bundle.go:10897
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10897
		// _ = "end of CoverTab[41208]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10898
	// _ = "end of CoverTab[41194]"
//line /usr/local/go/src/net/http/h2_bundle.go:10898
	_go_fuzz_dep_.CoverTab[41195]++
							if !needSort {
//line /usr/local/go/src/net/http/h2_bundle.go:10899
		_go_fuzz_dep_.CoverTab[41211]++
								for k := n.kids; k != nil; k = k.next {
//line /usr/local/go/src/net/http/h2_bundle.go:10900
			_go_fuzz_dep_.CoverTab[41213]++
									if k.walkReadyInOrder(openParent, tmp, f) {
//line /usr/local/go/src/net/http/h2_bundle.go:10901
				_go_fuzz_dep_.CoverTab[41214]++
										return true
//line /usr/local/go/src/net/http/h2_bundle.go:10902
				// _ = "end of CoverTab[41214]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10903
				_go_fuzz_dep_.CoverTab[41215]++
//line /usr/local/go/src/net/http/h2_bundle.go:10903
				// _ = "end of CoverTab[41215]"
//line /usr/local/go/src/net/http/h2_bundle.go:10903
			}
//line /usr/local/go/src/net/http/h2_bundle.go:10903
			// _ = "end of CoverTab[41213]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10904
		// _ = "end of CoverTab[41211]"
//line /usr/local/go/src/net/http/h2_bundle.go:10904
		_go_fuzz_dep_.CoverTab[41212]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:10905
		// _ = "end of CoverTab[41212]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10906
		_go_fuzz_dep_.CoverTab[41216]++
//line /usr/local/go/src/net/http/h2_bundle.go:10906
		// _ = "end of CoverTab[41216]"
//line /usr/local/go/src/net/http/h2_bundle.go:10906
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10906
	// _ = "end of CoverTab[41195]"
//line /usr/local/go/src/net/http/h2_bundle.go:10906
	_go_fuzz_dep_.CoverTab[41196]++

//line /usr/local/go/src/net/http/h2_bundle.go:10910
	*tmp = (*tmp)[:0]
	for n.kids != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10911
		_go_fuzz_dep_.CoverTab[41217]++
								*tmp = append(*tmp, n.kids)
								n.kids.setParent(nil)
//line /usr/local/go/src/net/http/h2_bundle.go:10913
		// _ = "end of CoverTab[41217]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10914
	// _ = "end of CoverTab[41196]"
//line /usr/local/go/src/net/http/h2_bundle.go:10914
	_go_fuzz_dep_.CoverTab[41197]++
							sort.Sort(http2sortPriorityNodeSiblings(*tmp))
							for i := len(*tmp) - 1; i >= 0; i-- {
//line /usr/local/go/src/net/http/h2_bundle.go:10916
		_go_fuzz_dep_.CoverTab[41218]++
								(*tmp)[i].setParent(n)
//line /usr/local/go/src/net/http/h2_bundle.go:10917
		// _ = "end of CoverTab[41218]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10918
	// _ = "end of CoverTab[41197]"
//line /usr/local/go/src/net/http/h2_bundle.go:10918
	_go_fuzz_dep_.CoverTab[41198]++
							for k := n.kids; k != nil; k = k.next {
//line /usr/local/go/src/net/http/h2_bundle.go:10919
		_go_fuzz_dep_.CoverTab[41219]++
								if k.walkReadyInOrder(openParent, tmp, f) {
//line /usr/local/go/src/net/http/h2_bundle.go:10920
			_go_fuzz_dep_.CoverTab[41220]++
									return true
//line /usr/local/go/src/net/http/h2_bundle.go:10921
			// _ = "end of CoverTab[41220]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10922
			_go_fuzz_dep_.CoverTab[41221]++
//line /usr/local/go/src/net/http/h2_bundle.go:10922
			// _ = "end of CoverTab[41221]"
//line /usr/local/go/src/net/http/h2_bundle.go:10922
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10922
		// _ = "end of CoverTab[41219]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10923
	// _ = "end of CoverTab[41198]"
//line /usr/local/go/src/net/http/h2_bundle.go:10923
	_go_fuzz_dep_.CoverTab[41199]++
							return false
//line /usr/local/go/src/net/http/h2_bundle.go:10924
	// _ = "end of CoverTab[41199]"
}

type http2sortPriorityNodeSiblings []*http2priorityNode

func (z http2sortPriorityNodeSiblings) Len() int {
//line /usr/local/go/src/net/http/h2_bundle.go:10929
	_go_fuzz_dep_.CoverTab[41222]++
//line /usr/local/go/src/net/http/h2_bundle.go:10929
	return len(z)
//line /usr/local/go/src/net/http/h2_bundle.go:10929
	// _ = "end of CoverTab[41222]"
//line /usr/local/go/src/net/http/h2_bundle.go:10929
}

func (z http2sortPriorityNodeSiblings) Swap(i, k int) {
//line /usr/local/go/src/net/http/h2_bundle.go:10931
	_go_fuzz_dep_.CoverTab[41223]++
//line /usr/local/go/src/net/http/h2_bundle.go:10931
	z[i], z[k] = z[k], z[i]
//line /usr/local/go/src/net/http/h2_bundle.go:10931
	// _ = "end of CoverTab[41223]"
//line /usr/local/go/src/net/http/h2_bundle.go:10931
}

func (z http2sortPriorityNodeSiblings) Less(i, k int) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10933
	_go_fuzz_dep_.CoverTab[41224]++

//line /usr/local/go/src/net/http/h2_bundle.go:10936
	wi, bi := float64(z[i].weight+1), float64(z[i].subtreeBytes)
	wk, bk := float64(z[k].weight+1), float64(z[k].subtreeBytes)
	if bi == 0 && func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:10938
		_go_fuzz_dep_.CoverTab[41227]++
//line /usr/local/go/src/net/http/h2_bundle.go:10938
		return bk == 0
//line /usr/local/go/src/net/http/h2_bundle.go:10938
		// _ = "end of CoverTab[41227]"
//line /usr/local/go/src/net/http/h2_bundle.go:10938
	}() {
//line /usr/local/go/src/net/http/h2_bundle.go:10938
		_go_fuzz_dep_.CoverTab[41228]++
								return wi >= wk
//line /usr/local/go/src/net/http/h2_bundle.go:10939
		// _ = "end of CoverTab[41228]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10940
		_go_fuzz_dep_.CoverTab[41229]++
//line /usr/local/go/src/net/http/h2_bundle.go:10940
		// _ = "end of CoverTab[41229]"
//line /usr/local/go/src/net/http/h2_bundle.go:10940
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10940
	// _ = "end of CoverTab[41224]"
//line /usr/local/go/src/net/http/h2_bundle.go:10940
	_go_fuzz_dep_.CoverTab[41225]++
							if bk == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:10941
		_go_fuzz_dep_.CoverTab[41230]++
								return false
//line /usr/local/go/src/net/http/h2_bundle.go:10942
		// _ = "end of CoverTab[41230]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10943
		_go_fuzz_dep_.CoverTab[41231]++
//line /usr/local/go/src/net/http/h2_bundle.go:10943
		// _ = "end of CoverTab[41231]"
//line /usr/local/go/src/net/http/h2_bundle.go:10943
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10943
	// _ = "end of CoverTab[41225]"
//line /usr/local/go/src/net/http/h2_bundle.go:10943
	_go_fuzz_dep_.CoverTab[41226]++
							return bi/bk <= wi/wk
//line /usr/local/go/src/net/http/h2_bundle.go:10944
	// _ = "end of CoverTab[41226]"
}

type http2priorityWriteScheduler struct {
	// root is the root of the priority tree, where root.id = 0.
	// The root queues control frames that are not associated with any stream.
	root	http2priorityNode

	// nodes maps stream ids to priority tree nodes.
	nodes	map[uint32]*http2priorityNode

	// maxID is the maximum stream id in nodes.
	maxID	uint32

	// lists of nodes that have been closed or are idle, but are kept in
	// the tree for improved prioritization. When the lengths exceed either
	// maxClosedNodesInTree or maxIdleNodesInTree, old nodes are discarded.
	closedNodes, idleNodes	[]*http2priorityNode

	// From the config.
	maxClosedNodesInTree	int
	maxIdleNodesInTree	int
	writeThrottleLimit	int32
	enableWriteThrottle	bool

	// tmp is scratch space for priorityNode.walkReadyInOrder to reduce allocations.
	tmp	[]*http2priorityNode

	// pool of empty queues for reuse.
	queuePool	http2writeQueuePool
}

func (ws *http2priorityWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions) {
//line /usr/local/go/src/net/http/h2_bundle.go:10976
	_go_fuzz_dep_.CoverTab[41232]++

							if curr := ws.nodes[streamID]; curr != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10978
		_go_fuzz_dep_.CoverTab[41235]++
								if curr.state != http2priorityNodeIdle {
//line /usr/local/go/src/net/http/h2_bundle.go:10979
			_go_fuzz_dep_.CoverTab[41237]++
									panic(fmt.Sprintf("stream %d already opened", streamID))
//line /usr/local/go/src/net/http/h2_bundle.go:10980
			// _ = "end of CoverTab[41237]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10981
			_go_fuzz_dep_.CoverTab[41238]++
//line /usr/local/go/src/net/http/h2_bundle.go:10981
			// _ = "end of CoverTab[41238]"
//line /usr/local/go/src/net/http/h2_bundle.go:10981
		}
//line /usr/local/go/src/net/http/h2_bundle.go:10981
		// _ = "end of CoverTab[41235]"
//line /usr/local/go/src/net/http/h2_bundle.go:10981
		_go_fuzz_dep_.CoverTab[41236]++
								curr.state = http2priorityNodeOpen
								return
//line /usr/local/go/src/net/http/h2_bundle.go:10983
		// _ = "end of CoverTab[41236]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10984
		_go_fuzz_dep_.CoverTab[41239]++
//line /usr/local/go/src/net/http/h2_bundle.go:10984
		// _ = "end of CoverTab[41239]"
//line /usr/local/go/src/net/http/h2_bundle.go:10984
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10984
	// _ = "end of CoverTab[41232]"
//line /usr/local/go/src/net/http/h2_bundle.go:10984
	_go_fuzz_dep_.CoverTab[41233]++

//line /usr/local/go/src/net/http/h2_bundle.go:10990
	parent := ws.nodes[options.PusherID]
	if parent == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:10991
		_go_fuzz_dep_.CoverTab[41240]++
								parent = &ws.root
//line /usr/local/go/src/net/http/h2_bundle.go:10992
		// _ = "end of CoverTab[41240]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:10993
		_go_fuzz_dep_.CoverTab[41241]++
//line /usr/local/go/src/net/http/h2_bundle.go:10993
		// _ = "end of CoverTab[41241]"
//line /usr/local/go/src/net/http/h2_bundle.go:10993
	}
//line /usr/local/go/src/net/http/h2_bundle.go:10993
	// _ = "end of CoverTab[41233]"
//line /usr/local/go/src/net/http/h2_bundle.go:10993
	_go_fuzz_dep_.CoverTab[41234]++
							n := &http2priorityNode{
		q:	*ws.queuePool.get(),
		id:	streamID,
		weight:	http2priorityDefaultWeight,
		state:	http2priorityNodeOpen,
	}
	n.setParent(parent)
	ws.nodes[streamID] = n
	if streamID > ws.maxID {
//line /usr/local/go/src/net/http/h2_bundle.go:11002
		_go_fuzz_dep_.CoverTab[41242]++
								ws.maxID = streamID
//line /usr/local/go/src/net/http/h2_bundle.go:11003
		// _ = "end of CoverTab[41242]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11004
		_go_fuzz_dep_.CoverTab[41243]++
//line /usr/local/go/src/net/http/h2_bundle.go:11004
		// _ = "end of CoverTab[41243]"
//line /usr/local/go/src/net/http/h2_bundle.go:11004
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11004
	// _ = "end of CoverTab[41234]"
}

func (ws *http2priorityWriteScheduler) CloseStream(streamID uint32) {
//line /usr/local/go/src/net/http/h2_bundle.go:11007
	_go_fuzz_dep_.CoverTab[41244]++
							if streamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:11008
		_go_fuzz_dep_.CoverTab[41248]++
								panic("violation of WriteScheduler interface: cannot close stream 0")
//line /usr/local/go/src/net/http/h2_bundle.go:11009
		// _ = "end of CoverTab[41248]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11010
		_go_fuzz_dep_.CoverTab[41249]++
//line /usr/local/go/src/net/http/h2_bundle.go:11010
		// _ = "end of CoverTab[41249]"
//line /usr/local/go/src/net/http/h2_bundle.go:11010
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11010
	// _ = "end of CoverTab[41244]"
//line /usr/local/go/src/net/http/h2_bundle.go:11010
	_go_fuzz_dep_.CoverTab[41245]++
							if ws.nodes[streamID] == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:11011
		_go_fuzz_dep_.CoverTab[41250]++
								panic(fmt.Sprintf("violation of WriteScheduler interface: unknown stream %d", streamID))
//line /usr/local/go/src/net/http/h2_bundle.go:11012
		// _ = "end of CoverTab[41250]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11013
		_go_fuzz_dep_.CoverTab[41251]++
//line /usr/local/go/src/net/http/h2_bundle.go:11013
		// _ = "end of CoverTab[41251]"
//line /usr/local/go/src/net/http/h2_bundle.go:11013
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11013
	// _ = "end of CoverTab[41245]"
//line /usr/local/go/src/net/http/h2_bundle.go:11013
	_go_fuzz_dep_.CoverTab[41246]++
							if ws.nodes[streamID].state != http2priorityNodeOpen {
//line /usr/local/go/src/net/http/h2_bundle.go:11014
		_go_fuzz_dep_.CoverTab[41252]++
								panic(fmt.Sprintf("violation of WriteScheduler interface: stream %d already closed", streamID))
//line /usr/local/go/src/net/http/h2_bundle.go:11015
		// _ = "end of CoverTab[41252]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11016
		_go_fuzz_dep_.CoverTab[41253]++
//line /usr/local/go/src/net/http/h2_bundle.go:11016
		// _ = "end of CoverTab[41253]"
//line /usr/local/go/src/net/http/h2_bundle.go:11016
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11016
	// _ = "end of CoverTab[41246]"
//line /usr/local/go/src/net/http/h2_bundle.go:11016
	_go_fuzz_dep_.CoverTab[41247]++

							n := ws.nodes[streamID]
							n.state = http2priorityNodeClosed
							n.addBytes(-n.bytes)

							q := n.q
							ws.queuePool.put(&q)
							n.q.s = nil
							if ws.maxClosedNodesInTree > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:11025
		_go_fuzz_dep_.CoverTab[41254]++
								ws.addClosedOrIdleNode(&ws.closedNodes, ws.maxClosedNodesInTree, n)
//line /usr/local/go/src/net/http/h2_bundle.go:11026
		// _ = "end of CoverTab[41254]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11027
		_go_fuzz_dep_.CoverTab[41255]++
								ws.removeNode(n)
//line /usr/local/go/src/net/http/h2_bundle.go:11028
		// _ = "end of CoverTab[41255]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11029
	// _ = "end of CoverTab[41247]"
}

func (ws *http2priorityWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam) {
//line /usr/local/go/src/net/http/h2_bundle.go:11032
	_go_fuzz_dep_.CoverTab[41256]++
							if streamID == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:11033
		_go_fuzz_dep_.CoverTab[41263]++
								panic("adjustPriority on root")
//line /usr/local/go/src/net/http/h2_bundle.go:11034
		// _ = "end of CoverTab[41263]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11035
		_go_fuzz_dep_.CoverTab[41264]++
//line /usr/local/go/src/net/http/h2_bundle.go:11035
		// _ = "end of CoverTab[41264]"
//line /usr/local/go/src/net/http/h2_bundle.go:11035
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11035
	// _ = "end of CoverTab[41256]"
//line /usr/local/go/src/net/http/h2_bundle.go:11035
	_go_fuzz_dep_.CoverTab[41257]++

//line /usr/local/go/src/net/http/h2_bundle.go:11040
	n := ws.nodes[streamID]
	if n == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:11041
		_go_fuzz_dep_.CoverTab[41265]++
								if streamID <= ws.maxID || func() bool {
//line /usr/local/go/src/net/http/h2_bundle.go:11042
			_go_fuzz_dep_.CoverTab[41267]++
//line /usr/local/go/src/net/http/h2_bundle.go:11042
			return ws.maxIdleNodesInTree == 0
//line /usr/local/go/src/net/http/h2_bundle.go:11042
			// _ = "end of CoverTab[41267]"
//line /usr/local/go/src/net/http/h2_bundle.go:11042
		}() {
//line /usr/local/go/src/net/http/h2_bundle.go:11042
			_go_fuzz_dep_.CoverTab[41268]++
									return
//line /usr/local/go/src/net/http/h2_bundle.go:11043
			// _ = "end of CoverTab[41268]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11044
			_go_fuzz_dep_.CoverTab[41269]++
//line /usr/local/go/src/net/http/h2_bundle.go:11044
			// _ = "end of CoverTab[41269]"
//line /usr/local/go/src/net/http/h2_bundle.go:11044
		}
//line /usr/local/go/src/net/http/h2_bundle.go:11044
		// _ = "end of CoverTab[41265]"
//line /usr/local/go/src/net/http/h2_bundle.go:11044
		_go_fuzz_dep_.CoverTab[41266]++
								ws.maxID = streamID
								n = &http2priorityNode{
			q:	*ws.queuePool.get(),
			id:	streamID,
			weight:	http2priorityDefaultWeight,
			state:	http2priorityNodeIdle,
		}
								n.setParent(&ws.root)
								ws.nodes[streamID] = n
								ws.addClosedOrIdleNode(&ws.idleNodes, ws.maxIdleNodesInTree, n)
//line /usr/local/go/src/net/http/h2_bundle.go:11054
		// _ = "end of CoverTab[41266]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11055
		_go_fuzz_dep_.CoverTab[41270]++
//line /usr/local/go/src/net/http/h2_bundle.go:11055
		// _ = "end of CoverTab[41270]"
//line /usr/local/go/src/net/http/h2_bundle.go:11055
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11055
	// _ = "end of CoverTab[41257]"
//line /usr/local/go/src/net/http/h2_bundle.go:11055
	_go_fuzz_dep_.CoverTab[41258]++

//line /usr/local/go/src/net/http/h2_bundle.go:11059
	parent := ws.nodes[priority.StreamDep]
	if parent == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:11060
		_go_fuzz_dep_.CoverTab[41271]++
								n.setParent(&ws.root)
								n.weight = http2priorityDefaultWeight
								return
//line /usr/local/go/src/net/http/h2_bundle.go:11063
		// _ = "end of CoverTab[41271]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11064
		_go_fuzz_dep_.CoverTab[41272]++
//line /usr/local/go/src/net/http/h2_bundle.go:11064
		// _ = "end of CoverTab[41272]"
//line /usr/local/go/src/net/http/h2_bundle.go:11064
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11064
	// _ = "end of CoverTab[41258]"
//line /usr/local/go/src/net/http/h2_bundle.go:11064
	_go_fuzz_dep_.CoverTab[41259]++

//line /usr/local/go/src/net/http/h2_bundle.go:11067
	if n == parent {
//line /usr/local/go/src/net/http/h2_bundle.go:11067
		_go_fuzz_dep_.CoverTab[41273]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:11068
		// _ = "end of CoverTab[41273]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11069
		_go_fuzz_dep_.CoverTab[41274]++
//line /usr/local/go/src/net/http/h2_bundle.go:11069
		// _ = "end of CoverTab[41274]"
//line /usr/local/go/src/net/http/h2_bundle.go:11069
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11069
	// _ = "end of CoverTab[41259]"
//line /usr/local/go/src/net/http/h2_bundle.go:11069
	_go_fuzz_dep_.CoverTab[41260]++

//line /usr/local/go/src/net/http/h2_bundle.go:11078
	for x := parent.parent; x != nil; x = x.parent {
//line /usr/local/go/src/net/http/h2_bundle.go:11078
		_go_fuzz_dep_.CoverTab[41275]++
								if x == n {
//line /usr/local/go/src/net/http/h2_bundle.go:11079
			_go_fuzz_dep_.CoverTab[41276]++
									parent.setParent(n.parent)
									break
//line /usr/local/go/src/net/http/h2_bundle.go:11081
			// _ = "end of CoverTab[41276]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11082
			_go_fuzz_dep_.CoverTab[41277]++
//line /usr/local/go/src/net/http/h2_bundle.go:11082
			// _ = "end of CoverTab[41277]"
//line /usr/local/go/src/net/http/h2_bundle.go:11082
		}
//line /usr/local/go/src/net/http/h2_bundle.go:11082
		// _ = "end of CoverTab[41275]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11083
	// _ = "end of CoverTab[41260]"
//line /usr/local/go/src/net/http/h2_bundle.go:11083
	_go_fuzz_dep_.CoverTab[41261]++

//line /usr/local/go/src/net/http/h2_bundle.go:11088
	if priority.Exclusive {
//line /usr/local/go/src/net/http/h2_bundle.go:11088
		_go_fuzz_dep_.CoverTab[41278]++
								k := parent.kids
								for k != nil {
//line /usr/local/go/src/net/http/h2_bundle.go:11090
			_go_fuzz_dep_.CoverTab[41279]++
									next := k.next
									if k != n {
//line /usr/local/go/src/net/http/h2_bundle.go:11092
				_go_fuzz_dep_.CoverTab[41281]++
										k.setParent(n)
//line /usr/local/go/src/net/http/h2_bundle.go:11093
				// _ = "end of CoverTab[41281]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11094
				_go_fuzz_dep_.CoverTab[41282]++
//line /usr/local/go/src/net/http/h2_bundle.go:11094
				// _ = "end of CoverTab[41282]"
//line /usr/local/go/src/net/http/h2_bundle.go:11094
			}
//line /usr/local/go/src/net/http/h2_bundle.go:11094
			// _ = "end of CoverTab[41279]"
//line /usr/local/go/src/net/http/h2_bundle.go:11094
			_go_fuzz_dep_.CoverTab[41280]++
									k = next
//line /usr/local/go/src/net/http/h2_bundle.go:11095
			// _ = "end of CoverTab[41280]"
		}
//line /usr/local/go/src/net/http/h2_bundle.go:11096
		// _ = "end of CoverTab[41278]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11097
		_go_fuzz_dep_.CoverTab[41283]++
//line /usr/local/go/src/net/http/h2_bundle.go:11097
		// _ = "end of CoverTab[41283]"
//line /usr/local/go/src/net/http/h2_bundle.go:11097
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11097
	// _ = "end of CoverTab[41261]"
//line /usr/local/go/src/net/http/h2_bundle.go:11097
	_go_fuzz_dep_.CoverTab[41262]++

							n.setParent(parent)
							n.weight = priority.Weight
//line /usr/local/go/src/net/http/h2_bundle.go:11100
	// _ = "end of CoverTab[41262]"
}

func (ws *http2priorityWriteScheduler) Push(wr http2FrameWriteRequest) {
//line /usr/local/go/src/net/http/h2_bundle.go:11103
	_go_fuzz_dep_.CoverTab[41284]++
							var n *http2priorityNode
							if wr.isControl() {
//line /usr/local/go/src/net/http/h2_bundle.go:11105
		_go_fuzz_dep_.CoverTab[41286]++
								n = &ws.root
//line /usr/local/go/src/net/http/h2_bundle.go:11106
		// _ = "end of CoverTab[41286]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11107
		_go_fuzz_dep_.CoverTab[41287]++
								id := wr.StreamID()
								n = ws.nodes[id]
								if n == nil {
//line /usr/local/go/src/net/http/h2_bundle.go:11110
			_go_fuzz_dep_.CoverTab[41288]++

//line /usr/local/go/src/net/http/h2_bundle.go:11114
			if wr.DataSize() > 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:11114
				_go_fuzz_dep_.CoverTab[41290]++
										panic("add DATA on non-open stream")
//line /usr/local/go/src/net/http/h2_bundle.go:11115
				// _ = "end of CoverTab[41290]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11116
				_go_fuzz_dep_.CoverTab[41291]++
//line /usr/local/go/src/net/http/h2_bundle.go:11116
				// _ = "end of CoverTab[41291]"
//line /usr/local/go/src/net/http/h2_bundle.go:11116
			}
//line /usr/local/go/src/net/http/h2_bundle.go:11116
			// _ = "end of CoverTab[41288]"
//line /usr/local/go/src/net/http/h2_bundle.go:11116
			_go_fuzz_dep_.CoverTab[41289]++
									n = &ws.root
//line /usr/local/go/src/net/http/h2_bundle.go:11117
			// _ = "end of CoverTab[41289]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11118
			_go_fuzz_dep_.CoverTab[41292]++
//line /usr/local/go/src/net/http/h2_bundle.go:11118
			// _ = "end of CoverTab[41292]"
//line /usr/local/go/src/net/http/h2_bundle.go:11118
		}
//line /usr/local/go/src/net/http/h2_bundle.go:11118
		// _ = "end of CoverTab[41287]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11119
	// _ = "end of CoverTab[41284]"
//line /usr/local/go/src/net/http/h2_bundle.go:11119
	_go_fuzz_dep_.CoverTab[41285]++
							n.q.push(wr)
//line /usr/local/go/src/net/http/h2_bundle.go:11120
	// _ = "end of CoverTab[41285]"
}

func (ws *http2priorityWriteScheduler) Pop() (wr http2FrameWriteRequest, ok bool) {
//line /usr/local/go/src/net/http/h2_bundle.go:11123
	_go_fuzz_dep_.CoverTab[41293]++
							ws.root.walkReadyInOrder(false, &ws.tmp, func(n *http2priorityNode, openParent bool) bool {
//line /usr/local/go/src/net/http/h2_bundle.go:11124
		_go_fuzz_dep_.CoverTab[41295]++
								limit := int32(math.MaxInt32)
								if openParent {
//line /usr/local/go/src/net/http/h2_bundle.go:11126
			_go_fuzz_dep_.CoverTab[41299]++
									limit = ws.writeThrottleLimit
//line /usr/local/go/src/net/http/h2_bundle.go:11127
			// _ = "end of CoverTab[41299]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11128
			_go_fuzz_dep_.CoverTab[41300]++
//line /usr/local/go/src/net/http/h2_bundle.go:11128
			// _ = "end of CoverTab[41300]"
//line /usr/local/go/src/net/http/h2_bundle.go:11128
		}
//line /usr/local/go/src/net/http/h2_bundle.go:11128
		// _ = "end of CoverTab[41295]"
//line /usr/local/go/src/net/http/h2_bundle.go:11128
		_go_fuzz_dep_.CoverTab[41296]++
								wr, ok = n.q.consume(limit)
								if !ok {
//line /usr/local/go/src/net/http/h2_bundle.go:11130
			_go_fuzz_dep_.CoverTab[41301]++
									return false
//line /usr/local/go/src/net/http/h2_bundle.go:11131
			// _ = "end of CoverTab[41301]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11132
			_go_fuzz_dep_.CoverTab[41302]++
//line /usr/local/go/src/net/http/h2_bundle.go:11132
			// _ = "end of CoverTab[41302]"
//line /usr/local/go/src/net/http/h2_bundle.go:11132
		}
//line /usr/local/go/src/net/http/h2_bundle.go:11132
		// _ = "end of CoverTab[41296]"
//line /usr/local/go/src/net/http/h2_bundle.go:11132
		_go_fuzz_dep_.CoverTab[41297]++
								n.addBytes(int64(wr.DataSize()))

//line /usr/local/go/src/net/http/h2_bundle.go:11137
		if openParent {
//line /usr/local/go/src/net/http/h2_bundle.go:11137
			_go_fuzz_dep_.CoverTab[41303]++
									ws.writeThrottleLimit += 1024
									if ws.writeThrottleLimit < 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:11139
				_go_fuzz_dep_.CoverTab[41304]++
										ws.writeThrottleLimit = math.MaxInt32
//line /usr/local/go/src/net/http/h2_bundle.go:11140
				// _ = "end of CoverTab[41304]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11141
				_go_fuzz_dep_.CoverTab[41305]++
//line /usr/local/go/src/net/http/h2_bundle.go:11141
				// _ = "end of CoverTab[41305]"
//line /usr/local/go/src/net/http/h2_bundle.go:11141
			}
//line /usr/local/go/src/net/http/h2_bundle.go:11141
			// _ = "end of CoverTab[41303]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11142
			_go_fuzz_dep_.CoverTab[41306]++
//line /usr/local/go/src/net/http/h2_bundle.go:11142
			if ws.enableWriteThrottle {
//line /usr/local/go/src/net/http/h2_bundle.go:11142
				_go_fuzz_dep_.CoverTab[41307]++
										ws.writeThrottleLimit = 1024
//line /usr/local/go/src/net/http/h2_bundle.go:11143
				// _ = "end of CoverTab[41307]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11144
				_go_fuzz_dep_.CoverTab[41308]++
//line /usr/local/go/src/net/http/h2_bundle.go:11144
				// _ = "end of CoverTab[41308]"
//line /usr/local/go/src/net/http/h2_bundle.go:11144
			}
//line /usr/local/go/src/net/http/h2_bundle.go:11144
			// _ = "end of CoverTab[41306]"
//line /usr/local/go/src/net/http/h2_bundle.go:11144
		}
//line /usr/local/go/src/net/http/h2_bundle.go:11144
		// _ = "end of CoverTab[41297]"
//line /usr/local/go/src/net/http/h2_bundle.go:11144
		_go_fuzz_dep_.CoverTab[41298]++
								return true
//line /usr/local/go/src/net/http/h2_bundle.go:11145
		// _ = "end of CoverTab[41298]"
	})
//line /usr/local/go/src/net/http/h2_bundle.go:11146
	// _ = "end of CoverTab[41293]"
//line /usr/local/go/src/net/http/h2_bundle.go:11146
	_go_fuzz_dep_.CoverTab[41294]++
							return wr, ok
//line /usr/local/go/src/net/http/h2_bundle.go:11147
	// _ = "end of CoverTab[41294]"
}

func (ws *http2priorityWriteScheduler) addClosedOrIdleNode(list *[]*http2priorityNode, maxSize int, n *http2priorityNode) {
//line /usr/local/go/src/net/http/h2_bundle.go:11150
	_go_fuzz_dep_.CoverTab[41309]++
							if maxSize == 0 {
//line /usr/local/go/src/net/http/h2_bundle.go:11151
		_go_fuzz_dep_.CoverTab[41312]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:11152
		// _ = "end of CoverTab[41312]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11153
		_go_fuzz_dep_.CoverTab[41313]++
//line /usr/local/go/src/net/http/h2_bundle.go:11153
		// _ = "end of CoverTab[41313]"
//line /usr/local/go/src/net/http/h2_bundle.go:11153
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11153
	// _ = "end of CoverTab[41309]"
//line /usr/local/go/src/net/http/h2_bundle.go:11153
	_go_fuzz_dep_.CoverTab[41310]++
							if len(*list) == maxSize {
//line /usr/local/go/src/net/http/h2_bundle.go:11154
		_go_fuzz_dep_.CoverTab[41314]++

								ws.removeNode((*list)[0])
								x := (*list)[1:]
								copy(*list, x)
								*list = (*list)[:len(x)]
//line /usr/local/go/src/net/http/h2_bundle.go:11159
		// _ = "end of CoverTab[41314]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11160
		_go_fuzz_dep_.CoverTab[41315]++
//line /usr/local/go/src/net/http/h2_bundle.go:11160
		// _ = "end of CoverTab[41315]"
//line /usr/local/go/src/net/http/h2_bundle.go:11160
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11160
	// _ = "end of CoverTab[41310]"
//line /usr/local/go/src/net/http/h2_bundle.go:11160
	_go_fuzz_dep_.CoverTab[41311]++
							*list = append(*list, n)
//line /usr/local/go/src/net/http/h2_bundle.go:11161
	// _ = "end of CoverTab[41311]"
}

func (ws *http2priorityWriteScheduler) removeNode(n *http2priorityNode) {
//line /usr/local/go/src/net/http/h2_bundle.go:11164
	_go_fuzz_dep_.CoverTab[41316]++
							for k := n.kids; k != nil; k = k.next {
//line /usr/local/go/src/net/http/h2_bundle.go:11165
		_go_fuzz_dep_.CoverTab[41318]++
								k.setParent(n.parent)
//line /usr/local/go/src/net/http/h2_bundle.go:11166
		// _ = "end of CoverTab[41318]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11167
	// _ = "end of CoverTab[41316]"
//line /usr/local/go/src/net/http/h2_bundle.go:11167
	_go_fuzz_dep_.CoverTab[41317]++
							n.setParent(nil)
							delete(ws.nodes, n.id)
//line /usr/local/go/src/net/http/h2_bundle.go:11169
	// _ = "end of CoverTab[41317]"
}

// NewRandomWriteScheduler constructs a WriteScheduler that ignores HTTP/2
//line /usr/local/go/src/net/http/h2_bundle.go:11172
// priorities. Control frames like SETTINGS and PING are written before DATA
//line /usr/local/go/src/net/http/h2_bundle.go:11172
// frames, but if no control frames are queued and multiple streams have queued
//line /usr/local/go/src/net/http/h2_bundle.go:11172
// HEADERS or DATA frames, Pop selects a ready stream arbitrarily.
//line /usr/local/go/src/net/http/h2_bundle.go:11176
func http2NewRandomWriteScheduler() http2WriteScheduler {
//line /usr/local/go/src/net/http/h2_bundle.go:11176
	_go_fuzz_dep_.CoverTab[41319]++
							return &http2randomWriteScheduler{sq: make(map[uint32]*http2writeQueue)}
//line /usr/local/go/src/net/http/h2_bundle.go:11177
	// _ = "end of CoverTab[41319]"
}

type http2randomWriteScheduler struct {
	// zero are frames not associated with a specific stream.
	zero	http2writeQueue

	// sq contains the stream-specific queues, keyed by stream ID.
	// When a stream is idle, closed, or emptied, it's deleted
	// from the map.
	sq	map[uint32]*http2writeQueue

	// pool of empty queues for reuse.
	queuePool	http2writeQueuePool
}

func (ws *http2randomWriteScheduler) OpenStream(streamID uint32, options http2OpenStreamOptions) {
//line /usr/local/go/src/net/http/h2_bundle.go:11193
	_go_fuzz_dep_.CoverTab[41320]++
//line /usr/local/go/src/net/http/h2_bundle.go:11193
	// _ = "end of CoverTab[41320]"

}

func (ws *http2randomWriteScheduler) CloseStream(streamID uint32) {
//line /usr/local/go/src/net/http/h2_bundle.go:11197
	_go_fuzz_dep_.CoverTab[41321]++
							q, ok := ws.sq[streamID]
							if !ok {
//line /usr/local/go/src/net/http/h2_bundle.go:11199
		_go_fuzz_dep_.CoverTab[41323]++
								return
//line /usr/local/go/src/net/http/h2_bundle.go:11200
		// _ = "end of CoverTab[41323]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11201
		_go_fuzz_dep_.CoverTab[41324]++
//line /usr/local/go/src/net/http/h2_bundle.go:11201
		// _ = "end of CoverTab[41324]"
//line /usr/local/go/src/net/http/h2_bundle.go:11201
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11201
	// _ = "end of CoverTab[41321]"
//line /usr/local/go/src/net/http/h2_bundle.go:11201
	_go_fuzz_dep_.CoverTab[41322]++
							delete(ws.sq, streamID)
							ws.queuePool.put(q)
//line /usr/local/go/src/net/http/h2_bundle.go:11203
	// _ = "end of CoverTab[41322]"
}

func (ws *http2randomWriteScheduler) AdjustStream(streamID uint32, priority http2PriorityParam) {
//line /usr/local/go/src/net/http/h2_bundle.go:11206
	_go_fuzz_dep_.CoverTab[41325]++
//line /usr/local/go/src/net/http/h2_bundle.go:11206
	// _ = "end of CoverTab[41325]"

}

func (ws *http2randomWriteScheduler) Push(wr http2FrameWriteRequest) {
//line /usr/local/go/src/net/http/h2_bundle.go:11210
	_go_fuzz_dep_.CoverTab[41326]++
							if wr.isControl() {
//line /usr/local/go/src/net/http/h2_bundle.go:11211
		_go_fuzz_dep_.CoverTab[41329]++
								ws.zero.push(wr)
								return
//line /usr/local/go/src/net/http/h2_bundle.go:11213
		// _ = "end of CoverTab[41329]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11214
		_go_fuzz_dep_.CoverTab[41330]++
//line /usr/local/go/src/net/http/h2_bundle.go:11214
		// _ = "end of CoverTab[41330]"
//line /usr/local/go/src/net/http/h2_bundle.go:11214
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11214
	// _ = "end of CoverTab[41326]"
//line /usr/local/go/src/net/http/h2_bundle.go:11214
	_go_fuzz_dep_.CoverTab[41327]++
							id := wr.StreamID()
							q, ok := ws.sq[id]
							if !ok {
//line /usr/local/go/src/net/http/h2_bundle.go:11217
		_go_fuzz_dep_.CoverTab[41331]++
								q = ws.queuePool.get()
								ws.sq[id] = q
//line /usr/local/go/src/net/http/h2_bundle.go:11219
		// _ = "end of CoverTab[41331]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11220
		_go_fuzz_dep_.CoverTab[41332]++
//line /usr/local/go/src/net/http/h2_bundle.go:11220
		// _ = "end of CoverTab[41332]"
//line /usr/local/go/src/net/http/h2_bundle.go:11220
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11220
	// _ = "end of CoverTab[41327]"
//line /usr/local/go/src/net/http/h2_bundle.go:11220
	_go_fuzz_dep_.CoverTab[41328]++
							q.push(wr)
//line /usr/local/go/src/net/http/h2_bundle.go:11221
	// _ = "end of CoverTab[41328]"
}

func (ws *http2randomWriteScheduler) Pop() (http2FrameWriteRequest, bool) {
//line /usr/local/go/src/net/http/h2_bundle.go:11224
	_go_fuzz_dep_.CoverTab[41333]++

							if !ws.zero.empty() {
//line /usr/local/go/src/net/http/h2_bundle.go:11226
		_go_fuzz_dep_.CoverTab[41336]++
								return ws.zero.shift(), true
//line /usr/local/go/src/net/http/h2_bundle.go:11227
		// _ = "end of CoverTab[41336]"
	} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11228
		_go_fuzz_dep_.CoverTab[41337]++
//line /usr/local/go/src/net/http/h2_bundle.go:11228
		// _ = "end of CoverTab[41337]"
//line /usr/local/go/src/net/http/h2_bundle.go:11228
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11228
	// _ = "end of CoverTab[41333]"
//line /usr/local/go/src/net/http/h2_bundle.go:11228
	_go_fuzz_dep_.CoverTab[41334]++

							for streamID, q := range ws.sq {
//line /usr/local/go/src/net/http/h2_bundle.go:11230
		_go_fuzz_dep_.CoverTab[41338]++
								if wr, ok := q.consume(math.MaxInt32); ok {
//line /usr/local/go/src/net/http/h2_bundle.go:11231
			_go_fuzz_dep_.CoverTab[41339]++
									if q.empty() {
//line /usr/local/go/src/net/http/h2_bundle.go:11232
				_go_fuzz_dep_.CoverTab[41341]++
										delete(ws.sq, streamID)
										ws.queuePool.put(q)
//line /usr/local/go/src/net/http/h2_bundle.go:11234
				// _ = "end of CoverTab[41341]"
			} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11235
				_go_fuzz_dep_.CoverTab[41342]++
//line /usr/local/go/src/net/http/h2_bundle.go:11235
				// _ = "end of CoverTab[41342]"
//line /usr/local/go/src/net/http/h2_bundle.go:11235
			}
//line /usr/local/go/src/net/http/h2_bundle.go:11235
			// _ = "end of CoverTab[41339]"
//line /usr/local/go/src/net/http/h2_bundle.go:11235
			_go_fuzz_dep_.CoverTab[41340]++
									return wr, true
//line /usr/local/go/src/net/http/h2_bundle.go:11236
			// _ = "end of CoverTab[41340]"
		} else {
//line /usr/local/go/src/net/http/h2_bundle.go:11237
			_go_fuzz_dep_.CoverTab[41343]++
//line /usr/local/go/src/net/http/h2_bundle.go:11237
			// _ = "end of CoverTab[41343]"
//line /usr/local/go/src/net/http/h2_bundle.go:11237
		}
//line /usr/local/go/src/net/http/h2_bundle.go:11237
		// _ = "end of CoverTab[41338]"
	}
//line /usr/local/go/src/net/http/h2_bundle.go:11238
	// _ = "end of CoverTab[41334]"
//line /usr/local/go/src/net/http/h2_bundle.go:11238
	_go_fuzz_dep_.CoverTab[41335]++
							return http2FrameWriteRequest{}, false
//line /usr/local/go/src/net/http/h2_bundle.go:11239
	// _ = "end of CoverTab[41335]"
}

//line /usr/local/go/src/net/http/h2_bundle.go:11240
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/net/http/h2_bundle.go:11240
var _ = _go_fuzz_dep_.CoverTab
