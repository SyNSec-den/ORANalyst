// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:7
package idna

//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:7
import (
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:7
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:7
)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:7
import (
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:7
	_atomic_ "sync/atomic"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:7
)

//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:11
import (
	"math"
	"strings"
	"unicode/utf8"
)

// These parameter values are specified in section 5.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:17
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:17
// All computation is done with int32s, so that overflow behavior is identical
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:17
// regardless of whether int is 32-bit or 64-bit.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:21
const (
	base		int32	= 36
	damp		int32	= 700
	initialBias	int32	= 72
	initialN	int32	= 128
	skew		int32	= 38
	tmax		int32	= 26
	tmin		int32	= 1
)

func punyError(s string) error {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:31
	_go_fuzz_dep_.CoverTab[34253]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:31
	return &labelError{s, "A3"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:31
	// _ = "end of CoverTab[34253]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:31
}

// decode decodes a string as specified in section 6.2.
func decode(encoded string) (string, error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:34
	_go_fuzz_dep_.CoverTab[34254]++
									if encoded == "" {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:35
		_go_fuzz_dep_.CoverTab[34260]++
										return "", nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:36
		// _ = "end of CoverTab[34260]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:37
		_go_fuzz_dep_.CoverTab[34261]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:37
		// _ = "end of CoverTab[34261]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:37
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:37
	// _ = "end of CoverTab[34254]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:37
	_go_fuzz_dep_.CoverTab[34255]++
									pos := 1 + strings.LastIndex(encoded, "-")
									if pos == 1 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:39
		_go_fuzz_dep_.CoverTab[34262]++
										return "", punyError(encoded)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:40
		// _ = "end of CoverTab[34262]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:41
		_go_fuzz_dep_.CoverTab[34263]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:41
		// _ = "end of CoverTab[34263]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:41
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:41
	// _ = "end of CoverTab[34255]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:41
	_go_fuzz_dep_.CoverTab[34256]++
									if pos == len(encoded) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:42
		_go_fuzz_dep_.CoverTab[34264]++
										return encoded[:len(encoded)-1], nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:43
		// _ = "end of CoverTab[34264]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:44
		_go_fuzz_dep_.CoverTab[34265]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:44
		// _ = "end of CoverTab[34265]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:44
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:44
	// _ = "end of CoverTab[34256]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:44
	_go_fuzz_dep_.CoverTab[34257]++
									output := make([]rune, 0, len(encoded))
									if pos != 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:46
		_go_fuzz_dep_.CoverTab[34266]++
										for _, r := range encoded[:pos-1] {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:47
			_go_fuzz_dep_.CoverTab[34267]++
											output = append(output, r)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:48
			// _ = "end of CoverTab[34267]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:49
		// _ = "end of CoverTab[34266]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:50
		_go_fuzz_dep_.CoverTab[34268]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:50
		// _ = "end of CoverTab[34268]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:50
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:50
	// _ = "end of CoverTab[34257]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:50
	_go_fuzz_dep_.CoverTab[34258]++
									i, n, bias := int32(0), initialN, initialBias
									overflow := false
									for pos < len(encoded) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:53
		_go_fuzz_dep_.CoverTab[34269]++
										oldI, w := i, int32(1)
										for k := base; ; k += base {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:55
			_go_fuzz_dep_.CoverTab[34273]++
											if pos == len(encoded) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:56
				_go_fuzz_dep_.CoverTab[34279]++
												return "", punyError(encoded)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:57
				// _ = "end of CoverTab[34279]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:58
				_go_fuzz_dep_.CoverTab[34280]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:58
				// _ = "end of CoverTab[34280]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:58
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:58
			// _ = "end of CoverTab[34273]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:58
			_go_fuzz_dep_.CoverTab[34274]++
											digit, ok := decodeDigit(encoded[pos])
											if !ok {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:60
				_go_fuzz_dep_.CoverTab[34281]++
												return "", punyError(encoded)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:61
				// _ = "end of CoverTab[34281]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:62
				_go_fuzz_dep_.CoverTab[34282]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:62
				// _ = "end of CoverTab[34282]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:62
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:62
			// _ = "end of CoverTab[34274]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:62
			_go_fuzz_dep_.CoverTab[34275]++
											pos++
											i, overflow = madd(i, digit, w)
											if overflow {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:65
				_go_fuzz_dep_.CoverTab[34283]++
												return "", punyError(encoded)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:66
				// _ = "end of CoverTab[34283]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:67
				_go_fuzz_dep_.CoverTab[34284]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:67
				// _ = "end of CoverTab[34284]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:67
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:67
			// _ = "end of CoverTab[34275]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:67
			_go_fuzz_dep_.CoverTab[34276]++
											t := k - bias
											if k <= bias {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:69
				_go_fuzz_dep_.CoverTab[34285]++
												t = tmin
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:70
				// _ = "end of CoverTab[34285]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:71
				_go_fuzz_dep_.CoverTab[34286]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:71
				if k >= bias+tmax {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:71
					_go_fuzz_dep_.CoverTab[34287]++
													t = tmax
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:72
					// _ = "end of CoverTab[34287]"
				} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:73
					_go_fuzz_dep_.CoverTab[34288]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:73
					// _ = "end of CoverTab[34288]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:73
				}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:73
				// _ = "end of CoverTab[34286]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:73
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:73
			// _ = "end of CoverTab[34276]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:73
			_go_fuzz_dep_.CoverTab[34277]++
											if digit < t {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:74
				_go_fuzz_dep_.CoverTab[34289]++
												break
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:75
				// _ = "end of CoverTab[34289]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:76
				_go_fuzz_dep_.CoverTab[34290]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:76
				// _ = "end of CoverTab[34290]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:76
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:76
			// _ = "end of CoverTab[34277]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:76
			_go_fuzz_dep_.CoverTab[34278]++
											w, overflow = madd(0, w, base-t)
											if overflow {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:78
				_go_fuzz_dep_.CoverTab[34291]++
												return "", punyError(encoded)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:79
				// _ = "end of CoverTab[34291]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:80
				_go_fuzz_dep_.CoverTab[34292]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:80
				// _ = "end of CoverTab[34292]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:80
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:80
			// _ = "end of CoverTab[34278]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:81
		// _ = "end of CoverTab[34269]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:81
		_go_fuzz_dep_.CoverTab[34270]++
										if len(output) >= 1024 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:82
			_go_fuzz_dep_.CoverTab[34293]++
											return "", punyError(encoded)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:83
			// _ = "end of CoverTab[34293]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:84
			_go_fuzz_dep_.CoverTab[34294]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:84
			// _ = "end of CoverTab[34294]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:84
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:84
		// _ = "end of CoverTab[34270]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:84
		_go_fuzz_dep_.CoverTab[34271]++
										x := int32(len(output) + 1)
										bias = adapt(i-oldI, x, oldI == 0)
										n += i / x
										i %= x
										if n < 0 || func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:89
			_go_fuzz_dep_.CoverTab[34295]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:89
			return n > utf8.MaxRune
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:89
			// _ = "end of CoverTab[34295]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:89
		}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:89
			_go_fuzz_dep_.CoverTab[34296]++
											return "", punyError(encoded)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:90
			// _ = "end of CoverTab[34296]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:91
			_go_fuzz_dep_.CoverTab[34297]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:91
			// _ = "end of CoverTab[34297]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:91
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:91
		// _ = "end of CoverTab[34271]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:91
		_go_fuzz_dep_.CoverTab[34272]++
										output = append(output, 0)
										copy(output[i+1:], output[i:])
										output[i] = n
										i++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:95
		// _ = "end of CoverTab[34272]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:96
	// _ = "end of CoverTab[34258]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:96
	_go_fuzz_dep_.CoverTab[34259]++
									return string(output), nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:97
	// _ = "end of CoverTab[34259]"
}

// encode encodes a string as specified in section 6.3 and prepends prefix to
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:100
// the result.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:100
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:100
// The "while h < length(input)" line in the specification becomes "for
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:100
// remaining != 0" in the Go code, because len(s) in Go is in bytes, not runes.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:105
func encode(prefix, s string) (string, error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:105
	_go_fuzz_dep_.CoverTab[34298]++
									output := make([]byte, len(prefix), len(prefix)+1+2*len(s))
									copy(output, prefix)
									delta, n, bias := int32(0), initialN, initialBias
									b, remaining := int32(0), int32(0)
									for _, r := range s {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:110
		_go_fuzz_dep_.CoverTab[34302]++
										if r < 0x80 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:111
			_go_fuzz_dep_.CoverTab[34303]++
											b++
											output = append(output, byte(r))
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:113
			// _ = "end of CoverTab[34303]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:114
			_go_fuzz_dep_.CoverTab[34304]++
											remaining++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:115
			// _ = "end of CoverTab[34304]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:116
		// _ = "end of CoverTab[34302]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:117
	// _ = "end of CoverTab[34298]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:117
	_go_fuzz_dep_.CoverTab[34299]++
									h := b
									if b > 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:119
		_go_fuzz_dep_.CoverTab[34305]++
										output = append(output, '-')
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:120
		// _ = "end of CoverTab[34305]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:121
		_go_fuzz_dep_.CoverTab[34306]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:121
		// _ = "end of CoverTab[34306]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:121
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:121
	// _ = "end of CoverTab[34299]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:121
	_go_fuzz_dep_.CoverTab[34300]++
									overflow := false
									for remaining != 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:123
		_go_fuzz_dep_.CoverTab[34307]++
										m := int32(0x7fffffff)
										for _, r := range s {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:125
			_go_fuzz_dep_.CoverTab[34311]++
											if m > r && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:126
				_go_fuzz_dep_.CoverTab[34312]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:126
				return r >= n
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:126
				// _ = "end of CoverTab[34312]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:126
			}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:126
				_go_fuzz_dep_.CoverTab[34313]++
												m = r
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:127
				// _ = "end of CoverTab[34313]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:128
				_go_fuzz_dep_.CoverTab[34314]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:128
				// _ = "end of CoverTab[34314]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:128
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:128
			// _ = "end of CoverTab[34311]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:129
		// _ = "end of CoverTab[34307]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:129
		_go_fuzz_dep_.CoverTab[34308]++
										delta, overflow = madd(delta, m-n, h+1)
										if overflow {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:131
			_go_fuzz_dep_.CoverTab[34315]++
											return "", punyError(s)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:132
			// _ = "end of CoverTab[34315]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:133
			_go_fuzz_dep_.CoverTab[34316]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:133
			// _ = "end of CoverTab[34316]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:133
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:133
		// _ = "end of CoverTab[34308]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:133
		_go_fuzz_dep_.CoverTab[34309]++
										n = m
										for _, r := range s {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:135
			_go_fuzz_dep_.CoverTab[34317]++
											if r < n {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:136
				_go_fuzz_dep_.CoverTab[34321]++
												delta++
												if delta < 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:138
					_go_fuzz_dep_.CoverTab[34323]++
													return "", punyError(s)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:139
					// _ = "end of CoverTab[34323]"
				} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:140
					_go_fuzz_dep_.CoverTab[34324]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:140
					// _ = "end of CoverTab[34324]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:140
				}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:140
				// _ = "end of CoverTab[34321]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:140
				_go_fuzz_dep_.CoverTab[34322]++
												continue
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:141
				// _ = "end of CoverTab[34322]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:142
				_go_fuzz_dep_.CoverTab[34325]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:142
				// _ = "end of CoverTab[34325]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:142
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:142
			// _ = "end of CoverTab[34317]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:142
			_go_fuzz_dep_.CoverTab[34318]++
											if r > n {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:143
				_go_fuzz_dep_.CoverTab[34326]++
												continue
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:144
				// _ = "end of CoverTab[34326]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:145
				_go_fuzz_dep_.CoverTab[34327]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:145
				// _ = "end of CoverTab[34327]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:145
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:145
			// _ = "end of CoverTab[34318]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:145
			_go_fuzz_dep_.CoverTab[34319]++
											q := delta
											for k := base; ; k += base {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:147
				_go_fuzz_dep_.CoverTab[34328]++
												t := k - bias
												if k <= bias {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:149
					_go_fuzz_dep_.CoverTab[34331]++
													t = tmin
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:150
					// _ = "end of CoverTab[34331]"
				} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:151
					_go_fuzz_dep_.CoverTab[34332]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:151
					if k >= bias+tmax {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:151
						_go_fuzz_dep_.CoverTab[34333]++
														t = tmax
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:152
						// _ = "end of CoverTab[34333]"
					} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:153
						_go_fuzz_dep_.CoverTab[34334]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:153
						// _ = "end of CoverTab[34334]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:153
					}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:153
					// _ = "end of CoverTab[34332]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:153
				}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:153
				// _ = "end of CoverTab[34328]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:153
				_go_fuzz_dep_.CoverTab[34329]++
												if q < t {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:154
					_go_fuzz_dep_.CoverTab[34335]++
													break
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:155
					// _ = "end of CoverTab[34335]"
				} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:156
					_go_fuzz_dep_.CoverTab[34336]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:156
					// _ = "end of CoverTab[34336]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:156
				}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:156
				// _ = "end of CoverTab[34329]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:156
				_go_fuzz_dep_.CoverTab[34330]++
												output = append(output, encodeDigit(t+(q-t)%(base-t)))
												q = (q - t) / (base - t)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:158
				// _ = "end of CoverTab[34330]"
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:159
			// _ = "end of CoverTab[34319]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:159
			_go_fuzz_dep_.CoverTab[34320]++
											output = append(output, encodeDigit(q))
											bias = adapt(delta, h+1, h == b)
											delta = 0
											h++
											remaining--
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:164
			// _ = "end of CoverTab[34320]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:165
		// _ = "end of CoverTab[34309]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:165
		_go_fuzz_dep_.CoverTab[34310]++
										delta++
										n++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:167
		// _ = "end of CoverTab[34310]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:168
	// _ = "end of CoverTab[34300]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:168
	_go_fuzz_dep_.CoverTab[34301]++
									return string(output), nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:169
	// _ = "end of CoverTab[34301]"
}

// madd computes a + (b * c), detecting overflow.
func madd(a, b, c int32) (next int32, overflow bool) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:173
	_go_fuzz_dep_.CoverTab[34337]++
									p := int64(b) * int64(c)
									if p > math.MaxInt32-int64(a) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:175
		_go_fuzz_dep_.CoverTab[34339]++
										return 0, true
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:176
		// _ = "end of CoverTab[34339]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:177
		_go_fuzz_dep_.CoverTab[34340]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:177
		// _ = "end of CoverTab[34340]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:177
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:177
	// _ = "end of CoverTab[34337]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:177
	_go_fuzz_dep_.CoverTab[34338]++
									return a + int32(p), false
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:178
	// _ = "end of CoverTab[34338]"
}

func decodeDigit(x byte) (digit int32, ok bool) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:181
	_go_fuzz_dep_.CoverTab[34341]++
									switch {
	case '0' <= x && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:183
		_go_fuzz_dep_.CoverTab[34347]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:183
		return x <= '9'
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:183
		// _ = "end of CoverTab[34347]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:183
	}():
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:183
		_go_fuzz_dep_.CoverTab[34343]++
										return int32(x - ('0' - 26)), true
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:184
		// _ = "end of CoverTab[34343]"
	case 'A' <= x && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:185
		_go_fuzz_dep_.CoverTab[34348]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:185
		return x <= 'Z'
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:185
		// _ = "end of CoverTab[34348]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:185
	}():
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:185
		_go_fuzz_dep_.CoverTab[34344]++
										return int32(x - 'A'), true
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:186
		// _ = "end of CoverTab[34344]"
	case 'a' <= x && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:187
		_go_fuzz_dep_.CoverTab[34349]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:187
		return x <= 'z'
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:187
		// _ = "end of CoverTab[34349]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:187
	}():
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:187
		_go_fuzz_dep_.CoverTab[34345]++
										return int32(x - 'a'), true
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:188
		// _ = "end of CoverTab[34345]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:188
	default:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:188
		_go_fuzz_dep_.CoverTab[34346]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:188
		// _ = "end of CoverTab[34346]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:189
	// _ = "end of CoverTab[34341]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:189
	_go_fuzz_dep_.CoverTab[34342]++
									return 0, false
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:190
	// _ = "end of CoverTab[34342]"
}

func encodeDigit(digit int32) byte {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:193
	_go_fuzz_dep_.CoverTab[34350]++
									switch {
	case 0 <= digit && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:195
		_go_fuzz_dep_.CoverTab[34355]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:195
		return digit < 26
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:195
		// _ = "end of CoverTab[34355]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:195
	}():
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:195
		_go_fuzz_dep_.CoverTab[34352]++
										return byte(digit + 'a')
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:196
		// _ = "end of CoverTab[34352]"
	case 26 <= digit && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:197
		_go_fuzz_dep_.CoverTab[34356]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:197
		return digit < 36
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:197
		// _ = "end of CoverTab[34356]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:197
	}():
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:197
		_go_fuzz_dep_.CoverTab[34353]++
										return byte(digit + ('0' - 26))
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:198
		// _ = "end of CoverTab[34353]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:198
	default:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:198
		_go_fuzz_dep_.CoverTab[34354]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:198
		// _ = "end of CoverTab[34354]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:199
	// _ = "end of CoverTab[34350]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:199
	_go_fuzz_dep_.CoverTab[34351]++
									panic("idna: internal error in punycode encoding")
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:200
	// _ = "end of CoverTab[34351]"
}

// adapt is the bias adaptation function specified in section 6.1.
func adapt(delta, numPoints int32, firstTime bool) int32 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:204
	_go_fuzz_dep_.CoverTab[34357]++
									if firstTime {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:205
		_go_fuzz_dep_.CoverTab[34360]++
										delta /= damp
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:206
		// _ = "end of CoverTab[34360]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:207
		_go_fuzz_dep_.CoverTab[34361]++
										delta /= 2
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:208
		// _ = "end of CoverTab[34361]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:209
	// _ = "end of CoverTab[34357]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:209
	_go_fuzz_dep_.CoverTab[34358]++
									delta += delta / numPoints
									k := int32(0)
									for delta > ((base-tmin)*tmax)/2 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:212
		_go_fuzz_dep_.CoverTab[34362]++
										delta /= base - tmin
										k += base
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:214
		// _ = "end of CoverTab[34362]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:215
	// _ = "end of CoverTab[34358]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:215
	_go_fuzz_dep_.CoverTab[34359]++
									return k + (base-tmin+1)*delta/(delta+skew)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:216
	// _ = "end of CoverTab[34359]"
}

//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:217
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/punycode.go:217
var _ = _go_fuzz_dep_.CoverTab
