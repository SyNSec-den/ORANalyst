// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:3
package idna

//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:3
import (
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:3
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:3
)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:3
import (
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:3
	_atomic_ "sync/atomic"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:3
)

//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// info holds information from the IDNA mapping table for a single rune. It is
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// the value returned by a trie lookup. In most cases, all information fits in
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// a 16-bit value. For mappings, this value may contain an index into a slice
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// with the mapped string. Such mappings can consist of the actual mapped value
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// or an XOR pattern to be applied to the bytes of the UTF8 encoding of the
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// input rune. This technique is used by the cases packages and reduces the
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// table size significantly.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// The per-rune values have the following format:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	if mapped {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	  if inlinedXOR {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	    15..13 inline XOR marker
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	    12..11 unused
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	    10..3  inline XOR mask
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	  } else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	    15..3  index into xor or mapping table
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	  }
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	    15..14 unused
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	    13     mayNeedNorm
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	    12..11 attributes
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	    10..8  joining type
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	     7..3  category type
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	   2  use xor pattern
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//	1..0  mapped category
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// See the definitions below for a more detailed description of the various
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:10
// bits.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:40
type info uint16

const (
	catSmallMask	= 0x3
	catBigMask	= 0xF8
	indexShift	= 3
	xorBit		= 0x4		// interpret the index as an xor pattern
	inlineXOR	= 0xE000	// These bits are set if the XOR pattern is inlined.

	joinShift	= 8
	joinMask	= 0x07

	// Attributes
	attributesMask	= 0x1800
	viramaModifier	= 0x1800
	modifier	= 0x1000
	rtl		= 0x0800

	mayNeedNorm	= 0x2000
)

// A category corresponds to a category defined in the IDNA mapping table.
type category uint16

const (
	unknown			category	= 0	// not currently defined in unicode.
	mapped			category	= 1
	disallowedSTD3Mapped	category	= 2
	deviation		category	= 3
)

const (
	valid			category	= 0x08
	validNV8		category	= 0x18
	validXV8		category	= 0x28
	disallowed		category	= 0x40
	disallowedSTD3Valid	category	= 0x80
	ignored			category	= 0xC0
)

// join types and additional rune information
const (
	joiningL	= (iota + 1)
	joiningD
	joiningT
	joiningR

	//the following types are derived during processing
	joinZWJ
	joinZWNJ
	joinVirama
	numJoinTypes
)

func (c info) isMapped() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:94
	_go_fuzz_dep_.CoverTab[34492]++
									return c&0x3 != 0
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:95
	// _ = "end of CoverTab[34492]"
}

func (c info) category() category {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:98
	_go_fuzz_dep_.CoverTab[34493]++
									small := c & catSmallMask
									if small != 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:100
		_go_fuzz_dep_.CoverTab[34495]++
										return category(small)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:101
		// _ = "end of CoverTab[34495]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:102
		_go_fuzz_dep_.CoverTab[34496]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:102
		// _ = "end of CoverTab[34496]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:102
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:102
	// _ = "end of CoverTab[34493]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:102
	_go_fuzz_dep_.CoverTab[34494]++
									return category(c & catBigMask)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:103
	// _ = "end of CoverTab[34494]"
}

func (c info) joinType() info {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:106
	_go_fuzz_dep_.CoverTab[34497]++
									if c.isMapped() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:107
		_go_fuzz_dep_.CoverTab[34499]++
										return 0
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:108
		// _ = "end of CoverTab[34499]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:109
		_go_fuzz_dep_.CoverTab[34500]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:109
		// _ = "end of CoverTab[34500]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:109
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:109
	// _ = "end of CoverTab[34497]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:109
	_go_fuzz_dep_.CoverTab[34498]++
									return (c >> joinShift) & joinMask
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:110
	// _ = "end of CoverTab[34498]"
}

func (c info) isModifier() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:113
	_go_fuzz_dep_.CoverTab[34501]++
									return c&(modifier|catSmallMask) == modifier
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:114
	// _ = "end of CoverTab[34501]"
}

func (c info) isViramaModifier() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:117
	_go_fuzz_dep_.CoverTab[34502]++
									return c&(attributesMask|catSmallMask) == viramaModifier
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:118
	// _ = "end of CoverTab[34502]"
}

//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:119
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/trieval.go:119
var _ = _go_fuzz_dep_.CoverTab
