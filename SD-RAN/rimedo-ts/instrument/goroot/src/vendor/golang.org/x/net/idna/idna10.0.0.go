// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build go1.10
// +build go1.10

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:10
// Package idna implements IDNA2008 using the compatibility processing
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:10
// defined by UTS (Unicode Technical Standard) #46, which defines a standard to
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:10
// deal with the transition from IDNA2003.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:10
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:10
// IDNA2008 (Internationalized Domain Names for Applications), is defined in RFC
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:10
// 5890, RFC 5891, RFC 5892, RFC 5893 and RFC 5894.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:10
// UTS #46 is defined in https://www.unicode.org/reports/tr46.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:10
// See https://unicode.org/cldr/utility/idna.jsp for a visualization of the
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:10
// differences between these two standards.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:19
package idna

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:19
import (
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:19
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:19
)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:19
import (
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:19
	_atomic_ "sync/atomic"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:19
)

import (
	"fmt"
	"strings"
	"unicode/utf8"

	"golang.org/x/text/secure/bidirule"
	"golang.org/x/text/unicode/bidi"
	"golang.org/x/text/unicode/norm"
)

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:46
// ToASCII is a wrapper for Punycode.ToASCII.
func ToASCII(s string) (string, error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:47
	_go_fuzz_dep_.CoverTab[33972]++
									return Punycode.process(s, true)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:48
	// _ = "end of CoverTab[33972]"
}

// ToUnicode is a wrapper for Punycode.ToUnicode.
func ToUnicode(s string) (string, error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:52
	_go_fuzz_dep_.CoverTab[33973]++
									return Punycode.process(s, false)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:53
	// _ = "end of CoverTab[33973]"
}

// An Option configures a Profile at creation time.
type Option func(*options)

// Transitional sets a Profile to use the Transitional mapping as defined in UTS
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:59
// #46. This will cause, for example, "ÃŸ" to be mapped to "ss". Using the
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:59
// transitional mapping provides a compromise between IDNA2003 and IDNA2008
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:59
// compatibility. It is used by some browsers when resolving domain names. This
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:59
// option is only meaningful if combined with MapForLookup.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:64
func Transitional(transitional bool) Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:64
	_go_fuzz_dep_.CoverTab[33974]++
									return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:65
		_go_fuzz_dep_.CoverTab[33975]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:65
		o.transitional = transitional
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:65
		// _ = "end of CoverTab[33975]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:65
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:65
	// _ = "end of CoverTab[33974]"
}

// VerifyDNSLength sets whether a Profile should fail if any of the IDN parts
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:68
// are longer than allowed by the RFC.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:68
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:68
// This option corresponds to the VerifyDnsLength flag in UTS #46.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:72
func VerifyDNSLength(verify bool) Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:72
	_go_fuzz_dep_.CoverTab[33976]++
									return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:73
		_go_fuzz_dep_.CoverTab[33977]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:73
		o.verifyDNSLength = verify
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:73
		// _ = "end of CoverTab[33977]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:73
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:73
	// _ = "end of CoverTab[33976]"
}

// RemoveLeadingDots removes leading label separators. Leading runes that map to
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:76
// dots, such as U+3002 IDEOGRAPHIC FULL STOP, are removed as well.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:78
func RemoveLeadingDots(remove bool) Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:78
	_go_fuzz_dep_.CoverTab[33978]++
									return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:79
		_go_fuzz_dep_.CoverTab[33979]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:79
		o.removeLeadingDots = remove
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:79
		// _ = "end of CoverTab[33979]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:79
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:79
	// _ = "end of CoverTab[33978]"
}

// ValidateLabels sets whether to check the mandatory label validation criteria
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:82
// as defined in Section 5.4 of RFC 5891. This includes testing for correct use
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:82
// of hyphens ('-'), normalization, validity of runes, and the context rules.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:82
// In particular, ValidateLabels also sets the CheckHyphens and CheckJoiners flags
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:82
// in UTS #46.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:87
func ValidateLabels(enable bool) Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:87
	_go_fuzz_dep_.CoverTab[33980]++
									return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:88
		_go_fuzz_dep_.CoverTab[33981]++

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:91
		if o.mapping == nil && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:91
			_go_fuzz_dep_.CoverTab[33983]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:91
			return enable
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:91
			// _ = "end of CoverTab[33983]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:91
		}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:91
			_go_fuzz_dep_.CoverTab[33984]++
											o.mapping = normalize
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:92
			// _ = "end of CoverTab[33984]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:93
			_go_fuzz_dep_.CoverTab[33985]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:93
			// _ = "end of CoverTab[33985]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:93
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:93
		// _ = "end of CoverTab[33981]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:93
		_go_fuzz_dep_.CoverTab[33982]++
										o.trie = trie
										o.checkJoiners = enable
										o.checkHyphens = enable
										if enable {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:97
			_go_fuzz_dep_.CoverTab[33986]++
											o.fromPuny = validateFromPunycode
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:98
			// _ = "end of CoverTab[33986]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:99
				_go_fuzz_dep_.CoverTab[33987]++
												o.fromPuny = nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:100
			// _ = "end of CoverTab[33987]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:101
		// _ = "end of CoverTab[33982]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:102
	// _ = "end of CoverTab[33980]"
}

// CheckHyphens sets whether to check for correct use of hyphens ('-') in
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:105
// labels. Most web browsers do not have this option set, since labels such as
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:105
// "r3---sn-apo3qvuoxuxbt-j5pe" are in common use.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:105
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:105
// This option corresponds to the CheckHyphens flag in UTS #46.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:110
func CheckHyphens(enable bool) Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:110
	_go_fuzz_dep_.CoverTab[33988]++
										return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:111
		_go_fuzz_dep_.CoverTab[33989]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:111
		o.checkHyphens = enable
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:111
		// _ = "end of CoverTab[33989]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:111
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:111
	// _ = "end of CoverTab[33988]"
}

// CheckJoiners sets whether to check the ContextJ rules as defined in Appendix
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:114
// A of RFC 5892, concerning the use of joiner runes.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:114
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:114
// This option corresponds to the CheckJoiners flag in UTS #46.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:118
func CheckJoiners(enable bool) Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:118
	_go_fuzz_dep_.CoverTab[33990]++
										return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:119
		_go_fuzz_dep_.CoverTab[33991]++
											o.trie = trie
											o.checkJoiners = enable
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:121
		// _ = "end of CoverTab[33991]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:122
	// _ = "end of CoverTab[33990]"
}

// StrictDomainName limits the set of permissible ASCII characters to those
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:125
// allowed in domain names as defined in RFC 1034 (A-Z, a-z, 0-9 and the
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:125
// hyphen). This is set by default for MapForLookup and ValidateForRegistration,
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:125
// but is only useful if ValidateLabels is set.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:125
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:125
// This option is useful, for instance, for browsers that allow characters
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:125
// outside this range, for example a '_' (U+005F LOW LINE). See
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:125
// http://www.rfc-editor.org/std/std3.txt for more details.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:125
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:125
// This option corresponds to the UseSTD3ASCIIRules flag in UTS #46.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:135
func StrictDomainName(use bool) Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:135
	_go_fuzz_dep_.CoverTab[33992]++
										return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:136
		_go_fuzz_dep_.CoverTab[33993]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:136
		o.useSTD3Rules = use
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:136
		// _ = "end of CoverTab[33993]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:136
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:136
	// _ = "end of CoverTab[33992]"
}

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:142
// BidiRule enables the Bidi rule as defined in RFC 5893. Any application
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:142
// that relies on proper validation of labels should include this rule.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:142
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:142
// This option corresponds to the CheckBidi flag in UTS #46.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:146
func BidiRule() Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:146
	_go_fuzz_dep_.CoverTab[33994]++
										return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:147
		_go_fuzz_dep_.CoverTab[33995]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:147
		o.bidirule = bidirule.ValidString
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:147
		// _ = "end of CoverTab[33995]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:147
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:147
	// _ = "end of CoverTab[33994]"
}

// ValidateForRegistration sets validation options to verify that a given IDN is
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:150
// properly formatted for registration as defined by Section 4 of RFC 5891.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:152
func ValidateForRegistration() Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:152
	_go_fuzz_dep_.CoverTab[33996]++
										return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:153
		_go_fuzz_dep_.CoverTab[33997]++
											o.mapping = validateRegistration
											StrictDomainName(true)(o)
											ValidateLabels(true)(o)
											VerifyDNSLength(true)(o)
											BidiRule()(o)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:158
		// _ = "end of CoverTab[33997]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:159
	// _ = "end of CoverTab[33996]"
}

// MapForLookup sets validation and mapping options such that a given IDN is
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:162
// transformed for domain name lookup according to the requirements set out in
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:162
// Section 5 of RFC 5891. The mappings follow the recommendations of RFC 5894,
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:162
// RFC 5895 and UTS 46. It does not add the Bidi Rule. Use the BidiRule option
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:162
// to add this check.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:162
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:162
// The mappings include normalization and mapping case, width and other
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:162
// compatibility mappings.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:170
func MapForLookup() Option {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:170
	_go_fuzz_dep_.CoverTab[33998]++
										return func(o *options) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:171
		_go_fuzz_dep_.CoverTab[33999]++
											o.mapping = validateAndMap
											StrictDomainName(true)(o)
											ValidateLabels(true)(o)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:174
		// _ = "end of CoverTab[33999]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:175
	// _ = "end of CoverTab[33998]"
}

type options struct {
	transitional		bool
	useSTD3Rules		bool
	checkHyphens		bool
	checkJoiners		bool
	verifyDNSLength		bool
	removeLeadingDots	bool

	trie	*idnaTrie

	// fromPuny calls validation rules when converting A-labels to U-labels.
	fromPuny	func(p *Profile, s string) error

	// mapping implements a validation and mapping step as defined in RFC 5895
	// or UTS 46, tailored to, for example, domain registration or lookup.
	mapping	func(p *Profile, s string) (mapped string, isBidi bool, err error)

	// bidirule, if specified, checks whether s conforms to the Bidi Rule
	// defined in RFC 5893.
	bidirule	func(s string) bool
}

// A Profile defines the configuration of an IDNA mapper.
type Profile struct {
	options
}

func apply(o *options, opts []Option) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:205
	_go_fuzz_dep_.CoverTab[34000]++
										for _, f := range opts {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:206
		_go_fuzz_dep_.CoverTab[34001]++
											f(o)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:207
		// _ = "end of CoverTab[34001]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:208
	// _ = "end of CoverTab[34000]"
}

// New creates a new Profile.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:211
//
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:211
// With no options, the returned Profile is the most permissive and equals the
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:211
// Punycode Profile. Options can be passed to further restrict the Profile. The
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:211
// MapForLookup and ValidateForRegistration options set a collection of options,
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:211
// for lookup and registration purposes respectively, which can be tailored by
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:211
// adding more fine-grained options, where later options override earlier
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:211
// options.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:219
func New(o ...Option) *Profile {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:219
	_go_fuzz_dep_.CoverTab[34002]++
										p := &Profile{}
										apply(&p.options, o)
										return p
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:222
	// _ = "end of CoverTab[34002]"
}

// ToASCII converts a domain or domain label to its ASCII form. For example,
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:225
// ToASCII("bÃ¼cher.example.com") is "xn--bcher-kva.example.com", and
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:225
// ToASCII("golang") is "golang". If an error is encountered it will return
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:225
// an error and a (partially) processed result.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:229
func (p *Profile) ToASCII(s string) (string, error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:229
	_go_fuzz_dep_.CoverTab[34003]++
										return p.process(s, true)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:230
	// _ = "end of CoverTab[34003]"
}

// ToUnicode converts a domain or domain label to its Unicode form. For example,
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:233
// ToUnicode("xn--bcher-kva.example.com") is "bÃ¼cher.example.com", and
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:233
// ToUnicode("golang") is "golang". If an error is encountered it will return
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:233
// an error and a (partially) processed result.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:237
func (p *Profile) ToUnicode(s string) (string, error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:237
	_go_fuzz_dep_.CoverTab[34004]++
										pp := *p
										pp.transitional = false
										return pp.process(s, false)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:240
	// _ = "end of CoverTab[34004]"
}

// String reports a string with a description of the profile for debugging
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:243
// purposes. The string format may change with different versions.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:245
func (p *Profile) String() string {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:245
	_go_fuzz_dep_.CoverTab[34005]++
										s := ""
										if p.transitional {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:247
		_go_fuzz_dep_.CoverTab[34011]++
											s = "Transitional"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:248
		// _ = "end of CoverTab[34011]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:249
		_go_fuzz_dep_.CoverTab[34012]++
											s = "NonTransitional"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:250
		// _ = "end of CoverTab[34012]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:251
	// _ = "end of CoverTab[34005]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:251
	_go_fuzz_dep_.CoverTab[34006]++
										if p.useSTD3Rules {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:252
		_go_fuzz_dep_.CoverTab[34013]++
											s += ":UseSTD3Rules"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:253
		// _ = "end of CoverTab[34013]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:254
		_go_fuzz_dep_.CoverTab[34014]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:254
		// _ = "end of CoverTab[34014]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:254
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:254
	// _ = "end of CoverTab[34006]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:254
	_go_fuzz_dep_.CoverTab[34007]++
										if p.checkHyphens {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:255
		_go_fuzz_dep_.CoverTab[34015]++
											s += ":CheckHyphens"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:256
		// _ = "end of CoverTab[34015]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:257
		_go_fuzz_dep_.CoverTab[34016]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:257
		// _ = "end of CoverTab[34016]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:257
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:257
	// _ = "end of CoverTab[34007]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:257
	_go_fuzz_dep_.CoverTab[34008]++
										if p.checkJoiners {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:258
		_go_fuzz_dep_.CoverTab[34017]++
											s += ":CheckJoiners"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:259
		// _ = "end of CoverTab[34017]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:260
		_go_fuzz_dep_.CoverTab[34018]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:260
		// _ = "end of CoverTab[34018]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:260
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:260
	// _ = "end of CoverTab[34008]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:260
	_go_fuzz_dep_.CoverTab[34009]++
										if p.verifyDNSLength {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:261
		_go_fuzz_dep_.CoverTab[34019]++
											s += ":VerifyDNSLength"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:262
		// _ = "end of CoverTab[34019]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:263
		_go_fuzz_dep_.CoverTab[34020]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:263
		// _ = "end of CoverTab[34020]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:263
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:263
	// _ = "end of CoverTab[34009]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:263
	_go_fuzz_dep_.CoverTab[34010]++
										return s
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:264
	// _ = "end of CoverTab[34010]"
}

var (
	// Punycode is a Profile that does raw punycode processing with a minimum
	// of validation.
	Punycode	*Profile	= punycode

	// Lookup is the recommended profile for looking up domain names, according
	// to Section 5 of RFC 5891. The exact configuration of this profile may
	// change over time.
	Lookup	*Profile	= lookup

	// Display is the recommended profile for displaying domain names.
	// The configuration of this profile may change over time.
	Display	*Profile	= display

	// Registration is the recommended profile for checking whether a given
	// IDN is valid for registration, according to Section 4 of RFC 5891.
	Registration	*Profile	= registration

	punycode	= &Profile{}
	lookup		= &Profile{options{
		transitional:	transitionalLookup,
		useSTD3Rules:	true,
		checkHyphens:	true,
		checkJoiners:	true,
		trie:		trie,
		fromPuny:	validateFromPunycode,
		mapping:	validateAndMap,
		bidirule:	bidirule.ValidString,
	}}
	display	= &Profile{options{
		useSTD3Rules:	true,
		checkHyphens:	true,
		checkJoiners:	true,
		trie:		trie,
		fromPuny:	validateFromPunycode,
		mapping:	validateAndMap,
		bidirule:	bidirule.ValidString,
	}}
	registration	= &Profile{options{
		useSTD3Rules:		true,
		verifyDNSLength:	true,
		checkHyphens:		true,
		checkJoiners:		true,
		trie:			trie,
		fromPuny:		validateFromPunycode,
		mapping:		validateRegistration,
		bidirule:		bidirule.ValidString,
	}}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:319
)

type labelError struct{ label, code_ string }

func (e labelError) code() string {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:323
	_go_fuzz_dep_.CoverTab[34021]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:323
	return e.code_
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:323
	// _ = "end of CoverTab[34021]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:323
}
func (e labelError) Error() string {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:324
	_go_fuzz_dep_.CoverTab[34022]++
										return fmt.Sprintf("idna: invalid label %q", e.label)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:325
	// _ = "end of CoverTab[34022]"
}

type runeError rune

func (e runeError) code() string {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:330
	_go_fuzz_dep_.CoverTab[34023]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:330
	return "P1"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:330
	// _ = "end of CoverTab[34023]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:330
}
func (e runeError) Error() string {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:331
	_go_fuzz_dep_.CoverTab[34024]++
										return fmt.Sprintf("idna: disallowed rune %U", e)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:332
	// _ = "end of CoverTab[34024]"
}

// process implements the algorithm described in section 4 of UTS #46,
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:335
// see https://www.unicode.org/reports/tr46.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:337
func (p *Profile) process(s string, toASCII bool) (string, error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:337
	_go_fuzz_dep_.CoverTab[34025]++
										var err error
										var isBidi bool
										if p.mapping != nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:340
		_go_fuzz_dep_.CoverTab[34033]++
											s, isBidi, err = p.mapping(p, s)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:341
		// _ = "end of CoverTab[34033]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:342
		_go_fuzz_dep_.CoverTab[34034]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:342
		// _ = "end of CoverTab[34034]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:342
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:342
	// _ = "end of CoverTab[34025]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:342
	_go_fuzz_dep_.CoverTab[34026]++

										if p.removeLeadingDots {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:344
		_go_fuzz_dep_.CoverTab[34035]++
											for ; len(s) > 0 && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:345
			_go_fuzz_dep_.CoverTab[34036]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:345
			return s[0] == '.'
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:345
			// _ = "end of CoverTab[34036]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:345
		}(); s = s[1:] {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:345
			_go_fuzz_dep_.CoverTab[34037]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:345
			// _ = "end of CoverTab[34037]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:346
		// _ = "end of CoverTab[34035]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:347
		_go_fuzz_dep_.CoverTab[34038]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:347
		// _ = "end of CoverTab[34038]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:347
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:347
	// _ = "end of CoverTab[34026]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:347
	_go_fuzz_dep_.CoverTab[34027]++

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
	if err == nil && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
		_go_fuzz_dep_.CoverTab[34039]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
		return p.verifyDNSLength
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
		// _ = "end of CoverTab[34039]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
	}() && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
		_go_fuzz_dep_.CoverTab[34040]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
		return s == ""
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
		// _ = "end of CoverTab[34040]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
	}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:351
		_go_fuzz_dep_.CoverTab[34041]++
											err = &labelError{s, "A4"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:352
		// _ = "end of CoverTab[34041]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:353
		_go_fuzz_dep_.CoverTab[34042]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:353
		// _ = "end of CoverTab[34042]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:353
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:353
	// _ = "end of CoverTab[34027]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:353
	_go_fuzz_dep_.CoverTab[34028]++
										labels := labelIter{orig: s}
										for ; !labels.done(); labels.next() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:355
		_go_fuzz_dep_.CoverTab[34043]++
											label := labels.label()
											if label == "" {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:357
			_go_fuzz_dep_.CoverTab[34045]++

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:360
			if err == nil && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:360
				_go_fuzz_dep_.CoverTab[34047]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:360
				return p.verifyDNSLength
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:360
				// _ = "end of CoverTab[34047]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:360
			}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:360
				_go_fuzz_dep_.CoverTab[34048]++
													err = &labelError{s, "A4"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:361
				// _ = "end of CoverTab[34048]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:362
				_go_fuzz_dep_.CoverTab[34049]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:362
				// _ = "end of CoverTab[34049]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:362
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:362
			// _ = "end of CoverTab[34045]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:362
			_go_fuzz_dep_.CoverTab[34046]++
												continue
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:363
			// _ = "end of CoverTab[34046]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:364
			_go_fuzz_dep_.CoverTab[34050]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:364
			// _ = "end of CoverTab[34050]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:364
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:364
		// _ = "end of CoverTab[34043]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:364
		_go_fuzz_dep_.CoverTab[34044]++
											if strings.HasPrefix(label, acePrefix) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:365
			_go_fuzz_dep_.CoverTab[34051]++
												u, err2 := decode(label[len(acePrefix):])
												if err2 != nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:367
				_go_fuzz_dep_.CoverTab[34054]++
													if err == nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:368
					_go_fuzz_dep_.CoverTab[34056]++
														err = err2
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:369
					// _ = "end of CoverTab[34056]"
				} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:370
					_go_fuzz_dep_.CoverTab[34057]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:370
					// _ = "end of CoverTab[34057]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:370
				}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:370
				// _ = "end of CoverTab[34054]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:370
				_go_fuzz_dep_.CoverTab[34055]++

													continue
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:372
				// _ = "end of CoverTab[34055]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:373
				_go_fuzz_dep_.CoverTab[34058]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:373
				// _ = "end of CoverTab[34058]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:373
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:373
			// _ = "end of CoverTab[34051]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:373
			_go_fuzz_dep_.CoverTab[34052]++
												isBidi = isBidi || func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:374
				_go_fuzz_dep_.CoverTab[34059]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:374
				return bidirule.DirectionString(u) != bidi.LeftToRight
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:374
				// _ = "end of CoverTab[34059]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:374
			}()
												labels.set(u)
												if err == nil && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:376
				_go_fuzz_dep_.CoverTab[34060]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:376
				return p.fromPuny != nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:376
				// _ = "end of CoverTab[34060]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:376
			}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:376
				_go_fuzz_dep_.CoverTab[34061]++
													err = p.fromPuny(p, u)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:377
				// _ = "end of CoverTab[34061]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:378
				_go_fuzz_dep_.CoverTab[34062]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:378
				// _ = "end of CoverTab[34062]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:378
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:378
			// _ = "end of CoverTab[34052]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:378
			_go_fuzz_dep_.CoverTab[34053]++
												if err == nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:379
				_go_fuzz_dep_.CoverTab[34063]++

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:383
				err = p.validateLabel(u)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:383
				// _ = "end of CoverTab[34063]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:384
				_go_fuzz_dep_.CoverTab[34064]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:384
				// _ = "end of CoverTab[34064]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:384
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:384
			// _ = "end of CoverTab[34053]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:385
			_go_fuzz_dep_.CoverTab[34065]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:385
			if err == nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:385
				_go_fuzz_dep_.CoverTab[34066]++
													err = p.validateLabel(label)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:386
				// _ = "end of CoverTab[34066]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:387
				_go_fuzz_dep_.CoverTab[34067]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:387
				// _ = "end of CoverTab[34067]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:387
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:387
			// _ = "end of CoverTab[34065]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:387
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:387
		// _ = "end of CoverTab[34044]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:388
	// _ = "end of CoverTab[34028]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:388
	_go_fuzz_dep_.CoverTab[34029]++
										if isBidi && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:389
		_go_fuzz_dep_.CoverTab[34068]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:389
		return p.bidirule != nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:389
		// _ = "end of CoverTab[34068]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:389
	}() && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:389
		_go_fuzz_dep_.CoverTab[34069]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:389
		return err == nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:389
		// _ = "end of CoverTab[34069]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:389
	}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:389
		_go_fuzz_dep_.CoverTab[34070]++
											for labels.reset(); !labels.done(); labels.next() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:390
			_go_fuzz_dep_.CoverTab[34071]++
												if !p.bidirule(labels.label()) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:391
				_go_fuzz_dep_.CoverTab[34072]++
													err = &labelError{s, "B"}
													break
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:393
				// _ = "end of CoverTab[34072]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:394
				_go_fuzz_dep_.CoverTab[34073]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:394
				// _ = "end of CoverTab[34073]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:394
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:394
			// _ = "end of CoverTab[34071]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:395
		// _ = "end of CoverTab[34070]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:396
		_go_fuzz_dep_.CoverTab[34074]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:396
		// _ = "end of CoverTab[34074]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:396
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:396
	// _ = "end of CoverTab[34029]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:396
	_go_fuzz_dep_.CoverTab[34030]++
										if toASCII {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:397
		_go_fuzz_dep_.CoverTab[34075]++
											for labels.reset(); !labels.done(); labels.next() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:398
			_go_fuzz_dep_.CoverTab[34076]++
												label := labels.label()
												if !ascii(label) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:400
				_go_fuzz_dep_.CoverTab[34078]++
													a, err2 := encode(acePrefix, label)
													if err == nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:402
					_go_fuzz_dep_.CoverTab[34080]++
														err = err2
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:403
					// _ = "end of CoverTab[34080]"
				} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:404
					_go_fuzz_dep_.CoverTab[34081]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:404
					// _ = "end of CoverTab[34081]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:404
				}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:404
				// _ = "end of CoverTab[34078]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:404
				_go_fuzz_dep_.CoverTab[34079]++
													label = a
													labels.set(a)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:406
				// _ = "end of CoverTab[34079]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:407
				_go_fuzz_dep_.CoverTab[34082]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:407
				// _ = "end of CoverTab[34082]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:407
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:407
			// _ = "end of CoverTab[34076]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:407
			_go_fuzz_dep_.CoverTab[34077]++
												n := len(label)
												if p.verifyDNSLength && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
				_go_fuzz_dep_.CoverTab[34083]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
				return err == nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
				// _ = "end of CoverTab[34083]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
			}() && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
				_go_fuzz_dep_.CoverTab[34084]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
				return (n == 0 || func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
					_go_fuzz_dep_.CoverTab[34085]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
					return n > 63
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
					// _ = "end of CoverTab[34085]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
				}())
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
				// _ = "end of CoverTab[34084]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
			}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:409
				_go_fuzz_dep_.CoverTab[34086]++
													err = &labelError{label, "A4"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:410
				// _ = "end of CoverTab[34086]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:411
				_go_fuzz_dep_.CoverTab[34087]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:411
				// _ = "end of CoverTab[34087]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:411
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:411
			// _ = "end of CoverTab[34077]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:412
		// _ = "end of CoverTab[34075]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:413
		_go_fuzz_dep_.CoverTab[34088]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:413
		// _ = "end of CoverTab[34088]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:413
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:413
	// _ = "end of CoverTab[34030]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:413
	_go_fuzz_dep_.CoverTab[34031]++
										s = labels.result()
										if toASCII && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:415
		_go_fuzz_dep_.CoverTab[34089]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:415
		return p.verifyDNSLength
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:415
		// _ = "end of CoverTab[34089]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:415
	}() && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:415
		_go_fuzz_dep_.CoverTab[34090]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:415
		return err == nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:415
		// _ = "end of CoverTab[34090]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:415
	}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:415
		_go_fuzz_dep_.CoverTab[34091]++

											n := len(s)
											if n > 0 && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:418
			_go_fuzz_dep_.CoverTab[34093]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:418
			return s[n-1] == '.'
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:418
			// _ = "end of CoverTab[34093]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:418
		}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:418
			_go_fuzz_dep_.CoverTab[34094]++
												n--
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:419
			// _ = "end of CoverTab[34094]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:420
			_go_fuzz_dep_.CoverTab[34095]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:420
			// _ = "end of CoverTab[34095]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:420
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:420
		// _ = "end of CoverTab[34091]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:420
		_go_fuzz_dep_.CoverTab[34092]++
											if len(s) < 1 || func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:421
			_go_fuzz_dep_.CoverTab[34096]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:421
			return n > 253
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:421
			// _ = "end of CoverTab[34096]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:421
		}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:421
			_go_fuzz_dep_.CoverTab[34097]++
												err = &labelError{s, "A4"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:422
			// _ = "end of CoverTab[34097]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:423
			_go_fuzz_dep_.CoverTab[34098]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:423
			// _ = "end of CoverTab[34098]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:423
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:423
		// _ = "end of CoverTab[34092]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:424
		_go_fuzz_dep_.CoverTab[34099]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:424
		// _ = "end of CoverTab[34099]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:424
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:424
	// _ = "end of CoverTab[34031]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:424
	_go_fuzz_dep_.CoverTab[34032]++
										return s, err
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:425
	// _ = "end of CoverTab[34032]"
}

func normalize(p *Profile, s string) (mapped string, isBidi bool, err error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:428
	_go_fuzz_dep_.CoverTab[34100]++

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:432
	mapped = norm.NFC.String(s)
										isBidi = bidirule.DirectionString(mapped) == bidi.RightToLeft
										return mapped, isBidi, nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:434
	// _ = "end of CoverTab[34100]"
}

func validateRegistration(p *Profile, s string) (idem string, bidi bool, err error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:437
	_go_fuzz_dep_.CoverTab[34101]++

										if !norm.NFC.IsNormalString(s) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:439
		_go_fuzz_dep_.CoverTab[34104]++
											return s, false, &labelError{s, "V1"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:440
		// _ = "end of CoverTab[34104]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:441
		_go_fuzz_dep_.CoverTab[34105]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:441
		// _ = "end of CoverTab[34105]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:441
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:441
	// _ = "end of CoverTab[34101]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:441
	_go_fuzz_dep_.CoverTab[34102]++
										for i := 0; i < len(s); {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:442
		_go_fuzz_dep_.CoverTab[34106]++
											v, sz := trie.lookupString(s[i:])
											if sz == 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:444
			_go_fuzz_dep_.CoverTab[34109]++
												return s, bidi, runeError(utf8.RuneError)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:445
			// _ = "end of CoverTab[34109]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:446
			_go_fuzz_dep_.CoverTab[34110]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:446
			// _ = "end of CoverTab[34110]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:446
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:446
		// _ = "end of CoverTab[34106]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:446
		_go_fuzz_dep_.CoverTab[34107]++
											bidi = bidi || func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:447
			_go_fuzz_dep_.CoverTab[34111]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:447
			return info(v).isBidi(s[i:])
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:447
			// _ = "end of CoverTab[34111]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:447
		}()

											switch p.simplify(info(v).category()) {

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:452
		case valid, deviation:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:452
			_go_fuzz_dep_.CoverTab[34112]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:452
			// _ = "end of CoverTab[34112]"
		case disallowed, mapped, unknown, ignored:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:453
			_go_fuzz_dep_.CoverTab[34113]++
												r, _ := utf8.DecodeRuneInString(s[i:])
												return s, bidi, runeError(r)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:455
			// _ = "end of CoverTab[34113]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:455
		default:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:455
			_go_fuzz_dep_.CoverTab[34114]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:455
			// _ = "end of CoverTab[34114]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:456
		// _ = "end of CoverTab[34107]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:456
		_go_fuzz_dep_.CoverTab[34108]++
											i += sz
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:457
		// _ = "end of CoverTab[34108]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:458
	// _ = "end of CoverTab[34102]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:458
	_go_fuzz_dep_.CoverTab[34103]++
										return s, bidi, nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:459
	// _ = "end of CoverTab[34103]"
}

func (c info) isBidi(s string) bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:462
	_go_fuzz_dep_.CoverTab[34115]++
										if !c.isMapped() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:463
		_go_fuzz_dep_.CoverTab[34118]++
											return c&attributesMask == rtl
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:464
		// _ = "end of CoverTab[34118]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:465
		_go_fuzz_dep_.CoverTab[34119]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:465
		// _ = "end of CoverTab[34119]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:465
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:465
	// _ = "end of CoverTab[34115]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:465
	_go_fuzz_dep_.CoverTab[34116]++

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:468
	p, _ := bidi.LookupString(s)
	switch p.Class() {
	case bidi.R, bidi.AL, bidi.AN:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:470
		_go_fuzz_dep_.CoverTab[34120]++
											return true
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:471
		// _ = "end of CoverTab[34120]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:471
	default:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:471
		_go_fuzz_dep_.CoverTab[34121]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:471
		// _ = "end of CoverTab[34121]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:472
	// _ = "end of CoverTab[34116]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:472
	_go_fuzz_dep_.CoverTab[34117]++
										return false
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:473
	// _ = "end of CoverTab[34117]"
}

func validateAndMap(p *Profile, s string) (vm string, bidi bool, err error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:476
	_go_fuzz_dep_.CoverTab[34122]++
										var (
		b	[]byte
		k	int
	)
	// combinedInfoBits contains the or-ed bits of all runes. We use this
	// to derive the mayNeedNorm bit later. This may trigger normalization
	// overeagerly, but it will not do so in the common case. The end result
	// is another 10% saving on BenchmarkProfile for the common case.
	var combinedInfoBits info
	for i := 0; i < len(s); {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:486
		_go_fuzz_dep_.CoverTab[34125]++
											v, sz := trie.lookupString(s[i:])
											if sz == 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:488
			_go_fuzz_dep_.CoverTab[34128]++
												b = append(b, s[k:i]...)
												b = append(b, "\ufffd"...)
												k = len(s)
												if err == nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:492
				_go_fuzz_dep_.CoverTab[34130]++
													err = runeError(utf8.RuneError)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:493
				// _ = "end of CoverTab[34130]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:494
				_go_fuzz_dep_.CoverTab[34131]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:494
				// _ = "end of CoverTab[34131]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:494
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:494
			// _ = "end of CoverTab[34128]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:494
			_go_fuzz_dep_.CoverTab[34129]++
												break
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:495
			// _ = "end of CoverTab[34129]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:496
			_go_fuzz_dep_.CoverTab[34132]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:496
			// _ = "end of CoverTab[34132]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:496
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:496
		// _ = "end of CoverTab[34125]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:496
		_go_fuzz_dep_.CoverTab[34126]++
											combinedInfoBits |= info(v)
											bidi = bidi || func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:498
			_go_fuzz_dep_.CoverTab[34133]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:498
			return info(v).isBidi(s[i:])
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:498
			// _ = "end of CoverTab[34133]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:498
		}()
											start := i
											i += sz

											switch p.simplify(info(v).category()) {
		case valid:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:503
			_go_fuzz_dep_.CoverTab[34134]++
												continue
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:504
			// _ = "end of CoverTab[34134]"
		case disallowed:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:505
			_go_fuzz_dep_.CoverTab[34135]++
												if err == nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:506
				_go_fuzz_dep_.CoverTab[34141]++
													r, _ := utf8.DecodeRuneInString(s[start:])
													err = runeError(r)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:508
				// _ = "end of CoverTab[34141]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:509
				_go_fuzz_dep_.CoverTab[34142]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:509
				// _ = "end of CoverTab[34142]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:509
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:509
			// _ = "end of CoverTab[34135]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:509
			_go_fuzz_dep_.CoverTab[34136]++
												continue
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:510
			// _ = "end of CoverTab[34136]"
		case mapped, deviation:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:511
			_go_fuzz_dep_.CoverTab[34137]++
												b = append(b, s[k:start]...)
												b = info(v).appendMapping(b, s[start:i])
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:513
			// _ = "end of CoverTab[34137]"
		case ignored:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:514
			_go_fuzz_dep_.CoverTab[34138]++
												b = append(b, s[k:start]...)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:515
			// _ = "end of CoverTab[34138]"

		case unknown:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:517
			_go_fuzz_dep_.CoverTab[34139]++
												b = append(b, s[k:start]...)
												b = append(b, "\ufffd"...)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:519
			// _ = "end of CoverTab[34139]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:519
		default:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:519
			_go_fuzz_dep_.CoverTab[34140]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:519
			// _ = "end of CoverTab[34140]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:520
		// _ = "end of CoverTab[34126]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:520
		_go_fuzz_dep_.CoverTab[34127]++
											k = i
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:521
		// _ = "end of CoverTab[34127]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:522
	// _ = "end of CoverTab[34122]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:522
	_go_fuzz_dep_.CoverTab[34123]++
										if k == 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:523
		_go_fuzz_dep_.CoverTab[34143]++

											if combinedInfoBits&mayNeedNorm != 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:525
			_go_fuzz_dep_.CoverTab[34144]++
												s = norm.NFC.String(s)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:526
			// _ = "end of CoverTab[34144]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:527
			_go_fuzz_dep_.CoverTab[34145]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:527
			// _ = "end of CoverTab[34145]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:527
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:527
		// _ = "end of CoverTab[34143]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:528
		_go_fuzz_dep_.CoverTab[34146]++
											b = append(b, s[k:]...)
											if norm.NFC.QuickSpan(b) != len(b) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:530
			_go_fuzz_dep_.CoverTab[34148]++
												b = norm.NFC.Bytes(b)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:531
			// _ = "end of CoverTab[34148]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:532
			_go_fuzz_dep_.CoverTab[34149]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:532
			// _ = "end of CoverTab[34149]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:532
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:532
		// _ = "end of CoverTab[34146]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:532
		_go_fuzz_dep_.CoverTab[34147]++

											s = string(b)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:534
		// _ = "end of CoverTab[34147]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:535
	// _ = "end of CoverTab[34123]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:535
	_go_fuzz_dep_.CoverTab[34124]++
										return s, bidi, err
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:536
	// _ = "end of CoverTab[34124]"
}

// A labelIter allows iterating over domain name labels.
type labelIter struct {
	orig		string
	slice		[]string
	curStart	int
	curEnd		int
	i		int
}

func (l *labelIter) reset() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:548
	_go_fuzz_dep_.CoverTab[34150]++
										l.curStart = 0
										l.curEnd = 0
										l.i = 0
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:551
	// _ = "end of CoverTab[34150]"
}

func (l *labelIter) done() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:554
	_go_fuzz_dep_.CoverTab[34151]++
										return l.curStart >= len(l.orig)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:555
	// _ = "end of CoverTab[34151]"
}

func (l *labelIter) result() string {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:558
	_go_fuzz_dep_.CoverTab[34152]++
										if l.slice != nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:559
		_go_fuzz_dep_.CoverTab[34154]++
											return strings.Join(l.slice, ".")
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:560
		// _ = "end of CoverTab[34154]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:561
		_go_fuzz_dep_.CoverTab[34155]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:561
		// _ = "end of CoverTab[34155]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:561
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:561
	// _ = "end of CoverTab[34152]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:561
	_go_fuzz_dep_.CoverTab[34153]++
										return l.orig
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:562
	// _ = "end of CoverTab[34153]"
}

func (l *labelIter) label() string {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:565
	_go_fuzz_dep_.CoverTab[34156]++
										if l.slice != nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:566
		_go_fuzz_dep_.CoverTab[34159]++
											return l.slice[l.i]
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:567
		// _ = "end of CoverTab[34159]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:568
		_go_fuzz_dep_.CoverTab[34160]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:568
		// _ = "end of CoverTab[34160]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:568
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:568
	// _ = "end of CoverTab[34156]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:568
	_go_fuzz_dep_.CoverTab[34157]++
										p := strings.IndexByte(l.orig[l.curStart:], '.')
										l.curEnd = l.curStart + p
										if p == -1 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:571
		_go_fuzz_dep_.CoverTab[34161]++
											l.curEnd = len(l.orig)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:572
		// _ = "end of CoverTab[34161]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:573
		_go_fuzz_dep_.CoverTab[34162]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:573
		// _ = "end of CoverTab[34162]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:573
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:573
	// _ = "end of CoverTab[34157]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:573
	_go_fuzz_dep_.CoverTab[34158]++
										return l.orig[l.curStart:l.curEnd]
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:574
	// _ = "end of CoverTab[34158]"
}

// next sets the value to the next label. It skips the last label if it is empty.
func (l *labelIter) next() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:578
	_go_fuzz_dep_.CoverTab[34163]++
										l.i++
										if l.slice != nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:580
		_go_fuzz_dep_.CoverTab[34164]++
											if l.i >= len(l.slice) || func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:581
			_go_fuzz_dep_.CoverTab[34165]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:581
			return l.i == len(l.slice)-1 && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:581
				_go_fuzz_dep_.CoverTab[34166]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:581
				return l.slice[l.i] == ""
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:581
				// _ = "end of CoverTab[34166]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:581
			}()
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:581
			// _ = "end of CoverTab[34165]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:581
		}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:581
			_go_fuzz_dep_.CoverTab[34167]++
												l.curStart = len(l.orig)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:582
			// _ = "end of CoverTab[34167]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:583
			_go_fuzz_dep_.CoverTab[34168]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:583
			// _ = "end of CoverTab[34168]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:583
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:583
		// _ = "end of CoverTab[34164]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:584
		_go_fuzz_dep_.CoverTab[34169]++
											l.curStart = l.curEnd + 1
											if l.curStart == len(l.orig)-1 && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:586
			_go_fuzz_dep_.CoverTab[34170]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:586
			return l.orig[l.curStart] == '.'
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:586
			// _ = "end of CoverTab[34170]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:586
		}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:586
			_go_fuzz_dep_.CoverTab[34171]++
												l.curStart = len(l.orig)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:587
			// _ = "end of CoverTab[34171]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:588
			_go_fuzz_dep_.CoverTab[34172]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:588
			// _ = "end of CoverTab[34172]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:588
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:588
		// _ = "end of CoverTab[34169]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:589
	// _ = "end of CoverTab[34163]"
}

func (l *labelIter) set(s string) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:592
	_go_fuzz_dep_.CoverTab[34173]++
										if l.slice == nil {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:593
		_go_fuzz_dep_.CoverTab[34175]++
											l.slice = strings.Split(l.orig, ".")
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:594
		// _ = "end of CoverTab[34175]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:595
		_go_fuzz_dep_.CoverTab[34176]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:595
		// _ = "end of CoverTab[34176]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:595
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:595
	// _ = "end of CoverTab[34173]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:595
	_go_fuzz_dep_.CoverTab[34174]++
										l.slice[l.i] = s
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:596
	// _ = "end of CoverTab[34174]"
}

// acePrefix is the ASCII Compatible Encoding prefix.
const acePrefix = "xn--"

func (p *Profile) simplify(cat category) category {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:602
	_go_fuzz_dep_.CoverTab[34177]++
										switch cat {
	case disallowedSTD3Mapped:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:604
		_go_fuzz_dep_.CoverTab[34179]++
											if p.useSTD3Rules {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:605
			_go_fuzz_dep_.CoverTab[34184]++
												cat = disallowed
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:606
			// _ = "end of CoverTab[34184]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:607
			_go_fuzz_dep_.CoverTab[34185]++
												cat = mapped
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:608
			// _ = "end of CoverTab[34185]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:609
		// _ = "end of CoverTab[34179]"
	case disallowedSTD3Valid:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:610
		_go_fuzz_dep_.CoverTab[34180]++
											if p.useSTD3Rules {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:611
			_go_fuzz_dep_.CoverTab[34186]++
												cat = disallowed
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:612
			// _ = "end of CoverTab[34186]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:613
			_go_fuzz_dep_.CoverTab[34187]++
												cat = valid
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:614
			// _ = "end of CoverTab[34187]"
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:615
		// _ = "end of CoverTab[34180]"
	case deviation:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:616
		_go_fuzz_dep_.CoverTab[34181]++
											if !p.transitional {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:617
			_go_fuzz_dep_.CoverTab[34188]++
												cat = valid
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:618
			// _ = "end of CoverTab[34188]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:619
			_go_fuzz_dep_.CoverTab[34189]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:619
			// _ = "end of CoverTab[34189]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:619
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:619
		// _ = "end of CoverTab[34181]"
	case validNV8, validXV8:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:620
		_go_fuzz_dep_.CoverTab[34182]++

											cat = valid
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:622
		// _ = "end of CoverTab[34182]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:622
	default:
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:622
		_go_fuzz_dep_.CoverTab[34183]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:622
		// _ = "end of CoverTab[34183]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:623
	// _ = "end of CoverTab[34177]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:623
	_go_fuzz_dep_.CoverTab[34178]++
										return cat
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:624
	// _ = "end of CoverTab[34178]"
}

func validateFromPunycode(p *Profile, s string) error {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:627
	_go_fuzz_dep_.CoverTab[34190]++
										if !norm.NFC.IsNormalString(s) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:628
		_go_fuzz_dep_.CoverTab[34193]++
											return &labelError{s, "V1"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:629
		// _ = "end of CoverTab[34193]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:630
		_go_fuzz_dep_.CoverTab[34194]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:630
		// _ = "end of CoverTab[34194]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:630
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:630
	// _ = "end of CoverTab[34190]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:630
	_go_fuzz_dep_.CoverTab[34191]++

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:633
	for i := 0; i < len(s); {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:633
		_go_fuzz_dep_.CoverTab[34195]++
											v, sz := trie.lookupString(s[i:])
											if sz == 0 {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:635
			_go_fuzz_dep_.CoverTab[34198]++
												return runeError(utf8.RuneError)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:636
			// _ = "end of CoverTab[34198]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:637
			_go_fuzz_dep_.CoverTab[34199]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:637
			// _ = "end of CoverTab[34199]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:637
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:637
		// _ = "end of CoverTab[34195]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:637
		_go_fuzz_dep_.CoverTab[34196]++
											if c := p.simplify(info(v).category()); c != valid && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:638
			_go_fuzz_dep_.CoverTab[34200]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:638
			return c != deviation
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:638
			// _ = "end of CoverTab[34200]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:638
		}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:638
			_go_fuzz_dep_.CoverTab[34201]++
												return &labelError{s, "V6"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:639
			// _ = "end of CoverTab[34201]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:640
			_go_fuzz_dep_.CoverTab[34202]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:640
			// _ = "end of CoverTab[34202]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:640
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:640
		// _ = "end of CoverTab[34196]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:640
		_go_fuzz_dep_.CoverTab[34197]++
											i += sz
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:641
		// _ = "end of CoverTab[34197]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:642
	// _ = "end of CoverTab[34191]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:642
	_go_fuzz_dep_.CoverTab[34192]++
										return nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:643
	// _ = "end of CoverTab[34192]"
}

const (
	zwnj	= "\u200c"
	zwj	= "\u200d"
)

type joinState int8

const (
	stateStart	joinState	= iota
	stateVirama
	stateBefore
	stateBeforeVirama
	stateAfter
	stateFAIL
)

var joinStates = [][numJoinTypes]joinState{
	stateStart: {
		joiningL:	stateBefore,
		joiningD:	stateBefore,
		joinZWNJ:	stateFAIL,
		joinZWJ:	stateFAIL,
		joinVirama:	stateVirama,
	},
	stateVirama: {
		joiningL:	stateBefore,
		joiningD:	stateBefore,
	},
	stateBefore: {
		joiningL:	stateBefore,
		joiningD:	stateBefore,
		joiningT:	stateBefore,
		joinZWNJ:	stateAfter,
		joinZWJ:	stateFAIL,
		joinVirama:	stateBeforeVirama,
	},
	stateBeforeVirama: {
		joiningL:	stateBefore,
		joiningD:	stateBefore,
		joiningT:	stateBefore,
	},
	stateAfter: {
		joiningL:	stateFAIL,
		joiningD:	stateBefore,
		joiningT:	stateAfter,
		joiningR:	stateStart,
		joinZWNJ:	stateFAIL,
		joinZWJ:	stateFAIL,
		joinVirama:	stateAfter,
	},
	stateFAIL: {
		0:		stateFAIL,
		joiningL:	stateFAIL,
		joiningD:	stateFAIL,
		joiningT:	stateFAIL,
		joiningR:	stateFAIL,
		joinZWNJ:	stateFAIL,
		joinZWJ:	stateFAIL,
		joinVirama:	stateFAIL,
	},
}

// validateLabel validates the criteria from Section 4.1. Item 1, 4, and 6 are
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:708
// already implicitly satisfied by the overall implementation.
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:710
func (p *Profile) validateLabel(s string) (err error) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:710
	_go_fuzz_dep_.CoverTab[34203]++
										if s == "" {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:711
		_go_fuzz_dep_.CoverTab[34211]++
											if p.verifyDNSLength {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:712
			_go_fuzz_dep_.CoverTab[34213]++
												return &labelError{s, "A4"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:713
			// _ = "end of CoverTab[34213]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:714
			_go_fuzz_dep_.CoverTab[34214]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:714
			// _ = "end of CoverTab[34214]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:714
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:714
		// _ = "end of CoverTab[34211]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:714
		_go_fuzz_dep_.CoverTab[34212]++
											return nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:715
		// _ = "end of CoverTab[34212]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:716
		_go_fuzz_dep_.CoverTab[34215]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:716
		// _ = "end of CoverTab[34215]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:716
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:716
	// _ = "end of CoverTab[34203]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:716
	_go_fuzz_dep_.CoverTab[34204]++
										if p.checkHyphens {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:717
		_go_fuzz_dep_.CoverTab[34216]++
											if len(s) > 4 && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:718
			_go_fuzz_dep_.CoverTab[34218]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:718
			return s[2] == '-'
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:718
			// _ = "end of CoverTab[34218]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:718
		}() && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:718
			_go_fuzz_dep_.CoverTab[34219]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:718
			return s[3] == '-'
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:718
			// _ = "end of CoverTab[34219]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:718
		}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:718
			_go_fuzz_dep_.CoverTab[34220]++
												return &labelError{s, "V2"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:719
			// _ = "end of CoverTab[34220]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:720
			_go_fuzz_dep_.CoverTab[34221]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:720
			// _ = "end of CoverTab[34221]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:720
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:720
		// _ = "end of CoverTab[34216]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:720
		_go_fuzz_dep_.CoverTab[34217]++
											if s[0] == '-' || func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:721
			_go_fuzz_dep_.CoverTab[34222]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:721
			return s[len(s)-1] == '-'
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:721
			// _ = "end of CoverTab[34222]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:721
		}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:721
			_go_fuzz_dep_.CoverTab[34223]++
												return &labelError{s, "V3"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:722
			// _ = "end of CoverTab[34223]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:723
			_go_fuzz_dep_.CoverTab[34224]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:723
			// _ = "end of CoverTab[34224]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:723
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:723
		// _ = "end of CoverTab[34217]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:724
		_go_fuzz_dep_.CoverTab[34225]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:724
		// _ = "end of CoverTab[34225]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:724
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:724
	// _ = "end of CoverTab[34204]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:724
	_go_fuzz_dep_.CoverTab[34205]++
										if !p.checkJoiners {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:725
		_go_fuzz_dep_.CoverTab[34226]++
											return nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:726
		// _ = "end of CoverTab[34226]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:727
		_go_fuzz_dep_.CoverTab[34227]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:727
		// _ = "end of CoverTab[34227]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:727
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:727
	// _ = "end of CoverTab[34205]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:727
	_go_fuzz_dep_.CoverTab[34206]++
										trie := p.trie

										v, sz := trie.lookupString(s)
										x := info(v)
										if x.isModifier() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:732
		_go_fuzz_dep_.CoverTab[34228]++
											return &labelError{s, "V5"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:733
		// _ = "end of CoverTab[34228]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:734
		_go_fuzz_dep_.CoverTab[34229]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:734
		// _ = "end of CoverTab[34229]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:734
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:734
	// _ = "end of CoverTab[34206]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:734
	_go_fuzz_dep_.CoverTab[34207]++

										if strings.Index(s, zwj) == -1 && func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:736
		_go_fuzz_dep_.CoverTab[34230]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:736
		return strings.Index(s, zwnj) == -1
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:736
		// _ = "end of CoverTab[34230]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:736
	}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:736
		_go_fuzz_dep_.CoverTab[34231]++
											return nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:737
		// _ = "end of CoverTab[34231]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:738
		_go_fuzz_dep_.CoverTab[34232]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:738
		// _ = "end of CoverTab[34232]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:738
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:738
	// _ = "end of CoverTab[34207]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:738
	_go_fuzz_dep_.CoverTab[34208]++
										st := stateStart
										for i := 0; ; {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:740
		_go_fuzz_dep_.CoverTab[34233]++
											jt := x.joinType()
											if s[i:i+sz] == zwj {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:742
			_go_fuzz_dep_.CoverTab[34237]++
												jt = joinZWJ
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:743
			// _ = "end of CoverTab[34237]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:744
			_go_fuzz_dep_.CoverTab[34238]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:744
			if s[i:i+sz] == zwnj {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:744
				_go_fuzz_dep_.CoverTab[34239]++
													jt = joinZWNJ
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:745
				// _ = "end of CoverTab[34239]"
			} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:746
				_go_fuzz_dep_.CoverTab[34240]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:746
				// _ = "end of CoverTab[34240]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:746
			}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:746
			// _ = "end of CoverTab[34238]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:746
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:746
		// _ = "end of CoverTab[34233]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:746
		_go_fuzz_dep_.CoverTab[34234]++
											st = joinStates[st][jt]
											if x.isViramaModifier() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:748
			_go_fuzz_dep_.CoverTab[34241]++
												st = joinStates[st][joinVirama]
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:749
			// _ = "end of CoverTab[34241]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:750
			_go_fuzz_dep_.CoverTab[34242]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:750
			// _ = "end of CoverTab[34242]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:750
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:750
		// _ = "end of CoverTab[34234]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:750
		_go_fuzz_dep_.CoverTab[34235]++
											if i += sz; i == len(s) {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:751
			_go_fuzz_dep_.CoverTab[34243]++
												break
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:752
			// _ = "end of CoverTab[34243]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:753
			_go_fuzz_dep_.CoverTab[34244]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:753
			// _ = "end of CoverTab[34244]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:753
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:753
		// _ = "end of CoverTab[34235]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:753
		_go_fuzz_dep_.CoverTab[34236]++
											v, sz = trie.lookupString(s[i:])
											x = info(v)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:755
		// _ = "end of CoverTab[34236]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:756
	// _ = "end of CoverTab[34208]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:756
	_go_fuzz_dep_.CoverTab[34209]++
										if st == stateFAIL || func() bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:757
		_go_fuzz_dep_.CoverTab[34245]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:757
		return st == stateAfter
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:757
		// _ = "end of CoverTab[34245]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:757
	}() {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:757
		_go_fuzz_dep_.CoverTab[34246]++
											return &labelError{s, "C"}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:758
		// _ = "end of CoverTab[34246]"
	} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:759
		_go_fuzz_dep_.CoverTab[34247]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:759
		// _ = "end of CoverTab[34247]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:759
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:759
	// _ = "end of CoverTab[34209]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:759
	_go_fuzz_dep_.CoverTab[34210]++
										return nil
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:760
	// _ = "end of CoverTab[34210]"
}

func ascii(s string) bool {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:763
	_go_fuzz_dep_.CoverTab[34248]++
										for i := 0; i < len(s); i++ {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:764
		_go_fuzz_dep_.CoverTab[34250]++
											if s[i] >= utf8.RuneSelf {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:765
			_go_fuzz_dep_.CoverTab[34251]++
												return false
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:766
			// _ = "end of CoverTab[34251]"
		} else {
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:767
			_go_fuzz_dep_.CoverTab[34252]++
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:767
			// _ = "end of CoverTab[34252]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:767
		}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:767
		// _ = "end of CoverTab[34250]"
	}
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:768
	// _ = "end of CoverTab[34248]"
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:768
	_go_fuzz_dep_.CoverTab[34249]++
										return true
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:769
	// _ = "end of CoverTab[34249]"
}

//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:770
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/vendor/golang.org/x/net/idna/idna10.0.0.go:770
var _ = _go_fuzz_dep_.CoverTab
