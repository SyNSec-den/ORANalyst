// Copyright 2011 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//line /usr/local/go/src/encoding/binary/varint.go:5
package binary

//line /usr/local/go/src/encoding/binary/varint.go:5
import (
//line /usr/local/go/src/encoding/binary/varint.go:5
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/encoding/binary/varint.go:5
)
//line /usr/local/go/src/encoding/binary/varint.go:5
import (
//line /usr/local/go/src/encoding/binary/varint.go:5
	_atomic_ "sync/atomic"
//line /usr/local/go/src/encoding/binary/varint.go:5
)

//line /usr/local/go/src/encoding/binary/varint.go:27
import (
	"errors"
	"io"
)

// MaxVarintLenN is the maximum length of a varint-encoded N-bit integer.
const (
	MaxVarintLen16	= 3
	MaxVarintLen32	= 5
	MaxVarintLen64	= 10
)

// AppendUvarint appends the varint-encoded form of x,
//line /usr/local/go/src/encoding/binary/varint.go:39
// as generated by PutUvarint, to buf and returns the extended buffer.
//line /usr/local/go/src/encoding/binary/varint.go:41
func AppendUvarint(buf []byte, x uint64) []byte {
//line /usr/local/go/src/encoding/binary/varint.go:41
	_go_fuzz_dep_.CoverTab[1426]++
							for x >= 0x80 {
//line /usr/local/go/src/encoding/binary/varint.go:42
		_go_fuzz_dep_.CoverTab[1428]++
								buf = append(buf, byte(x)|0x80)
								x >>= 7
//line /usr/local/go/src/encoding/binary/varint.go:44
		// _ = "end of CoverTab[1428]"
	}
//line /usr/local/go/src/encoding/binary/varint.go:45
	// _ = "end of CoverTab[1426]"
//line /usr/local/go/src/encoding/binary/varint.go:45
	_go_fuzz_dep_.CoverTab[1427]++
							return append(buf, byte(x))
//line /usr/local/go/src/encoding/binary/varint.go:46
	// _ = "end of CoverTab[1427]"
}

// PutUvarint encodes a uint64 into buf and returns the number of bytes written.
//line /usr/local/go/src/encoding/binary/varint.go:49
// If the buffer is too small, PutUvarint will panic.
//line /usr/local/go/src/encoding/binary/varint.go:51
func PutUvarint(buf []byte, x uint64) int {
//line /usr/local/go/src/encoding/binary/varint.go:51
	_go_fuzz_dep_.CoverTab[1429]++
							i := 0
							for x >= 0x80 {
//line /usr/local/go/src/encoding/binary/varint.go:53
		_go_fuzz_dep_.CoverTab[1431]++
								buf[i] = byte(x) | 0x80
								x >>= 7
								i++
//line /usr/local/go/src/encoding/binary/varint.go:56
		// _ = "end of CoverTab[1431]"
	}
//line /usr/local/go/src/encoding/binary/varint.go:57
	// _ = "end of CoverTab[1429]"
//line /usr/local/go/src/encoding/binary/varint.go:57
	_go_fuzz_dep_.CoverTab[1430]++
							buf[i] = byte(x)
							return i + 1
//line /usr/local/go/src/encoding/binary/varint.go:59
	// _ = "end of CoverTab[1430]"
}

// Uvarint decodes a uint64 from buf and returns that value and the
//line /usr/local/go/src/encoding/binary/varint.go:62
// number of bytes read (> 0). If an error occurred, the value is 0
//line /usr/local/go/src/encoding/binary/varint.go:62
// and the number of bytes n is <= 0 meaning:
//line /usr/local/go/src/encoding/binary/varint.go:62
//
//line /usr/local/go/src/encoding/binary/varint.go:62
//	n == 0: buf too small
//line /usr/local/go/src/encoding/binary/varint.go:62
//	n  < 0: value larger than 64 bits (overflow)
//line /usr/local/go/src/encoding/binary/varint.go:62
//	        and -n is the number of bytes read
//line /usr/local/go/src/encoding/binary/varint.go:69
func Uvarint(buf []byte) (uint64, int) {
//line /usr/local/go/src/encoding/binary/varint.go:69
	_go_fuzz_dep_.CoverTab[1432]++
							var x uint64
							var s uint
							for i, b := range buf {
//line /usr/local/go/src/encoding/binary/varint.go:72
		_go_fuzz_dep_.CoverTab[1434]++
								if i == MaxVarintLen64 {
//line /usr/local/go/src/encoding/binary/varint.go:73
			_go_fuzz_dep_.CoverTab[1437]++

//line /usr/local/go/src/encoding/binary/varint.go:76
			return 0, -(i + 1)
//line /usr/local/go/src/encoding/binary/varint.go:76
			// _ = "end of CoverTab[1437]"
		} else {
//line /usr/local/go/src/encoding/binary/varint.go:77
			_go_fuzz_dep_.CoverTab[1438]++
//line /usr/local/go/src/encoding/binary/varint.go:77
			// _ = "end of CoverTab[1438]"
//line /usr/local/go/src/encoding/binary/varint.go:77
		}
//line /usr/local/go/src/encoding/binary/varint.go:77
		// _ = "end of CoverTab[1434]"
//line /usr/local/go/src/encoding/binary/varint.go:77
		_go_fuzz_dep_.CoverTab[1435]++
								if b < 0x80 {
//line /usr/local/go/src/encoding/binary/varint.go:78
			_go_fuzz_dep_.CoverTab[1439]++
									if i == MaxVarintLen64-1 && func() bool {
//line /usr/local/go/src/encoding/binary/varint.go:79
				_go_fuzz_dep_.CoverTab[1441]++
//line /usr/local/go/src/encoding/binary/varint.go:79
				return b > 1
//line /usr/local/go/src/encoding/binary/varint.go:79
				// _ = "end of CoverTab[1441]"
//line /usr/local/go/src/encoding/binary/varint.go:79
			}() {
//line /usr/local/go/src/encoding/binary/varint.go:79
				_go_fuzz_dep_.CoverTab[1442]++
										return 0, -(i + 1)
//line /usr/local/go/src/encoding/binary/varint.go:80
				// _ = "end of CoverTab[1442]"
			} else {
//line /usr/local/go/src/encoding/binary/varint.go:81
				_go_fuzz_dep_.CoverTab[1443]++
//line /usr/local/go/src/encoding/binary/varint.go:81
				// _ = "end of CoverTab[1443]"
//line /usr/local/go/src/encoding/binary/varint.go:81
			}
//line /usr/local/go/src/encoding/binary/varint.go:81
			// _ = "end of CoverTab[1439]"
//line /usr/local/go/src/encoding/binary/varint.go:81
			_go_fuzz_dep_.CoverTab[1440]++
									return x | uint64(b)<<s, i + 1
//line /usr/local/go/src/encoding/binary/varint.go:82
			// _ = "end of CoverTab[1440]"
		} else {
//line /usr/local/go/src/encoding/binary/varint.go:83
			_go_fuzz_dep_.CoverTab[1444]++
//line /usr/local/go/src/encoding/binary/varint.go:83
			// _ = "end of CoverTab[1444]"
//line /usr/local/go/src/encoding/binary/varint.go:83
		}
//line /usr/local/go/src/encoding/binary/varint.go:83
		// _ = "end of CoverTab[1435]"
//line /usr/local/go/src/encoding/binary/varint.go:83
		_go_fuzz_dep_.CoverTab[1436]++
								x |= uint64(b&0x7f) << s
								s += 7
//line /usr/local/go/src/encoding/binary/varint.go:85
		// _ = "end of CoverTab[1436]"
	}
//line /usr/local/go/src/encoding/binary/varint.go:86
	// _ = "end of CoverTab[1432]"
//line /usr/local/go/src/encoding/binary/varint.go:86
	_go_fuzz_dep_.CoverTab[1433]++
							return 0, 0
//line /usr/local/go/src/encoding/binary/varint.go:87
	// _ = "end of CoverTab[1433]"
}

// AppendVarint appends the varint-encoded form of x,
//line /usr/local/go/src/encoding/binary/varint.go:90
// as generated by PutVarint, to buf and returns the extended buffer.
//line /usr/local/go/src/encoding/binary/varint.go:92
func AppendVarint(buf []byte, x int64) []byte {
//line /usr/local/go/src/encoding/binary/varint.go:92
	_go_fuzz_dep_.CoverTab[1445]++
							ux := uint64(x) << 1
							if x < 0 {
//line /usr/local/go/src/encoding/binary/varint.go:94
		_go_fuzz_dep_.CoverTab[1447]++
								ux = ^ux
//line /usr/local/go/src/encoding/binary/varint.go:95
		// _ = "end of CoverTab[1447]"
	} else {
//line /usr/local/go/src/encoding/binary/varint.go:96
		_go_fuzz_dep_.CoverTab[1448]++
//line /usr/local/go/src/encoding/binary/varint.go:96
		// _ = "end of CoverTab[1448]"
//line /usr/local/go/src/encoding/binary/varint.go:96
	}
//line /usr/local/go/src/encoding/binary/varint.go:96
	// _ = "end of CoverTab[1445]"
//line /usr/local/go/src/encoding/binary/varint.go:96
	_go_fuzz_dep_.CoverTab[1446]++
							return AppendUvarint(buf, ux)
//line /usr/local/go/src/encoding/binary/varint.go:97
	// _ = "end of CoverTab[1446]"
}

// PutVarint encodes an int64 into buf and returns the number of bytes written.
//line /usr/local/go/src/encoding/binary/varint.go:100
// If the buffer is too small, PutVarint will panic.
//line /usr/local/go/src/encoding/binary/varint.go:102
func PutVarint(buf []byte, x int64) int {
//line /usr/local/go/src/encoding/binary/varint.go:102
	_go_fuzz_dep_.CoverTab[1449]++
							ux := uint64(x) << 1
							if x < 0 {
//line /usr/local/go/src/encoding/binary/varint.go:104
		_go_fuzz_dep_.CoverTab[1451]++
								ux = ^ux
//line /usr/local/go/src/encoding/binary/varint.go:105
		// _ = "end of CoverTab[1451]"
	} else {
//line /usr/local/go/src/encoding/binary/varint.go:106
		_go_fuzz_dep_.CoverTab[1452]++
//line /usr/local/go/src/encoding/binary/varint.go:106
		// _ = "end of CoverTab[1452]"
//line /usr/local/go/src/encoding/binary/varint.go:106
	}
//line /usr/local/go/src/encoding/binary/varint.go:106
	// _ = "end of CoverTab[1449]"
//line /usr/local/go/src/encoding/binary/varint.go:106
	_go_fuzz_dep_.CoverTab[1450]++
							return PutUvarint(buf, ux)
//line /usr/local/go/src/encoding/binary/varint.go:107
	// _ = "end of CoverTab[1450]"
}

// Varint decodes an int64 from buf and returns that value and the
//line /usr/local/go/src/encoding/binary/varint.go:110
// number of bytes read (> 0). If an error occurred, the value is 0
//line /usr/local/go/src/encoding/binary/varint.go:110
// and the number of bytes n is <= 0 with the following meaning:
//line /usr/local/go/src/encoding/binary/varint.go:110
//
//line /usr/local/go/src/encoding/binary/varint.go:110
//	n == 0: buf too small
//line /usr/local/go/src/encoding/binary/varint.go:110
//	n  < 0: value larger than 64 bits (overflow)
//line /usr/local/go/src/encoding/binary/varint.go:110
//	        and -n is the number of bytes read
//line /usr/local/go/src/encoding/binary/varint.go:117
func Varint(buf []byte) (int64, int) {
//line /usr/local/go/src/encoding/binary/varint.go:117
	_go_fuzz_dep_.CoverTab[1453]++
							ux, n := Uvarint(buf)
							x := int64(ux >> 1)
							if ux&1 != 0 {
//line /usr/local/go/src/encoding/binary/varint.go:120
		_go_fuzz_dep_.CoverTab[1455]++
								x = ^x
//line /usr/local/go/src/encoding/binary/varint.go:121
		// _ = "end of CoverTab[1455]"
	} else {
//line /usr/local/go/src/encoding/binary/varint.go:122
		_go_fuzz_dep_.CoverTab[1456]++
//line /usr/local/go/src/encoding/binary/varint.go:122
		// _ = "end of CoverTab[1456]"
//line /usr/local/go/src/encoding/binary/varint.go:122
	}
//line /usr/local/go/src/encoding/binary/varint.go:122
	// _ = "end of CoverTab[1453]"
//line /usr/local/go/src/encoding/binary/varint.go:122
	_go_fuzz_dep_.CoverTab[1454]++
							return x, n
//line /usr/local/go/src/encoding/binary/varint.go:123
	// _ = "end of CoverTab[1454]"
}

var overflow = errors.New("binary: varint overflows a 64-bit integer")

// ReadUvarint reads an encoded unsigned integer from r and returns it as a uint64.
//line /usr/local/go/src/encoding/binary/varint.go:128
// The error is EOF only if no bytes were read.
//line /usr/local/go/src/encoding/binary/varint.go:128
// If an EOF happens after reading some but not all the bytes,
//line /usr/local/go/src/encoding/binary/varint.go:128
// ReadUvarint returns io.ErrUnexpectedEOF.
//line /usr/local/go/src/encoding/binary/varint.go:132
func ReadUvarint(r io.ByteReader) (uint64, error) {
//line /usr/local/go/src/encoding/binary/varint.go:132
	_go_fuzz_dep_.CoverTab[1457]++
							var x uint64
							var s uint
							for i := 0; i < MaxVarintLen64; i++ {
//line /usr/local/go/src/encoding/binary/varint.go:135
		_go_fuzz_dep_.CoverTab[1459]++
								b, err := r.ReadByte()
								if err != nil {
//line /usr/local/go/src/encoding/binary/varint.go:137
			_go_fuzz_dep_.CoverTab[1462]++
									if i > 0 && func() bool {
//line /usr/local/go/src/encoding/binary/varint.go:138
				_go_fuzz_dep_.CoverTab[1464]++
//line /usr/local/go/src/encoding/binary/varint.go:138
				return err == io.EOF
//line /usr/local/go/src/encoding/binary/varint.go:138
				// _ = "end of CoverTab[1464]"
//line /usr/local/go/src/encoding/binary/varint.go:138
			}() {
//line /usr/local/go/src/encoding/binary/varint.go:138
				_go_fuzz_dep_.CoverTab[1465]++
										err = io.ErrUnexpectedEOF
//line /usr/local/go/src/encoding/binary/varint.go:139
				// _ = "end of CoverTab[1465]"
			} else {
//line /usr/local/go/src/encoding/binary/varint.go:140
				_go_fuzz_dep_.CoverTab[1466]++
//line /usr/local/go/src/encoding/binary/varint.go:140
				// _ = "end of CoverTab[1466]"
//line /usr/local/go/src/encoding/binary/varint.go:140
			}
//line /usr/local/go/src/encoding/binary/varint.go:140
			// _ = "end of CoverTab[1462]"
//line /usr/local/go/src/encoding/binary/varint.go:140
			_go_fuzz_dep_.CoverTab[1463]++
									return x, err
//line /usr/local/go/src/encoding/binary/varint.go:141
			// _ = "end of CoverTab[1463]"
		} else {
//line /usr/local/go/src/encoding/binary/varint.go:142
			_go_fuzz_dep_.CoverTab[1467]++
//line /usr/local/go/src/encoding/binary/varint.go:142
			// _ = "end of CoverTab[1467]"
//line /usr/local/go/src/encoding/binary/varint.go:142
		}
//line /usr/local/go/src/encoding/binary/varint.go:142
		// _ = "end of CoverTab[1459]"
//line /usr/local/go/src/encoding/binary/varint.go:142
		_go_fuzz_dep_.CoverTab[1460]++
								if b < 0x80 {
//line /usr/local/go/src/encoding/binary/varint.go:143
			_go_fuzz_dep_.CoverTab[1468]++
									if i == MaxVarintLen64-1 && func() bool {
//line /usr/local/go/src/encoding/binary/varint.go:144
				_go_fuzz_dep_.CoverTab[1470]++
//line /usr/local/go/src/encoding/binary/varint.go:144
				return b > 1
//line /usr/local/go/src/encoding/binary/varint.go:144
				// _ = "end of CoverTab[1470]"
//line /usr/local/go/src/encoding/binary/varint.go:144
			}() {
//line /usr/local/go/src/encoding/binary/varint.go:144
				_go_fuzz_dep_.CoverTab[1471]++
										return x, overflow
//line /usr/local/go/src/encoding/binary/varint.go:145
				// _ = "end of CoverTab[1471]"
			} else {
//line /usr/local/go/src/encoding/binary/varint.go:146
				_go_fuzz_dep_.CoverTab[1472]++
//line /usr/local/go/src/encoding/binary/varint.go:146
				// _ = "end of CoverTab[1472]"
//line /usr/local/go/src/encoding/binary/varint.go:146
			}
//line /usr/local/go/src/encoding/binary/varint.go:146
			// _ = "end of CoverTab[1468]"
//line /usr/local/go/src/encoding/binary/varint.go:146
			_go_fuzz_dep_.CoverTab[1469]++
									return x | uint64(b)<<s, nil
//line /usr/local/go/src/encoding/binary/varint.go:147
			// _ = "end of CoverTab[1469]"
		} else {
//line /usr/local/go/src/encoding/binary/varint.go:148
			_go_fuzz_dep_.CoverTab[1473]++
//line /usr/local/go/src/encoding/binary/varint.go:148
			// _ = "end of CoverTab[1473]"
//line /usr/local/go/src/encoding/binary/varint.go:148
		}
//line /usr/local/go/src/encoding/binary/varint.go:148
		// _ = "end of CoverTab[1460]"
//line /usr/local/go/src/encoding/binary/varint.go:148
		_go_fuzz_dep_.CoverTab[1461]++
								x |= uint64(b&0x7f) << s
								s += 7
//line /usr/local/go/src/encoding/binary/varint.go:150
		// _ = "end of CoverTab[1461]"
	}
//line /usr/local/go/src/encoding/binary/varint.go:151
	// _ = "end of CoverTab[1457]"
//line /usr/local/go/src/encoding/binary/varint.go:151
	_go_fuzz_dep_.CoverTab[1458]++
							return x, overflow
//line /usr/local/go/src/encoding/binary/varint.go:152
	// _ = "end of CoverTab[1458]"
}

// ReadVarint reads an encoded signed integer from r and returns it as an int64.
//line /usr/local/go/src/encoding/binary/varint.go:155
// The error is EOF only if no bytes were read.
//line /usr/local/go/src/encoding/binary/varint.go:155
// If an EOF happens after reading some but not all the bytes,
//line /usr/local/go/src/encoding/binary/varint.go:155
// ReadVarint returns io.ErrUnexpectedEOF.
//line /usr/local/go/src/encoding/binary/varint.go:159
func ReadVarint(r io.ByteReader) (int64, error) {
//line /usr/local/go/src/encoding/binary/varint.go:159
	_go_fuzz_dep_.CoverTab[1474]++
							ux, err := ReadUvarint(r)
							x := int64(ux >> 1)
							if ux&1 != 0 {
//line /usr/local/go/src/encoding/binary/varint.go:162
		_go_fuzz_dep_.CoverTab[1476]++
								x = ^x
//line /usr/local/go/src/encoding/binary/varint.go:163
		// _ = "end of CoverTab[1476]"
	} else {
//line /usr/local/go/src/encoding/binary/varint.go:164
		_go_fuzz_dep_.CoverTab[1477]++
//line /usr/local/go/src/encoding/binary/varint.go:164
		// _ = "end of CoverTab[1477]"
//line /usr/local/go/src/encoding/binary/varint.go:164
	}
//line /usr/local/go/src/encoding/binary/varint.go:164
	// _ = "end of CoverTab[1474]"
//line /usr/local/go/src/encoding/binary/varint.go:164
	_go_fuzz_dep_.CoverTab[1475]++
							return x, err
//line /usr/local/go/src/encoding/binary/varint.go:165
	// _ = "end of CoverTab[1475]"
}

//line /usr/local/go/src/encoding/binary/varint.go:166
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/encoding/binary/varint.go:166
var _ = _go_fuzz_dep_.CoverTab
