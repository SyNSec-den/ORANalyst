// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//line /usr/local/go/src/encoding/encoding.go:5
// Package encoding defines interfaces shared by other packages that
//line /usr/local/go/src/encoding/encoding.go:5
// convert data to and from byte-level and textual representations.
//line /usr/local/go/src/encoding/encoding.go:5
// Packages that check for these interfaces include encoding/gob,
//line /usr/local/go/src/encoding/encoding.go:5
// encoding/json, and encoding/xml. As a result, implementing an
//line /usr/local/go/src/encoding/encoding.go:5
// interface once can make a type useful in multiple encodings.
//line /usr/local/go/src/encoding/encoding.go:5
// Standard types that implement these interfaces include time.Time and net.IP.
//line /usr/local/go/src/encoding/encoding.go:5
// The interfaces come in pairs that produce and consume encoded data.
//line /usr/local/go/src/encoding/encoding.go:12
package encoding

//line /usr/local/go/src/encoding/encoding.go:12
import (
//line /usr/local/go/src/encoding/encoding.go:12
	_go_fuzz_dep_ "go-fuzz-dep"
//line /usr/local/go/src/encoding/encoding.go:12
)
//line /usr/local/go/src/encoding/encoding.go:12
import (
//line /usr/local/go/src/encoding/encoding.go:12
	_atomic_ "sync/atomic"
//line /usr/local/go/src/encoding/encoding.go:12
)

// BinaryMarshaler is the interface implemented by an object that can
//line /usr/local/go/src/encoding/encoding.go:14
// marshal itself into a binary form.
//line /usr/local/go/src/encoding/encoding.go:14
//
//line /usr/local/go/src/encoding/encoding.go:14
// MarshalBinary encodes the receiver into a binary form and returns the result.
//line /usr/local/go/src/encoding/encoding.go:18
type BinaryMarshaler interface {
	MarshalBinary() (data []byte, err error)
}

// BinaryUnmarshaler is the interface implemented by an object that can
//line /usr/local/go/src/encoding/encoding.go:22
// unmarshal a binary representation of itself.
//line /usr/local/go/src/encoding/encoding.go:22
//
//line /usr/local/go/src/encoding/encoding.go:22
// UnmarshalBinary must be able to decode the form generated by MarshalBinary.
//line /usr/local/go/src/encoding/encoding.go:22
// UnmarshalBinary must copy the data if it wishes to retain the data
//line /usr/local/go/src/encoding/encoding.go:22
// after returning.
//line /usr/local/go/src/encoding/encoding.go:28
type BinaryUnmarshaler interface {
	UnmarshalBinary(data []byte) error
}

// TextMarshaler is the interface implemented by an object that can
//line /usr/local/go/src/encoding/encoding.go:32
// marshal itself into a textual form.
//line /usr/local/go/src/encoding/encoding.go:32
//
//line /usr/local/go/src/encoding/encoding.go:32
// MarshalText encodes the receiver into UTF-8-encoded text and returns the result.
//line /usr/local/go/src/encoding/encoding.go:36
type TextMarshaler interface {
	MarshalText() (text []byte, err error)
}

// TextUnmarshaler is the interface implemented by an object that can
//line /usr/local/go/src/encoding/encoding.go:40
// unmarshal a textual representation of itself.
//line /usr/local/go/src/encoding/encoding.go:40
//
//line /usr/local/go/src/encoding/encoding.go:40
// UnmarshalText must be able to decode the form generated by MarshalText.
//line /usr/local/go/src/encoding/encoding.go:40
// UnmarshalText must copy the text if it wishes to retain the text
//line /usr/local/go/src/encoding/encoding.go:40
// after returning.
//line /usr/local/go/src/encoding/encoding.go:46
type TextUnmarshaler interface {
	UnmarshalText(text []byte) error
}

//line /usr/local/go/src/encoding/encoding.go:48
var _ = _atomic_.LoadUint32(&_go_fuzz_dep_.NoUse)
//line /usr/local/go/src/encoding/encoding.go:48
var _ = _go_fuzz_dep_.CoverTab
