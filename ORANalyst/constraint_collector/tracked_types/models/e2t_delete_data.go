// Code generated by go-swagger; DO NOT EDIT.

// ==================================================================================
// Unless otherwise specified, all software contained herein is licensed
// under the Apache License, Version 2.0 (the "Software License");
// you may not use this software except in compliance with the Software
// License. You may obtain a copy of the Software License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Software License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the Software License for the specific language governing permissions
// and limitations under the Software License.
//
// ==================================================================================
//
// Unless otherwise specified, all documentation contained herein is licensed
// under the Creative Commons License, Attribution 4.0 Intl. (the
// "Documentation License"); you may not use this documentation except in
// compliance with the Documentation License. You may obtain a copy of the
// Documentation License at
//
// https://creativecommons.org/licenses/by/4.0/
//
// Unless required by applicable law or agreed to in writing, documentation
// distributed under the Documentation License is distributed on an "AS IS"
// BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the Documentation License for the specific language governing
// permissions and limitations under the Documentation License.
// ==================================================================================
//
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// E2tDeleteData e2t delete data
// swagger:model e2t-delete-data
type E2tDeleteData struct {

	// e2 t address
	// Required: true
	E2TAddress *string `json:"E2TAddress"`

	// ran assoc list
	RanAssocList RanE2tMap `json:"ranAssocList,omitempty"`

	// ran namelist tobe dissociated
	RanNamelistTobeDissociated RanNamelist `json:"ranNamelistTobeDissociated,omitempty"`
}

// Validate validates this e2t delete data
func (m *E2tDeleteData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateE2TAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRanAssocList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRanNamelistTobeDissociated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *E2tDeleteData) validateE2TAddress(formats strfmt.Registry) error {

	if err := validate.Required("E2TAddress", "body", m.E2TAddress); err != nil {
		return err
	}

	return nil
}

func (m *E2tDeleteData) validateRanAssocList(formats strfmt.Registry) error {

	if swag.IsZero(m.RanAssocList) { // not required
		return nil
	}

	if err := m.RanAssocList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ranAssocList")
		}
		return err
	}

	return nil
}

func (m *E2tDeleteData) validateRanNamelistTobeDissociated(formats strfmt.Registry) error {

	if swag.IsZero(m.RanNamelistTobeDissociated) { // not required
		return nil
	}

	if err := m.RanNamelistTobeDissociated.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ranNamelistTobeDissociated")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *E2tDeleteData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *E2tDeleteData) UnmarshalBinary(b []byte) error {
	var res E2tDeleteData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
